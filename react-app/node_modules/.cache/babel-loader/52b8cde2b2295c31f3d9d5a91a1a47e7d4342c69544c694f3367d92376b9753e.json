{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { Color } from '../../../../base/common/color.js';\nimport { ViewPart } from '../../view/viewPart.js';\nimport { Position } from '../../../common/core/position.js';\nimport { TokenizationRegistry } from '../../../common/languages.js';\nimport { editorCursorForeground, editorOverviewRulerBorder, editorOverviewRulerBackground } from '../../../common/core/editorColorRegistry.js';\nimport { OverviewRulerDecorationsGroup } from '../../../common/viewModel.js';\nclass Settings {\n  constructor(config, theme) {\n    const options = config.options;\n    this.lineHeight = options.get(61 /* EditorOption.lineHeight */);\n    this.pixelRatio = options.get(131 /* EditorOption.pixelRatio */);\n    this.overviewRulerLanes = options.get(76 /* EditorOption.overviewRulerLanes */);\n    this.renderBorder = options.get(75 /* EditorOption.overviewRulerBorder */);\n    const borderColor = theme.getColor(editorOverviewRulerBorder);\n    this.borderColor = borderColor ? borderColor.toString() : null;\n    this.hideCursor = options.get(54 /* EditorOption.hideCursorInOverviewRuler */);\n    const cursorColor = theme.getColor(editorCursorForeground);\n    this.cursorColor = cursorColor ? cursorColor.transparent(0.7).toString() : null;\n    this.themeType = theme.type;\n    const minimapOpts = options.get(67 /* EditorOption.minimap */);\n    const minimapEnabled = minimapOpts.enabled;\n    const minimapSide = minimapOpts.side;\n    const themeColor = theme.getColor(editorOverviewRulerBackground);\n    const defaultBackground = TokenizationRegistry.getDefaultBackground();\n    let backgroundColor = null;\n    if (themeColor !== undefined) {\n      backgroundColor = themeColor;\n    } else if (minimapEnabled) {\n      backgroundColor = defaultBackground;\n    }\n    if (backgroundColor === null || minimapSide === 'left') {\n      this.backgroundColor = null;\n    } else {\n      this.backgroundColor = Color.Format.CSS.formatHex(backgroundColor);\n    }\n    const layoutInfo = options.get(133 /* EditorOption.layoutInfo */);\n    const position = layoutInfo.overviewRuler;\n    this.top = position.top;\n    this.right = position.right;\n    this.domWidth = position.width;\n    this.domHeight = position.height;\n    if (this.overviewRulerLanes === 0) {\n      // overview ruler is off\n      this.canvasWidth = 0;\n      this.canvasHeight = 0;\n    } else {\n      this.canvasWidth = this.domWidth * this.pixelRatio | 0;\n      this.canvasHeight = this.domHeight * this.pixelRatio | 0;\n    }\n    const [x, w] = this._initLanes(1, this.canvasWidth, this.overviewRulerLanes);\n    this.x = x;\n    this.w = w;\n  }\n  _initLanes(canvasLeftOffset, canvasWidth, laneCount) {\n    const remainingWidth = canvasWidth - canvasLeftOffset;\n    if (laneCount >= 3) {\n      const leftWidth = Math.floor(remainingWidth / 3);\n      const rightWidth = Math.floor(remainingWidth / 3);\n      const centerWidth = remainingWidth - leftWidth - rightWidth;\n      const leftOffset = canvasLeftOffset;\n      const centerOffset = leftOffset + leftWidth;\n      const rightOffset = leftOffset + leftWidth + centerWidth;\n      return [[0, leftOffset, centerOffset, leftOffset, rightOffset, leftOffset, centerOffset, leftOffset // Left | Center | Right\n      ], [0, leftWidth, centerWidth, leftWidth + centerWidth, rightWidth, leftWidth + centerWidth + rightWidth, centerWidth + rightWidth, leftWidth + centerWidth + rightWidth // Left | Center | Right\n      ]];\n    } else if (laneCount === 2) {\n      const leftWidth = Math.floor(remainingWidth / 2);\n      const rightWidth = remainingWidth - leftWidth;\n      const leftOffset = canvasLeftOffset;\n      const rightOffset = leftOffset + leftWidth;\n      return [[0, leftOffset, leftOffset, leftOffset, rightOffset, leftOffset, leftOffset, leftOffset // Left | Center | Right\n      ], [0, leftWidth, leftWidth, leftWidth, rightWidth, leftWidth + rightWidth, leftWidth + rightWidth, leftWidth + rightWidth // Left | Center | Right\n      ]];\n    } else {\n      const offset = canvasLeftOffset;\n      const width = remainingWidth;\n      return [[0, offset, offset, offset, offset, offset, offset, offset // Left | Center | Right\n      ], [0, width, width, width, width, width, width, width // Left | Center | Right\n      ]];\n    }\n  }\n\n  equals(other) {\n    return this.lineHeight === other.lineHeight && this.pixelRatio === other.pixelRatio && this.overviewRulerLanes === other.overviewRulerLanes && this.renderBorder === other.renderBorder && this.borderColor === other.borderColor && this.hideCursor === other.hideCursor && this.cursorColor === other.cursorColor && this.themeType === other.themeType && this.backgroundColor === other.backgroundColor && this.top === other.top && this.right === other.right && this.domWidth === other.domWidth && this.domHeight === other.domHeight && this.canvasWidth === other.canvasWidth && this.canvasHeight === other.canvasHeight;\n  }\n}\nexport class DecorationsOverviewRuler extends ViewPart {\n  constructor(context) {\n    super(context);\n    this._domNode = createFastDomNode(document.createElement('canvas'));\n    this._domNode.setClassName('decorationsOverviewRuler');\n    this._domNode.setPosition('absolute');\n    this._domNode.setLayerHinting(true);\n    this._domNode.setContain('strict');\n    this._domNode.setAttribute('aria-hidden', 'true');\n    this._updateSettings(false);\n    this._tokensColorTrackerListener = TokenizationRegistry.onDidChange(e => {\n      if (e.changedColorMap) {\n        this._updateSettings(true);\n      }\n    });\n    this._cursorPositions = [];\n  }\n  dispose() {\n    super.dispose();\n    this._tokensColorTrackerListener.dispose();\n  }\n  _updateSettings(renderNow) {\n    const newSettings = new Settings(this._context.configuration, this._context.theme);\n    if (this._settings && this._settings.equals(newSettings)) {\n      // nothing to do\n      return false;\n    }\n    this._settings = newSettings;\n    this._domNode.setTop(this._settings.top);\n    this._domNode.setRight(this._settings.right);\n    this._domNode.setWidth(this._settings.domWidth);\n    this._domNode.setHeight(this._settings.domHeight);\n    this._domNode.domNode.width = this._settings.canvasWidth;\n    this._domNode.domNode.height = this._settings.canvasHeight;\n    if (renderNow) {\n      this._render();\n    }\n    return true;\n  }\n  // ---- begin view event handlers\n  onConfigurationChanged(e) {\n    return this._updateSettings(false);\n  }\n  onCursorStateChanged(e) {\n    this._cursorPositions = [];\n    for (let i = 0, len = e.selections.length; i < len; i++) {\n      this._cursorPositions[i] = e.selections[i].getPosition();\n    }\n    this._cursorPositions.sort(Position.compare);\n    return true;\n  }\n  onDecorationsChanged(e) {\n    if (e.affectsOverviewRuler) {\n      return true;\n    }\n    return false;\n  }\n  onFlushed(e) {\n    return true;\n  }\n  onScrollChanged(e) {\n    return e.scrollHeightChanged;\n  }\n  onZonesChanged(e) {\n    return true;\n  }\n  onThemeChanged(e) {\n    return this._updateSettings(false);\n  }\n  // ---- end view event handlers\n  getDomNode() {\n    return this._domNode.domNode;\n  }\n  prepareRender(ctx) {\n    // Nothing to read\n  }\n  render(editorCtx) {\n    this._render();\n  }\n  _render() {\n    if (this._settings.overviewRulerLanes === 0) {\n      // overview ruler is off\n      this._domNode.setBackgroundColor(this._settings.backgroundColor ? this._settings.backgroundColor : '');\n      this._domNode.setDisplay('none');\n      return;\n    }\n    this._domNode.setDisplay('block');\n    const canvasWidth = this._settings.canvasWidth;\n    const canvasHeight = this._settings.canvasHeight;\n    const lineHeight = this._settings.lineHeight;\n    const viewLayout = this._context.viewLayout;\n    const outerHeight = this._context.viewLayout.getScrollHeight();\n    const heightRatio = canvasHeight / outerHeight;\n    const decorations = this._context.viewModel.getAllOverviewRulerDecorations(this._context.theme);\n    const minDecorationHeight = 6 /* Constants.MIN_DECORATION_HEIGHT */ * this._settings.pixelRatio | 0;\n    const halfMinDecorationHeight = minDecorationHeight / 2 | 0;\n    const canvasCtx = this._domNode.domNode.getContext('2d');\n    if (this._settings.backgroundColor === null) {\n      canvasCtx.clearRect(0, 0, canvasWidth, canvasHeight);\n    } else {\n      canvasCtx.fillStyle = this._settings.backgroundColor;\n      canvasCtx.fillRect(0, 0, canvasWidth, canvasHeight);\n    }\n    const x = this._settings.x;\n    const w = this._settings.w;\n    decorations.sort(OverviewRulerDecorationsGroup.cmp);\n    for (const decorationGroup of decorations) {\n      const color = decorationGroup.color;\n      const decorationGroupData = decorationGroup.data;\n      canvasCtx.fillStyle = color;\n      let prevLane = 0;\n      let prevY1 = 0;\n      let prevY2 = 0;\n      for (let i = 0, len = decorationGroupData.length / 3; i < len; i++) {\n        const lane = decorationGroupData[3 * i];\n        const startLineNumber = decorationGroupData[3 * i + 1];\n        const endLineNumber = decorationGroupData[3 * i + 2];\n        let y1 = viewLayout.getVerticalOffsetForLineNumber(startLineNumber) * heightRatio | 0;\n        let y2 = (viewLayout.getVerticalOffsetForLineNumber(endLineNumber) + lineHeight) * heightRatio | 0;\n        const height = y2 - y1;\n        if (height < minDecorationHeight) {\n          let yCenter = (y1 + y2) / 2 | 0;\n          if (yCenter < halfMinDecorationHeight) {\n            yCenter = halfMinDecorationHeight;\n          } else if (yCenter + halfMinDecorationHeight > canvasHeight) {\n            yCenter = canvasHeight - halfMinDecorationHeight;\n          }\n          y1 = yCenter - halfMinDecorationHeight;\n          y2 = yCenter + halfMinDecorationHeight;\n        }\n        if (y1 > prevY2 + 1 || lane !== prevLane) {\n          // flush prev\n          if (i !== 0) {\n            canvasCtx.fillRect(x[prevLane], prevY1, w[prevLane], prevY2 - prevY1);\n          }\n          prevLane = lane;\n          prevY1 = y1;\n          prevY2 = y2;\n        } else {\n          // merge into prev\n          if (y2 > prevY2) {\n            prevY2 = y2;\n          }\n        }\n      }\n      canvasCtx.fillRect(x[prevLane], prevY1, w[prevLane], prevY2 - prevY1);\n    }\n    // Draw cursors\n    if (!this._settings.hideCursor && this._settings.cursorColor) {\n      const cursorHeight = 2 * this._settings.pixelRatio | 0;\n      const halfCursorHeight = cursorHeight / 2 | 0;\n      const cursorX = this._settings.x[7 /* OverviewRulerLane.Full */];\n      const cursorW = this._settings.w[7 /* OverviewRulerLane.Full */];\n      canvasCtx.fillStyle = this._settings.cursorColor;\n      let prevY1 = -100;\n      let prevY2 = -100;\n      for (let i = 0, len = this._cursorPositions.length; i < len; i++) {\n        const cursor = this._cursorPositions[i];\n        let yCenter = viewLayout.getVerticalOffsetForLineNumber(cursor.lineNumber) * heightRatio | 0;\n        if (yCenter < halfCursorHeight) {\n          yCenter = halfCursorHeight;\n        } else if (yCenter + halfCursorHeight > canvasHeight) {\n          yCenter = canvasHeight - halfCursorHeight;\n        }\n        const y1 = yCenter - halfCursorHeight;\n        const y2 = y1 + cursorHeight;\n        if (y1 > prevY2 + 1) {\n          // flush prev\n          if (i !== 0) {\n            canvasCtx.fillRect(cursorX, prevY1, cursorW, prevY2 - prevY1);\n          }\n          prevY1 = y1;\n          prevY2 = y2;\n        } else {\n          // merge into prev\n          if (y2 > prevY2) {\n            prevY2 = y2;\n          }\n        }\n      }\n      canvasCtx.fillRect(cursorX, prevY1, cursorW, prevY2 - prevY1);\n    }\n    if (this._settings.renderBorder && this._settings.borderColor && this._settings.overviewRulerLanes > 0) {\n      canvasCtx.beginPath();\n      canvasCtx.lineWidth = 1;\n      canvasCtx.strokeStyle = this._settings.borderColor;\n      canvasCtx.moveTo(0, 0);\n      canvasCtx.lineTo(0, canvasHeight);\n      canvasCtx.stroke();\n      canvasCtx.moveTo(0, 0);\n      canvasCtx.lineTo(canvasWidth, 0);\n      canvasCtx.stroke();\n    }\n  }\n}","map":{"version":3,"names":["createFastDomNode","Color","ViewPart","Position","TokenizationRegistry","editorCursorForeground","editorOverviewRulerBorder","editorOverviewRulerBackground","OverviewRulerDecorationsGroup","Settings","constructor","config","theme","options","lineHeight","get","pixelRatio","overviewRulerLanes","renderBorder","borderColor","getColor","toString","hideCursor","cursorColor","transparent","themeType","type","minimapOpts","minimapEnabled","enabled","minimapSide","side","themeColor","defaultBackground","getDefaultBackground","backgroundColor","undefined","Format","CSS","formatHex","layoutInfo","position","overviewRuler","top","right","domWidth","width","domHeight","height","canvasWidth","canvasHeight","x","w","_initLanes","canvasLeftOffset","laneCount","remainingWidth","leftWidth","Math","floor","rightWidth","centerWidth","leftOffset","centerOffset","rightOffset","offset","equals","other","DecorationsOverviewRuler","context","_domNode","document","createElement","setClassName","setPosition","setLayerHinting","setContain","setAttribute","_updateSettings","_tokensColorTrackerListener","onDidChange","e","changedColorMap","_cursorPositions","dispose","renderNow","newSettings","_context","configuration","_settings","setTop","setRight","setWidth","setHeight","domNode","_render","onConfigurationChanged","onCursorStateChanged","i","len","selections","length","getPosition","sort","compare","onDecorationsChanged","affectsOverviewRuler","onFlushed","onScrollChanged","scrollHeightChanged","onZonesChanged","onThemeChanged","getDomNode","prepareRender","ctx","render","editorCtx","setBackgroundColor","setDisplay","viewLayout","outerHeight","getScrollHeight","heightRatio","decorations","viewModel","getAllOverviewRulerDecorations","minDecorationHeight","halfMinDecorationHeight","canvasCtx","getContext","clearRect","fillStyle","fillRect","cmp","decorationGroup","color","decorationGroupData","data","prevLane","prevY1","prevY2","lane","startLineNumber","endLineNumber","y1","getVerticalOffsetForLineNumber","y2","yCenter","cursorHeight","halfCursorHeight","cursorX","cursorW","cursor","lineNumber","beginPath","lineWidth","strokeStyle","moveTo","lineTo","stroke"],"sources":["/home/deathblade287/Desktop/AI-MODELS-TESTING/react-app/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/overviewRuler/decorationsOverviewRuler.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { Color } from '../../../../base/common/color.js';\nimport { ViewPart } from '../../view/viewPart.js';\nimport { Position } from '../../../common/core/position.js';\nimport { TokenizationRegistry } from '../../../common/languages.js';\nimport { editorCursorForeground, editorOverviewRulerBorder, editorOverviewRulerBackground } from '../../../common/core/editorColorRegistry.js';\nimport { OverviewRulerDecorationsGroup } from '../../../common/viewModel.js';\nclass Settings {\n    constructor(config, theme) {\n        const options = config.options;\n        this.lineHeight = options.get(61 /* EditorOption.lineHeight */);\n        this.pixelRatio = options.get(131 /* EditorOption.pixelRatio */);\n        this.overviewRulerLanes = options.get(76 /* EditorOption.overviewRulerLanes */);\n        this.renderBorder = options.get(75 /* EditorOption.overviewRulerBorder */);\n        const borderColor = theme.getColor(editorOverviewRulerBorder);\n        this.borderColor = borderColor ? borderColor.toString() : null;\n        this.hideCursor = options.get(54 /* EditorOption.hideCursorInOverviewRuler */);\n        const cursorColor = theme.getColor(editorCursorForeground);\n        this.cursorColor = cursorColor ? cursorColor.transparent(0.7).toString() : null;\n        this.themeType = theme.type;\n        const minimapOpts = options.get(67 /* EditorOption.minimap */);\n        const minimapEnabled = minimapOpts.enabled;\n        const minimapSide = minimapOpts.side;\n        const themeColor = theme.getColor(editorOverviewRulerBackground);\n        const defaultBackground = TokenizationRegistry.getDefaultBackground();\n        let backgroundColor = null;\n        if (themeColor !== undefined) {\n            backgroundColor = themeColor;\n        }\n        else if (minimapEnabled) {\n            backgroundColor = defaultBackground;\n        }\n        if (backgroundColor === null || minimapSide === 'left') {\n            this.backgroundColor = null;\n        }\n        else {\n            this.backgroundColor = Color.Format.CSS.formatHex(backgroundColor);\n        }\n        const layoutInfo = options.get(133 /* EditorOption.layoutInfo */);\n        const position = layoutInfo.overviewRuler;\n        this.top = position.top;\n        this.right = position.right;\n        this.domWidth = position.width;\n        this.domHeight = position.height;\n        if (this.overviewRulerLanes === 0) {\n            // overview ruler is off\n            this.canvasWidth = 0;\n            this.canvasHeight = 0;\n        }\n        else {\n            this.canvasWidth = (this.domWidth * this.pixelRatio) | 0;\n            this.canvasHeight = (this.domHeight * this.pixelRatio) | 0;\n        }\n        const [x, w] = this._initLanes(1, this.canvasWidth, this.overviewRulerLanes);\n        this.x = x;\n        this.w = w;\n    }\n    _initLanes(canvasLeftOffset, canvasWidth, laneCount) {\n        const remainingWidth = canvasWidth - canvasLeftOffset;\n        if (laneCount >= 3) {\n            const leftWidth = Math.floor(remainingWidth / 3);\n            const rightWidth = Math.floor(remainingWidth / 3);\n            const centerWidth = remainingWidth - leftWidth - rightWidth;\n            const leftOffset = canvasLeftOffset;\n            const centerOffset = leftOffset + leftWidth;\n            const rightOffset = leftOffset + leftWidth + centerWidth;\n            return [\n                [\n                    0,\n                    leftOffset,\n                    centerOffset,\n                    leftOffset,\n                    rightOffset,\n                    leftOffset,\n                    centerOffset,\n                    leftOffset, // Left | Center | Right\n                ], [\n                    0,\n                    leftWidth,\n                    centerWidth,\n                    leftWidth + centerWidth,\n                    rightWidth,\n                    leftWidth + centerWidth + rightWidth,\n                    centerWidth + rightWidth,\n                    leftWidth + centerWidth + rightWidth, // Left | Center | Right\n                ]\n            ];\n        }\n        else if (laneCount === 2) {\n            const leftWidth = Math.floor(remainingWidth / 2);\n            const rightWidth = remainingWidth - leftWidth;\n            const leftOffset = canvasLeftOffset;\n            const rightOffset = leftOffset + leftWidth;\n            return [\n                [\n                    0,\n                    leftOffset,\n                    leftOffset,\n                    leftOffset,\n                    rightOffset,\n                    leftOffset,\n                    leftOffset,\n                    leftOffset, // Left | Center | Right\n                ], [\n                    0,\n                    leftWidth,\n                    leftWidth,\n                    leftWidth,\n                    rightWidth,\n                    leftWidth + rightWidth,\n                    leftWidth + rightWidth,\n                    leftWidth + rightWidth, // Left | Center | Right\n                ]\n            ];\n        }\n        else {\n            const offset = canvasLeftOffset;\n            const width = remainingWidth;\n            return [\n                [\n                    0,\n                    offset,\n                    offset,\n                    offset,\n                    offset,\n                    offset,\n                    offset,\n                    offset, // Left | Center | Right\n                ], [\n                    0,\n                    width,\n                    width,\n                    width,\n                    width,\n                    width,\n                    width,\n                    width, // Left | Center | Right\n                ]\n            ];\n        }\n    }\n    equals(other) {\n        return (this.lineHeight === other.lineHeight\n            && this.pixelRatio === other.pixelRatio\n            && this.overviewRulerLanes === other.overviewRulerLanes\n            && this.renderBorder === other.renderBorder\n            && this.borderColor === other.borderColor\n            && this.hideCursor === other.hideCursor\n            && this.cursorColor === other.cursorColor\n            && this.themeType === other.themeType\n            && this.backgroundColor === other.backgroundColor\n            && this.top === other.top\n            && this.right === other.right\n            && this.domWidth === other.domWidth\n            && this.domHeight === other.domHeight\n            && this.canvasWidth === other.canvasWidth\n            && this.canvasHeight === other.canvasHeight);\n    }\n}\nexport class DecorationsOverviewRuler extends ViewPart {\n    constructor(context) {\n        super(context);\n        this._domNode = createFastDomNode(document.createElement('canvas'));\n        this._domNode.setClassName('decorationsOverviewRuler');\n        this._domNode.setPosition('absolute');\n        this._domNode.setLayerHinting(true);\n        this._domNode.setContain('strict');\n        this._domNode.setAttribute('aria-hidden', 'true');\n        this._updateSettings(false);\n        this._tokensColorTrackerListener = TokenizationRegistry.onDidChange((e) => {\n            if (e.changedColorMap) {\n                this._updateSettings(true);\n            }\n        });\n        this._cursorPositions = [];\n    }\n    dispose() {\n        super.dispose();\n        this._tokensColorTrackerListener.dispose();\n    }\n    _updateSettings(renderNow) {\n        const newSettings = new Settings(this._context.configuration, this._context.theme);\n        if (this._settings && this._settings.equals(newSettings)) {\n            // nothing to do\n            return false;\n        }\n        this._settings = newSettings;\n        this._domNode.setTop(this._settings.top);\n        this._domNode.setRight(this._settings.right);\n        this._domNode.setWidth(this._settings.domWidth);\n        this._domNode.setHeight(this._settings.domHeight);\n        this._domNode.domNode.width = this._settings.canvasWidth;\n        this._domNode.domNode.height = this._settings.canvasHeight;\n        if (renderNow) {\n            this._render();\n        }\n        return true;\n    }\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        return this._updateSettings(false);\n    }\n    onCursorStateChanged(e) {\n        this._cursorPositions = [];\n        for (let i = 0, len = e.selections.length; i < len; i++) {\n            this._cursorPositions[i] = e.selections[i].getPosition();\n        }\n        this._cursorPositions.sort(Position.compare);\n        return true;\n    }\n    onDecorationsChanged(e) {\n        if (e.affectsOverviewRuler) {\n            return true;\n        }\n        return false;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollHeightChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    onThemeChanged(e) {\n        return this._updateSettings(false);\n    }\n    // ---- end view event handlers\n    getDomNode() {\n        return this._domNode.domNode;\n    }\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    render(editorCtx) {\n        this._render();\n    }\n    _render() {\n        if (this._settings.overviewRulerLanes === 0) {\n            // overview ruler is off\n            this._domNode.setBackgroundColor(this._settings.backgroundColor ? this._settings.backgroundColor : '');\n            this._domNode.setDisplay('none');\n            return;\n        }\n        this._domNode.setDisplay('block');\n        const canvasWidth = this._settings.canvasWidth;\n        const canvasHeight = this._settings.canvasHeight;\n        const lineHeight = this._settings.lineHeight;\n        const viewLayout = this._context.viewLayout;\n        const outerHeight = this._context.viewLayout.getScrollHeight();\n        const heightRatio = canvasHeight / outerHeight;\n        const decorations = this._context.viewModel.getAllOverviewRulerDecorations(this._context.theme);\n        const minDecorationHeight = (6 /* Constants.MIN_DECORATION_HEIGHT */ * this._settings.pixelRatio) | 0;\n        const halfMinDecorationHeight = (minDecorationHeight / 2) | 0;\n        const canvasCtx = this._domNode.domNode.getContext('2d');\n        if (this._settings.backgroundColor === null) {\n            canvasCtx.clearRect(0, 0, canvasWidth, canvasHeight);\n        }\n        else {\n            canvasCtx.fillStyle = this._settings.backgroundColor;\n            canvasCtx.fillRect(0, 0, canvasWidth, canvasHeight);\n        }\n        const x = this._settings.x;\n        const w = this._settings.w;\n        decorations.sort(OverviewRulerDecorationsGroup.cmp);\n        for (const decorationGroup of decorations) {\n            const color = decorationGroup.color;\n            const decorationGroupData = decorationGroup.data;\n            canvasCtx.fillStyle = color;\n            let prevLane = 0;\n            let prevY1 = 0;\n            let prevY2 = 0;\n            for (let i = 0, len = decorationGroupData.length / 3; i < len; i++) {\n                const lane = decorationGroupData[3 * i];\n                const startLineNumber = decorationGroupData[3 * i + 1];\n                const endLineNumber = decorationGroupData[3 * i + 2];\n                let y1 = (viewLayout.getVerticalOffsetForLineNumber(startLineNumber) * heightRatio) | 0;\n                let y2 = ((viewLayout.getVerticalOffsetForLineNumber(endLineNumber) + lineHeight) * heightRatio) | 0;\n                const height = y2 - y1;\n                if (height < minDecorationHeight) {\n                    let yCenter = ((y1 + y2) / 2) | 0;\n                    if (yCenter < halfMinDecorationHeight) {\n                        yCenter = halfMinDecorationHeight;\n                    }\n                    else if (yCenter + halfMinDecorationHeight > canvasHeight) {\n                        yCenter = canvasHeight - halfMinDecorationHeight;\n                    }\n                    y1 = yCenter - halfMinDecorationHeight;\n                    y2 = yCenter + halfMinDecorationHeight;\n                }\n                if (y1 > prevY2 + 1 || lane !== prevLane) {\n                    // flush prev\n                    if (i !== 0) {\n                        canvasCtx.fillRect(x[prevLane], prevY1, w[prevLane], prevY2 - prevY1);\n                    }\n                    prevLane = lane;\n                    prevY1 = y1;\n                    prevY2 = y2;\n                }\n                else {\n                    // merge into prev\n                    if (y2 > prevY2) {\n                        prevY2 = y2;\n                    }\n                }\n            }\n            canvasCtx.fillRect(x[prevLane], prevY1, w[prevLane], prevY2 - prevY1);\n        }\n        // Draw cursors\n        if (!this._settings.hideCursor && this._settings.cursorColor) {\n            const cursorHeight = (2 * this._settings.pixelRatio) | 0;\n            const halfCursorHeight = (cursorHeight / 2) | 0;\n            const cursorX = this._settings.x[7 /* OverviewRulerLane.Full */];\n            const cursorW = this._settings.w[7 /* OverviewRulerLane.Full */];\n            canvasCtx.fillStyle = this._settings.cursorColor;\n            let prevY1 = -100;\n            let prevY2 = -100;\n            for (let i = 0, len = this._cursorPositions.length; i < len; i++) {\n                const cursor = this._cursorPositions[i];\n                let yCenter = (viewLayout.getVerticalOffsetForLineNumber(cursor.lineNumber) * heightRatio) | 0;\n                if (yCenter < halfCursorHeight) {\n                    yCenter = halfCursorHeight;\n                }\n                else if (yCenter + halfCursorHeight > canvasHeight) {\n                    yCenter = canvasHeight - halfCursorHeight;\n                }\n                const y1 = yCenter - halfCursorHeight;\n                const y2 = y1 + cursorHeight;\n                if (y1 > prevY2 + 1) {\n                    // flush prev\n                    if (i !== 0) {\n                        canvasCtx.fillRect(cursorX, prevY1, cursorW, prevY2 - prevY1);\n                    }\n                    prevY1 = y1;\n                    prevY2 = y2;\n                }\n                else {\n                    // merge into prev\n                    if (y2 > prevY2) {\n                        prevY2 = y2;\n                    }\n                }\n            }\n            canvasCtx.fillRect(cursorX, prevY1, cursorW, prevY2 - prevY1);\n        }\n        if (this._settings.renderBorder && this._settings.borderColor && this._settings.overviewRulerLanes > 0) {\n            canvasCtx.beginPath();\n            canvasCtx.lineWidth = 1;\n            canvasCtx.strokeStyle = this._settings.borderColor;\n            canvasCtx.moveTo(0, 0);\n            canvasCtx.lineTo(0, canvasHeight);\n            canvasCtx.stroke();\n            canvasCtx.moveTo(0, 0);\n            canvasCtx.lineTo(canvasWidth, 0);\n            canvasCtx.stroke();\n        }\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,iBAAiB,QAAQ,yCAAyC;AAC3E,SAASC,KAAK,QAAQ,kCAAkC;AACxD,SAASC,QAAQ,QAAQ,wBAAwB;AACjD,SAASC,QAAQ,QAAQ,kCAAkC;AAC3D,SAASC,oBAAoB,QAAQ,8BAA8B;AACnE,SAASC,sBAAsB,EAAEC,yBAAyB,EAAEC,6BAA6B,QAAQ,6CAA6C;AAC9I,SAASC,6BAA6B,QAAQ,8BAA8B;AAC5E,MAAMC,QAAQ,CAAC;EACXC,WAAW,CAACC,MAAM,EAAEC,KAAK,EAAE;IACvB,MAAMC,OAAO,GAAGF,MAAM,CAACE,OAAO;IAC9B,IAAI,CAACC,UAAU,GAAGD,OAAO,CAACE,GAAG,CAAC,EAAE,CAAC,8BAA8B;IAC/D,IAAI,CAACC,UAAU,GAAGH,OAAO,CAACE,GAAG,CAAC,GAAG,CAAC,8BAA8B;IAChE,IAAI,CAACE,kBAAkB,GAAGJ,OAAO,CAACE,GAAG,CAAC,EAAE,CAAC,sCAAsC;IAC/E,IAAI,CAACG,YAAY,GAAGL,OAAO,CAACE,GAAG,CAAC,EAAE,CAAC,uCAAuC;IAC1E,MAAMI,WAAW,GAAGP,KAAK,CAACQ,QAAQ,CAACd,yBAAyB,CAAC;IAC7D,IAAI,CAACa,WAAW,GAAGA,WAAW,GAAGA,WAAW,CAACE,QAAQ,EAAE,GAAG,IAAI;IAC9D,IAAI,CAACC,UAAU,GAAGT,OAAO,CAACE,GAAG,CAAC,EAAE,CAAC,6CAA6C;IAC9E,MAAMQ,WAAW,GAAGX,KAAK,CAACQ,QAAQ,CAACf,sBAAsB,CAAC;IAC1D,IAAI,CAACkB,WAAW,GAAGA,WAAW,GAAGA,WAAW,CAACC,WAAW,CAAC,GAAG,CAAC,CAACH,QAAQ,EAAE,GAAG,IAAI;IAC/E,IAAI,CAACI,SAAS,GAAGb,KAAK,CAACc,IAAI;IAC3B,MAAMC,WAAW,GAAGd,OAAO,CAACE,GAAG,CAAC,EAAE,CAAC,2BAA2B;IAC9D,MAAMa,cAAc,GAAGD,WAAW,CAACE,OAAO;IAC1C,MAAMC,WAAW,GAAGH,WAAW,CAACI,IAAI;IACpC,MAAMC,UAAU,GAAGpB,KAAK,CAACQ,QAAQ,CAACb,6BAA6B,CAAC;IAChE,MAAM0B,iBAAiB,GAAG7B,oBAAoB,CAAC8B,oBAAoB,EAAE;IACrE,IAAIC,eAAe,GAAG,IAAI;IAC1B,IAAIH,UAAU,KAAKI,SAAS,EAAE;MAC1BD,eAAe,GAAGH,UAAU;IAChC,CAAC,MACI,IAAIJ,cAAc,EAAE;MACrBO,eAAe,GAAGF,iBAAiB;IACvC;IACA,IAAIE,eAAe,KAAK,IAAI,IAAIL,WAAW,KAAK,MAAM,EAAE;MACpD,IAAI,CAACK,eAAe,GAAG,IAAI;IAC/B,CAAC,MACI;MACD,IAAI,CAACA,eAAe,GAAGlC,KAAK,CAACoC,MAAM,CAACC,GAAG,CAACC,SAAS,CAACJ,eAAe,CAAC;IACtE;IACA,MAAMK,UAAU,GAAG3B,OAAO,CAACE,GAAG,CAAC,GAAG,CAAC,8BAA8B;IACjE,MAAM0B,QAAQ,GAAGD,UAAU,CAACE,aAAa;IACzC,IAAI,CAACC,GAAG,GAAGF,QAAQ,CAACE,GAAG;IACvB,IAAI,CAACC,KAAK,GAAGH,QAAQ,CAACG,KAAK;IAC3B,IAAI,CAACC,QAAQ,GAAGJ,QAAQ,CAACK,KAAK;IAC9B,IAAI,CAACC,SAAS,GAAGN,QAAQ,CAACO,MAAM;IAChC,IAAI,IAAI,CAAC/B,kBAAkB,KAAK,CAAC,EAAE;MAC/B;MACA,IAAI,CAACgC,WAAW,GAAG,CAAC;MACpB,IAAI,CAACC,YAAY,GAAG,CAAC;IACzB,CAAC,MACI;MACD,IAAI,CAACD,WAAW,GAAI,IAAI,CAACJ,QAAQ,GAAG,IAAI,CAAC7B,UAAU,GAAI,CAAC;MACxD,IAAI,CAACkC,YAAY,GAAI,IAAI,CAACH,SAAS,GAAG,IAAI,CAAC/B,UAAU,GAAI,CAAC;IAC9D;IACA,MAAM,CAACmC,CAAC,EAAEC,CAAC,CAAC,GAAG,IAAI,CAACC,UAAU,CAAC,CAAC,EAAE,IAAI,CAACJ,WAAW,EAAE,IAAI,CAAChC,kBAAkB,CAAC;IAC5E,IAAI,CAACkC,CAAC,GAAGA,CAAC;IACV,IAAI,CAACC,CAAC,GAAGA,CAAC;EACd;EACAC,UAAU,CAACC,gBAAgB,EAAEL,WAAW,EAAEM,SAAS,EAAE;IACjD,MAAMC,cAAc,GAAGP,WAAW,GAAGK,gBAAgB;IACrD,IAAIC,SAAS,IAAI,CAAC,EAAE;MAChB,MAAME,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACH,cAAc,GAAG,CAAC,CAAC;MAChD,MAAMI,UAAU,GAAGF,IAAI,CAACC,KAAK,CAACH,cAAc,GAAG,CAAC,CAAC;MACjD,MAAMK,WAAW,GAAGL,cAAc,GAAGC,SAAS,GAAGG,UAAU;MAC3D,MAAME,UAAU,GAAGR,gBAAgB;MACnC,MAAMS,YAAY,GAAGD,UAAU,GAAGL,SAAS;MAC3C,MAAMO,WAAW,GAAGF,UAAU,GAAGL,SAAS,GAAGI,WAAW;MACxD,OAAO,CACH,CACI,CAAC,EACDC,UAAU,EACVC,YAAY,EACZD,UAAU,EACVE,WAAW,EACXF,UAAU,EACVC,YAAY,EACZD,UAAU,CAAE;MAAA,CACf,EAAE,CACC,CAAC,EACDL,SAAS,EACTI,WAAW,EACXJ,SAAS,GAAGI,WAAW,EACvBD,UAAU,EACVH,SAAS,GAAGI,WAAW,GAAGD,UAAU,EACpCC,WAAW,GAAGD,UAAU,EACxBH,SAAS,GAAGI,WAAW,GAAGD,UAAU,CAAE;MAAA,CACzC,CACJ;IACL,CAAC,MACI,IAAIL,SAAS,KAAK,CAAC,EAAE;MACtB,MAAME,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACH,cAAc,GAAG,CAAC,CAAC;MAChD,MAAMI,UAAU,GAAGJ,cAAc,GAAGC,SAAS;MAC7C,MAAMK,UAAU,GAAGR,gBAAgB;MACnC,MAAMU,WAAW,GAAGF,UAAU,GAAGL,SAAS;MAC1C,OAAO,CACH,CACI,CAAC,EACDK,UAAU,EACVA,UAAU,EACVA,UAAU,EACVE,WAAW,EACXF,UAAU,EACVA,UAAU,EACVA,UAAU,CAAE;MAAA,CACf,EAAE,CACC,CAAC,EACDL,SAAS,EACTA,SAAS,EACTA,SAAS,EACTG,UAAU,EACVH,SAAS,GAAGG,UAAU,EACtBH,SAAS,GAAGG,UAAU,EACtBH,SAAS,GAAGG,UAAU,CAAE;MAAA,CAC3B,CACJ;IACL,CAAC,MACI;MACD,MAAMK,MAAM,GAAGX,gBAAgB;MAC/B,MAAMR,KAAK,GAAGU,cAAc;MAC5B,OAAO,CACH,CACI,CAAC,EACDS,MAAM,EACNA,MAAM,EACNA,MAAM,EACNA,MAAM,EACNA,MAAM,EACNA,MAAM,EACNA,MAAM,CAAE;MAAA,CACX,EAAE,CACC,CAAC,EACDnB,KAAK,EACLA,KAAK,EACLA,KAAK,EACLA,KAAK,EACLA,KAAK,EACLA,KAAK,EACLA,KAAK,CAAE;MAAA,CACV,CACJ;IACL;EACJ;;EACAoB,MAAM,CAACC,KAAK,EAAE;IACV,OAAQ,IAAI,CAACrD,UAAU,KAAKqD,KAAK,CAACrD,UAAU,IACrC,IAAI,CAACE,UAAU,KAAKmD,KAAK,CAACnD,UAAU,IACpC,IAAI,CAACC,kBAAkB,KAAKkD,KAAK,CAAClD,kBAAkB,IACpD,IAAI,CAACC,YAAY,KAAKiD,KAAK,CAACjD,YAAY,IACxC,IAAI,CAACC,WAAW,KAAKgD,KAAK,CAAChD,WAAW,IACtC,IAAI,CAACG,UAAU,KAAK6C,KAAK,CAAC7C,UAAU,IACpC,IAAI,CAACC,WAAW,KAAK4C,KAAK,CAAC5C,WAAW,IACtC,IAAI,CAACE,SAAS,KAAK0C,KAAK,CAAC1C,SAAS,IAClC,IAAI,CAACU,eAAe,KAAKgC,KAAK,CAAChC,eAAe,IAC9C,IAAI,CAACQ,GAAG,KAAKwB,KAAK,CAACxB,GAAG,IACtB,IAAI,CAACC,KAAK,KAAKuB,KAAK,CAACvB,KAAK,IAC1B,IAAI,CAACC,QAAQ,KAAKsB,KAAK,CAACtB,QAAQ,IAChC,IAAI,CAACE,SAAS,KAAKoB,KAAK,CAACpB,SAAS,IAClC,IAAI,CAACE,WAAW,KAAKkB,KAAK,CAAClB,WAAW,IACtC,IAAI,CAACC,YAAY,KAAKiB,KAAK,CAACjB,YAAY;EACnD;AACJ;AACA,OAAO,MAAMkB,wBAAwB,SAASlE,QAAQ,CAAC;EACnDQ,WAAW,CAAC2D,OAAO,EAAE;IACjB,KAAK,CAACA,OAAO,CAAC;IACd,IAAI,CAACC,QAAQ,GAAGtE,iBAAiB,CAACuE,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC,CAAC;IACnE,IAAI,CAACF,QAAQ,CAACG,YAAY,CAAC,0BAA0B,CAAC;IACtD,IAAI,CAACH,QAAQ,CAACI,WAAW,CAAC,UAAU,CAAC;IACrC,IAAI,CAACJ,QAAQ,CAACK,eAAe,CAAC,IAAI,CAAC;IACnC,IAAI,CAACL,QAAQ,CAACM,UAAU,CAAC,QAAQ,CAAC;IAClC,IAAI,CAACN,QAAQ,CAACO,YAAY,CAAC,aAAa,EAAE,MAAM,CAAC;IACjD,IAAI,CAACC,eAAe,CAAC,KAAK,CAAC;IAC3B,IAAI,CAACC,2BAA2B,GAAG3E,oBAAoB,CAAC4E,WAAW,CAAEC,CAAC,IAAK;MACvE,IAAIA,CAAC,CAACC,eAAe,EAAE;QACnB,IAAI,CAACJ,eAAe,CAAC,IAAI,CAAC;MAC9B;IACJ,CAAC,CAAC;IACF,IAAI,CAACK,gBAAgB,GAAG,EAAE;EAC9B;EACAC,OAAO,GAAG;IACN,KAAK,CAACA,OAAO,EAAE;IACf,IAAI,CAACL,2BAA2B,CAACK,OAAO,EAAE;EAC9C;EACAN,eAAe,CAACO,SAAS,EAAE;IACvB,MAAMC,WAAW,GAAG,IAAI7E,QAAQ,CAAC,IAAI,CAAC8E,QAAQ,CAACC,aAAa,EAAE,IAAI,CAACD,QAAQ,CAAC3E,KAAK,CAAC;IAClF,IAAI,IAAI,CAAC6E,SAAS,IAAI,IAAI,CAACA,SAAS,CAACvB,MAAM,CAACoB,WAAW,CAAC,EAAE;MACtD;MACA,OAAO,KAAK;IAChB;IACA,IAAI,CAACG,SAAS,GAAGH,WAAW;IAC5B,IAAI,CAAChB,QAAQ,CAACoB,MAAM,CAAC,IAAI,CAACD,SAAS,CAAC9C,GAAG,CAAC;IACxC,IAAI,CAAC2B,QAAQ,CAACqB,QAAQ,CAAC,IAAI,CAACF,SAAS,CAAC7C,KAAK,CAAC;IAC5C,IAAI,CAAC0B,QAAQ,CAACsB,QAAQ,CAAC,IAAI,CAACH,SAAS,CAAC5C,QAAQ,CAAC;IAC/C,IAAI,CAACyB,QAAQ,CAACuB,SAAS,CAAC,IAAI,CAACJ,SAAS,CAAC1C,SAAS,CAAC;IACjD,IAAI,CAACuB,QAAQ,CAACwB,OAAO,CAAChD,KAAK,GAAG,IAAI,CAAC2C,SAAS,CAACxC,WAAW;IACxD,IAAI,CAACqB,QAAQ,CAACwB,OAAO,CAAC9C,MAAM,GAAG,IAAI,CAACyC,SAAS,CAACvC,YAAY;IAC1D,IAAImC,SAAS,EAAE;MACX,IAAI,CAACU,OAAO,EAAE;IAClB;IACA,OAAO,IAAI;EACf;EACA;EACAC,sBAAsB,CAACf,CAAC,EAAE;IACtB,OAAO,IAAI,CAACH,eAAe,CAAC,KAAK,CAAC;EACtC;EACAmB,oBAAoB,CAAChB,CAAC,EAAE;IACpB,IAAI,CAACE,gBAAgB,GAAG,EAAE;IAC1B,KAAK,IAAIe,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGlB,CAAC,CAACmB,UAAU,CAACC,MAAM,EAAEH,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;MACrD,IAAI,CAACf,gBAAgB,CAACe,CAAC,CAAC,GAAGjB,CAAC,CAACmB,UAAU,CAACF,CAAC,CAAC,CAACI,WAAW,EAAE;IAC5D;IACA,IAAI,CAACnB,gBAAgB,CAACoB,IAAI,CAACpG,QAAQ,CAACqG,OAAO,CAAC;IAC5C,OAAO,IAAI;EACf;EACAC,oBAAoB,CAACxB,CAAC,EAAE;IACpB,IAAIA,CAAC,CAACyB,oBAAoB,EAAE;MACxB,OAAO,IAAI;IACf;IACA,OAAO,KAAK;EAChB;EACAC,SAAS,CAAC1B,CAAC,EAAE;IACT,OAAO,IAAI;EACf;EACA2B,eAAe,CAAC3B,CAAC,EAAE;IACf,OAAOA,CAAC,CAAC4B,mBAAmB;EAChC;EACAC,cAAc,CAAC7B,CAAC,EAAE;IACd,OAAO,IAAI;EACf;EACA8B,cAAc,CAAC9B,CAAC,EAAE;IACd,OAAO,IAAI,CAACH,eAAe,CAAC,KAAK,CAAC;EACtC;EACA;EACAkC,UAAU,GAAG;IACT,OAAO,IAAI,CAAC1C,QAAQ,CAACwB,OAAO;EAChC;EACAmB,aAAa,CAACC,GAAG,EAAE;IACf;EAAA;EAEJC,MAAM,CAACC,SAAS,EAAE;IACd,IAAI,CAACrB,OAAO,EAAE;EAClB;EACAA,OAAO,GAAG;IACN,IAAI,IAAI,CAACN,SAAS,CAACxE,kBAAkB,KAAK,CAAC,EAAE;MACzC;MACA,IAAI,CAACqD,QAAQ,CAAC+C,kBAAkB,CAAC,IAAI,CAAC5B,SAAS,CAACtD,eAAe,GAAG,IAAI,CAACsD,SAAS,CAACtD,eAAe,GAAG,EAAE,CAAC;MACtG,IAAI,CAACmC,QAAQ,CAACgD,UAAU,CAAC,MAAM,CAAC;MAChC;IACJ;IACA,IAAI,CAAChD,QAAQ,CAACgD,UAAU,CAAC,OAAO,CAAC;IACjC,MAAMrE,WAAW,GAAG,IAAI,CAACwC,SAAS,CAACxC,WAAW;IAC9C,MAAMC,YAAY,GAAG,IAAI,CAACuC,SAAS,CAACvC,YAAY;IAChD,MAAMpC,UAAU,GAAG,IAAI,CAAC2E,SAAS,CAAC3E,UAAU;IAC5C,MAAMyG,UAAU,GAAG,IAAI,CAAChC,QAAQ,CAACgC,UAAU;IAC3C,MAAMC,WAAW,GAAG,IAAI,CAACjC,QAAQ,CAACgC,UAAU,CAACE,eAAe,EAAE;IAC9D,MAAMC,WAAW,GAAGxE,YAAY,GAAGsE,WAAW;IAC9C,MAAMG,WAAW,GAAG,IAAI,CAACpC,QAAQ,CAACqC,SAAS,CAACC,8BAA8B,CAAC,IAAI,CAACtC,QAAQ,CAAC3E,KAAK,CAAC;IAC/F,MAAMkH,mBAAmB,GAAI,CAAC,CAAC,wCAAwC,IAAI,CAACrC,SAAS,CAACzE,UAAU,GAAI,CAAC;IACrG,MAAM+G,uBAAuB,GAAID,mBAAmB,GAAG,CAAC,GAAI,CAAC;IAC7D,MAAME,SAAS,GAAG,IAAI,CAAC1D,QAAQ,CAACwB,OAAO,CAACmC,UAAU,CAAC,IAAI,CAAC;IACxD,IAAI,IAAI,CAACxC,SAAS,CAACtD,eAAe,KAAK,IAAI,EAAE;MACzC6F,SAAS,CAACE,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEjF,WAAW,EAAEC,YAAY,CAAC;IACxD,CAAC,MACI;MACD8E,SAAS,CAACG,SAAS,GAAG,IAAI,CAAC1C,SAAS,CAACtD,eAAe;MACpD6F,SAAS,CAACI,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAEnF,WAAW,EAAEC,YAAY,CAAC;IACvD;IACA,MAAMC,CAAC,GAAG,IAAI,CAACsC,SAAS,CAACtC,CAAC;IAC1B,MAAMC,CAAC,GAAG,IAAI,CAACqC,SAAS,CAACrC,CAAC;IAC1BuE,WAAW,CAACpB,IAAI,CAAC/F,6BAA6B,CAAC6H,GAAG,CAAC;IACnD,KAAK,MAAMC,eAAe,IAAIX,WAAW,EAAE;MACvC,MAAMY,KAAK,GAAGD,eAAe,CAACC,KAAK;MACnC,MAAMC,mBAAmB,GAAGF,eAAe,CAACG,IAAI;MAChDT,SAAS,CAACG,SAAS,GAAGI,KAAK;MAC3B,IAAIG,QAAQ,GAAG,CAAC;MAChB,IAAIC,MAAM,GAAG,CAAC;MACd,IAAIC,MAAM,GAAG,CAAC;MACd,KAAK,IAAI1C,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGqC,mBAAmB,CAACnC,MAAM,GAAG,CAAC,EAAEH,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;QAChE,MAAM2C,IAAI,GAAGL,mBAAmB,CAAC,CAAC,GAAGtC,CAAC,CAAC;QACvC,MAAM4C,eAAe,GAAGN,mBAAmB,CAAC,CAAC,GAAGtC,CAAC,GAAG,CAAC,CAAC;QACtD,MAAM6C,aAAa,GAAGP,mBAAmB,CAAC,CAAC,GAAGtC,CAAC,GAAG,CAAC,CAAC;QACpD,IAAI8C,EAAE,GAAIzB,UAAU,CAAC0B,8BAA8B,CAACH,eAAe,CAAC,GAAGpB,WAAW,GAAI,CAAC;QACvF,IAAIwB,EAAE,GAAI,CAAC3B,UAAU,CAAC0B,8BAA8B,CAACF,aAAa,CAAC,GAAGjI,UAAU,IAAI4G,WAAW,GAAI,CAAC;QACpG,MAAM1E,MAAM,GAAGkG,EAAE,GAAGF,EAAE;QACtB,IAAIhG,MAAM,GAAG8E,mBAAmB,EAAE;UAC9B,IAAIqB,OAAO,GAAI,CAACH,EAAE,GAAGE,EAAE,IAAI,CAAC,GAAI,CAAC;UACjC,IAAIC,OAAO,GAAGpB,uBAAuB,EAAE;YACnCoB,OAAO,GAAGpB,uBAAuB;UACrC,CAAC,MACI,IAAIoB,OAAO,GAAGpB,uBAAuB,GAAG7E,YAAY,EAAE;YACvDiG,OAAO,GAAGjG,YAAY,GAAG6E,uBAAuB;UACpD;UACAiB,EAAE,GAAGG,OAAO,GAAGpB,uBAAuB;UACtCmB,EAAE,GAAGC,OAAO,GAAGpB,uBAAuB;QAC1C;QACA,IAAIiB,EAAE,GAAGJ,MAAM,GAAG,CAAC,IAAIC,IAAI,KAAKH,QAAQ,EAAE;UACtC;UACA,IAAIxC,CAAC,KAAK,CAAC,EAAE;YACT8B,SAAS,CAACI,QAAQ,CAACjF,CAAC,CAACuF,QAAQ,CAAC,EAAEC,MAAM,EAAEvF,CAAC,CAACsF,QAAQ,CAAC,EAAEE,MAAM,GAAGD,MAAM,CAAC;UACzE;UACAD,QAAQ,GAAGG,IAAI;UACfF,MAAM,GAAGK,EAAE;UACXJ,MAAM,GAAGM,EAAE;QACf,CAAC,MACI;UACD;UACA,IAAIA,EAAE,GAAGN,MAAM,EAAE;YACbA,MAAM,GAAGM,EAAE;UACf;QACJ;MACJ;MACAlB,SAAS,CAACI,QAAQ,CAACjF,CAAC,CAACuF,QAAQ,CAAC,EAAEC,MAAM,EAAEvF,CAAC,CAACsF,QAAQ,CAAC,EAAEE,MAAM,GAAGD,MAAM,CAAC;IACzE;IACA;IACA,IAAI,CAAC,IAAI,CAAClD,SAAS,CAACnE,UAAU,IAAI,IAAI,CAACmE,SAAS,CAAClE,WAAW,EAAE;MAC1D,MAAM6H,YAAY,GAAI,CAAC,GAAG,IAAI,CAAC3D,SAAS,CAACzE,UAAU,GAAI,CAAC;MACxD,MAAMqI,gBAAgB,GAAID,YAAY,GAAG,CAAC,GAAI,CAAC;MAC/C,MAAME,OAAO,GAAG,IAAI,CAAC7D,SAAS,CAACtC,CAAC,CAAC,CAAC,CAAC,6BAA6B;MAChE,MAAMoG,OAAO,GAAG,IAAI,CAAC9D,SAAS,CAACrC,CAAC,CAAC,CAAC,CAAC,6BAA6B;MAChE4E,SAAS,CAACG,SAAS,GAAG,IAAI,CAAC1C,SAAS,CAAClE,WAAW;MAChD,IAAIoH,MAAM,GAAG,CAAC,GAAG;MACjB,IAAIC,MAAM,GAAG,CAAC,GAAG;MACjB,KAAK,IAAI1C,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAG,IAAI,CAAChB,gBAAgB,CAACkB,MAAM,EAAEH,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;QAC9D,MAAMsD,MAAM,GAAG,IAAI,CAACrE,gBAAgB,CAACe,CAAC,CAAC;QACvC,IAAIiD,OAAO,GAAI5B,UAAU,CAAC0B,8BAA8B,CAACO,MAAM,CAACC,UAAU,CAAC,GAAG/B,WAAW,GAAI,CAAC;QAC9F,IAAIyB,OAAO,GAAGE,gBAAgB,EAAE;UAC5BF,OAAO,GAAGE,gBAAgB;QAC9B,CAAC,MACI,IAAIF,OAAO,GAAGE,gBAAgB,GAAGnG,YAAY,EAAE;UAChDiG,OAAO,GAAGjG,YAAY,GAAGmG,gBAAgB;QAC7C;QACA,MAAML,EAAE,GAAGG,OAAO,GAAGE,gBAAgB;QACrC,MAAMH,EAAE,GAAGF,EAAE,GAAGI,YAAY;QAC5B,IAAIJ,EAAE,GAAGJ,MAAM,GAAG,CAAC,EAAE;UACjB;UACA,IAAI1C,CAAC,KAAK,CAAC,EAAE;YACT8B,SAAS,CAACI,QAAQ,CAACkB,OAAO,EAAEX,MAAM,EAAEY,OAAO,EAAEX,MAAM,GAAGD,MAAM,CAAC;UACjE;UACAA,MAAM,GAAGK,EAAE;UACXJ,MAAM,GAAGM,EAAE;QACf,CAAC,MACI;UACD;UACA,IAAIA,EAAE,GAAGN,MAAM,EAAE;YACbA,MAAM,GAAGM,EAAE;UACf;QACJ;MACJ;MACAlB,SAAS,CAACI,QAAQ,CAACkB,OAAO,EAAEX,MAAM,EAAEY,OAAO,EAAEX,MAAM,GAAGD,MAAM,CAAC;IACjE;IACA,IAAI,IAAI,CAAClD,SAAS,CAACvE,YAAY,IAAI,IAAI,CAACuE,SAAS,CAACtE,WAAW,IAAI,IAAI,CAACsE,SAAS,CAACxE,kBAAkB,GAAG,CAAC,EAAE;MACpG+G,SAAS,CAAC0B,SAAS,EAAE;MACrB1B,SAAS,CAAC2B,SAAS,GAAG,CAAC;MACvB3B,SAAS,CAAC4B,WAAW,GAAG,IAAI,CAACnE,SAAS,CAACtE,WAAW;MAClD6G,SAAS,CAAC6B,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;MACtB7B,SAAS,CAAC8B,MAAM,CAAC,CAAC,EAAE5G,YAAY,CAAC;MACjC8E,SAAS,CAAC+B,MAAM,EAAE;MAClB/B,SAAS,CAAC6B,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;MACtB7B,SAAS,CAAC8B,MAAM,CAAC7G,WAAW,EAAE,CAAC,CAAC;MAChC+E,SAAS,CAAC+B,MAAM,EAAE;IACtB;EACJ;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}