{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { Color, RGBA } from '../../../base/common/color.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { assertNever } from '../../../base/common/types.js';\nimport * as nls from '../../../nls.js';\nimport { Extensions as JSONExtensions } from '../../jsonschemas/common/jsonContributionRegistry.js';\nimport * as platform from '../../registry/common/platform.js';\n/**\n * Returns the css variable name for the given color identifier. Dots (`.`) are replaced with hyphens (`-`) and\n * everything is prefixed with `--vscode-`.\n *\n * @sample `editorSuggestWidget.background` is `--vscode-editorSuggestWidget-background`.\n */\nexport function asCssVariableName(colorIdent) {\n  return `--vscode-${colorIdent.replace(/\\./g, '-')}`;\n}\n// color registry\nexport const Extensions = {\n  ColorContribution: 'base.contributions.colors'\n};\nclass ColorRegistry {\n  constructor() {\n    this._onDidChangeSchema = new Emitter();\n    this.onDidChangeSchema = this._onDidChangeSchema.event;\n    this.colorSchema = {\n      type: 'object',\n      properties: {}\n    };\n    this.colorReferenceSchema = {\n      type: 'string',\n      enum: [],\n      enumDescriptions: []\n    };\n    this.colorsById = {};\n  }\n  registerColor(id, defaults, description) {\n    let needsTransparency = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    let deprecationMessage = arguments.length > 4 ? arguments[4] : undefined;\n    const colorContribution = {\n      id,\n      description,\n      defaults,\n      needsTransparency,\n      deprecationMessage\n    };\n    this.colorsById[id] = colorContribution;\n    const propertySchema = {\n      type: 'string',\n      description,\n      format: 'color-hex',\n      defaultSnippets: [{\n        body: '${1:#ff0000}'\n      }]\n    };\n    if (deprecationMessage) {\n      propertySchema.deprecationMessage = deprecationMessage;\n    }\n    this.colorSchema.properties[id] = propertySchema;\n    this.colorReferenceSchema.enum.push(id);\n    this.colorReferenceSchema.enumDescriptions.push(description);\n    this._onDidChangeSchema.fire();\n    return id;\n  }\n  getColors() {\n    return Object.keys(this.colorsById).map(id => this.colorsById[id]);\n  }\n  resolveDefaultColor(id, theme) {\n    const colorDesc = this.colorsById[id];\n    if (colorDesc && colorDesc.defaults) {\n      const colorValue = colorDesc.defaults[theme.type];\n      return resolveColorValue(colorValue, theme);\n    }\n    return undefined;\n  }\n  getColorSchema() {\n    return this.colorSchema;\n  }\n  toString() {\n    const sorter = (a, b) => {\n      const cat1 = a.indexOf('.') === -1 ? 0 : 1;\n      const cat2 = b.indexOf('.') === -1 ? 0 : 1;\n      if (cat1 !== cat2) {\n        return cat1 - cat2;\n      }\n      return a.localeCompare(b);\n    };\n    return Object.keys(this.colorsById).sort(sorter).map(k => `- \\`${k}\\`: ${this.colorsById[k].description}`).join('\\n');\n  }\n}\nconst colorRegistry = new ColorRegistry();\nplatform.Registry.add(Extensions.ColorContribution, colorRegistry);\nfunction migrateColorDefaults(o) {\n  if (o === null) {\n    return o;\n  }\n  if (typeof o.hcLight === 'undefined') {\n    if (o.hcDark === null || typeof o.hcDark === 'string') {\n      o.hcLight = o.hcDark;\n    } else {\n      o.hcLight = o.light;\n    }\n  }\n  return o;\n}\nexport function registerColor(id, defaults, description, needsTransparency, deprecationMessage) {\n  return colorRegistry.registerColor(id, migrateColorDefaults(defaults), description, needsTransparency, deprecationMessage);\n}\n// ----- base colors\nexport const foreground = registerColor('foreground', {\n  dark: '#CCCCCC',\n  light: '#616161',\n  hcDark: '#FFFFFF',\n  hcLight: '#292929'\n}, nls.localize('foreground', \"Overall foreground color. This color is only used if not overridden by a component.\"));\nexport const disabledForeground = registerColor('disabledForeground', {\n  dark: '#CCCCCC80',\n  light: '#61616180',\n  hcDark: '#A5A5A5',\n  hcLight: '#7F7F7F'\n}, nls.localize('disabledForeground', \"Overall foreground for disabled elements. This color is only used if not overridden by a component.\"));\nexport const errorForeground = registerColor('errorForeground', {\n  dark: '#F48771',\n  light: '#A1260D',\n  hcDark: '#F48771',\n  hcLight: '#B5200D'\n}, nls.localize('errorForeground', \"Overall foreground color for error messages. This color is only used if not overridden by a component.\"));\nexport const descriptionForeground = registerColor('descriptionForeground', {\n  light: '#717171',\n  dark: transparent(foreground, 0.7),\n  hcDark: transparent(foreground, 0.7),\n  hcLight: transparent(foreground, 0.7)\n}, nls.localize('descriptionForeground', \"Foreground color for description text providing additional information, for example for a label.\"));\nexport const iconForeground = registerColor('icon.foreground', {\n  dark: '#C5C5C5',\n  light: '#424242',\n  hcDark: '#FFFFFF',\n  hcLight: '#292929'\n}, nls.localize('iconForeground', \"The default color for icons in the workbench.\"));\nexport const focusBorder = registerColor('focusBorder', {\n  dark: '#007FD4',\n  light: '#0090F1',\n  hcDark: '#F38518',\n  hcLight: '#0F4A85'\n}, nls.localize('focusBorder', \"Overall border color for focused elements. This color is only used if not overridden by a component.\"));\nexport const contrastBorder = registerColor('contrastBorder', {\n  light: null,\n  dark: null,\n  hcDark: '#6FC3DF',\n  hcLight: '#0F4A85'\n}, nls.localize('contrastBorder', \"An extra border around elements to separate them from others for greater contrast.\"));\nexport const activeContrastBorder = registerColor('contrastActiveBorder', {\n  light: null,\n  dark: null,\n  hcDark: focusBorder,\n  hcLight: focusBorder\n}, nls.localize('activeContrastBorder', \"An extra border around active elements to separate them from others for greater contrast.\"));\nexport const selectionBackground = registerColor('selection.background', {\n  light: null,\n  dark: null,\n  hcDark: null,\n  hcLight: null\n}, nls.localize('selectionBackground', \"The background color of text selections in the workbench (e.g. for input fields or text areas). Note that this does not apply to selections within the editor.\"));\n// ------ text colors\nexport const textSeparatorForeground = registerColor('textSeparator.foreground', {\n  light: '#0000002e',\n  dark: '#ffffff2e',\n  hcDark: Color.black,\n  hcLight: '#292929'\n}, nls.localize('textSeparatorForeground', \"Color for text separators.\"));\nexport const textLinkForeground = registerColor('textLink.foreground', {\n  light: '#006AB1',\n  dark: '#3794FF',\n  hcDark: '#3794FF',\n  hcLight: '#0F4A85'\n}, nls.localize('textLinkForeground', \"Foreground color for links in text.\"));\nexport const textLinkActiveForeground = registerColor('textLink.activeForeground', {\n  light: '#006AB1',\n  dark: '#3794FF',\n  hcDark: '#3794FF',\n  hcLight: '#0F4A85'\n}, nls.localize('textLinkActiveForeground', \"Foreground color for links in text when clicked on and on mouse hover.\"));\nexport const textPreformatForeground = registerColor('textPreformat.foreground', {\n  light: '#A31515',\n  dark: '#D7BA7D',\n  hcDark: '#D7BA7D',\n  hcLight: '#292929'\n}, nls.localize('textPreformatForeground', \"Foreground color for preformatted text segments.\"));\nexport const textBlockQuoteBackground = registerColor('textBlockQuote.background', {\n  light: '#7f7f7f1a',\n  dark: '#7f7f7f1a',\n  hcDark: null,\n  hcLight: '#F2F2F2'\n}, nls.localize('textBlockQuoteBackground', \"Background color for block quotes in text.\"));\nexport const textBlockQuoteBorder = registerColor('textBlockQuote.border', {\n  light: '#007acc80',\n  dark: '#007acc80',\n  hcDark: Color.white,\n  hcLight: '#292929'\n}, nls.localize('textBlockQuoteBorder', \"Border color for block quotes in text.\"));\nexport const textCodeBlockBackground = registerColor('textCodeBlock.background', {\n  light: '#dcdcdc66',\n  dark: '#0a0a0a66',\n  hcDark: Color.black,\n  hcLight: '#F2F2F2'\n}, nls.localize('textCodeBlockBackground', \"Background color for code blocks in text.\"));\n// ----- widgets\nexport const widgetShadow = registerColor('widget.shadow', {\n  dark: transparent(Color.black, .36),\n  light: transparent(Color.black, .16),\n  hcDark: null,\n  hcLight: null\n}, nls.localize('widgetShadow', 'Shadow color of widgets such as find/replace inside the editor.'));\nexport const inputBackground = registerColor('input.background', {\n  dark: '#3C3C3C',\n  light: Color.white,\n  hcDark: Color.black,\n  hcLight: Color.white\n}, nls.localize('inputBoxBackground', \"Input box background.\"));\nexport const inputForeground = registerColor('input.foreground', {\n  dark: foreground,\n  light: foreground,\n  hcDark: foreground,\n  hcLight: foreground\n}, nls.localize('inputBoxForeground', \"Input box foreground.\"));\nexport const inputBorder = registerColor('input.border', {\n  dark: null,\n  light: null,\n  hcDark: contrastBorder,\n  hcLight: contrastBorder\n}, nls.localize('inputBoxBorder', \"Input box border.\"));\nexport const inputActiveOptionBorder = registerColor('inputOption.activeBorder', {\n  dark: '#007ACC00',\n  light: '#007ACC00',\n  hcDark: contrastBorder,\n  hcLight: contrastBorder\n}, nls.localize('inputBoxActiveOptionBorder', \"Border color of activated options in input fields.\"));\nexport const inputActiveOptionHoverBackground = registerColor('inputOption.hoverBackground', {\n  dark: '#5a5d5e80',\n  light: '#b8b8b850',\n  hcDark: null,\n  hcLight: null\n}, nls.localize('inputOption.hoverBackground', \"Background color of activated options in input fields.\"));\nexport const inputActiveOptionBackground = registerColor('inputOption.activeBackground', {\n  dark: transparent(focusBorder, 0.4),\n  light: transparent(focusBorder, 0.2),\n  hcDark: Color.transparent,\n  hcLight: Color.transparent\n}, nls.localize('inputOption.activeBackground', \"Background hover color of options in input fields.\"));\nexport const inputActiveOptionForeground = registerColor('inputOption.activeForeground', {\n  dark: Color.white,\n  light: Color.black,\n  hcDark: null,\n  hcLight: foreground\n}, nls.localize('inputOption.activeForeground', \"Foreground color of activated options in input fields.\"));\nexport const inputPlaceholderForeground = registerColor('input.placeholderForeground', {\n  light: transparent(foreground, 0.5),\n  dark: transparent(foreground, 0.5),\n  hcDark: transparent(foreground, 0.7),\n  hcLight: transparent(foreground, 0.7)\n}, nls.localize('inputPlaceholderForeground', \"Input box foreground color for placeholder text.\"));\nexport const inputValidationInfoBackground = registerColor('inputValidation.infoBackground', {\n  dark: '#063B49',\n  light: '#D6ECF2',\n  hcDark: Color.black,\n  hcLight: Color.white\n}, nls.localize('inputValidationInfoBackground', \"Input validation background color for information severity.\"));\nexport const inputValidationInfoForeground = registerColor('inputValidation.infoForeground', {\n  dark: null,\n  light: null,\n  hcDark: null,\n  hcLight: foreground\n}, nls.localize('inputValidationInfoForeground', \"Input validation foreground color for information severity.\"));\nexport const inputValidationInfoBorder = registerColor('inputValidation.infoBorder', {\n  dark: '#007acc',\n  light: '#007acc',\n  hcDark: contrastBorder,\n  hcLight: contrastBorder\n}, nls.localize('inputValidationInfoBorder', \"Input validation border color for information severity.\"));\nexport const inputValidationWarningBackground = registerColor('inputValidation.warningBackground', {\n  dark: '#352A05',\n  light: '#F6F5D2',\n  hcDark: Color.black,\n  hcLight: Color.white\n}, nls.localize('inputValidationWarningBackground', \"Input validation background color for warning severity.\"));\nexport const inputValidationWarningForeground = registerColor('inputValidation.warningForeground', {\n  dark: null,\n  light: null,\n  hcDark: null,\n  hcLight: foreground\n}, nls.localize('inputValidationWarningForeground', \"Input validation foreground color for warning severity.\"));\nexport const inputValidationWarningBorder = registerColor('inputValidation.warningBorder', {\n  dark: '#B89500',\n  light: '#B89500',\n  hcDark: contrastBorder,\n  hcLight: contrastBorder\n}, nls.localize('inputValidationWarningBorder', \"Input validation border color for warning severity.\"));\nexport const inputValidationErrorBackground = registerColor('inputValidation.errorBackground', {\n  dark: '#5A1D1D',\n  light: '#F2DEDE',\n  hcDark: Color.black,\n  hcLight: Color.white\n}, nls.localize('inputValidationErrorBackground', \"Input validation background color for error severity.\"));\nexport const inputValidationErrorForeground = registerColor('inputValidation.errorForeground', {\n  dark: null,\n  light: null,\n  hcDark: null,\n  hcLight: foreground\n}, nls.localize('inputValidationErrorForeground', \"Input validation foreground color for error severity.\"));\nexport const inputValidationErrorBorder = registerColor('inputValidation.errorBorder', {\n  dark: '#BE1100',\n  light: '#BE1100',\n  hcDark: contrastBorder,\n  hcLight: contrastBorder\n}, nls.localize('inputValidationErrorBorder', \"Input validation border color for error severity.\"));\nexport const selectBackground = registerColor('dropdown.background', {\n  dark: '#3C3C3C',\n  light: Color.white,\n  hcDark: Color.black,\n  hcLight: Color.white\n}, nls.localize('dropdownBackground', \"Dropdown background.\"));\nexport const selectListBackground = registerColor('dropdown.listBackground', {\n  dark: null,\n  light: null,\n  hcDark: Color.black,\n  hcLight: Color.white\n}, nls.localize('dropdownListBackground', \"Dropdown list background.\"));\nexport const selectForeground = registerColor('dropdown.foreground', {\n  dark: '#F0F0F0',\n  light: null,\n  hcDark: Color.white,\n  hcLight: foreground\n}, nls.localize('dropdownForeground', \"Dropdown foreground.\"));\nexport const selectBorder = registerColor('dropdown.border', {\n  dark: selectBackground,\n  light: '#CECECE',\n  hcDark: contrastBorder,\n  hcLight: contrastBorder\n}, nls.localize('dropdownBorder', \"Dropdown border.\"));\nexport const checkboxBackground = registerColor('checkbox.background', {\n  dark: selectBackground,\n  light: selectBackground,\n  hcDark: selectBackground,\n  hcLight: selectBackground\n}, nls.localize('checkbox.background', \"Background color of checkbox widget.\"));\nexport const checkboxForeground = registerColor('checkbox.foreground', {\n  dark: selectForeground,\n  light: selectForeground,\n  hcDark: selectForeground,\n  hcLight: selectForeground\n}, nls.localize('checkbox.foreground', \"Foreground color of checkbox widget.\"));\nexport const checkboxBorder = registerColor('checkbox.border', {\n  dark: selectBorder,\n  light: selectBorder,\n  hcDark: selectBorder,\n  hcLight: selectBorder\n}, nls.localize('checkbox.border', \"Border color of checkbox widget.\"));\nexport const buttonForeground = registerColor('button.foreground', {\n  dark: Color.white,\n  light: Color.white,\n  hcDark: Color.white,\n  hcLight: Color.white\n}, nls.localize('buttonForeground', \"Button foreground color.\"));\nexport const buttonSeparator = registerColor('button.separator', {\n  dark: transparent(buttonForeground, .4),\n  light: transparent(buttonForeground, .4),\n  hcDark: transparent(buttonForeground, .4),\n  hcLight: transparent(buttonForeground, .4)\n}, nls.localize('buttonSeparator', \"Button separator color.\"));\nexport const buttonBackground = registerColor('button.background', {\n  dark: '#0E639C',\n  light: '#007ACC',\n  hcDark: null,\n  hcLight: '#0F4A85'\n}, nls.localize('buttonBackground', \"Button background color.\"));\nexport const buttonHoverBackground = registerColor('button.hoverBackground', {\n  dark: lighten(buttonBackground, 0.2),\n  light: darken(buttonBackground, 0.2),\n  hcDark: null,\n  hcLight: null\n}, nls.localize('buttonHoverBackground', \"Button background color when hovering.\"));\nexport const buttonBorder = registerColor('button.border', {\n  dark: contrastBorder,\n  light: contrastBorder,\n  hcDark: contrastBorder,\n  hcLight: contrastBorder\n}, nls.localize('buttonBorder', \"Button border color.\"));\nexport const buttonSecondaryForeground = registerColor('button.secondaryForeground', {\n  dark: Color.white,\n  light: Color.white,\n  hcDark: Color.white,\n  hcLight: foreground\n}, nls.localize('buttonSecondaryForeground', \"Secondary button foreground color.\"));\nexport const buttonSecondaryBackground = registerColor('button.secondaryBackground', {\n  dark: '#3A3D41',\n  light: '#5F6A79',\n  hcDark: null,\n  hcLight: Color.white\n}, nls.localize('buttonSecondaryBackground', \"Secondary button background color.\"));\nexport const buttonSecondaryHoverBackground = registerColor('button.secondaryHoverBackground', {\n  dark: lighten(buttonSecondaryBackground, 0.2),\n  light: darken(buttonSecondaryBackground, 0.2),\n  hcDark: null,\n  hcLight: null\n}, nls.localize('buttonSecondaryHoverBackground', \"Secondary button background color when hovering.\"));\nexport const badgeBackground = registerColor('badge.background', {\n  dark: '#4D4D4D',\n  light: '#C4C4C4',\n  hcDark: Color.black,\n  hcLight: '#0F4A85'\n}, nls.localize('badgeBackground', \"Badge background color. Badges are small information labels, e.g. for search results count.\"));\nexport const badgeForeground = registerColor('badge.foreground', {\n  dark: Color.white,\n  light: '#333',\n  hcDark: Color.white,\n  hcLight: Color.white\n}, nls.localize('badgeForeground', \"Badge foreground color. Badges are small information labels, e.g. for search results count.\"));\nexport const scrollbarShadow = registerColor('scrollbar.shadow', {\n  dark: '#000000',\n  light: '#DDDDDD',\n  hcDark: null,\n  hcLight: null\n}, nls.localize('scrollbarShadow', \"Scrollbar shadow to indicate that the view is scrolled.\"));\nexport const scrollbarSliderBackground = registerColor('scrollbarSlider.background', {\n  dark: Color.fromHex('#797979').transparent(0.4),\n  light: Color.fromHex('#646464').transparent(0.4),\n  hcDark: transparent(contrastBorder, 0.6),\n  hcLight: transparent(contrastBorder, 0.4)\n}, nls.localize('scrollbarSliderBackground', \"Scrollbar slider background color.\"));\nexport const scrollbarSliderHoverBackground = registerColor('scrollbarSlider.hoverBackground', {\n  dark: Color.fromHex('#646464').transparent(0.7),\n  light: Color.fromHex('#646464').transparent(0.7),\n  hcDark: transparent(contrastBorder, 0.8),\n  hcLight: transparent(contrastBorder, 0.8)\n}, nls.localize('scrollbarSliderHoverBackground', \"Scrollbar slider background color when hovering.\"));\nexport const scrollbarSliderActiveBackground = registerColor('scrollbarSlider.activeBackground', {\n  dark: Color.fromHex('#BFBFBF').transparent(0.4),\n  light: Color.fromHex('#000000').transparent(0.6),\n  hcDark: contrastBorder,\n  hcLight: contrastBorder\n}, nls.localize('scrollbarSliderActiveBackground', \"Scrollbar slider background color when clicked on.\"));\nexport const progressBarBackground = registerColor('progressBar.background', {\n  dark: Color.fromHex('#0E70C0'),\n  light: Color.fromHex('#0E70C0'),\n  hcDark: contrastBorder,\n  hcLight: contrastBorder\n}, nls.localize('progressBarBackground', \"Background color of the progress bar that can show for long running operations.\"));\nexport const editorErrorBackground = registerColor('editorError.background', {\n  dark: null,\n  light: null,\n  hcDark: null,\n  hcLight: null\n}, nls.localize('editorError.background', 'Background color of error text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorErrorForeground = registerColor('editorError.foreground', {\n  dark: '#F14C4C',\n  light: '#E51400',\n  hcDark: '#F48771',\n  hcLight: '#B5200D'\n}, nls.localize('editorError.foreground', 'Foreground color of error squigglies in the editor.'));\nexport const editorErrorBorder = registerColor('editorError.border', {\n  dark: null,\n  light: null,\n  hcDark: Color.fromHex('#E47777').transparent(0.8),\n  hcLight: '#B5200D'\n}, nls.localize('errorBorder', 'Border color of error boxes in the editor.'));\nexport const editorWarningBackground = registerColor('editorWarning.background', {\n  dark: null,\n  light: null,\n  hcDark: null,\n  hcLight: null\n}, nls.localize('editorWarning.background', 'Background color of warning text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorWarningForeground = registerColor('editorWarning.foreground', {\n  dark: '#CCA700',\n  light: '#BF8803',\n  hcDark: '#FFD37',\n  hcLight: '#895503'\n}, nls.localize('editorWarning.foreground', 'Foreground color of warning squigglies in the editor.'));\nexport const editorWarningBorder = registerColor('editorWarning.border', {\n  dark: null,\n  light: null,\n  hcDark: Color.fromHex('#FFCC00').transparent(0.8),\n  hcLight: '#'\n}, nls.localize('warningBorder', 'Border color of warning boxes in the editor.'));\nexport const editorInfoBackground = registerColor('editorInfo.background', {\n  dark: null,\n  light: null,\n  hcDark: null,\n  hcLight: null\n}, nls.localize('editorInfo.background', 'Background color of info text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorInfoForeground = registerColor('editorInfo.foreground', {\n  dark: '#3794FF',\n  light: '#1a85ff',\n  hcDark: '#3794FF',\n  hcLight: '#1a85ff'\n}, nls.localize('editorInfo.foreground', 'Foreground color of info squigglies in the editor.'));\nexport const editorInfoBorder = registerColor('editorInfo.border', {\n  dark: null,\n  light: null,\n  hcDark: Color.fromHex('#3794FF').transparent(0.8),\n  hcLight: '#292929'\n}, nls.localize('infoBorder', 'Border color of info boxes in the editor.'));\nexport const editorHintForeground = registerColor('editorHint.foreground', {\n  dark: Color.fromHex('#eeeeee').transparent(0.7),\n  light: '#6c6c6c',\n  hcDark: null,\n  hcLight: null\n}, nls.localize('editorHint.foreground', 'Foreground color of hint squigglies in the editor.'));\nexport const editorHintBorder = registerColor('editorHint.border', {\n  dark: null,\n  light: null,\n  hcDark: Color.fromHex('#eeeeee').transparent(0.8),\n  hcLight: '#292929'\n}, nls.localize('hintBorder', 'Border color of hint boxes in the editor.'));\nexport const sashHoverBorder = registerColor('sash.hoverBorder', {\n  dark: focusBorder,\n  light: focusBorder,\n  hcDark: focusBorder,\n  hcLight: focusBorder\n}, nls.localize('sashActiveBorder', \"Border color of active sashes.\"));\n/**\n * Editor background color.\n */\nexport const editorBackground = registerColor('editor.background', {\n  light: '#ffffff',\n  dark: '#1E1E1E',\n  hcDark: Color.black,\n  hcLight: Color.white\n}, nls.localize('editorBackground', \"Editor background color.\"));\n/**\n * Editor foreground color.\n */\nexport const editorForeground = registerColor('editor.foreground', {\n  light: '#333333',\n  dark: '#BBBBBB',\n  hcDark: Color.white,\n  hcLight: foreground\n}, nls.localize('editorForeground', \"Editor default foreground color.\"));\n/**\n * Sticky scroll\n */\nexport const editorStickyScrollBackground = registerColor('editorStickyScroll.background', {\n  light: editorBackground,\n  dark: editorBackground,\n  hcDark: editorBackground,\n  hcLight: editorBackground\n}, nls.localize('editorStickyScrollBackground', \"Sticky scroll background color for the editor\"));\nexport const editorStickyScrollHoverBackground = registerColor('editorStickyScrollHover.background', {\n  dark: '#2A2D2E',\n  light: '#F0F0F0',\n  hcDark: null,\n  hcLight: Color.fromHex('#0F4A85').transparent(0.1)\n}, nls.localize('editorStickyScrollHoverBackground', \"Sticky scroll on hover background color for the editor\"));\n/**\n * Editor widgets\n */\nexport const editorWidgetBackground = registerColor('editorWidget.background', {\n  dark: '#252526',\n  light: '#F3F3F3',\n  hcDark: '#0C141F',\n  hcLight: Color.white\n}, nls.localize('editorWidgetBackground', 'Background color of editor widgets, such as find/replace.'));\nexport const editorWidgetForeground = registerColor('editorWidget.foreground', {\n  dark: foreground,\n  light: foreground,\n  hcDark: foreground,\n  hcLight: foreground\n}, nls.localize('editorWidgetForeground', 'Foreground color of editor widgets, such as find/replace.'));\nexport const editorWidgetBorder = registerColor('editorWidget.border', {\n  dark: '#454545',\n  light: '#C8C8C8',\n  hcDark: contrastBorder,\n  hcLight: contrastBorder\n}, nls.localize('editorWidgetBorder', 'Border color of editor widgets. The color is only used if the widget chooses to have a border and if the color is not overridden by a widget.'));\nexport const editorWidgetResizeBorder = registerColor('editorWidget.resizeBorder', {\n  light: null,\n  dark: null,\n  hcDark: null,\n  hcLight: null\n}, nls.localize('editorWidgetResizeBorder', \"Border color of the resize bar of editor widgets. The color is only used if the widget chooses to have a resize border and if the color is not overridden by a widget.\"));\n/**\n * Quick pick widget\n */\nexport const quickInputBackground = registerColor('quickInput.background', {\n  dark: editorWidgetBackground,\n  light: editorWidgetBackground,\n  hcDark: editorWidgetBackground,\n  hcLight: editorWidgetBackground\n}, nls.localize('pickerBackground', \"Quick picker background color. The quick picker widget is the container for pickers like the command palette.\"));\nexport const quickInputForeground = registerColor('quickInput.foreground', {\n  dark: editorWidgetForeground,\n  light: editorWidgetForeground,\n  hcDark: editorWidgetForeground,\n  hcLight: editorWidgetForeground\n}, nls.localize('pickerForeground', \"Quick picker foreground color. The quick picker widget is the container for pickers like the command palette.\"));\nexport const quickInputTitleBackground = registerColor('quickInputTitle.background', {\n  dark: new Color(new RGBA(255, 255, 255, 0.105)),\n  light: new Color(new RGBA(0, 0, 0, 0.06)),\n  hcDark: '#000000',\n  hcLight: Color.white\n}, nls.localize('pickerTitleBackground', \"Quick picker title background color. The quick picker widget is the container for pickers like the command palette.\"));\nexport const pickerGroupForeground = registerColor('pickerGroup.foreground', {\n  dark: '#3794FF',\n  light: '#0066BF',\n  hcDark: Color.white,\n  hcLight: '#0F4A85'\n}, nls.localize('pickerGroupForeground', \"Quick picker color for grouping labels.\"));\nexport const pickerGroupBorder = registerColor('pickerGroup.border', {\n  dark: '#3F3F46',\n  light: '#CCCEDB',\n  hcDark: Color.white,\n  hcLight: '#0F4A85'\n}, nls.localize('pickerGroupBorder', \"Quick picker color for grouping borders.\"));\n/**\n * Keybinding label\n */\nexport const keybindingLabelBackground = registerColor('keybindingLabel.background', {\n  dark: new Color(new RGBA(128, 128, 128, 0.17)),\n  light: new Color(new RGBA(221, 221, 221, 0.4)),\n  hcDark: Color.transparent,\n  hcLight: Color.transparent\n}, nls.localize('keybindingLabelBackground', \"Keybinding label background color. The keybinding label is used to represent a keyboard shortcut.\"));\nexport const keybindingLabelForeground = registerColor('keybindingLabel.foreground', {\n  dark: Color.fromHex('#CCCCCC'),\n  light: Color.fromHex('#555555'),\n  hcDark: Color.white,\n  hcLight: foreground\n}, nls.localize('keybindingLabelForeground', \"Keybinding label foreground color. The keybinding label is used to represent a keyboard shortcut.\"));\nexport const keybindingLabelBorder = registerColor('keybindingLabel.border', {\n  dark: new Color(new RGBA(51, 51, 51, 0.6)),\n  light: new Color(new RGBA(204, 204, 204, 0.4)),\n  hcDark: new Color(new RGBA(111, 195, 223)),\n  hcLight: contrastBorder\n}, nls.localize('keybindingLabelBorder', \"Keybinding label border color. The keybinding label is used to represent a keyboard shortcut.\"));\nexport const keybindingLabelBottomBorder = registerColor('keybindingLabel.bottomBorder', {\n  dark: new Color(new RGBA(68, 68, 68, 0.6)),\n  light: new Color(new RGBA(187, 187, 187, 0.4)),\n  hcDark: new Color(new RGBA(111, 195, 223)),\n  hcLight: foreground\n}, nls.localize('keybindingLabelBottomBorder', \"Keybinding label border bottom color. The keybinding label is used to represent a keyboard shortcut.\"));\n/**\n * Editor selection colors.\n */\nexport const editorSelectionBackground = registerColor('editor.selectionBackground', {\n  light: '#ADD6FF',\n  dark: '#264F78',\n  hcDark: '#f3f518',\n  hcLight: '#0F4A85'\n}, nls.localize('editorSelectionBackground', \"Color of the editor selection.\"));\nexport const editorSelectionForeground = registerColor('editor.selectionForeground', {\n  light: null,\n  dark: null,\n  hcDark: '#000000',\n  hcLight: Color.white\n}, nls.localize('editorSelectionForeground', \"Color of the selected text for high contrast.\"));\nexport const editorInactiveSelection = registerColor('editor.inactiveSelectionBackground', {\n  light: transparent(editorSelectionBackground, 0.5),\n  dark: transparent(editorSelectionBackground, 0.5),\n  hcDark: transparent(editorSelectionBackground, 0.7),\n  hcLight: transparent(editorSelectionBackground, 0.5)\n}, nls.localize('editorInactiveSelection', \"Color of the selection in an inactive editor. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport const editorSelectionHighlight = registerColor('editor.selectionHighlightBackground', {\n  light: lessProminent(editorSelectionBackground, editorBackground, 0.3, 0.6),\n  dark: lessProminent(editorSelectionBackground, editorBackground, 0.3, 0.6),\n  hcDark: null,\n  hcLight: null\n}, nls.localize('editorSelectionHighlight', 'Color for regions with the same content as the selection. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorSelectionHighlightBorder = registerColor('editor.selectionHighlightBorder', {\n  light: null,\n  dark: null,\n  hcDark: activeContrastBorder,\n  hcLight: activeContrastBorder\n}, nls.localize('editorSelectionHighlightBorder', \"Border color for regions with the same content as the selection.\"));\n/**\n * Editor find match colors.\n */\nexport const editorFindMatch = registerColor('editor.findMatchBackground', {\n  light: '#A8AC94',\n  dark: '#515C6A',\n  hcDark: null,\n  hcLight: null\n}, nls.localize('editorFindMatch', \"Color of the current search match.\"));\nexport const editorFindMatchHighlight = registerColor('editor.findMatchHighlightBackground', {\n  light: '#EA5C0055',\n  dark: '#EA5C0055',\n  hcDark: null,\n  hcLight: null\n}, nls.localize('findMatchHighlight', \"Color of the other search matches. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport const editorFindRangeHighlight = registerColor('editor.findRangeHighlightBackground', {\n  dark: '#3a3d4166',\n  light: '#b4b4b44d',\n  hcDark: null,\n  hcLight: null\n}, nls.localize('findRangeHighlight', \"Color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport const editorFindMatchBorder = registerColor('editor.findMatchBorder', {\n  light: null,\n  dark: null,\n  hcDark: activeContrastBorder,\n  hcLight: activeContrastBorder\n}, nls.localize('editorFindMatchBorder', \"Border color of the current search match.\"));\nexport const editorFindMatchHighlightBorder = registerColor('editor.findMatchHighlightBorder', {\n  light: null,\n  dark: null,\n  hcDark: activeContrastBorder,\n  hcLight: activeContrastBorder\n}, nls.localize('findMatchHighlightBorder', \"Border color of the other search matches.\"));\nexport const editorFindRangeHighlightBorder = registerColor('editor.findRangeHighlightBorder', {\n  dark: null,\n  light: null,\n  hcDark: transparent(activeContrastBorder, 0.4),\n  hcLight: transparent(activeContrastBorder, 0.4)\n}, nls.localize('findRangeHighlightBorder', \"Border color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations.\"), true);\n/**\n * Search Editor query match colors.\n *\n * Distinct from normal editor find match to allow for better differentiation\n */\nexport const searchEditorFindMatch = registerColor('searchEditor.findMatchBackground', {\n  light: transparent(editorFindMatchHighlight, 0.66),\n  dark: transparent(editorFindMatchHighlight, 0.66),\n  hcDark: editorFindMatchHighlight,\n  hcLight: editorFindMatchHighlight\n}, nls.localize('searchEditor.queryMatch', \"Color of the Search Editor query matches.\"));\nexport const searchEditorFindMatchBorder = registerColor('searchEditor.findMatchBorder', {\n  light: transparent(editorFindMatchHighlightBorder, 0.66),\n  dark: transparent(editorFindMatchHighlightBorder, 0.66),\n  hcDark: editorFindMatchHighlightBorder,\n  hcLight: editorFindMatchHighlightBorder\n}, nls.localize('searchEditor.editorFindMatchBorder', \"Border color of the Search Editor query matches.\"));\n/**\n * Editor hover\n */\nexport const editorHoverHighlight = registerColor('editor.hoverHighlightBackground', {\n  light: '#ADD6FF26',\n  dark: '#264f7840',\n  hcDark: '#ADD6FF26',\n  hcLight: null\n}, nls.localize('hoverHighlight', 'Highlight below the word for which a hover is shown. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorHoverBackground = registerColor('editorHoverWidget.background', {\n  light: editorWidgetBackground,\n  dark: editorWidgetBackground,\n  hcDark: editorWidgetBackground,\n  hcLight: editorWidgetBackground\n}, nls.localize('hoverBackground', 'Background color of the editor hover.'));\nexport const editorHoverForeground = registerColor('editorHoverWidget.foreground', {\n  light: editorWidgetForeground,\n  dark: editorWidgetForeground,\n  hcDark: editorWidgetForeground,\n  hcLight: editorWidgetForeground\n}, nls.localize('hoverForeground', 'Foreground color of the editor hover.'));\nexport const editorHoverBorder = registerColor('editorHoverWidget.border', {\n  light: editorWidgetBorder,\n  dark: editorWidgetBorder,\n  hcDark: editorWidgetBorder,\n  hcLight: editorWidgetBorder\n}, nls.localize('hoverBorder', 'Border color of the editor hover.'));\nexport const editorHoverStatusBarBackground = registerColor('editorHoverWidget.statusBarBackground', {\n  dark: lighten(editorHoverBackground, 0.2),\n  light: darken(editorHoverBackground, 0.05),\n  hcDark: editorWidgetBackground,\n  hcLight: editorWidgetBackground\n}, nls.localize('statusBarBackground', \"Background color of the editor hover status bar.\"));\n/**\n * Editor link colors\n */\nexport const editorActiveLinkForeground = registerColor('editorLink.activeForeground', {\n  dark: '#4E94CE',\n  light: Color.blue,\n  hcDark: Color.cyan,\n  hcLight: '#292929'\n}, nls.localize('activeLinkForeground', 'Color of active links.'));\n/**\n * Inline hints\n */\nexport const editorInlayHintForeground = registerColor('editorInlayHint.foreground', {\n  dark: transparent(badgeForeground, .8),\n  light: transparent(badgeForeground, .8),\n  hcDark: badgeForeground,\n  hcLight: badgeForeground\n}, nls.localize('editorInlayHintForeground', 'Foreground color of inline hints'));\nexport const editorInlayHintBackground = registerColor('editorInlayHint.background', {\n  dark: transparent(badgeBackground, .6),\n  light: transparent(badgeBackground, .3),\n  hcDark: badgeBackground,\n  hcLight: badgeBackground\n}, nls.localize('editorInlayHintBackground', 'Background color of inline hints'));\nexport const editorInlayHintTypeForeground = registerColor('editorInlayHint.typeForeground', {\n  dark: editorInlayHintForeground,\n  light: editorInlayHintForeground,\n  hcDark: editorInlayHintForeground,\n  hcLight: editorInlayHintForeground\n}, nls.localize('editorInlayHintForegroundTypes', 'Foreground color of inline hints for types'));\nexport const editorInlayHintTypeBackground = registerColor('editorInlayHint.typeBackground', {\n  dark: editorInlayHintBackground,\n  light: editorInlayHintBackground,\n  hcDark: editorInlayHintBackground,\n  hcLight: editorInlayHintBackground\n}, nls.localize('editorInlayHintBackgroundTypes', 'Background color of inline hints for types'));\nexport const editorInlayHintParameterForeground = registerColor('editorInlayHint.parameterForeground', {\n  dark: editorInlayHintForeground,\n  light: editorInlayHintForeground,\n  hcDark: editorInlayHintForeground,\n  hcLight: editorInlayHintForeground\n}, nls.localize('editorInlayHintForegroundParameter', 'Foreground color of inline hints for parameters'));\nexport const editorInlayHintParameterBackground = registerColor('editorInlayHint.parameterBackground', {\n  dark: editorInlayHintBackground,\n  light: editorInlayHintBackground,\n  hcDark: editorInlayHintBackground,\n  hcLight: editorInlayHintBackground\n}, nls.localize('editorInlayHintBackgroundParameter', 'Background color of inline hints for parameters'));\n/**\n * Editor lighbulb icon colors\n */\nexport const editorLightBulbForeground = registerColor('editorLightBulb.foreground', {\n  dark: '#FFCC00',\n  light: '#DDB100',\n  hcDark: '#FFCC00',\n  hcLight: '#007ACC'\n}, nls.localize('editorLightBulbForeground', \"The color used for the lightbulb actions icon.\"));\nexport const editorLightBulbAutoFixForeground = registerColor('editorLightBulbAutoFix.foreground', {\n  dark: '#75BEFF',\n  light: '#007ACC',\n  hcDark: '#75BEFF',\n  hcLight: '#007ACC'\n}, nls.localize('editorLightBulbAutoFixForeground', \"The color used for the lightbulb auto fix actions icon.\"));\n/**\n * Diff Editor Colors\n */\nexport const defaultInsertColor = new Color(new RGBA(155, 185, 85, .2));\nexport const defaultRemoveColor = new Color(new RGBA(255, 0, 0, .2));\nexport const diffInserted = registerColor('diffEditor.insertedTextBackground', {\n  dark: '#9ccc2c33',\n  light: '#9ccc2c66',\n  hcDark: null,\n  hcLight: null\n}, nls.localize('diffEditorInserted', 'Background color for text that got inserted. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const diffRemoved = registerColor('diffEditor.removedTextBackground', {\n  dark: '#ff000066',\n  light: '#ff00004d',\n  hcDark: null,\n  hcLight: null\n}, nls.localize('diffEditorRemoved', 'Background color for text that got removed. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const diffInsertedLine = registerColor('diffEditor.insertedLineBackground', {\n  dark: defaultInsertColor,\n  light: defaultInsertColor,\n  hcDark: null,\n  hcLight: null\n}, nls.localize('diffEditorInsertedLines', 'Background color for lines that got inserted. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const diffRemovedLine = registerColor('diffEditor.removedLineBackground', {\n  dark: defaultRemoveColor,\n  light: defaultRemoveColor,\n  hcDark: null,\n  hcLight: null\n}, nls.localize('diffEditorRemovedLines', 'Background color for lines that got removed. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const diffInsertedLineGutter = registerColor('diffEditorGutter.insertedLineBackground', {\n  dark: null,\n  light: null,\n  hcDark: null,\n  hcLight: null\n}, nls.localize('diffEditorInsertedLineGutter', 'Background color for the margin where lines got inserted.'));\nexport const diffRemovedLineGutter = registerColor('diffEditorGutter.removedLineBackground', {\n  dark: null,\n  light: null,\n  hcDark: null,\n  hcLight: null\n}, nls.localize('diffEditorRemovedLineGutter', 'Background color for the margin where lines got removed.'));\nexport const diffOverviewRulerInserted = registerColor('diffEditorOverview.insertedForeground', {\n  dark: null,\n  light: null,\n  hcDark: null,\n  hcLight: null\n}, nls.localize('diffEditorOverviewInserted', 'Diff overview ruler foreground for inserted content.'));\nexport const diffOverviewRulerRemoved = registerColor('diffEditorOverview.removedForeground', {\n  dark: null,\n  light: null,\n  hcDark: null,\n  hcLight: null\n}, nls.localize('diffEditorOverviewRemoved', 'Diff overview ruler foreground for removed content.'));\nexport const diffInsertedOutline = registerColor('diffEditor.insertedTextBorder', {\n  dark: null,\n  light: null,\n  hcDark: '#33ff2eff',\n  hcLight: '#374E06'\n}, nls.localize('diffEditorInsertedOutline', 'Outline color for the text that got inserted.'));\nexport const diffRemovedOutline = registerColor('diffEditor.removedTextBorder', {\n  dark: null,\n  light: null,\n  hcDark: '#FF008F',\n  hcLight: '#AD0707'\n}, nls.localize('diffEditorRemovedOutline', 'Outline color for text that got removed.'));\nexport const diffBorder = registerColor('diffEditor.border', {\n  dark: null,\n  light: null,\n  hcDark: contrastBorder,\n  hcLight: contrastBorder\n}, nls.localize('diffEditorBorder', 'Border color between the two text editors.'));\nexport const diffDiagonalFill = registerColor('diffEditor.diagonalFill', {\n  dark: '#cccccc33',\n  light: '#22222233',\n  hcDark: null,\n  hcLight: null\n}, nls.localize('diffDiagonalFill', \"Color of the diff editor's diagonal fill. The diagonal fill is used in side-by-side diff views.\"));\n/**\n * List and tree colors\n */\nexport const listFocusBackground = registerColor('list.focusBackground', {\n  dark: null,\n  light: null,\n  hcDark: null,\n  hcLight: null\n}, nls.localize('listFocusBackground', \"List/Tree background color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listFocusForeground = registerColor('list.focusForeground', {\n  dark: null,\n  light: null,\n  hcDark: null,\n  hcLight: null\n}, nls.localize('listFocusForeground', \"List/Tree foreground color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listFocusOutline = registerColor('list.focusOutline', {\n  dark: focusBorder,\n  light: focusBorder,\n  hcDark: activeContrastBorder,\n  hcLight: activeContrastBorder\n}, nls.localize('listFocusOutline', \"List/Tree outline color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listFocusAndSelectionOutline = registerColor('list.focusAndSelectionOutline', {\n  dark: null,\n  light: null,\n  hcDark: null,\n  hcLight: null\n}, nls.localize('listFocusAndSelectionOutline', \"List/Tree outline color for the focused item when the list/tree is active and selected. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listActiveSelectionBackground = registerColor('list.activeSelectionBackground', {\n  dark: '#04395E',\n  light: '#0060C0',\n  hcDark: null,\n  hcLight: Color.fromHex('#0F4A85').transparent(0.1)\n}, nls.localize('listActiveSelectionBackground', \"List/Tree background color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listActiveSelectionForeground = registerColor('list.activeSelectionForeground', {\n  dark: Color.white,\n  light: Color.white,\n  hcDark: null,\n  hcLight: null\n}, nls.localize('listActiveSelectionForeground', \"List/Tree foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listActiveSelectionIconForeground = registerColor('list.activeSelectionIconForeground', {\n  dark: null,\n  light: null,\n  hcDark: null,\n  hcLight: null\n}, nls.localize('listActiveSelectionIconForeground', \"List/Tree icon foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveSelectionBackground = registerColor('list.inactiveSelectionBackground', {\n  dark: '#37373D',\n  light: '#E4E6F1',\n  hcDark: null,\n  hcLight: Color.fromHex('#0F4A85').transparent(0.1)\n}, nls.localize('listInactiveSelectionBackground', \"List/Tree background color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveSelectionForeground = registerColor('list.inactiveSelectionForeground', {\n  dark: null,\n  light: null,\n  hcDark: null,\n  hcLight: null\n}, nls.localize('listInactiveSelectionForeground', \"List/Tree foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveSelectionIconForeground = registerColor('list.inactiveSelectionIconForeground', {\n  dark: null,\n  light: null,\n  hcDark: null,\n  hcLight: null\n}, nls.localize('listInactiveSelectionIconForeground', \"List/Tree icon foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveFocusBackground = registerColor('list.inactiveFocusBackground', {\n  dark: null,\n  light: null,\n  hcDark: null,\n  hcLight: null\n}, nls.localize('listInactiveFocusBackground', \"List/Tree background color for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveFocusOutline = registerColor('list.inactiveFocusOutline', {\n  dark: null,\n  light: null,\n  hcDark: null,\n  hcLight: null\n}, nls.localize('listInactiveFocusOutline', \"List/Tree outline color for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listHoverBackground = registerColor('list.hoverBackground', {\n  dark: '#2A2D2E',\n  light: '#F0F0F0',\n  hcDark: null,\n  hcLight: Color.fromHex('#0F4A85').transparent(0.1)\n}, nls.localize('listHoverBackground', \"List/Tree background when hovering over items using the mouse.\"));\nexport const listHoverForeground = registerColor('list.hoverForeground', {\n  dark: null,\n  light: null,\n  hcDark: null,\n  hcLight: null\n}, nls.localize('listHoverForeground', \"List/Tree foreground when hovering over items using the mouse.\"));\nexport const listDropBackground = registerColor('list.dropBackground', {\n  dark: '#062F4A',\n  light: '#D6EBFF',\n  hcDark: null,\n  hcLight: null\n}, nls.localize('listDropBackground', \"List/Tree drag and drop background when moving items around using the mouse.\"));\nexport const listHighlightForeground = registerColor('list.highlightForeground', {\n  dark: '#2AAAFF',\n  light: '#0066BF',\n  hcDark: focusBorder,\n  hcLight: focusBorder\n}, nls.localize('highlight', 'List/Tree foreground color of the match highlights when searching inside the list/tree.'));\nexport const listFocusHighlightForeground = registerColor('list.focusHighlightForeground', {\n  dark: listHighlightForeground,\n  light: ifDefinedThenElse(listActiveSelectionBackground, listHighlightForeground, '#BBE7FF'),\n  hcDark: listHighlightForeground,\n  hcLight: listHighlightForeground\n}, nls.localize('listFocusHighlightForeground', 'List/Tree foreground color of the match highlights on actively focused items when searching inside the list/tree.'));\nexport const listInvalidItemForeground = registerColor('list.invalidItemForeground', {\n  dark: '#B89500',\n  light: '#B89500',\n  hcDark: '#B89500',\n  hcLight: '#B5200D'\n}, nls.localize('invalidItemForeground', 'List/Tree foreground color for invalid items, for example an unresolved root in explorer.'));\nexport const listErrorForeground = registerColor('list.errorForeground', {\n  dark: '#F88070',\n  light: '#B01011',\n  hcDark: null,\n  hcLight: null\n}, nls.localize('listErrorForeground', 'Foreground color of list items containing errors.'));\nexport const listWarningForeground = registerColor('list.warningForeground', {\n  dark: '#CCA700',\n  light: '#855F00',\n  hcDark: null,\n  hcLight: null\n}, nls.localize('listWarningForeground', 'Foreground color of list items containing warnings.'));\nexport const listFilterWidgetBackground = registerColor('listFilterWidget.background', {\n  light: darken(editorWidgetBackground, 0),\n  dark: lighten(editorWidgetBackground, 0),\n  hcDark: editorWidgetBackground,\n  hcLight: editorWidgetBackground\n}, nls.localize('listFilterWidgetBackground', 'Background color of the type filter widget in lists and trees.'));\nexport const listFilterWidgetOutline = registerColor('listFilterWidget.outline', {\n  dark: Color.transparent,\n  light: Color.transparent,\n  hcDark: '#f38518',\n  hcLight: '#007ACC'\n}, nls.localize('listFilterWidgetOutline', 'Outline color of the type filter widget in lists and trees.'));\nexport const listFilterWidgetNoMatchesOutline = registerColor('listFilterWidget.noMatchesOutline', {\n  dark: '#BE1100',\n  light: '#BE1100',\n  hcDark: contrastBorder,\n  hcLight: contrastBorder\n}, nls.localize('listFilterWidgetNoMatchesOutline', 'Outline color of the type filter widget in lists and trees, when there are no matches.'));\nexport const listFilterWidgetShadow = registerColor('listFilterWidget.shadow', {\n  dark: widgetShadow,\n  light: widgetShadow,\n  hcDark: widgetShadow,\n  hcLight: widgetShadow\n}, nls.localize('listFilterWidgetShadow', 'Shadown color of the type filter widget in lists and trees.'));\nexport const listFilterMatchHighlight = registerColor('list.filterMatchBackground', {\n  dark: editorFindMatchHighlight,\n  light: editorFindMatchHighlight,\n  hcDark: null,\n  hcLight: null\n}, nls.localize('listFilterMatchHighlight', 'Background color of the filtered match.'));\nexport const listFilterMatchHighlightBorder = registerColor('list.filterMatchBorder', {\n  dark: editorFindMatchHighlightBorder,\n  light: editorFindMatchHighlightBorder,\n  hcDark: contrastBorder,\n  hcLight: activeContrastBorder\n}, nls.localize('listFilterMatchHighlightBorder', 'Border color of the filtered match.'));\nexport const treeIndentGuidesStroke = registerColor('tree.indentGuidesStroke', {\n  dark: '#585858',\n  light: '#a9a9a9',\n  hcDark: '#a9a9a9',\n  hcLight: '#a5a5a5'\n}, nls.localize('treeIndentGuidesStroke', \"Tree stroke color for the indentation guides.\"));\nexport const tableColumnsBorder = registerColor('tree.tableColumnsBorder', {\n  dark: '#CCCCCC20',\n  light: '#61616120',\n  hcDark: null,\n  hcLight: null\n}, nls.localize('tableColumnsBorder', \"Table border color between columns.\"));\nexport const tableOddRowsBackgroundColor = registerColor('tree.tableOddRowsBackground', {\n  dark: transparent(foreground, 0.04),\n  light: transparent(foreground, 0.04),\n  hcDark: null,\n  hcLight: null\n}, nls.localize('tableOddRowsBackgroundColor', \"Background color for odd table rows.\"));\nexport const listDeemphasizedForeground = registerColor('list.deemphasizedForeground', {\n  dark: '#8C8C8C',\n  light: '#8E8E90',\n  hcDark: '#A7A8A9',\n  hcLight: '#666666'\n}, nls.localize('listDeemphasizedForeground', \"List/Tree foreground color for items that are deemphasized. \"));\n/**\n * Quick pick widget (dependent on List and tree colors)\n */\nexport const _deprecatedQuickInputListFocusBackground = registerColor('quickInput.list.focusBackground', {\n  dark: null,\n  light: null,\n  hcDark: null,\n  hcLight: null\n}, '', undefined, nls.localize('quickInput.list.focusBackground deprecation', \"Please use quickInputList.focusBackground instead\"));\nexport const quickInputListFocusForeground = registerColor('quickInputList.focusForeground', {\n  dark: listActiveSelectionForeground,\n  light: listActiveSelectionForeground,\n  hcDark: listActiveSelectionForeground,\n  hcLight: listActiveSelectionForeground\n}, nls.localize('quickInput.listFocusForeground', \"Quick picker foreground color for the focused item.\"));\nexport const quickInputListFocusIconForeground = registerColor('quickInputList.focusIconForeground', {\n  dark: listActiveSelectionIconForeground,\n  light: listActiveSelectionIconForeground,\n  hcDark: listActiveSelectionIconForeground,\n  hcLight: listActiveSelectionIconForeground\n}, nls.localize('quickInput.listFocusIconForeground', \"Quick picker icon foreground color for the focused item.\"));\nexport const quickInputListFocusBackground = registerColor('quickInputList.focusBackground', {\n  dark: oneOf(_deprecatedQuickInputListFocusBackground, listActiveSelectionBackground),\n  light: oneOf(_deprecatedQuickInputListFocusBackground, listActiveSelectionBackground),\n  hcDark: null,\n  hcLight: null\n}, nls.localize('quickInput.listFocusBackground', \"Quick picker background color for the focused item.\"));\n/**\n * Menu colors\n */\nexport const menuBorder = registerColor('menu.border', {\n  dark: null,\n  light: null,\n  hcDark: contrastBorder,\n  hcLight: contrastBorder\n}, nls.localize('menuBorder', \"Border color of menus.\"));\nexport const menuForeground = registerColor('menu.foreground', {\n  dark: selectForeground,\n  light: foreground,\n  hcDark: selectForeground,\n  hcLight: selectForeground\n}, nls.localize('menuForeground', \"Foreground color of menu items.\"));\nexport const menuBackground = registerColor('menu.background', {\n  dark: selectBackground,\n  light: selectBackground,\n  hcDark: selectBackground,\n  hcLight: selectBackground\n}, nls.localize('menuBackground', \"Background color of menu items.\"));\nexport const menuSelectionForeground = registerColor('menu.selectionForeground', {\n  dark: listActiveSelectionForeground,\n  light: listActiveSelectionForeground,\n  hcDark: listActiveSelectionForeground,\n  hcLight: listActiveSelectionForeground\n}, nls.localize('menuSelectionForeground', \"Foreground color of the selected menu item in menus.\"));\nexport const menuSelectionBackground = registerColor('menu.selectionBackground', {\n  dark: listActiveSelectionBackground,\n  light: listActiveSelectionBackground,\n  hcDark: listActiveSelectionBackground,\n  hcLight: listActiveSelectionBackground\n}, nls.localize('menuSelectionBackground', \"Background color of the selected menu item in menus.\"));\nexport const menuSelectionBorder = registerColor('menu.selectionBorder', {\n  dark: null,\n  light: null,\n  hcDark: activeContrastBorder,\n  hcLight: activeContrastBorder\n}, nls.localize('menuSelectionBorder', \"Border color of the selected menu item in menus.\"));\nexport const menuSeparatorBackground = registerColor('menu.separatorBackground', {\n  dark: '#606060',\n  light: '#D4D4D4',\n  hcDark: contrastBorder,\n  hcLight: contrastBorder\n}, nls.localize('menuSeparatorBackground', \"Color of a separator menu item in menus.\"));\n/**\n * Toolbar colors\n */\nexport const toolbarHoverBackground = registerColor('toolbar.hoverBackground', {\n  dark: '#5a5d5e50',\n  light: '#b8b8b850',\n  hcDark: null,\n  hcLight: null\n}, nls.localize('toolbarHoverBackground', \"Toolbar background when hovering over actions using the mouse\"));\nexport const toolbarHoverOutline = registerColor('toolbar.hoverOutline', {\n  dark: null,\n  light: null,\n  hcDark: activeContrastBorder,\n  hcLight: activeContrastBorder\n}, nls.localize('toolbarHoverOutline', \"Toolbar outline when hovering over actions using the mouse\"));\nexport const toolbarActiveBackground = registerColor('toolbar.activeBackground', {\n  dark: lighten(toolbarHoverBackground, 0.1),\n  light: darken(toolbarHoverBackground, 0.1),\n  hcDark: null,\n  hcLight: null\n}, nls.localize('toolbarActiveBackground', \"Toolbar background when holding the mouse over actions\"));\n/**\n * Snippet placeholder colors\n */\nexport const snippetTabstopHighlightBackground = registerColor('editor.snippetTabstopHighlightBackground', {\n  dark: new Color(new RGBA(124, 124, 124, 0.3)),\n  light: new Color(new RGBA(10, 50, 100, 0.2)),\n  hcDark: new Color(new RGBA(124, 124, 124, 0.3)),\n  hcLight: new Color(new RGBA(10, 50, 100, 0.2))\n}, nls.localize('snippetTabstopHighlightBackground', \"Highlight background color of a snippet tabstop.\"));\nexport const snippetTabstopHighlightBorder = registerColor('editor.snippetTabstopHighlightBorder', {\n  dark: null,\n  light: null,\n  hcDark: null,\n  hcLight: null\n}, nls.localize('snippetTabstopHighlightBorder', \"Highlight border color of a snippet tabstop.\"));\nexport const snippetFinalTabstopHighlightBackground = registerColor('editor.snippetFinalTabstopHighlightBackground', {\n  dark: null,\n  light: null,\n  hcDark: null,\n  hcLight: null\n}, nls.localize('snippetFinalTabstopHighlightBackground', \"Highlight background color of the final tabstop of a snippet.\"));\nexport const snippetFinalTabstopHighlightBorder = registerColor('editor.snippetFinalTabstopHighlightBorder', {\n  dark: '#525252',\n  light: new Color(new RGBA(10, 50, 100, 0.5)),\n  hcDark: '#525252',\n  hcLight: '#292929'\n}, nls.localize('snippetFinalTabstopHighlightBorder', \"Highlight border color of the final tabstop of a snippet.\"));\n/**\n * Breadcrumb colors\n */\nexport const breadcrumbsForeground = registerColor('breadcrumb.foreground', {\n  light: transparent(foreground, 0.8),\n  dark: transparent(foreground, 0.8),\n  hcDark: transparent(foreground, 0.8),\n  hcLight: transparent(foreground, 0.8)\n}, nls.localize('breadcrumbsFocusForeground', \"Color of focused breadcrumb items.\"));\nexport const breadcrumbsBackground = registerColor('breadcrumb.background', {\n  light: editorBackground,\n  dark: editorBackground,\n  hcDark: editorBackground,\n  hcLight: editorBackground\n}, nls.localize('breadcrumbsBackground', \"Background color of breadcrumb items.\"));\nexport const breadcrumbsFocusForeground = registerColor('breadcrumb.focusForeground', {\n  light: darken(foreground, 0.2),\n  dark: lighten(foreground, 0.1),\n  hcDark: lighten(foreground, 0.1),\n  hcLight: lighten(foreground, 0.1)\n}, nls.localize('breadcrumbsFocusForeground', \"Color of focused breadcrumb items.\"));\nexport const breadcrumbsActiveSelectionForeground = registerColor('breadcrumb.activeSelectionForeground', {\n  light: darken(foreground, 0.2),\n  dark: lighten(foreground, 0.1),\n  hcDark: lighten(foreground, 0.1),\n  hcLight: lighten(foreground, 0.1)\n}, nls.localize('breadcrumbsSelectedForeground', \"Color of selected breadcrumb items.\"));\nexport const breadcrumbsPickerBackground = registerColor('breadcrumbPicker.background', {\n  light: editorWidgetBackground,\n  dark: editorWidgetBackground,\n  hcDark: editorWidgetBackground,\n  hcLight: editorWidgetBackground\n}, nls.localize('breadcrumbsSelectedBackground', \"Background color of breadcrumb item picker.\"));\n/**\n * Merge-conflict colors\n */\nconst headerTransparency = 0.5;\nconst currentBaseColor = Color.fromHex('#40C8AE').transparent(headerTransparency);\nconst incomingBaseColor = Color.fromHex('#40A6FF').transparent(headerTransparency);\nconst commonBaseColor = Color.fromHex('#606060').transparent(0.4);\nconst contentTransparency = 0.4;\nconst rulerTransparency = 1;\nexport const mergeCurrentHeaderBackground = registerColor('merge.currentHeaderBackground', {\n  dark: currentBaseColor,\n  light: currentBaseColor,\n  hcDark: null,\n  hcLight: null\n}, nls.localize('mergeCurrentHeaderBackground', 'Current header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeCurrentContentBackground = registerColor('merge.currentContentBackground', {\n  dark: transparent(mergeCurrentHeaderBackground, contentTransparency),\n  light: transparent(mergeCurrentHeaderBackground, contentTransparency),\n  hcDark: transparent(mergeCurrentHeaderBackground, contentTransparency),\n  hcLight: transparent(mergeCurrentHeaderBackground, contentTransparency)\n}, nls.localize('mergeCurrentContentBackground', 'Current content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeIncomingHeaderBackground = registerColor('merge.incomingHeaderBackground', {\n  dark: incomingBaseColor,\n  light: incomingBaseColor,\n  hcDark: null,\n  hcLight: null\n}, nls.localize('mergeIncomingHeaderBackground', 'Incoming header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeIncomingContentBackground = registerColor('merge.incomingContentBackground', {\n  dark: transparent(mergeIncomingHeaderBackground, contentTransparency),\n  light: transparent(mergeIncomingHeaderBackground, contentTransparency),\n  hcDark: transparent(mergeIncomingHeaderBackground, contentTransparency),\n  hcLight: transparent(mergeIncomingHeaderBackground, contentTransparency)\n}, nls.localize('mergeIncomingContentBackground', 'Incoming content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeCommonHeaderBackground = registerColor('merge.commonHeaderBackground', {\n  dark: commonBaseColor,\n  light: commonBaseColor,\n  hcDark: null,\n  hcLight: null\n}, nls.localize('mergeCommonHeaderBackground', 'Common ancestor header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeCommonContentBackground = registerColor('merge.commonContentBackground', {\n  dark: transparent(mergeCommonHeaderBackground, contentTransparency),\n  light: transparent(mergeCommonHeaderBackground, contentTransparency),\n  hcDark: transparent(mergeCommonHeaderBackground, contentTransparency),\n  hcLight: transparent(mergeCommonHeaderBackground, contentTransparency)\n}, nls.localize('mergeCommonContentBackground', 'Common ancestor content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeBorder = registerColor('merge.border', {\n  dark: null,\n  light: null,\n  hcDark: '#C3DF6F',\n  hcLight: '#007ACC'\n}, nls.localize('mergeBorder', 'Border color on headers and the splitter in inline merge-conflicts.'));\nexport const overviewRulerCurrentContentForeground = registerColor('editorOverviewRuler.currentContentForeground', {\n  dark: transparent(mergeCurrentHeaderBackground, rulerTransparency),\n  light: transparent(mergeCurrentHeaderBackground, rulerTransparency),\n  hcDark: mergeBorder,\n  hcLight: mergeBorder\n}, nls.localize('overviewRulerCurrentContentForeground', 'Current overview ruler foreground for inline merge-conflicts.'));\nexport const overviewRulerIncomingContentForeground = registerColor('editorOverviewRuler.incomingContentForeground', {\n  dark: transparent(mergeIncomingHeaderBackground, rulerTransparency),\n  light: transparent(mergeIncomingHeaderBackground, rulerTransparency),\n  hcDark: mergeBorder,\n  hcLight: mergeBorder\n}, nls.localize('overviewRulerIncomingContentForeground', 'Incoming overview ruler foreground for inline merge-conflicts.'));\nexport const overviewRulerCommonContentForeground = registerColor('editorOverviewRuler.commonContentForeground', {\n  dark: transparent(mergeCommonHeaderBackground, rulerTransparency),\n  light: transparent(mergeCommonHeaderBackground, rulerTransparency),\n  hcDark: mergeBorder,\n  hcLight: mergeBorder\n}, nls.localize('overviewRulerCommonContentForeground', 'Common ancestor overview ruler foreground for inline merge-conflicts.'));\nexport const overviewRulerFindMatchForeground = registerColor('editorOverviewRuler.findMatchForeground', {\n  dark: '#d186167e',\n  light: '#d186167e',\n  hcDark: '#AB5A00',\n  hcLight: ''\n}, nls.localize('overviewRulerFindMatchForeground', 'Overview ruler marker color for find matches. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const overviewRulerSelectionHighlightForeground = registerColor('editorOverviewRuler.selectionHighlightForeground', {\n  dark: '#A0A0A0CC',\n  light: '#A0A0A0CC',\n  hcDark: '#A0A0A0CC',\n  hcLight: '#A0A0A0CC'\n}, nls.localize('overviewRulerSelectionHighlightForeground', 'Overview ruler marker color for selection highlights. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const minimapFindMatch = registerColor('minimap.findMatchHighlight', {\n  light: '#d18616',\n  dark: '#d18616',\n  hcDark: '#AB5A00',\n  hcLight: '#0F4A85'\n}, nls.localize('minimapFindMatchHighlight', 'Minimap marker color for find matches.'), true);\nexport const minimapSelectionOccurrenceHighlight = registerColor('minimap.selectionOccurrenceHighlight', {\n  light: '#c9c9c9',\n  dark: '#676767',\n  hcDark: '#ffffff',\n  hcLight: '#0F4A85'\n}, nls.localize('minimapSelectionOccurrenceHighlight', 'Minimap marker color for repeating editor selections.'), true);\nexport const minimapSelection = registerColor('minimap.selectionHighlight', {\n  light: '#ADD6FF',\n  dark: '#264F78',\n  hcDark: '#ffffff',\n  hcLight: '#0F4A85'\n}, nls.localize('minimapSelectionHighlight', 'Minimap marker color for the editor selection.'), true);\nexport const minimapError = registerColor('minimap.errorHighlight', {\n  dark: new Color(new RGBA(255, 18, 18, 0.7)),\n  light: new Color(new RGBA(255, 18, 18, 0.7)),\n  hcDark: new Color(new RGBA(255, 50, 50, 1)),\n  hcLight: '#B5200D'\n}, nls.localize('minimapError', 'Minimap marker color for errors.'));\nexport const minimapWarning = registerColor('minimap.warningHighlight', {\n  dark: editorWarningForeground,\n  light: editorWarningForeground,\n  hcDark: editorWarningBorder,\n  hcLight: editorWarningBorder\n}, nls.localize('overviewRuleWarning', 'Minimap marker color for warnings.'));\nexport const minimapBackground = registerColor('minimap.background', {\n  dark: null,\n  light: null,\n  hcDark: null,\n  hcLight: null\n}, nls.localize('minimapBackground', \"Minimap background color.\"));\nexport const minimapForegroundOpacity = registerColor('minimap.foregroundOpacity', {\n  dark: Color.fromHex('#000f'),\n  light: Color.fromHex('#000f'),\n  hcDark: Color.fromHex('#000f'),\n  hcLight: Color.fromHex('#000f')\n}, nls.localize('minimapForegroundOpacity', 'Opacity of foreground elements rendered in the minimap. For example, \"#000000c0\" will render the elements with 75% opacity.'));\nexport const minimapSliderBackground = registerColor('minimapSlider.background', {\n  light: transparent(scrollbarSliderBackground, 0.5),\n  dark: transparent(scrollbarSliderBackground, 0.5),\n  hcDark: transparent(scrollbarSliderBackground, 0.5),\n  hcLight: transparent(scrollbarSliderBackground, 0.5)\n}, nls.localize('minimapSliderBackground', \"Minimap slider background color.\"));\nexport const minimapSliderHoverBackground = registerColor('minimapSlider.hoverBackground', {\n  light: transparent(scrollbarSliderHoverBackground, 0.5),\n  dark: transparent(scrollbarSliderHoverBackground, 0.5),\n  hcDark: transparent(scrollbarSliderHoverBackground, 0.5),\n  hcLight: transparent(scrollbarSliderHoverBackground, 0.5)\n}, nls.localize('minimapSliderHoverBackground', \"Minimap slider background color when hovering.\"));\nexport const minimapSliderActiveBackground = registerColor('minimapSlider.activeBackground', {\n  light: transparent(scrollbarSliderActiveBackground, 0.5),\n  dark: transparent(scrollbarSliderActiveBackground, 0.5),\n  hcDark: transparent(scrollbarSliderActiveBackground, 0.5),\n  hcLight: transparent(scrollbarSliderActiveBackground, 0.5)\n}, nls.localize('minimapSliderActiveBackground', \"Minimap slider background color when clicked on.\"));\nexport const problemsErrorIconForeground = registerColor('problemsErrorIcon.foreground', {\n  dark: editorErrorForeground,\n  light: editorErrorForeground,\n  hcDark: editorErrorForeground,\n  hcLight: editorErrorForeground\n}, nls.localize('problemsErrorIconForeground', \"The color used for the problems error icon.\"));\nexport const problemsWarningIconForeground = registerColor('problemsWarningIcon.foreground', {\n  dark: editorWarningForeground,\n  light: editorWarningForeground,\n  hcDark: editorWarningForeground,\n  hcLight: editorWarningForeground\n}, nls.localize('problemsWarningIconForeground', \"The color used for the problems warning icon.\"));\nexport const problemsInfoIconForeground = registerColor('problemsInfoIcon.foreground', {\n  dark: editorInfoForeground,\n  light: editorInfoForeground,\n  hcDark: editorInfoForeground,\n  hcLight: editorInfoForeground\n}, nls.localize('problemsInfoIconForeground', \"The color used for the problems info icon.\"));\n/**\n * Chart colors\n */\nexport const chartsForeground = registerColor('charts.foreground', {\n  dark: foreground,\n  light: foreground,\n  hcDark: foreground,\n  hcLight: foreground\n}, nls.localize('chartsForeground', \"The foreground color used in charts.\"));\nexport const chartsLines = registerColor('charts.lines', {\n  dark: transparent(foreground, .5),\n  light: transparent(foreground, .5),\n  hcDark: transparent(foreground, .5),\n  hcLight: transparent(foreground, .5)\n}, nls.localize('chartsLines', \"The color used for horizontal lines in charts.\"));\nexport const chartsRed = registerColor('charts.red', {\n  dark: editorErrorForeground,\n  light: editorErrorForeground,\n  hcDark: editorErrorForeground,\n  hcLight: editorErrorForeground\n}, nls.localize('chartsRed', \"The red color used in chart visualizations.\"));\nexport const chartsBlue = registerColor('charts.blue', {\n  dark: editorInfoForeground,\n  light: editorInfoForeground,\n  hcDark: editorInfoForeground,\n  hcLight: editorInfoForeground\n}, nls.localize('chartsBlue', \"The blue color used in chart visualizations.\"));\nexport const chartsYellow = registerColor('charts.yellow', {\n  dark: editorWarningForeground,\n  light: editorWarningForeground,\n  hcDark: editorWarningForeground,\n  hcLight: editorWarningForeground\n}, nls.localize('chartsYellow', \"The yellow color used in chart visualizations.\"));\nexport const chartsOrange = registerColor('charts.orange', {\n  dark: minimapFindMatch,\n  light: minimapFindMatch,\n  hcDark: minimapFindMatch,\n  hcLight: minimapFindMatch\n}, nls.localize('chartsOrange', \"The orange color used in chart visualizations.\"));\nexport const chartsGreen = registerColor('charts.green', {\n  dark: '#89D185',\n  light: '#388A34',\n  hcDark: '#89D185',\n  hcLight: '#374e06'\n}, nls.localize('chartsGreen', \"The green color used in chart visualizations.\"));\nexport const chartsPurple = registerColor('charts.purple', {\n  dark: '#B180D7',\n  light: '#652D90',\n  hcDark: '#B180D7',\n  hcLight: '#652D90'\n}, nls.localize('chartsPurple', \"The purple color used in chart visualizations.\"));\n// ----- color functions\nexport function executeTransform(transform, theme) {\n  var _a, _b, _c;\n  switch (transform.op) {\n    case 0 /* ColorTransformType.Darken */:\n      return (_a = resolveColorValue(transform.value, theme)) === null || _a === void 0 ? void 0 : _a.darken(transform.factor);\n    case 1 /* ColorTransformType.Lighten */:\n      return (_b = resolveColorValue(transform.value, theme)) === null || _b === void 0 ? void 0 : _b.lighten(transform.factor);\n    case 2 /* ColorTransformType.Transparent */:\n      return (_c = resolveColorValue(transform.value, theme)) === null || _c === void 0 ? void 0 : _c.transparent(transform.factor);\n    case 3 /* ColorTransformType.OneOf */:\n      for (const candidate of transform.values) {\n        const color = resolveColorValue(candidate, theme);\n        if (color) {\n          return color;\n        }\n      }\n      return undefined;\n    case 5 /* ColorTransformType.IfDefinedThenElse */:\n      return resolveColorValue(theme.defines(transform.if) ? transform.then : transform.else, theme);\n    case 4 /* ColorTransformType.LessProminent */:\n      {\n        const from = resolveColorValue(transform.value, theme);\n        if (!from) {\n          return undefined;\n        }\n        const backgroundColor = resolveColorValue(transform.background, theme);\n        if (!backgroundColor) {\n          return from.transparent(transform.factor * transform.transparency);\n        }\n        return from.isDarkerThan(backgroundColor) ? Color.getLighterColor(from, backgroundColor, transform.factor).transparent(transform.transparency) : Color.getDarkerColor(from, backgroundColor, transform.factor).transparent(transform.transparency);\n      }\n    default:\n      throw assertNever(transform);\n  }\n}\nexport function darken(colorValue, factor) {\n  return {\n    op: 0 /* ColorTransformType.Darken */,\n    value: colorValue,\n    factor\n  };\n}\nexport function lighten(colorValue, factor) {\n  return {\n    op: 1 /* ColorTransformType.Lighten */,\n    value: colorValue,\n    factor\n  };\n}\nexport function transparent(colorValue, factor) {\n  return {\n    op: 2 /* ColorTransformType.Transparent */,\n    value: colorValue,\n    factor\n  };\n}\nexport function oneOf() {\n  for (var _len = arguments.length, colorValues = new Array(_len), _key = 0; _key < _len; _key++) {\n    colorValues[_key] = arguments[_key];\n  }\n  return {\n    op: 3 /* ColorTransformType.OneOf */,\n    values: colorValues\n  };\n}\nexport function ifDefinedThenElse(ifArg, thenArg, elseArg) {\n  return {\n    op: 5 /* ColorTransformType.IfDefinedThenElse */,\n    if: ifArg,\n    then: thenArg,\n    else: elseArg\n  };\n}\nfunction lessProminent(colorValue, backgroundColorValue, factor, transparency) {\n  return {\n    op: 4 /* ColorTransformType.LessProminent */,\n    value: colorValue,\n    background: backgroundColorValue,\n    factor,\n    transparency\n  };\n}\n// ----- implementation\n/**\n * @param colorValue Resolve a color value in the context of a theme\n */\nexport function resolveColorValue(colorValue, theme) {\n  if (colorValue === null) {\n    return undefined;\n  } else if (typeof colorValue === 'string') {\n    if (colorValue[0] === '#') {\n      return Color.fromHex(colorValue);\n    }\n    return theme.getColor(colorValue);\n  } else if (colorValue instanceof Color) {\n    return colorValue;\n  } else if (typeof colorValue === 'object') {\n    return executeTransform(colorValue, theme);\n  }\n  return undefined;\n}\nexport const workbenchColorsSchemaId = 'vscode://schemas/workbench-colors';\nconst schemaRegistry = platform.Registry.as(JSONExtensions.JSONContribution);\nschemaRegistry.registerSchema(workbenchColorsSchemaId, colorRegistry.getColorSchema());\nconst delayer = new RunOnceScheduler(() => schemaRegistry.notifySchemaChanged(workbenchColorsSchemaId), 200);\ncolorRegistry.onDidChangeSchema(() => {\n  if (!delayer.isScheduled()) {\n    delayer.schedule();\n  }\n});\n// setTimeout(_ => console.log(colorRegistry.toString()), 5000);","map":{"version":3,"names":["RunOnceScheduler","Color","RGBA","Emitter","assertNever","nls","Extensions","JSONExtensions","platform","asCssVariableName","colorIdent","replace","ColorContribution","ColorRegistry","constructor","_onDidChangeSchema","onDidChangeSchema","event","colorSchema","type","properties","colorReferenceSchema","enum","enumDescriptions","colorsById","registerColor","id","defaults","description","needsTransparency","deprecationMessage","colorContribution","propertySchema","format","defaultSnippets","body","push","fire","getColors","Object","keys","map","resolveDefaultColor","theme","colorDesc","colorValue","resolveColorValue","undefined","getColorSchema","toString","sorter","a","b","cat1","indexOf","cat2","localeCompare","sort","k","join","colorRegistry","Registry","add","migrateColorDefaults","o","hcLight","hcDark","light","foreground","dark","localize","disabledForeground","errorForeground","descriptionForeground","transparent","iconForeground","focusBorder","contrastBorder","activeContrastBorder","selectionBackground","textSeparatorForeground","black","textLinkForeground","textLinkActiveForeground","textPreformatForeground","textBlockQuoteBackground","textBlockQuoteBorder","white","textCodeBlockBackground","widgetShadow","inputBackground","inputForeground","inputBorder","inputActiveOptionBorder","inputActiveOptionHoverBackground","inputActiveOptionBackground","inputActiveOptionForeground","inputPlaceholderForeground","inputValidationInfoBackground","inputValidationInfoForeground","inputValidationInfoBorder","inputValidationWarningBackground","inputValidationWarningForeground","inputValidationWarningBorder","inputValidationErrorBackground","inputValidationErrorForeground","inputValidationErrorBorder","selectBackground","selectListBackground","selectForeground","selectBorder","checkboxBackground","checkboxForeground","checkboxBorder","buttonForeground","buttonSeparator","buttonBackground","buttonHoverBackground","lighten","darken","buttonBorder","buttonSecondaryForeground","buttonSecondaryBackground","buttonSecondaryHoverBackground","badgeBackground","badgeForeground","scrollbarShadow","scrollbarSliderBackground","fromHex","scrollbarSliderHoverBackground","scrollbarSliderActiveBackground","progressBarBackground","editorErrorBackground","editorErrorForeground","editorErrorBorder","editorWarningBackground","editorWarningForeground","editorWarningBorder","editorInfoBackground","editorInfoForeground","editorInfoBorder","editorHintForeground","editorHintBorder","sashHoverBorder","editorBackground","editorForeground","editorStickyScrollBackground","editorStickyScrollHoverBackground","editorWidgetBackground","editorWidgetForeground","editorWidgetBorder","editorWidgetResizeBorder","quickInputBackground","quickInputForeground","quickInputTitleBackground","pickerGroupForeground","pickerGroupBorder","keybindingLabelBackground","keybindingLabelForeground","keybindingLabelBorder","keybindingLabelBottomBorder","editorSelectionBackground","editorSelectionForeground","editorInactiveSelection","editorSelectionHighlight","lessProminent","editorSelectionHighlightBorder","editorFindMatch","editorFindMatchHighlight","editorFindRangeHighlight","editorFindMatchBorder","editorFindMatchHighlightBorder","editorFindRangeHighlightBorder","searchEditorFindMatch","searchEditorFindMatchBorder","editorHoverHighlight","editorHoverBackground","editorHoverForeground","editorHoverBorder","editorHoverStatusBarBackground","editorActiveLinkForeground","blue","cyan","editorInlayHintForeground","editorInlayHintBackground","editorInlayHintTypeForeground","editorInlayHintTypeBackground","editorInlayHintParameterForeground","editorInlayHintParameterBackground","editorLightBulbForeground","editorLightBulbAutoFixForeground","defaultInsertColor","defaultRemoveColor","diffInserted","diffRemoved","diffInsertedLine","diffRemovedLine","diffInsertedLineGutter","diffRemovedLineGutter","diffOverviewRulerInserted","diffOverviewRulerRemoved","diffInsertedOutline","diffRemovedOutline","diffBorder","diffDiagonalFill","listFocusBackground","listFocusForeground","listFocusOutline","listFocusAndSelectionOutline","listActiveSelectionBackground","listActiveSelectionForeground","listActiveSelectionIconForeground","listInactiveSelectionBackground","listInactiveSelectionForeground","listInactiveSelectionIconForeground","listInactiveFocusBackground","listInactiveFocusOutline","listHoverBackground","listHoverForeground","listDropBackground","listHighlightForeground","listFocusHighlightForeground","ifDefinedThenElse","listInvalidItemForeground","listErrorForeground","listWarningForeground","listFilterWidgetBackground","listFilterWidgetOutline","listFilterWidgetNoMatchesOutline","listFilterWidgetShadow","listFilterMatchHighlight","listFilterMatchHighlightBorder","treeIndentGuidesStroke","tableColumnsBorder","tableOddRowsBackgroundColor","listDeemphasizedForeground","_deprecatedQuickInputListFocusBackground","quickInputListFocusForeground","quickInputListFocusIconForeground","quickInputListFocusBackground","oneOf","menuBorder","menuForeground","menuBackground","menuSelectionForeground","menuSelectionBackground","menuSelectionBorder","menuSeparatorBackground","toolbarHoverBackground","toolbarHoverOutline","toolbarActiveBackground","snippetTabstopHighlightBackground","snippetTabstopHighlightBorder","snippetFinalTabstopHighlightBackground","snippetFinalTabstopHighlightBorder","breadcrumbsForeground","breadcrumbsBackground","breadcrumbsFocusForeground","breadcrumbsActiveSelectionForeground","breadcrumbsPickerBackground","headerTransparency","currentBaseColor","incomingBaseColor","commonBaseColor","contentTransparency","rulerTransparency","mergeCurrentHeaderBackground","mergeCurrentContentBackground","mergeIncomingHeaderBackground","mergeIncomingContentBackground","mergeCommonHeaderBackground","mergeCommonContentBackground","mergeBorder","overviewRulerCurrentContentForeground","overviewRulerIncomingContentForeground","overviewRulerCommonContentForeground","overviewRulerFindMatchForeground","overviewRulerSelectionHighlightForeground","minimapFindMatch","minimapSelectionOccurrenceHighlight","minimapSelection","minimapError","minimapWarning","minimapBackground","minimapForegroundOpacity","minimapSliderBackground","minimapSliderHoverBackground","minimapSliderActiveBackground","problemsErrorIconForeground","problemsWarningIconForeground","problemsInfoIconForeground","chartsForeground","chartsLines","chartsRed","chartsBlue","chartsYellow","chartsOrange","chartsGreen","chartsPurple","executeTransform","transform","_a","_b","_c","op","value","factor","candidate","values","color","defines","if","then","else","from","backgroundColor","background","transparency","isDarkerThan","getLighterColor","getDarkerColor","colorValues","ifArg","thenArg","elseArg","backgroundColorValue","getColor","workbenchColorsSchemaId","schemaRegistry","as","JSONContribution","registerSchema","delayer","notifySchemaChanged","isScheduled","schedule"],"sources":["/home/deathblade287/Desktop/AI-MODELS-TESTING/react-app/node_modules/monaco-editor/esm/vs/platform/theme/common/colorRegistry.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { Color, RGBA } from '../../../base/common/color.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { assertNever } from '../../../base/common/types.js';\nimport * as nls from '../../../nls.js';\nimport { Extensions as JSONExtensions } from '../../jsonschemas/common/jsonContributionRegistry.js';\nimport * as platform from '../../registry/common/platform.js';\n/**\n * Returns the css variable name for the given color identifier. Dots (`.`) are replaced with hyphens (`-`) and\n * everything is prefixed with `--vscode-`.\n *\n * @sample `editorSuggestWidget.background` is `--vscode-editorSuggestWidget-background`.\n */\nexport function asCssVariableName(colorIdent) {\n    return `--vscode-${colorIdent.replace(/\\./g, '-')}`;\n}\n// color registry\nexport const Extensions = {\n    ColorContribution: 'base.contributions.colors'\n};\nclass ColorRegistry {\n    constructor() {\n        this._onDidChangeSchema = new Emitter();\n        this.onDidChangeSchema = this._onDidChangeSchema.event;\n        this.colorSchema = { type: 'object', properties: {} };\n        this.colorReferenceSchema = { type: 'string', enum: [], enumDescriptions: [] };\n        this.colorsById = {};\n    }\n    registerColor(id, defaults, description, needsTransparency = false, deprecationMessage) {\n        const colorContribution = { id, description, defaults, needsTransparency, deprecationMessage };\n        this.colorsById[id] = colorContribution;\n        const propertySchema = { type: 'string', description, format: 'color-hex', defaultSnippets: [{ body: '${1:#ff0000}' }] };\n        if (deprecationMessage) {\n            propertySchema.deprecationMessage = deprecationMessage;\n        }\n        this.colorSchema.properties[id] = propertySchema;\n        this.colorReferenceSchema.enum.push(id);\n        this.colorReferenceSchema.enumDescriptions.push(description);\n        this._onDidChangeSchema.fire();\n        return id;\n    }\n    getColors() {\n        return Object.keys(this.colorsById).map(id => this.colorsById[id]);\n    }\n    resolveDefaultColor(id, theme) {\n        const colorDesc = this.colorsById[id];\n        if (colorDesc && colorDesc.defaults) {\n            const colorValue = colorDesc.defaults[theme.type];\n            return resolveColorValue(colorValue, theme);\n        }\n        return undefined;\n    }\n    getColorSchema() {\n        return this.colorSchema;\n    }\n    toString() {\n        const sorter = (a, b) => {\n            const cat1 = a.indexOf('.') === -1 ? 0 : 1;\n            const cat2 = b.indexOf('.') === -1 ? 0 : 1;\n            if (cat1 !== cat2) {\n                return cat1 - cat2;\n            }\n            return a.localeCompare(b);\n        };\n        return Object.keys(this.colorsById).sort(sorter).map(k => `- \\`${k}\\`: ${this.colorsById[k].description}`).join('\\n');\n    }\n}\nconst colorRegistry = new ColorRegistry();\nplatform.Registry.add(Extensions.ColorContribution, colorRegistry);\nfunction migrateColorDefaults(o) {\n    if (o === null) {\n        return o;\n    }\n    if (typeof o.hcLight === 'undefined') {\n        if (o.hcDark === null || typeof o.hcDark === 'string') {\n            o.hcLight = o.hcDark;\n        }\n        else {\n            o.hcLight = o.light;\n        }\n    }\n    return o;\n}\nexport function registerColor(id, defaults, description, needsTransparency, deprecationMessage) {\n    return colorRegistry.registerColor(id, migrateColorDefaults(defaults), description, needsTransparency, deprecationMessage);\n}\n// ----- base colors\nexport const foreground = registerColor('foreground', { dark: '#CCCCCC', light: '#616161', hcDark: '#FFFFFF', hcLight: '#292929' }, nls.localize('foreground', \"Overall foreground color. This color is only used if not overridden by a component.\"));\nexport const disabledForeground = registerColor('disabledForeground', { dark: '#CCCCCC80', light: '#61616180', hcDark: '#A5A5A5', hcLight: '#7F7F7F' }, nls.localize('disabledForeground', \"Overall foreground for disabled elements. This color is only used if not overridden by a component.\"));\nexport const errorForeground = registerColor('errorForeground', { dark: '#F48771', light: '#A1260D', hcDark: '#F48771', hcLight: '#B5200D' }, nls.localize('errorForeground', \"Overall foreground color for error messages. This color is only used if not overridden by a component.\"));\nexport const descriptionForeground = registerColor('descriptionForeground', { light: '#717171', dark: transparent(foreground, 0.7), hcDark: transparent(foreground, 0.7), hcLight: transparent(foreground, 0.7) }, nls.localize('descriptionForeground', \"Foreground color for description text providing additional information, for example for a label.\"));\nexport const iconForeground = registerColor('icon.foreground', { dark: '#C5C5C5', light: '#424242', hcDark: '#FFFFFF', hcLight: '#292929' }, nls.localize('iconForeground', \"The default color for icons in the workbench.\"));\nexport const focusBorder = registerColor('focusBorder', { dark: '#007FD4', light: '#0090F1', hcDark: '#F38518', hcLight: '#0F4A85' }, nls.localize('focusBorder', \"Overall border color for focused elements. This color is only used if not overridden by a component.\"));\nexport const contrastBorder = registerColor('contrastBorder', { light: null, dark: null, hcDark: '#6FC3DF', hcLight: '#0F4A85' }, nls.localize('contrastBorder', \"An extra border around elements to separate them from others for greater contrast.\"));\nexport const activeContrastBorder = registerColor('contrastActiveBorder', { light: null, dark: null, hcDark: focusBorder, hcLight: focusBorder }, nls.localize('activeContrastBorder', \"An extra border around active elements to separate them from others for greater contrast.\"));\nexport const selectionBackground = registerColor('selection.background', { light: null, dark: null, hcDark: null, hcLight: null }, nls.localize('selectionBackground', \"The background color of text selections in the workbench (e.g. for input fields or text areas). Note that this does not apply to selections within the editor.\"));\n// ------ text colors\nexport const textSeparatorForeground = registerColor('textSeparator.foreground', { light: '#0000002e', dark: '#ffffff2e', hcDark: Color.black, hcLight: '#292929' }, nls.localize('textSeparatorForeground', \"Color for text separators.\"));\nexport const textLinkForeground = registerColor('textLink.foreground', { light: '#006AB1', dark: '#3794FF', hcDark: '#3794FF', hcLight: '#0F4A85' }, nls.localize('textLinkForeground', \"Foreground color for links in text.\"));\nexport const textLinkActiveForeground = registerColor('textLink.activeForeground', { light: '#006AB1', dark: '#3794FF', hcDark: '#3794FF', hcLight: '#0F4A85' }, nls.localize('textLinkActiveForeground', \"Foreground color for links in text when clicked on and on mouse hover.\"));\nexport const textPreformatForeground = registerColor('textPreformat.foreground', { light: '#A31515', dark: '#D7BA7D', hcDark: '#D7BA7D', hcLight: '#292929' }, nls.localize('textPreformatForeground', \"Foreground color for preformatted text segments.\"));\nexport const textBlockQuoteBackground = registerColor('textBlockQuote.background', { light: '#7f7f7f1a', dark: '#7f7f7f1a', hcDark: null, hcLight: '#F2F2F2' }, nls.localize('textBlockQuoteBackground', \"Background color for block quotes in text.\"));\nexport const textBlockQuoteBorder = registerColor('textBlockQuote.border', { light: '#007acc80', dark: '#007acc80', hcDark: Color.white, hcLight: '#292929' }, nls.localize('textBlockQuoteBorder', \"Border color for block quotes in text.\"));\nexport const textCodeBlockBackground = registerColor('textCodeBlock.background', { light: '#dcdcdc66', dark: '#0a0a0a66', hcDark: Color.black, hcLight: '#F2F2F2' }, nls.localize('textCodeBlockBackground', \"Background color for code blocks in text.\"));\n// ----- widgets\nexport const widgetShadow = registerColor('widget.shadow', { dark: transparent(Color.black, .36), light: transparent(Color.black, .16), hcDark: null, hcLight: null }, nls.localize('widgetShadow', 'Shadow color of widgets such as find/replace inside the editor.'));\nexport const inputBackground = registerColor('input.background', { dark: '#3C3C3C', light: Color.white, hcDark: Color.black, hcLight: Color.white }, nls.localize('inputBoxBackground', \"Input box background.\"));\nexport const inputForeground = registerColor('input.foreground', { dark: foreground, light: foreground, hcDark: foreground, hcLight: foreground }, nls.localize('inputBoxForeground', \"Input box foreground.\"));\nexport const inputBorder = registerColor('input.border', { dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('inputBoxBorder', \"Input box border.\"));\nexport const inputActiveOptionBorder = registerColor('inputOption.activeBorder', { dark: '#007ACC00', light: '#007ACC00', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('inputBoxActiveOptionBorder', \"Border color of activated options in input fields.\"));\nexport const inputActiveOptionHoverBackground = registerColor('inputOption.hoverBackground', { dark: '#5a5d5e80', light: '#b8b8b850', hcDark: null, hcLight: null }, nls.localize('inputOption.hoverBackground', \"Background color of activated options in input fields.\"));\nexport const inputActiveOptionBackground = registerColor('inputOption.activeBackground', { dark: transparent(focusBorder, 0.4), light: transparent(focusBorder, 0.2), hcDark: Color.transparent, hcLight: Color.transparent }, nls.localize('inputOption.activeBackground', \"Background hover color of options in input fields.\"));\nexport const inputActiveOptionForeground = registerColor('inputOption.activeForeground', { dark: Color.white, light: Color.black, hcDark: null, hcLight: foreground }, nls.localize('inputOption.activeForeground', \"Foreground color of activated options in input fields.\"));\nexport const inputPlaceholderForeground = registerColor('input.placeholderForeground', { light: transparent(foreground, 0.5), dark: transparent(foreground, 0.5), hcDark: transparent(foreground, 0.7), hcLight: transparent(foreground, 0.7) }, nls.localize('inputPlaceholderForeground', \"Input box foreground color for placeholder text.\"));\nexport const inputValidationInfoBackground = registerColor('inputValidation.infoBackground', { dark: '#063B49', light: '#D6ECF2', hcDark: Color.black, hcLight: Color.white }, nls.localize('inputValidationInfoBackground', \"Input validation background color for information severity.\"));\nexport const inputValidationInfoForeground = registerColor('inputValidation.infoForeground', { dark: null, light: null, hcDark: null, hcLight: foreground }, nls.localize('inputValidationInfoForeground', \"Input validation foreground color for information severity.\"));\nexport const inputValidationInfoBorder = registerColor('inputValidation.infoBorder', { dark: '#007acc', light: '#007acc', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('inputValidationInfoBorder', \"Input validation border color for information severity.\"));\nexport const inputValidationWarningBackground = registerColor('inputValidation.warningBackground', { dark: '#352A05', light: '#F6F5D2', hcDark: Color.black, hcLight: Color.white }, nls.localize('inputValidationWarningBackground', \"Input validation background color for warning severity.\"));\nexport const inputValidationWarningForeground = registerColor('inputValidation.warningForeground', { dark: null, light: null, hcDark: null, hcLight: foreground }, nls.localize('inputValidationWarningForeground', \"Input validation foreground color for warning severity.\"));\nexport const inputValidationWarningBorder = registerColor('inputValidation.warningBorder', { dark: '#B89500', light: '#B89500', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('inputValidationWarningBorder', \"Input validation border color for warning severity.\"));\nexport const inputValidationErrorBackground = registerColor('inputValidation.errorBackground', { dark: '#5A1D1D', light: '#F2DEDE', hcDark: Color.black, hcLight: Color.white }, nls.localize('inputValidationErrorBackground', \"Input validation background color for error severity.\"));\nexport const inputValidationErrorForeground = registerColor('inputValidation.errorForeground', { dark: null, light: null, hcDark: null, hcLight: foreground }, nls.localize('inputValidationErrorForeground', \"Input validation foreground color for error severity.\"));\nexport const inputValidationErrorBorder = registerColor('inputValidation.errorBorder', { dark: '#BE1100', light: '#BE1100', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('inputValidationErrorBorder', \"Input validation border color for error severity.\"));\nexport const selectBackground = registerColor('dropdown.background', { dark: '#3C3C3C', light: Color.white, hcDark: Color.black, hcLight: Color.white }, nls.localize('dropdownBackground', \"Dropdown background.\"));\nexport const selectListBackground = registerColor('dropdown.listBackground', { dark: null, light: null, hcDark: Color.black, hcLight: Color.white }, nls.localize('dropdownListBackground', \"Dropdown list background.\"));\nexport const selectForeground = registerColor('dropdown.foreground', { dark: '#F0F0F0', light: null, hcDark: Color.white, hcLight: foreground }, nls.localize('dropdownForeground', \"Dropdown foreground.\"));\nexport const selectBorder = registerColor('dropdown.border', { dark: selectBackground, light: '#CECECE', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('dropdownBorder', \"Dropdown border.\"));\nexport const checkboxBackground = registerColor('checkbox.background', { dark: selectBackground, light: selectBackground, hcDark: selectBackground, hcLight: selectBackground }, nls.localize('checkbox.background', \"Background color of checkbox widget.\"));\nexport const checkboxForeground = registerColor('checkbox.foreground', { dark: selectForeground, light: selectForeground, hcDark: selectForeground, hcLight: selectForeground }, nls.localize('checkbox.foreground', \"Foreground color of checkbox widget.\"));\nexport const checkboxBorder = registerColor('checkbox.border', { dark: selectBorder, light: selectBorder, hcDark: selectBorder, hcLight: selectBorder }, nls.localize('checkbox.border', \"Border color of checkbox widget.\"));\nexport const buttonForeground = registerColor('button.foreground', { dark: Color.white, light: Color.white, hcDark: Color.white, hcLight: Color.white }, nls.localize('buttonForeground', \"Button foreground color.\"));\nexport const buttonSeparator = registerColor('button.separator', { dark: transparent(buttonForeground, .4), light: transparent(buttonForeground, .4), hcDark: transparent(buttonForeground, .4), hcLight: transparent(buttonForeground, .4) }, nls.localize('buttonSeparator', \"Button separator color.\"));\nexport const buttonBackground = registerColor('button.background', { dark: '#0E639C', light: '#007ACC', hcDark: null, hcLight: '#0F4A85' }, nls.localize('buttonBackground', \"Button background color.\"));\nexport const buttonHoverBackground = registerColor('button.hoverBackground', { dark: lighten(buttonBackground, 0.2), light: darken(buttonBackground, 0.2), hcDark: null, hcLight: null }, nls.localize('buttonHoverBackground', \"Button background color when hovering.\"));\nexport const buttonBorder = registerColor('button.border', { dark: contrastBorder, light: contrastBorder, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('buttonBorder', \"Button border color.\"));\nexport const buttonSecondaryForeground = registerColor('button.secondaryForeground', { dark: Color.white, light: Color.white, hcDark: Color.white, hcLight: foreground }, nls.localize('buttonSecondaryForeground', \"Secondary button foreground color.\"));\nexport const buttonSecondaryBackground = registerColor('button.secondaryBackground', { dark: '#3A3D41', light: '#5F6A79', hcDark: null, hcLight: Color.white }, nls.localize('buttonSecondaryBackground', \"Secondary button background color.\"));\nexport const buttonSecondaryHoverBackground = registerColor('button.secondaryHoverBackground', { dark: lighten(buttonSecondaryBackground, 0.2), light: darken(buttonSecondaryBackground, 0.2), hcDark: null, hcLight: null }, nls.localize('buttonSecondaryHoverBackground', \"Secondary button background color when hovering.\"));\nexport const badgeBackground = registerColor('badge.background', { dark: '#4D4D4D', light: '#C4C4C4', hcDark: Color.black, hcLight: '#0F4A85' }, nls.localize('badgeBackground', \"Badge background color. Badges are small information labels, e.g. for search results count.\"));\nexport const badgeForeground = registerColor('badge.foreground', { dark: Color.white, light: '#333', hcDark: Color.white, hcLight: Color.white }, nls.localize('badgeForeground', \"Badge foreground color. Badges are small information labels, e.g. for search results count.\"));\nexport const scrollbarShadow = registerColor('scrollbar.shadow', { dark: '#000000', light: '#DDDDDD', hcDark: null, hcLight: null }, nls.localize('scrollbarShadow', \"Scrollbar shadow to indicate that the view is scrolled.\"));\nexport const scrollbarSliderBackground = registerColor('scrollbarSlider.background', { dark: Color.fromHex('#797979').transparent(0.4), light: Color.fromHex('#646464').transparent(0.4), hcDark: transparent(contrastBorder, 0.6), hcLight: transparent(contrastBorder, 0.4) }, nls.localize('scrollbarSliderBackground', \"Scrollbar slider background color.\"));\nexport const scrollbarSliderHoverBackground = registerColor('scrollbarSlider.hoverBackground', { dark: Color.fromHex('#646464').transparent(0.7), light: Color.fromHex('#646464').transparent(0.7), hcDark: transparent(contrastBorder, 0.8), hcLight: transparent(contrastBorder, 0.8) }, nls.localize('scrollbarSliderHoverBackground', \"Scrollbar slider background color when hovering.\"));\nexport const scrollbarSliderActiveBackground = registerColor('scrollbarSlider.activeBackground', { dark: Color.fromHex('#BFBFBF').transparent(0.4), light: Color.fromHex('#000000').transparent(0.6), hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('scrollbarSliderActiveBackground', \"Scrollbar slider background color when clicked on.\"));\nexport const progressBarBackground = registerColor('progressBar.background', { dark: Color.fromHex('#0E70C0'), light: Color.fromHex('#0E70C0'), hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('progressBarBackground', \"Background color of the progress bar that can show for long running operations.\"));\nexport const editorErrorBackground = registerColor('editorError.background', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('editorError.background', 'Background color of error text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorErrorForeground = registerColor('editorError.foreground', { dark: '#F14C4C', light: '#E51400', hcDark: '#F48771', hcLight: '#B5200D' }, nls.localize('editorError.foreground', 'Foreground color of error squigglies in the editor.'));\nexport const editorErrorBorder = registerColor('editorError.border', { dark: null, light: null, hcDark: Color.fromHex('#E47777').transparent(0.8), hcLight: '#B5200D' }, nls.localize('errorBorder', 'Border color of error boxes in the editor.'));\nexport const editorWarningBackground = registerColor('editorWarning.background', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('editorWarning.background', 'Background color of warning text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorWarningForeground = registerColor('editorWarning.foreground', { dark: '#CCA700', light: '#BF8803', hcDark: '#FFD37', hcLight: '#895503' }, nls.localize('editorWarning.foreground', 'Foreground color of warning squigglies in the editor.'));\nexport const editorWarningBorder = registerColor('editorWarning.border', { dark: null, light: null, hcDark: Color.fromHex('#FFCC00').transparent(0.8), hcLight: '#' }, nls.localize('warningBorder', 'Border color of warning boxes in the editor.'));\nexport const editorInfoBackground = registerColor('editorInfo.background', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('editorInfo.background', 'Background color of info text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorInfoForeground = registerColor('editorInfo.foreground', { dark: '#3794FF', light: '#1a85ff', hcDark: '#3794FF', hcLight: '#1a85ff' }, nls.localize('editorInfo.foreground', 'Foreground color of info squigglies in the editor.'));\nexport const editorInfoBorder = registerColor('editorInfo.border', { dark: null, light: null, hcDark: Color.fromHex('#3794FF').transparent(0.8), hcLight: '#292929' }, nls.localize('infoBorder', 'Border color of info boxes in the editor.'));\nexport const editorHintForeground = registerColor('editorHint.foreground', { dark: Color.fromHex('#eeeeee').transparent(0.7), light: '#6c6c6c', hcDark: null, hcLight: null }, nls.localize('editorHint.foreground', 'Foreground color of hint squigglies in the editor.'));\nexport const editorHintBorder = registerColor('editorHint.border', { dark: null, light: null, hcDark: Color.fromHex('#eeeeee').transparent(0.8), hcLight: '#292929' }, nls.localize('hintBorder', 'Border color of hint boxes in the editor.'));\nexport const sashHoverBorder = registerColor('sash.hoverBorder', { dark: focusBorder, light: focusBorder, hcDark: focusBorder, hcLight: focusBorder }, nls.localize('sashActiveBorder', \"Border color of active sashes.\"));\n/**\n * Editor background color.\n */\nexport const editorBackground = registerColor('editor.background', { light: '#ffffff', dark: '#1E1E1E', hcDark: Color.black, hcLight: Color.white }, nls.localize('editorBackground', \"Editor background color.\"));\n/**\n * Editor foreground color.\n */\nexport const editorForeground = registerColor('editor.foreground', { light: '#333333', dark: '#BBBBBB', hcDark: Color.white, hcLight: foreground }, nls.localize('editorForeground', \"Editor default foreground color.\"));\n/**\n * Sticky scroll\n */\nexport const editorStickyScrollBackground = registerColor('editorStickyScroll.background', { light: editorBackground, dark: editorBackground, hcDark: editorBackground, hcLight: editorBackground }, nls.localize('editorStickyScrollBackground', \"Sticky scroll background color for the editor\"));\nexport const editorStickyScrollHoverBackground = registerColor('editorStickyScrollHover.background', { dark: '#2A2D2E', light: '#F0F0F0', hcDark: null, hcLight: Color.fromHex('#0F4A85').transparent(0.1) }, nls.localize('editorStickyScrollHoverBackground', \"Sticky scroll on hover background color for the editor\"));\n/**\n * Editor widgets\n */\nexport const editorWidgetBackground = registerColor('editorWidget.background', { dark: '#252526', light: '#F3F3F3', hcDark: '#0C141F', hcLight: Color.white }, nls.localize('editorWidgetBackground', 'Background color of editor widgets, such as find/replace.'));\nexport const editorWidgetForeground = registerColor('editorWidget.foreground', { dark: foreground, light: foreground, hcDark: foreground, hcLight: foreground }, nls.localize('editorWidgetForeground', 'Foreground color of editor widgets, such as find/replace.'));\nexport const editorWidgetBorder = registerColor('editorWidget.border', { dark: '#454545', light: '#C8C8C8', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('editorWidgetBorder', 'Border color of editor widgets. The color is only used if the widget chooses to have a border and if the color is not overridden by a widget.'));\nexport const editorWidgetResizeBorder = registerColor('editorWidget.resizeBorder', { light: null, dark: null, hcDark: null, hcLight: null }, nls.localize('editorWidgetResizeBorder', \"Border color of the resize bar of editor widgets. The color is only used if the widget chooses to have a resize border and if the color is not overridden by a widget.\"));\n/**\n * Quick pick widget\n */\nexport const quickInputBackground = registerColor('quickInput.background', { dark: editorWidgetBackground, light: editorWidgetBackground, hcDark: editorWidgetBackground, hcLight: editorWidgetBackground }, nls.localize('pickerBackground', \"Quick picker background color. The quick picker widget is the container for pickers like the command palette.\"));\nexport const quickInputForeground = registerColor('quickInput.foreground', { dark: editorWidgetForeground, light: editorWidgetForeground, hcDark: editorWidgetForeground, hcLight: editorWidgetForeground }, nls.localize('pickerForeground', \"Quick picker foreground color. The quick picker widget is the container for pickers like the command palette.\"));\nexport const quickInputTitleBackground = registerColor('quickInputTitle.background', { dark: new Color(new RGBA(255, 255, 255, 0.105)), light: new Color(new RGBA(0, 0, 0, 0.06)), hcDark: '#000000', hcLight: Color.white }, nls.localize('pickerTitleBackground', \"Quick picker title background color. The quick picker widget is the container for pickers like the command palette.\"));\nexport const pickerGroupForeground = registerColor('pickerGroup.foreground', { dark: '#3794FF', light: '#0066BF', hcDark: Color.white, hcLight: '#0F4A85' }, nls.localize('pickerGroupForeground', \"Quick picker color for grouping labels.\"));\nexport const pickerGroupBorder = registerColor('pickerGroup.border', { dark: '#3F3F46', light: '#CCCEDB', hcDark: Color.white, hcLight: '#0F4A85' }, nls.localize('pickerGroupBorder', \"Quick picker color for grouping borders.\"));\n/**\n * Keybinding label\n */\nexport const keybindingLabelBackground = registerColor('keybindingLabel.background', { dark: new Color(new RGBA(128, 128, 128, 0.17)), light: new Color(new RGBA(221, 221, 221, 0.4)), hcDark: Color.transparent, hcLight: Color.transparent }, nls.localize('keybindingLabelBackground', \"Keybinding label background color. The keybinding label is used to represent a keyboard shortcut.\"));\nexport const keybindingLabelForeground = registerColor('keybindingLabel.foreground', { dark: Color.fromHex('#CCCCCC'), light: Color.fromHex('#555555'), hcDark: Color.white, hcLight: foreground }, nls.localize('keybindingLabelForeground', \"Keybinding label foreground color. The keybinding label is used to represent a keyboard shortcut.\"));\nexport const keybindingLabelBorder = registerColor('keybindingLabel.border', { dark: new Color(new RGBA(51, 51, 51, 0.6)), light: new Color(new RGBA(204, 204, 204, 0.4)), hcDark: new Color(new RGBA(111, 195, 223)), hcLight: contrastBorder }, nls.localize('keybindingLabelBorder', \"Keybinding label border color. The keybinding label is used to represent a keyboard shortcut.\"));\nexport const keybindingLabelBottomBorder = registerColor('keybindingLabel.bottomBorder', { dark: new Color(new RGBA(68, 68, 68, 0.6)), light: new Color(new RGBA(187, 187, 187, 0.4)), hcDark: new Color(new RGBA(111, 195, 223)), hcLight: foreground }, nls.localize('keybindingLabelBottomBorder', \"Keybinding label border bottom color. The keybinding label is used to represent a keyboard shortcut.\"));\n/**\n * Editor selection colors.\n */\nexport const editorSelectionBackground = registerColor('editor.selectionBackground', { light: '#ADD6FF', dark: '#264F78', hcDark: '#f3f518', hcLight: '#0F4A85' }, nls.localize('editorSelectionBackground', \"Color of the editor selection.\"));\nexport const editorSelectionForeground = registerColor('editor.selectionForeground', { light: null, dark: null, hcDark: '#000000', hcLight: Color.white }, nls.localize('editorSelectionForeground', \"Color of the selected text for high contrast.\"));\nexport const editorInactiveSelection = registerColor('editor.inactiveSelectionBackground', { light: transparent(editorSelectionBackground, 0.5), dark: transparent(editorSelectionBackground, 0.5), hcDark: transparent(editorSelectionBackground, 0.7), hcLight: transparent(editorSelectionBackground, 0.5) }, nls.localize('editorInactiveSelection', \"Color of the selection in an inactive editor. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport const editorSelectionHighlight = registerColor('editor.selectionHighlightBackground', { light: lessProminent(editorSelectionBackground, editorBackground, 0.3, 0.6), dark: lessProminent(editorSelectionBackground, editorBackground, 0.3, 0.6), hcDark: null, hcLight: null }, nls.localize('editorSelectionHighlight', 'Color for regions with the same content as the selection. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorSelectionHighlightBorder = registerColor('editor.selectionHighlightBorder', { light: null, dark: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('editorSelectionHighlightBorder', \"Border color for regions with the same content as the selection.\"));\n/**\n * Editor find match colors.\n */\nexport const editorFindMatch = registerColor('editor.findMatchBackground', { light: '#A8AC94', dark: '#515C6A', hcDark: null, hcLight: null }, nls.localize('editorFindMatch', \"Color of the current search match.\"));\nexport const editorFindMatchHighlight = registerColor('editor.findMatchHighlightBackground', { light: '#EA5C0055', dark: '#EA5C0055', hcDark: null, hcLight: null }, nls.localize('findMatchHighlight', \"Color of the other search matches. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport const editorFindRangeHighlight = registerColor('editor.findRangeHighlightBackground', { dark: '#3a3d4166', light: '#b4b4b44d', hcDark: null, hcLight: null }, nls.localize('findRangeHighlight', \"Color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport const editorFindMatchBorder = registerColor('editor.findMatchBorder', { light: null, dark: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('editorFindMatchBorder', \"Border color of the current search match.\"));\nexport const editorFindMatchHighlightBorder = registerColor('editor.findMatchHighlightBorder', { light: null, dark: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('findMatchHighlightBorder', \"Border color of the other search matches.\"));\nexport const editorFindRangeHighlightBorder = registerColor('editor.findRangeHighlightBorder', { dark: null, light: null, hcDark: transparent(activeContrastBorder, 0.4), hcLight: transparent(activeContrastBorder, 0.4) }, nls.localize('findRangeHighlightBorder', \"Border color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations.\"), true);\n/**\n * Search Editor query match colors.\n *\n * Distinct from normal editor find match to allow for better differentiation\n */\nexport const searchEditorFindMatch = registerColor('searchEditor.findMatchBackground', { light: transparent(editorFindMatchHighlight, 0.66), dark: transparent(editorFindMatchHighlight, 0.66), hcDark: editorFindMatchHighlight, hcLight: editorFindMatchHighlight }, nls.localize('searchEditor.queryMatch', \"Color of the Search Editor query matches.\"));\nexport const searchEditorFindMatchBorder = registerColor('searchEditor.findMatchBorder', { light: transparent(editorFindMatchHighlightBorder, 0.66), dark: transparent(editorFindMatchHighlightBorder, 0.66), hcDark: editorFindMatchHighlightBorder, hcLight: editorFindMatchHighlightBorder }, nls.localize('searchEditor.editorFindMatchBorder', \"Border color of the Search Editor query matches.\"));\n/**\n * Editor hover\n */\nexport const editorHoverHighlight = registerColor('editor.hoverHighlightBackground', { light: '#ADD6FF26', dark: '#264f7840', hcDark: '#ADD6FF26', hcLight: null }, nls.localize('hoverHighlight', 'Highlight below the word for which a hover is shown. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorHoverBackground = registerColor('editorHoverWidget.background', { light: editorWidgetBackground, dark: editorWidgetBackground, hcDark: editorWidgetBackground, hcLight: editorWidgetBackground }, nls.localize('hoverBackground', 'Background color of the editor hover.'));\nexport const editorHoverForeground = registerColor('editorHoverWidget.foreground', { light: editorWidgetForeground, dark: editorWidgetForeground, hcDark: editorWidgetForeground, hcLight: editorWidgetForeground }, nls.localize('hoverForeground', 'Foreground color of the editor hover.'));\nexport const editorHoverBorder = registerColor('editorHoverWidget.border', { light: editorWidgetBorder, dark: editorWidgetBorder, hcDark: editorWidgetBorder, hcLight: editorWidgetBorder }, nls.localize('hoverBorder', 'Border color of the editor hover.'));\nexport const editorHoverStatusBarBackground = registerColor('editorHoverWidget.statusBarBackground', { dark: lighten(editorHoverBackground, 0.2), light: darken(editorHoverBackground, 0.05), hcDark: editorWidgetBackground, hcLight: editorWidgetBackground }, nls.localize('statusBarBackground', \"Background color of the editor hover status bar.\"));\n/**\n * Editor link colors\n */\nexport const editorActiveLinkForeground = registerColor('editorLink.activeForeground', { dark: '#4E94CE', light: Color.blue, hcDark: Color.cyan, hcLight: '#292929' }, nls.localize('activeLinkForeground', 'Color of active links.'));\n/**\n * Inline hints\n */\nexport const editorInlayHintForeground = registerColor('editorInlayHint.foreground', { dark: transparent(badgeForeground, .8), light: transparent(badgeForeground, .8), hcDark: badgeForeground, hcLight: badgeForeground }, nls.localize('editorInlayHintForeground', 'Foreground color of inline hints'));\nexport const editorInlayHintBackground = registerColor('editorInlayHint.background', { dark: transparent(badgeBackground, .6), light: transparent(badgeBackground, .3), hcDark: badgeBackground, hcLight: badgeBackground }, nls.localize('editorInlayHintBackground', 'Background color of inline hints'));\nexport const editorInlayHintTypeForeground = registerColor('editorInlayHint.typeForeground', { dark: editorInlayHintForeground, light: editorInlayHintForeground, hcDark: editorInlayHintForeground, hcLight: editorInlayHintForeground }, nls.localize('editorInlayHintForegroundTypes', 'Foreground color of inline hints for types'));\nexport const editorInlayHintTypeBackground = registerColor('editorInlayHint.typeBackground', { dark: editorInlayHintBackground, light: editorInlayHintBackground, hcDark: editorInlayHintBackground, hcLight: editorInlayHintBackground }, nls.localize('editorInlayHintBackgroundTypes', 'Background color of inline hints for types'));\nexport const editorInlayHintParameterForeground = registerColor('editorInlayHint.parameterForeground', { dark: editorInlayHintForeground, light: editorInlayHintForeground, hcDark: editorInlayHintForeground, hcLight: editorInlayHintForeground }, nls.localize('editorInlayHintForegroundParameter', 'Foreground color of inline hints for parameters'));\nexport const editorInlayHintParameterBackground = registerColor('editorInlayHint.parameterBackground', { dark: editorInlayHintBackground, light: editorInlayHintBackground, hcDark: editorInlayHintBackground, hcLight: editorInlayHintBackground }, nls.localize('editorInlayHintBackgroundParameter', 'Background color of inline hints for parameters'));\n/**\n * Editor lighbulb icon colors\n */\nexport const editorLightBulbForeground = registerColor('editorLightBulb.foreground', { dark: '#FFCC00', light: '#DDB100', hcDark: '#FFCC00', hcLight: '#007ACC' }, nls.localize('editorLightBulbForeground', \"The color used for the lightbulb actions icon.\"));\nexport const editorLightBulbAutoFixForeground = registerColor('editorLightBulbAutoFix.foreground', { dark: '#75BEFF', light: '#007ACC', hcDark: '#75BEFF', hcLight: '#007ACC' }, nls.localize('editorLightBulbAutoFixForeground', \"The color used for the lightbulb auto fix actions icon.\"));\n/**\n * Diff Editor Colors\n */\nexport const defaultInsertColor = new Color(new RGBA(155, 185, 85, .2));\nexport const defaultRemoveColor = new Color(new RGBA(255, 0, 0, .2));\nexport const diffInserted = registerColor('diffEditor.insertedTextBackground', { dark: '#9ccc2c33', light: '#9ccc2c66', hcDark: null, hcLight: null }, nls.localize('diffEditorInserted', 'Background color for text that got inserted. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const diffRemoved = registerColor('diffEditor.removedTextBackground', { dark: '#ff000066', light: '#ff00004d', hcDark: null, hcLight: null }, nls.localize('diffEditorRemoved', 'Background color for text that got removed. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const diffInsertedLine = registerColor('diffEditor.insertedLineBackground', { dark: defaultInsertColor, light: defaultInsertColor, hcDark: null, hcLight: null }, nls.localize('diffEditorInsertedLines', 'Background color for lines that got inserted. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const diffRemovedLine = registerColor('diffEditor.removedLineBackground', { dark: defaultRemoveColor, light: defaultRemoveColor, hcDark: null, hcLight: null }, nls.localize('diffEditorRemovedLines', 'Background color for lines that got removed. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const diffInsertedLineGutter = registerColor('diffEditorGutter.insertedLineBackground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('diffEditorInsertedLineGutter', 'Background color for the margin where lines got inserted.'));\nexport const diffRemovedLineGutter = registerColor('diffEditorGutter.removedLineBackground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('diffEditorRemovedLineGutter', 'Background color for the margin where lines got removed.'));\nexport const diffOverviewRulerInserted = registerColor('diffEditorOverview.insertedForeground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('diffEditorOverviewInserted', 'Diff overview ruler foreground for inserted content.'));\nexport const diffOverviewRulerRemoved = registerColor('diffEditorOverview.removedForeground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('diffEditorOverviewRemoved', 'Diff overview ruler foreground for removed content.'));\nexport const diffInsertedOutline = registerColor('diffEditor.insertedTextBorder', { dark: null, light: null, hcDark: '#33ff2eff', hcLight: '#374E06' }, nls.localize('diffEditorInsertedOutline', 'Outline color for the text that got inserted.'));\nexport const diffRemovedOutline = registerColor('diffEditor.removedTextBorder', { dark: null, light: null, hcDark: '#FF008F', hcLight: '#AD0707' }, nls.localize('diffEditorRemovedOutline', 'Outline color for text that got removed.'));\nexport const diffBorder = registerColor('diffEditor.border', { dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('diffEditorBorder', 'Border color between the two text editors.'));\nexport const diffDiagonalFill = registerColor('diffEditor.diagonalFill', { dark: '#cccccc33', light: '#22222233', hcDark: null, hcLight: null }, nls.localize('diffDiagonalFill', \"Color of the diff editor's diagonal fill. The diagonal fill is used in side-by-side diff views.\"));\n/**\n * List and tree colors\n */\nexport const listFocusBackground = registerColor('list.focusBackground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('listFocusBackground', \"List/Tree background color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listFocusForeground = registerColor('list.focusForeground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('listFocusForeground', \"List/Tree foreground color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listFocusOutline = registerColor('list.focusOutline', { dark: focusBorder, light: focusBorder, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('listFocusOutline', \"List/Tree outline color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listFocusAndSelectionOutline = registerColor('list.focusAndSelectionOutline', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('listFocusAndSelectionOutline', \"List/Tree outline color for the focused item when the list/tree is active and selected. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listActiveSelectionBackground = registerColor('list.activeSelectionBackground', { dark: '#04395E', light: '#0060C0', hcDark: null, hcLight: Color.fromHex('#0F4A85').transparent(0.1) }, nls.localize('listActiveSelectionBackground', \"List/Tree background color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listActiveSelectionForeground = registerColor('list.activeSelectionForeground', { dark: Color.white, light: Color.white, hcDark: null, hcLight: null }, nls.localize('listActiveSelectionForeground', \"List/Tree foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listActiveSelectionIconForeground = registerColor('list.activeSelectionIconForeground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('listActiveSelectionIconForeground', \"List/Tree icon foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveSelectionBackground = registerColor('list.inactiveSelectionBackground', { dark: '#37373D', light: '#E4E6F1', hcDark: null, hcLight: Color.fromHex('#0F4A85').transparent(0.1) }, nls.localize('listInactiveSelectionBackground', \"List/Tree background color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveSelectionForeground = registerColor('list.inactiveSelectionForeground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('listInactiveSelectionForeground', \"List/Tree foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveSelectionIconForeground = registerColor('list.inactiveSelectionIconForeground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('listInactiveSelectionIconForeground', \"List/Tree icon foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveFocusBackground = registerColor('list.inactiveFocusBackground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('listInactiveFocusBackground', \"List/Tree background color for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveFocusOutline = registerColor('list.inactiveFocusOutline', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('listInactiveFocusOutline', \"List/Tree outline color for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listHoverBackground = registerColor('list.hoverBackground', { dark: '#2A2D2E', light: '#F0F0F0', hcDark: null, hcLight: Color.fromHex('#0F4A85').transparent(0.1) }, nls.localize('listHoverBackground', \"List/Tree background when hovering over items using the mouse.\"));\nexport const listHoverForeground = registerColor('list.hoverForeground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('listHoverForeground', \"List/Tree foreground when hovering over items using the mouse.\"));\nexport const listDropBackground = registerColor('list.dropBackground', { dark: '#062F4A', light: '#D6EBFF', hcDark: null, hcLight: null }, nls.localize('listDropBackground', \"List/Tree drag and drop background when moving items around using the mouse.\"));\nexport const listHighlightForeground = registerColor('list.highlightForeground', { dark: '#2AAAFF', light: '#0066BF', hcDark: focusBorder, hcLight: focusBorder }, nls.localize('highlight', 'List/Tree foreground color of the match highlights when searching inside the list/tree.'));\nexport const listFocusHighlightForeground = registerColor('list.focusHighlightForeground', { dark: listHighlightForeground, light: ifDefinedThenElse(listActiveSelectionBackground, listHighlightForeground, '#BBE7FF'), hcDark: listHighlightForeground, hcLight: listHighlightForeground }, nls.localize('listFocusHighlightForeground', 'List/Tree foreground color of the match highlights on actively focused items when searching inside the list/tree.'));\nexport const listInvalidItemForeground = registerColor('list.invalidItemForeground', { dark: '#B89500', light: '#B89500', hcDark: '#B89500', hcLight: '#B5200D' }, nls.localize('invalidItemForeground', 'List/Tree foreground color for invalid items, for example an unresolved root in explorer.'));\nexport const listErrorForeground = registerColor('list.errorForeground', { dark: '#F88070', light: '#B01011', hcDark: null, hcLight: null }, nls.localize('listErrorForeground', 'Foreground color of list items containing errors.'));\nexport const listWarningForeground = registerColor('list.warningForeground', { dark: '#CCA700', light: '#855F00', hcDark: null, hcLight: null }, nls.localize('listWarningForeground', 'Foreground color of list items containing warnings.'));\nexport const listFilterWidgetBackground = registerColor('listFilterWidget.background', { light: darken(editorWidgetBackground, 0), dark: lighten(editorWidgetBackground, 0), hcDark: editorWidgetBackground, hcLight: editorWidgetBackground }, nls.localize('listFilterWidgetBackground', 'Background color of the type filter widget in lists and trees.'));\nexport const listFilterWidgetOutline = registerColor('listFilterWidget.outline', { dark: Color.transparent, light: Color.transparent, hcDark: '#f38518', hcLight: '#007ACC' }, nls.localize('listFilterWidgetOutline', 'Outline color of the type filter widget in lists and trees.'));\nexport const listFilterWidgetNoMatchesOutline = registerColor('listFilterWidget.noMatchesOutline', { dark: '#BE1100', light: '#BE1100', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('listFilterWidgetNoMatchesOutline', 'Outline color of the type filter widget in lists and trees, when there are no matches.'));\nexport const listFilterWidgetShadow = registerColor('listFilterWidget.shadow', { dark: widgetShadow, light: widgetShadow, hcDark: widgetShadow, hcLight: widgetShadow }, nls.localize('listFilterWidgetShadow', 'Shadown color of the type filter widget in lists and trees.'));\nexport const listFilterMatchHighlight = registerColor('list.filterMatchBackground', { dark: editorFindMatchHighlight, light: editorFindMatchHighlight, hcDark: null, hcLight: null }, nls.localize('listFilterMatchHighlight', 'Background color of the filtered match.'));\nexport const listFilterMatchHighlightBorder = registerColor('list.filterMatchBorder', { dark: editorFindMatchHighlightBorder, light: editorFindMatchHighlightBorder, hcDark: contrastBorder, hcLight: activeContrastBorder }, nls.localize('listFilterMatchHighlightBorder', 'Border color of the filtered match.'));\nexport const treeIndentGuidesStroke = registerColor('tree.indentGuidesStroke', { dark: '#585858', light: '#a9a9a9', hcDark: '#a9a9a9', hcLight: '#a5a5a5' }, nls.localize('treeIndentGuidesStroke', \"Tree stroke color for the indentation guides.\"));\nexport const tableColumnsBorder = registerColor('tree.tableColumnsBorder', { dark: '#CCCCCC20', light: '#61616120', hcDark: null, hcLight: null }, nls.localize('tableColumnsBorder', \"Table border color between columns.\"));\nexport const tableOddRowsBackgroundColor = registerColor('tree.tableOddRowsBackground', { dark: transparent(foreground, 0.04), light: transparent(foreground, 0.04), hcDark: null, hcLight: null }, nls.localize('tableOddRowsBackgroundColor', \"Background color for odd table rows.\"));\nexport const listDeemphasizedForeground = registerColor('list.deemphasizedForeground', { dark: '#8C8C8C', light: '#8E8E90', hcDark: '#A7A8A9', hcLight: '#666666' }, nls.localize('listDeemphasizedForeground', \"List/Tree foreground color for items that are deemphasized. \"));\n/**\n * Quick pick widget (dependent on List and tree colors)\n */\nexport const _deprecatedQuickInputListFocusBackground = registerColor('quickInput.list.focusBackground', { dark: null, light: null, hcDark: null, hcLight: null }, '', undefined, nls.localize('quickInput.list.focusBackground deprecation', \"Please use quickInputList.focusBackground instead\"));\nexport const quickInputListFocusForeground = registerColor('quickInputList.focusForeground', { dark: listActiveSelectionForeground, light: listActiveSelectionForeground, hcDark: listActiveSelectionForeground, hcLight: listActiveSelectionForeground }, nls.localize('quickInput.listFocusForeground', \"Quick picker foreground color for the focused item.\"));\nexport const quickInputListFocusIconForeground = registerColor('quickInputList.focusIconForeground', { dark: listActiveSelectionIconForeground, light: listActiveSelectionIconForeground, hcDark: listActiveSelectionIconForeground, hcLight: listActiveSelectionIconForeground }, nls.localize('quickInput.listFocusIconForeground', \"Quick picker icon foreground color for the focused item.\"));\nexport const quickInputListFocusBackground = registerColor('quickInputList.focusBackground', { dark: oneOf(_deprecatedQuickInputListFocusBackground, listActiveSelectionBackground), light: oneOf(_deprecatedQuickInputListFocusBackground, listActiveSelectionBackground), hcDark: null, hcLight: null }, nls.localize('quickInput.listFocusBackground', \"Quick picker background color for the focused item.\"));\n/**\n * Menu colors\n */\nexport const menuBorder = registerColor('menu.border', { dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('menuBorder', \"Border color of menus.\"));\nexport const menuForeground = registerColor('menu.foreground', { dark: selectForeground, light: foreground, hcDark: selectForeground, hcLight: selectForeground }, nls.localize('menuForeground', \"Foreground color of menu items.\"));\nexport const menuBackground = registerColor('menu.background', { dark: selectBackground, light: selectBackground, hcDark: selectBackground, hcLight: selectBackground }, nls.localize('menuBackground', \"Background color of menu items.\"));\nexport const menuSelectionForeground = registerColor('menu.selectionForeground', { dark: listActiveSelectionForeground, light: listActiveSelectionForeground, hcDark: listActiveSelectionForeground, hcLight: listActiveSelectionForeground }, nls.localize('menuSelectionForeground', \"Foreground color of the selected menu item in menus.\"));\nexport const menuSelectionBackground = registerColor('menu.selectionBackground', { dark: listActiveSelectionBackground, light: listActiveSelectionBackground, hcDark: listActiveSelectionBackground, hcLight: listActiveSelectionBackground }, nls.localize('menuSelectionBackground', \"Background color of the selected menu item in menus.\"));\nexport const menuSelectionBorder = registerColor('menu.selectionBorder', { dark: null, light: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('menuSelectionBorder', \"Border color of the selected menu item in menus.\"));\nexport const menuSeparatorBackground = registerColor('menu.separatorBackground', { dark: '#606060', light: '#D4D4D4', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('menuSeparatorBackground', \"Color of a separator menu item in menus.\"));\n/**\n * Toolbar colors\n */\nexport const toolbarHoverBackground = registerColor('toolbar.hoverBackground', { dark: '#5a5d5e50', light: '#b8b8b850', hcDark: null, hcLight: null }, nls.localize('toolbarHoverBackground', \"Toolbar background when hovering over actions using the mouse\"));\nexport const toolbarHoverOutline = registerColor('toolbar.hoverOutline', { dark: null, light: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('toolbarHoverOutline', \"Toolbar outline when hovering over actions using the mouse\"));\nexport const toolbarActiveBackground = registerColor('toolbar.activeBackground', { dark: lighten(toolbarHoverBackground, 0.1), light: darken(toolbarHoverBackground, 0.1), hcDark: null, hcLight: null }, nls.localize('toolbarActiveBackground', \"Toolbar background when holding the mouse over actions\"));\n/**\n * Snippet placeholder colors\n */\nexport const snippetTabstopHighlightBackground = registerColor('editor.snippetTabstopHighlightBackground', { dark: new Color(new RGBA(124, 124, 124, 0.3)), light: new Color(new RGBA(10, 50, 100, 0.2)), hcDark: new Color(new RGBA(124, 124, 124, 0.3)), hcLight: new Color(new RGBA(10, 50, 100, 0.2)) }, nls.localize('snippetTabstopHighlightBackground', \"Highlight background color of a snippet tabstop.\"));\nexport const snippetTabstopHighlightBorder = registerColor('editor.snippetTabstopHighlightBorder', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('snippetTabstopHighlightBorder', \"Highlight border color of a snippet tabstop.\"));\nexport const snippetFinalTabstopHighlightBackground = registerColor('editor.snippetFinalTabstopHighlightBackground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('snippetFinalTabstopHighlightBackground', \"Highlight background color of the final tabstop of a snippet.\"));\nexport const snippetFinalTabstopHighlightBorder = registerColor('editor.snippetFinalTabstopHighlightBorder', { dark: '#525252', light: new Color(new RGBA(10, 50, 100, 0.5)), hcDark: '#525252', hcLight: '#292929' }, nls.localize('snippetFinalTabstopHighlightBorder', \"Highlight border color of the final tabstop of a snippet.\"));\n/**\n * Breadcrumb colors\n */\nexport const breadcrumbsForeground = registerColor('breadcrumb.foreground', { light: transparent(foreground, 0.8), dark: transparent(foreground, 0.8), hcDark: transparent(foreground, 0.8), hcLight: transparent(foreground, 0.8) }, nls.localize('breadcrumbsFocusForeground', \"Color of focused breadcrumb items.\"));\nexport const breadcrumbsBackground = registerColor('breadcrumb.background', { light: editorBackground, dark: editorBackground, hcDark: editorBackground, hcLight: editorBackground }, nls.localize('breadcrumbsBackground', \"Background color of breadcrumb items.\"));\nexport const breadcrumbsFocusForeground = registerColor('breadcrumb.focusForeground', { light: darken(foreground, 0.2), dark: lighten(foreground, 0.1), hcDark: lighten(foreground, 0.1), hcLight: lighten(foreground, 0.1) }, nls.localize('breadcrumbsFocusForeground', \"Color of focused breadcrumb items.\"));\nexport const breadcrumbsActiveSelectionForeground = registerColor('breadcrumb.activeSelectionForeground', { light: darken(foreground, 0.2), dark: lighten(foreground, 0.1), hcDark: lighten(foreground, 0.1), hcLight: lighten(foreground, 0.1) }, nls.localize('breadcrumbsSelectedForeground', \"Color of selected breadcrumb items.\"));\nexport const breadcrumbsPickerBackground = registerColor('breadcrumbPicker.background', { light: editorWidgetBackground, dark: editorWidgetBackground, hcDark: editorWidgetBackground, hcLight: editorWidgetBackground }, nls.localize('breadcrumbsSelectedBackground', \"Background color of breadcrumb item picker.\"));\n/**\n * Merge-conflict colors\n */\nconst headerTransparency = 0.5;\nconst currentBaseColor = Color.fromHex('#40C8AE').transparent(headerTransparency);\nconst incomingBaseColor = Color.fromHex('#40A6FF').transparent(headerTransparency);\nconst commonBaseColor = Color.fromHex('#606060').transparent(0.4);\nconst contentTransparency = 0.4;\nconst rulerTransparency = 1;\nexport const mergeCurrentHeaderBackground = registerColor('merge.currentHeaderBackground', { dark: currentBaseColor, light: currentBaseColor, hcDark: null, hcLight: null }, nls.localize('mergeCurrentHeaderBackground', 'Current header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeCurrentContentBackground = registerColor('merge.currentContentBackground', { dark: transparent(mergeCurrentHeaderBackground, contentTransparency), light: transparent(mergeCurrentHeaderBackground, contentTransparency), hcDark: transparent(mergeCurrentHeaderBackground, contentTransparency), hcLight: transparent(mergeCurrentHeaderBackground, contentTransparency) }, nls.localize('mergeCurrentContentBackground', 'Current content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeIncomingHeaderBackground = registerColor('merge.incomingHeaderBackground', { dark: incomingBaseColor, light: incomingBaseColor, hcDark: null, hcLight: null }, nls.localize('mergeIncomingHeaderBackground', 'Incoming header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeIncomingContentBackground = registerColor('merge.incomingContentBackground', { dark: transparent(mergeIncomingHeaderBackground, contentTransparency), light: transparent(mergeIncomingHeaderBackground, contentTransparency), hcDark: transparent(mergeIncomingHeaderBackground, contentTransparency), hcLight: transparent(mergeIncomingHeaderBackground, contentTransparency) }, nls.localize('mergeIncomingContentBackground', 'Incoming content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeCommonHeaderBackground = registerColor('merge.commonHeaderBackground', { dark: commonBaseColor, light: commonBaseColor, hcDark: null, hcLight: null }, nls.localize('mergeCommonHeaderBackground', 'Common ancestor header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeCommonContentBackground = registerColor('merge.commonContentBackground', { dark: transparent(mergeCommonHeaderBackground, contentTransparency), light: transparent(mergeCommonHeaderBackground, contentTransparency), hcDark: transparent(mergeCommonHeaderBackground, contentTransparency), hcLight: transparent(mergeCommonHeaderBackground, contentTransparency) }, nls.localize('mergeCommonContentBackground', 'Common ancestor content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeBorder = registerColor('merge.border', { dark: null, light: null, hcDark: '#C3DF6F', hcLight: '#007ACC' }, nls.localize('mergeBorder', 'Border color on headers and the splitter in inline merge-conflicts.'));\nexport const overviewRulerCurrentContentForeground = registerColor('editorOverviewRuler.currentContentForeground', { dark: transparent(mergeCurrentHeaderBackground, rulerTransparency), light: transparent(mergeCurrentHeaderBackground, rulerTransparency), hcDark: mergeBorder, hcLight: mergeBorder }, nls.localize('overviewRulerCurrentContentForeground', 'Current overview ruler foreground for inline merge-conflicts.'));\nexport const overviewRulerIncomingContentForeground = registerColor('editorOverviewRuler.incomingContentForeground', { dark: transparent(mergeIncomingHeaderBackground, rulerTransparency), light: transparent(mergeIncomingHeaderBackground, rulerTransparency), hcDark: mergeBorder, hcLight: mergeBorder }, nls.localize('overviewRulerIncomingContentForeground', 'Incoming overview ruler foreground for inline merge-conflicts.'));\nexport const overviewRulerCommonContentForeground = registerColor('editorOverviewRuler.commonContentForeground', { dark: transparent(mergeCommonHeaderBackground, rulerTransparency), light: transparent(mergeCommonHeaderBackground, rulerTransparency), hcDark: mergeBorder, hcLight: mergeBorder }, nls.localize('overviewRulerCommonContentForeground', 'Common ancestor overview ruler foreground for inline merge-conflicts.'));\nexport const overviewRulerFindMatchForeground = registerColor('editorOverviewRuler.findMatchForeground', { dark: '#d186167e', light: '#d186167e', hcDark: '#AB5A00', hcLight: '' }, nls.localize('overviewRulerFindMatchForeground', 'Overview ruler marker color for find matches. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const overviewRulerSelectionHighlightForeground = registerColor('editorOverviewRuler.selectionHighlightForeground', { dark: '#A0A0A0CC', light: '#A0A0A0CC', hcDark: '#A0A0A0CC', hcLight: '#A0A0A0CC' }, nls.localize('overviewRulerSelectionHighlightForeground', 'Overview ruler marker color for selection highlights. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const minimapFindMatch = registerColor('minimap.findMatchHighlight', { light: '#d18616', dark: '#d18616', hcDark: '#AB5A00', hcLight: '#0F4A85' }, nls.localize('minimapFindMatchHighlight', 'Minimap marker color for find matches.'), true);\nexport const minimapSelectionOccurrenceHighlight = registerColor('minimap.selectionOccurrenceHighlight', { light: '#c9c9c9', dark: '#676767', hcDark: '#ffffff', hcLight: '#0F4A85' }, nls.localize('minimapSelectionOccurrenceHighlight', 'Minimap marker color for repeating editor selections.'), true);\nexport const minimapSelection = registerColor('minimap.selectionHighlight', { light: '#ADD6FF', dark: '#264F78', hcDark: '#ffffff', hcLight: '#0F4A85' }, nls.localize('minimapSelectionHighlight', 'Minimap marker color for the editor selection.'), true);\nexport const minimapError = registerColor('minimap.errorHighlight', { dark: new Color(new RGBA(255, 18, 18, 0.7)), light: new Color(new RGBA(255, 18, 18, 0.7)), hcDark: new Color(new RGBA(255, 50, 50, 1)), hcLight: '#B5200D' }, nls.localize('minimapError', 'Minimap marker color for errors.'));\nexport const minimapWarning = registerColor('minimap.warningHighlight', { dark: editorWarningForeground, light: editorWarningForeground, hcDark: editorWarningBorder, hcLight: editorWarningBorder }, nls.localize('overviewRuleWarning', 'Minimap marker color for warnings.'));\nexport const minimapBackground = registerColor('minimap.background', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('minimapBackground', \"Minimap background color.\"));\nexport const minimapForegroundOpacity = registerColor('minimap.foregroundOpacity', { dark: Color.fromHex('#000f'), light: Color.fromHex('#000f'), hcDark: Color.fromHex('#000f'), hcLight: Color.fromHex('#000f') }, nls.localize('minimapForegroundOpacity', 'Opacity of foreground elements rendered in the minimap. For example, \"#000000c0\" will render the elements with 75% opacity.'));\nexport const minimapSliderBackground = registerColor('minimapSlider.background', { light: transparent(scrollbarSliderBackground, 0.5), dark: transparent(scrollbarSliderBackground, 0.5), hcDark: transparent(scrollbarSliderBackground, 0.5), hcLight: transparent(scrollbarSliderBackground, 0.5) }, nls.localize('minimapSliderBackground', \"Minimap slider background color.\"));\nexport const minimapSliderHoverBackground = registerColor('minimapSlider.hoverBackground', { light: transparent(scrollbarSliderHoverBackground, 0.5), dark: transparent(scrollbarSliderHoverBackground, 0.5), hcDark: transparent(scrollbarSliderHoverBackground, 0.5), hcLight: transparent(scrollbarSliderHoverBackground, 0.5) }, nls.localize('minimapSliderHoverBackground', \"Minimap slider background color when hovering.\"));\nexport const minimapSliderActiveBackground = registerColor('minimapSlider.activeBackground', { light: transparent(scrollbarSliderActiveBackground, 0.5), dark: transparent(scrollbarSliderActiveBackground, 0.5), hcDark: transparent(scrollbarSliderActiveBackground, 0.5), hcLight: transparent(scrollbarSliderActiveBackground, 0.5) }, nls.localize('minimapSliderActiveBackground', \"Minimap slider background color when clicked on.\"));\nexport const problemsErrorIconForeground = registerColor('problemsErrorIcon.foreground', { dark: editorErrorForeground, light: editorErrorForeground, hcDark: editorErrorForeground, hcLight: editorErrorForeground }, nls.localize('problemsErrorIconForeground', \"The color used for the problems error icon.\"));\nexport const problemsWarningIconForeground = registerColor('problemsWarningIcon.foreground', { dark: editorWarningForeground, light: editorWarningForeground, hcDark: editorWarningForeground, hcLight: editorWarningForeground }, nls.localize('problemsWarningIconForeground', \"The color used for the problems warning icon.\"));\nexport const problemsInfoIconForeground = registerColor('problemsInfoIcon.foreground', { dark: editorInfoForeground, light: editorInfoForeground, hcDark: editorInfoForeground, hcLight: editorInfoForeground }, nls.localize('problemsInfoIconForeground', \"The color used for the problems info icon.\"));\n/**\n * Chart colors\n */\nexport const chartsForeground = registerColor('charts.foreground', { dark: foreground, light: foreground, hcDark: foreground, hcLight: foreground }, nls.localize('chartsForeground', \"The foreground color used in charts.\"));\nexport const chartsLines = registerColor('charts.lines', { dark: transparent(foreground, .5), light: transparent(foreground, .5), hcDark: transparent(foreground, .5), hcLight: transparent(foreground, .5) }, nls.localize('chartsLines', \"The color used for horizontal lines in charts.\"));\nexport const chartsRed = registerColor('charts.red', { dark: editorErrorForeground, light: editorErrorForeground, hcDark: editorErrorForeground, hcLight: editorErrorForeground }, nls.localize('chartsRed', \"The red color used in chart visualizations.\"));\nexport const chartsBlue = registerColor('charts.blue', { dark: editorInfoForeground, light: editorInfoForeground, hcDark: editorInfoForeground, hcLight: editorInfoForeground }, nls.localize('chartsBlue', \"The blue color used in chart visualizations.\"));\nexport const chartsYellow = registerColor('charts.yellow', { dark: editorWarningForeground, light: editorWarningForeground, hcDark: editorWarningForeground, hcLight: editorWarningForeground }, nls.localize('chartsYellow', \"The yellow color used in chart visualizations.\"));\nexport const chartsOrange = registerColor('charts.orange', { dark: minimapFindMatch, light: minimapFindMatch, hcDark: minimapFindMatch, hcLight: minimapFindMatch }, nls.localize('chartsOrange', \"The orange color used in chart visualizations.\"));\nexport const chartsGreen = registerColor('charts.green', { dark: '#89D185', light: '#388A34', hcDark: '#89D185', hcLight: '#374e06' }, nls.localize('chartsGreen', \"The green color used in chart visualizations.\"));\nexport const chartsPurple = registerColor('charts.purple', { dark: '#B180D7', light: '#652D90', hcDark: '#B180D7', hcLight: '#652D90' }, nls.localize('chartsPurple', \"The purple color used in chart visualizations.\"));\n// ----- color functions\nexport function executeTransform(transform, theme) {\n    var _a, _b, _c;\n    switch (transform.op) {\n        case 0 /* ColorTransformType.Darken */:\n            return (_a = resolveColorValue(transform.value, theme)) === null || _a === void 0 ? void 0 : _a.darken(transform.factor);\n        case 1 /* ColorTransformType.Lighten */:\n            return (_b = resolveColorValue(transform.value, theme)) === null || _b === void 0 ? void 0 : _b.lighten(transform.factor);\n        case 2 /* ColorTransformType.Transparent */:\n            return (_c = resolveColorValue(transform.value, theme)) === null || _c === void 0 ? void 0 : _c.transparent(transform.factor);\n        case 3 /* ColorTransformType.OneOf */:\n            for (const candidate of transform.values) {\n                const color = resolveColorValue(candidate, theme);\n                if (color) {\n                    return color;\n                }\n            }\n            return undefined;\n        case 5 /* ColorTransformType.IfDefinedThenElse */:\n            return resolveColorValue(theme.defines(transform.if) ? transform.then : transform.else, theme);\n        case 4 /* ColorTransformType.LessProminent */: {\n            const from = resolveColorValue(transform.value, theme);\n            if (!from) {\n                return undefined;\n            }\n            const backgroundColor = resolveColorValue(transform.background, theme);\n            if (!backgroundColor) {\n                return from.transparent(transform.factor * transform.transparency);\n            }\n            return from.isDarkerThan(backgroundColor)\n                ? Color.getLighterColor(from, backgroundColor, transform.factor).transparent(transform.transparency)\n                : Color.getDarkerColor(from, backgroundColor, transform.factor).transparent(transform.transparency);\n        }\n        default:\n            throw assertNever(transform);\n    }\n}\nexport function darken(colorValue, factor) {\n    return { op: 0 /* ColorTransformType.Darken */, value: colorValue, factor };\n}\nexport function lighten(colorValue, factor) {\n    return { op: 1 /* ColorTransformType.Lighten */, value: colorValue, factor };\n}\nexport function transparent(colorValue, factor) {\n    return { op: 2 /* ColorTransformType.Transparent */, value: colorValue, factor };\n}\nexport function oneOf(...colorValues) {\n    return { op: 3 /* ColorTransformType.OneOf */, values: colorValues };\n}\nexport function ifDefinedThenElse(ifArg, thenArg, elseArg) {\n    return { op: 5 /* ColorTransformType.IfDefinedThenElse */, if: ifArg, then: thenArg, else: elseArg };\n}\nfunction lessProminent(colorValue, backgroundColorValue, factor, transparency) {\n    return { op: 4 /* ColorTransformType.LessProminent */, value: colorValue, background: backgroundColorValue, factor, transparency };\n}\n// ----- implementation\n/**\n * @param colorValue Resolve a color value in the context of a theme\n */\nexport function resolveColorValue(colorValue, theme) {\n    if (colorValue === null) {\n        return undefined;\n    }\n    else if (typeof colorValue === 'string') {\n        if (colorValue[0] === '#') {\n            return Color.fromHex(colorValue);\n        }\n        return theme.getColor(colorValue);\n    }\n    else if (colorValue instanceof Color) {\n        return colorValue;\n    }\n    else if (typeof colorValue === 'object') {\n        return executeTransform(colorValue, theme);\n    }\n    return undefined;\n}\nexport const workbenchColorsSchemaId = 'vscode://schemas/workbench-colors';\nconst schemaRegistry = platform.Registry.as(JSONExtensions.JSONContribution);\nschemaRegistry.registerSchema(workbenchColorsSchemaId, colorRegistry.getColorSchema());\nconst delayer = new RunOnceScheduler(() => schemaRegistry.notifySchemaChanged(workbenchColorsSchemaId), 200);\ncolorRegistry.onDidChangeSchema(() => {\n    if (!delayer.isScheduled()) {\n        delayer.schedule();\n    }\n});\n// setTimeout(_ => console.log(colorRegistry.toString()), 5000);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}