{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as browser from '../../../../base/browser/browser.js';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport * as platform from '../../../../base/common/platform.js';\nimport { RangeUtil } from './rangeUtil.js';\nimport { FloatHorizontalRange, VisibleRanges } from '../../view/renderingContext.js';\nimport { LineDecoration } from '../../../common/viewLayout/lineDecorations.js';\nimport { RenderLineInput, renderViewLine, LineRange, DomPosition } from '../../../common/viewLayout/viewLineRenderer.js';\nimport { isHighContrast } from '../../../../platform/theme/common/theme.js';\nimport { EditorFontLigatures } from '../../../common/config/editorOptions.js';\nconst canUseFastRenderedViewLine = function () {\n  if (platform.isNative) {\n    // In VSCode we know very well when the zoom level changes\n    return true;\n  }\n  if (platform.isLinux || browser.isFirefox || browser.isSafari) {\n    // On Linux, it appears that zooming affects char widths (in pixels), which is unexpected.\n    // --\n    // Even though we read character widths correctly, having read them at a specific zoom level\n    // does not mean they are the same at the current zoom level.\n    // --\n    // This could be improved if we ever figure out how to get an event when browsers zoom,\n    // but until then we have to stick with reading client rects.\n    // --\n    // The same has been observed with Firefox on Windows7\n    // --\n    // The same has been oversved with Safari\n    return false;\n  }\n  return true;\n}();\nlet monospaceAssumptionsAreValid = true;\nexport class DomReadingContext {\n  constructor(domNode, endNode) {\n    this._domNode = domNode;\n    this._clientRectDeltaLeft = 0;\n    this._clientRectScale = 1;\n    this._clientRectRead = false;\n    this.endNode = endNode;\n  }\n  readClientRect() {\n    if (!this._clientRectRead) {\n      this._clientRectRead = true;\n      const rect = this._domNode.getBoundingClientRect();\n      this._clientRectDeltaLeft = rect.left;\n      this._clientRectScale = rect.width / this._domNode.offsetWidth;\n    }\n  }\n  get clientRectDeltaLeft() {\n    if (!this._clientRectRead) {\n      this.readClientRect();\n    }\n    return this._clientRectDeltaLeft;\n  }\n  get clientRectScale() {\n    if (!this._clientRectRead) {\n      this.readClientRect();\n    }\n    return this._clientRectScale;\n  }\n}\nexport class ViewLineOptions {\n  constructor(config, themeType) {\n    this.themeType = themeType;\n    const options = config.options;\n    const fontInfo = options.get(46 /* EditorOption.fontInfo */);\n    this.renderWhitespace = options.get(90 /* EditorOption.renderWhitespace */);\n    this.renderControlCharacters = options.get(85 /* EditorOption.renderControlCharacters */);\n    this.spaceWidth = fontInfo.spaceWidth;\n    this.middotWidth = fontInfo.middotWidth;\n    this.wsmiddotWidth = fontInfo.wsmiddotWidth;\n    this.useMonospaceOptimizations = fontInfo.isMonospace && !options.get(29 /* EditorOption.disableMonospaceOptimizations */);\n    this.canUseHalfwidthRightwardsArrow = fontInfo.canUseHalfwidthRightwardsArrow;\n    this.lineHeight = options.get(61 /* EditorOption.lineHeight */);\n    this.stopRenderingLineAfter = options.get(107 /* EditorOption.stopRenderingLineAfter */);\n    this.fontLigatures = options.get(47 /* EditorOption.fontLigatures */);\n  }\n\n  equals(other) {\n    return this.themeType === other.themeType && this.renderWhitespace === other.renderWhitespace && this.renderControlCharacters === other.renderControlCharacters && this.spaceWidth === other.spaceWidth && this.middotWidth === other.middotWidth && this.wsmiddotWidth === other.wsmiddotWidth && this.useMonospaceOptimizations === other.useMonospaceOptimizations && this.canUseHalfwidthRightwardsArrow === other.canUseHalfwidthRightwardsArrow && this.lineHeight === other.lineHeight && this.stopRenderingLineAfter === other.stopRenderingLineAfter && this.fontLigatures === other.fontLigatures;\n  }\n}\nexport class ViewLine {\n  constructor(options) {\n    this._options = options;\n    this._isMaybeInvalid = true;\n    this._renderedViewLine = null;\n  }\n  // --- begin IVisibleLineData\n  getDomNode() {\n    if (this._renderedViewLine && this._renderedViewLine.domNode) {\n      return this._renderedViewLine.domNode.domNode;\n    }\n    return null;\n  }\n  setDomNode(domNode) {\n    if (this._renderedViewLine) {\n      this._renderedViewLine.domNode = createFastDomNode(domNode);\n    } else {\n      throw new Error('I have no rendered view line to set the dom node to...');\n    }\n  }\n  onContentChanged() {\n    this._isMaybeInvalid = true;\n  }\n  onTokensChanged() {\n    this._isMaybeInvalid = true;\n  }\n  onDecorationsChanged() {\n    this._isMaybeInvalid = true;\n  }\n  onOptionsChanged(newOptions) {\n    this._isMaybeInvalid = true;\n    this._options = newOptions;\n  }\n  onSelectionChanged() {\n    if (isHighContrast(this._options.themeType) || this._options.renderWhitespace === 'selection') {\n      this._isMaybeInvalid = true;\n      return true;\n    }\n    return false;\n  }\n  renderLine(lineNumber, deltaTop, viewportData, sb) {\n    if (this._isMaybeInvalid === false) {\n      // it appears that nothing relevant has changed\n      return false;\n    }\n    this._isMaybeInvalid = false;\n    const lineData = viewportData.getViewLineRenderingData(lineNumber);\n    const options = this._options;\n    const actualInlineDecorations = LineDecoration.filter(lineData.inlineDecorations, lineNumber, lineData.minColumn, lineData.maxColumn);\n    // Only send selection information when needed for rendering whitespace\n    let selectionsOnLine = null;\n    if (isHighContrast(options.themeType) || this._options.renderWhitespace === 'selection') {\n      const selections = viewportData.selections;\n      for (const selection of selections) {\n        if (selection.endLineNumber < lineNumber || selection.startLineNumber > lineNumber) {\n          // Selection does not intersect line\n          continue;\n        }\n        const startColumn = selection.startLineNumber === lineNumber ? selection.startColumn : lineData.minColumn;\n        const endColumn = selection.endLineNumber === lineNumber ? selection.endColumn : lineData.maxColumn;\n        if (startColumn < endColumn) {\n          if (isHighContrast(options.themeType) || this._options.renderWhitespace !== 'selection') {\n            actualInlineDecorations.push(new LineDecoration(startColumn, endColumn, 'inline-selected-text', 0 /* InlineDecorationType.Regular */));\n          } else {\n            if (!selectionsOnLine) {\n              selectionsOnLine = [];\n            }\n            selectionsOnLine.push(new LineRange(startColumn - 1, endColumn - 1));\n          }\n        }\n      }\n    }\n    const renderLineInput = new RenderLineInput(options.useMonospaceOptimizations, options.canUseHalfwidthRightwardsArrow, lineData.content, lineData.continuesWithWrappedLine, lineData.isBasicASCII, lineData.containsRTL, lineData.minColumn - 1, lineData.tokens, actualInlineDecorations, lineData.tabSize, lineData.startVisibleColumn, options.spaceWidth, options.middotWidth, options.wsmiddotWidth, options.stopRenderingLineAfter, options.renderWhitespace, options.renderControlCharacters, options.fontLigatures !== EditorFontLigatures.OFF, selectionsOnLine);\n    if (this._renderedViewLine && this._renderedViewLine.input.equals(renderLineInput)) {\n      // no need to do anything, we have the same render input\n      return false;\n    }\n    sb.appendASCIIString('<div style=\"top:');\n    sb.appendASCIIString(String(deltaTop));\n    sb.appendASCIIString('px;height:');\n    sb.appendASCIIString(String(this._options.lineHeight));\n    sb.appendASCIIString('px;\" class=\"');\n    sb.appendASCIIString(ViewLine.CLASS_NAME);\n    sb.appendASCIIString('\">');\n    const output = renderViewLine(renderLineInput, sb);\n    sb.appendASCIIString('</div>');\n    let renderedViewLine = null;\n    if (monospaceAssumptionsAreValid && canUseFastRenderedViewLine && lineData.isBasicASCII && options.useMonospaceOptimizations && output.containsForeignElements === 0 /* ForeignElementType.None */) {\n      if (lineData.content.length < 300 && renderLineInput.lineTokens.getCount() < 100) {\n        // Browser rounding errors have been observed in Chrome and IE, so using the fast\n        // view line only for short lines. Please test before removing the length check...\n        // ---\n        // Another rounding error has been observed on Linux in VSCode, where <span> width\n        // rounding errors add up to an observable large number...\n        // ---\n        // Also see another example of rounding errors on Windows in\n        // https://github.com/microsoft/vscode/issues/33178\n        renderedViewLine = new FastRenderedViewLine(this._renderedViewLine ? this._renderedViewLine.domNode : null, renderLineInput, output.characterMapping);\n      }\n    }\n    if (!renderedViewLine) {\n      renderedViewLine = createRenderedLine(this._renderedViewLine ? this._renderedViewLine.domNode : null, renderLineInput, output.characterMapping, output.containsRTL, output.containsForeignElements);\n    }\n    this._renderedViewLine = renderedViewLine;\n    return true;\n  }\n  layoutLine(lineNumber, deltaTop) {\n    if (this._renderedViewLine && this._renderedViewLine.domNode) {\n      this._renderedViewLine.domNode.setTop(deltaTop);\n      this._renderedViewLine.domNode.setHeight(this._options.lineHeight);\n    }\n  }\n  // --- end IVisibleLineData\n  getWidth() {\n    if (!this._renderedViewLine) {\n      return 0;\n    }\n    return this._renderedViewLine.getWidth();\n  }\n  getWidthIsFast() {\n    if (!this._renderedViewLine) {\n      return true;\n    }\n    return this._renderedViewLine.getWidthIsFast();\n  }\n  needsMonospaceFontCheck() {\n    if (!this._renderedViewLine) {\n      return false;\n    }\n    return this._renderedViewLine instanceof FastRenderedViewLine;\n  }\n  monospaceAssumptionsAreValid() {\n    if (!this._renderedViewLine) {\n      return monospaceAssumptionsAreValid;\n    }\n    if (this._renderedViewLine instanceof FastRenderedViewLine) {\n      return this._renderedViewLine.monospaceAssumptionsAreValid();\n    }\n    return monospaceAssumptionsAreValid;\n  }\n  onMonospaceAssumptionsInvalidated() {\n    if (this._renderedViewLine && this._renderedViewLine instanceof FastRenderedViewLine) {\n      this._renderedViewLine = this._renderedViewLine.toSlowRenderedLine();\n    }\n  }\n  getVisibleRangesForRange(lineNumber, startColumn, endColumn, context) {\n    if (!this._renderedViewLine) {\n      return null;\n    }\n    startColumn = Math.min(this._renderedViewLine.input.lineContent.length + 1, Math.max(1, startColumn));\n    endColumn = Math.min(this._renderedViewLine.input.lineContent.length + 1, Math.max(1, endColumn));\n    const stopRenderingLineAfter = this._renderedViewLine.input.stopRenderingLineAfter;\n    let outsideRenderedLine = false;\n    if (stopRenderingLineAfter !== -1 && startColumn > stopRenderingLineAfter + 1 && endColumn > stopRenderingLineAfter + 1) {\n      // This range is obviously not visible\n      outsideRenderedLine = true;\n    }\n    if (stopRenderingLineAfter !== -1 && startColumn > stopRenderingLineAfter + 1) {\n      startColumn = stopRenderingLineAfter + 1;\n    }\n    if (stopRenderingLineAfter !== -1 && endColumn > stopRenderingLineAfter + 1) {\n      endColumn = stopRenderingLineAfter + 1;\n    }\n    const horizontalRanges = this._renderedViewLine.getVisibleRangesForRange(lineNumber, startColumn, endColumn, context);\n    if (horizontalRanges && horizontalRanges.length > 0) {\n      return new VisibleRanges(outsideRenderedLine, horizontalRanges);\n    }\n    return null;\n  }\n  getColumnOfNodeOffset(lineNumber, spanNode, offset) {\n    if (!this._renderedViewLine) {\n      return 1;\n    }\n    return this._renderedViewLine.getColumnOfNodeOffset(lineNumber, spanNode, offset);\n  }\n}\nViewLine.CLASS_NAME = 'view-line';\n/**\n * A rendered line which is guaranteed to contain only regular ASCII and is rendered with a monospace font.\n */\nclass FastRenderedViewLine {\n  constructor(domNode, renderLineInput, characterMapping) {\n    this.domNode = domNode;\n    this.input = renderLineInput;\n    this._characterMapping = characterMapping;\n    this._charWidth = renderLineInput.spaceWidth;\n  }\n  getWidth() {\n    return Math.round(this._getCharPosition(this._characterMapping.length));\n  }\n  getWidthIsFast() {\n    return true;\n  }\n  monospaceAssumptionsAreValid() {\n    if (!this.domNode) {\n      return monospaceAssumptionsAreValid;\n    }\n    const expectedWidth = this.getWidth();\n    const actualWidth = this.domNode.domNode.firstChild.offsetWidth;\n    if (Math.abs(expectedWidth - actualWidth) >= 2) {\n      // more than 2px off\n      console.warn(`monospace assumptions have been violated, therefore disabling monospace optimizations!`);\n      monospaceAssumptionsAreValid = false;\n    }\n    return monospaceAssumptionsAreValid;\n  }\n  toSlowRenderedLine() {\n    return createRenderedLine(this.domNode, this.input, this._characterMapping, false, 0 /* ForeignElementType.None */);\n  }\n\n  getVisibleRangesForRange(lineNumber, startColumn, endColumn, context) {\n    const startPosition = this._getCharPosition(startColumn);\n    const endPosition = this._getCharPosition(endColumn);\n    return [new FloatHorizontalRange(startPosition, endPosition - startPosition)];\n  }\n  _getCharPosition(column) {\n    const horizontalOffset = this._characterMapping.getHorizontalOffset(column);\n    return this._charWidth * horizontalOffset;\n  }\n  getColumnOfNodeOffset(lineNumber, spanNode, offset) {\n    const spanNodeTextContentLength = spanNode.textContent.length;\n    let spanIndex = -1;\n    while (spanNode) {\n      spanNode = spanNode.previousSibling;\n      spanIndex++;\n    }\n    return this._characterMapping.getColumn(new DomPosition(spanIndex, offset), spanNodeTextContentLength);\n  }\n}\n/**\n * Every time we render a line, we save what we have rendered in an instance of this class.\n */\nclass RenderedViewLine {\n  constructor(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements) {\n    this.domNode = domNode;\n    this.input = renderLineInput;\n    this._characterMapping = characterMapping;\n    this._isWhitespaceOnly = /^\\s*$/.test(renderLineInput.lineContent);\n    this._containsForeignElements = containsForeignElements;\n    this._cachedWidth = -1;\n    this._pixelOffsetCache = null;\n    if (!containsRTL || this._characterMapping.length === 0 /* the line is empty */) {\n      this._pixelOffsetCache = new Float32Array(Math.max(2, this._characterMapping.length + 1));\n      for (let column = 0, len = this._characterMapping.length; column <= len; column++) {\n        this._pixelOffsetCache[column] = -1;\n      }\n    }\n  }\n  // --- Reading from the DOM methods\n  _getReadingTarget(myDomNode) {\n    return myDomNode.domNode.firstChild;\n  }\n  /**\n   * Width of the line in pixels\n   */\n  getWidth() {\n    if (!this.domNode) {\n      return 0;\n    }\n    if (this._cachedWidth === -1) {\n      this._cachedWidth = this._getReadingTarget(this.domNode).offsetWidth;\n    }\n    return this._cachedWidth;\n  }\n  getWidthIsFast() {\n    if (this._cachedWidth === -1) {\n      return false;\n    }\n    return true;\n  }\n  /**\n   * Visible ranges for a model range\n   */\n  getVisibleRangesForRange(lineNumber, startColumn, endColumn, context) {\n    if (!this.domNode) {\n      return null;\n    }\n    if (this._pixelOffsetCache !== null) {\n      // the text is LTR\n      const startOffset = this._readPixelOffset(this.domNode, lineNumber, startColumn, context);\n      if (startOffset === -1) {\n        return null;\n      }\n      const endOffset = this._readPixelOffset(this.domNode, lineNumber, endColumn, context);\n      if (endOffset === -1) {\n        return null;\n      }\n      return [new FloatHorizontalRange(startOffset, endOffset - startOffset)];\n    }\n    return this._readVisibleRangesForRange(this.domNode, lineNumber, startColumn, endColumn, context);\n  }\n  _readVisibleRangesForRange(domNode, lineNumber, startColumn, endColumn, context) {\n    if (startColumn === endColumn) {\n      const pixelOffset = this._readPixelOffset(domNode, lineNumber, startColumn, context);\n      if (pixelOffset === -1) {\n        return null;\n      } else {\n        return [new FloatHorizontalRange(pixelOffset, 0)];\n      }\n    } else {\n      return this._readRawVisibleRangesForRange(domNode, startColumn, endColumn, context);\n    }\n  }\n  _readPixelOffset(domNode, lineNumber, column, context) {\n    if (this._characterMapping.length === 0) {\n      // This line has no content\n      if (this._containsForeignElements === 0 /* ForeignElementType.None */) {\n        // We can assume the line is really empty\n        return 0;\n      }\n      if (this._containsForeignElements === 2 /* ForeignElementType.After */) {\n        // We have foreign elements after the (empty) line\n        return 0;\n      }\n      if (this._containsForeignElements === 1 /* ForeignElementType.Before */) {\n        // We have foreign elements before the (empty) line\n        return this.getWidth();\n      }\n      // We have foreign elements before & after the (empty) line\n      const readingTarget = this._getReadingTarget(domNode);\n      if (readingTarget.firstChild) {\n        return readingTarget.firstChild.offsetWidth;\n      } else {\n        return 0;\n      }\n    }\n    if (this._pixelOffsetCache !== null) {\n      // the text is LTR\n      const cachedPixelOffset = this._pixelOffsetCache[column];\n      if (cachedPixelOffset !== -1) {\n        return cachedPixelOffset;\n      }\n      const result = this._actualReadPixelOffset(domNode, lineNumber, column, context);\n      this._pixelOffsetCache[column] = result;\n      return result;\n    }\n    return this._actualReadPixelOffset(domNode, lineNumber, column, context);\n  }\n  _actualReadPixelOffset(domNode, lineNumber, column, context) {\n    if (this._characterMapping.length === 0) {\n      // This line has no content\n      const r = RangeUtil.readHorizontalRanges(this._getReadingTarget(domNode), 0, 0, 0, 0, context.clientRectDeltaLeft, context.clientRectScale, context.endNode);\n      if (!r || r.length === 0) {\n        return -1;\n      }\n      return r[0].left;\n    }\n    if (column === this._characterMapping.length && this._isWhitespaceOnly && this._containsForeignElements === 0 /* ForeignElementType.None */) {\n      // This branch helps in the case of whitespace only lines which have a width set\n      return this.getWidth();\n    }\n    const domPosition = this._characterMapping.getDomPosition(column);\n    const r = RangeUtil.readHorizontalRanges(this._getReadingTarget(domNode), domPosition.partIndex, domPosition.charIndex, domPosition.partIndex, domPosition.charIndex, context.clientRectDeltaLeft, context.clientRectScale, context.endNode);\n    if (!r || r.length === 0) {\n      return -1;\n    }\n    const result = r[0].left;\n    if (this.input.isBasicASCII) {\n      const horizontalOffset = this._characterMapping.getHorizontalOffset(column);\n      const expectedResult = Math.round(this.input.spaceWidth * horizontalOffset);\n      if (Math.abs(expectedResult - result) <= 1) {\n        return expectedResult;\n      }\n    }\n    return result;\n  }\n  _readRawVisibleRangesForRange(domNode, startColumn, endColumn, context) {\n    if (startColumn === 1 && endColumn === this._characterMapping.length) {\n      // This branch helps IE with bidi text & gives a performance boost to other browsers when reading visible ranges for an entire line\n      return [new FloatHorizontalRange(0, this.getWidth())];\n    }\n    const startDomPosition = this._characterMapping.getDomPosition(startColumn);\n    const endDomPosition = this._characterMapping.getDomPosition(endColumn);\n    return RangeUtil.readHorizontalRanges(this._getReadingTarget(domNode), startDomPosition.partIndex, startDomPosition.charIndex, endDomPosition.partIndex, endDomPosition.charIndex, context.clientRectDeltaLeft, context.clientRectScale, context.endNode);\n  }\n  /**\n   * Returns the column for the text found at a specific offset inside a rendered dom node\n   */\n  getColumnOfNodeOffset(lineNumber, spanNode, offset) {\n    const spanNodeTextContentLength = spanNode.textContent.length;\n    let spanIndex = -1;\n    while (spanNode) {\n      spanNode = spanNode.previousSibling;\n      spanIndex++;\n    }\n    return this._characterMapping.getColumn(new DomPosition(spanIndex, offset), spanNodeTextContentLength);\n  }\n}\nclass WebKitRenderedViewLine extends RenderedViewLine {\n  _readVisibleRangesForRange(domNode, lineNumber, startColumn, endColumn, context) {\n    const output = super._readVisibleRangesForRange(domNode, lineNumber, startColumn, endColumn, context);\n    if (!output || output.length === 0 || startColumn === endColumn || startColumn === 1 && endColumn === this._characterMapping.length) {\n      return output;\n    }\n    // WebKit is buggy and returns an expanded range (to contain words in some cases)\n    // The last client rect is enlarged (I think)\n    if (!this.input.containsRTL) {\n      // This is an attempt to patch things up\n      // Find position of last column\n      const endPixelOffset = this._readPixelOffset(domNode, lineNumber, endColumn, context);\n      if (endPixelOffset !== -1) {\n        const lastRange = output[output.length - 1];\n        if (lastRange.left < endPixelOffset) {\n          // Trim down the width of the last visible range to not go after the last column's position\n          lastRange.width = endPixelOffset - lastRange.left;\n        }\n      }\n    }\n    return output;\n  }\n}\nconst createRenderedLine = function () {\n  if (browser.isWebKit) {\n    return createWebKitRenderedLine;\n  }\n  return createNormalRenderedLine;\n}();\nfunction createWebKitRenderedLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements) {\n  return new WebKitRenderedViewLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements);\n}\nfunction createNormalRenderedLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements) {\n  return new RenderedViewLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements);\n}","map":{"version":3,"names":["browser","createFastDomNode","platform","RangeUtil","FloatHorizontalRange","VisibleRanges","LineDecoration","RenderLineInput","renderViewLine","LineRange","DomPosition","isHighContrast","EditorFontLigatures","canUseFastRenderedViewLine","isNative","isLinux","isFirefox","isSafari","monospaceAssumptionsAreValid","DomReadingContext","constructor","domNode","endNode","_domNode","_clientRectDeltaLeft","_clientRectScale","_clientRectRead","readClientRect","rect","getBoundingClientRect","left","width","offsetWidth","clientRectDeltaLeft","clientRectScale","ViewLineOptions","config","themeType","options","fontInfo","get","renderWhitespace","renderControlCharacters","spaceWidth","middotWidth","wsmiddotWidth","useMonospaceOptimizations","isMonospace","canUseHalfwidthRightwardsArrow","lineHeight","stopRenderingLineAfter","fontLigatures","equals","other","ViewLine","_options","_isMaybeInvalid","_renderedViewLine","getDomNode","setDomNode","Error","onContentChanged","onTokensChanged","onDecorationsChanged","onOptionsChanged","newOptions","onSelectionChanged","renderLine","lineNumber","deltaTop","viewportData","sb","lineData","getViewLineRenderingData","actualInlineDecorations","filter","inlineDecorations","minColumn","maxColumn","selectionsOnLine","selections","selection","endLineNumber","startLineNumber","startColumn","endColumn","push","renderLineInput","content","continuesWithWrappedLine","isBasicASCII","containsRTL","tokens","tabSize","startVisibleColumn","OFF","input","appendASCIIString","String","CLASS_NAME","output","renderedViewLine","containsForeignElements","length","lineTokens","getCount","FastRenderedViewLine","characterMapping","createRenderedLine","layoutLine","setTop","setHeight","getWidth","getWidthIsFast","needsMonospaceFontCheck","onMonospaceAssumptionsInvalidated","toSlowRenderedLine","getVisibleRangesForRange","context","Math","min","lineContent","max","outsideRenderedLine","horizontalRanges","getColumnOfNodeOffset","spanNode","offset","_characterMapping","_charWidth","round","_getCharPosition","expectedWidth","actualWidth","firstChild","abs","console","warn","startPosition","endPosition","column","horizontalOffset","getHorizontalOffset","spanNodeTextContentLength","textContent","spanIndex","previousSibling","getColumn","RenderedViewLine","_isWhitespaceOnly","test","_containsForeignElements","_cachedWidth","_pixelOffsetCache","Float32Array","len","_getReadingTarget","myDomNode","startOffset","_readPixelOffset","endOffset","_readVisibleRangesForRange","pixelOffset","_readRawVisibleRangesForRange","readingTarget","cachedPixelOffset","result","_actualReadPixelOffset","r","readHorizontalRanges","domPosition","getDomPosition","partIndex","charIndex","expectedResult","startDomPosition","endDomPosition","WebKitRenderedViewLine","endPixelOffset","lastRange","isWebKit","createWebKitRenderedLine","createNormalRenderedLine"],"sources":["/home/deathblade287/Desktop/AI-MODELS-TESTING/react-app/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/lines/viewLine.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as browser from '../../../../base/browser/browser.js';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport * as platform from '../../../../base/common/platform.js';\nimport { RangeUtil } from './rangeUtil.js';\nimport { FloatHorizontalRange, VisibleRanges } from '../../view/renderingContext.js';\nimport { LineDecoration } from '../../../common/viewLayout/lineDecorations.js';\nimport { RenderLineInput, renderViewLine, LineRange, DomPosition } from '../../../common/viewLayout/viewLineRenderer.js';\nimport { isHighContrast } from '../../../../platform/theme/common/theme.js';\nimport { EditorFontLigatures } from '../../../common/config/editorOptions.js';\nconst canUseFastRenderedViewLine = (function () {\n    if (platform.isNative) {\n        // In VSCode we know very well when the zoom level changes\n        return true;\n    }\n    if (platform.isLinux || browser.isFirefox || browser.isSafari) {\n        // On Linux, it appears that zooming affects char widths (in pixels), which is unexpected.\n        // --\n        // Even though we read character widths correctly, having read them at a specific zoom level\n        // does not mean they are the same at the current zoom level.\n        // --\n        // This could be improved if we ever figure out how to get an event when browsers zoom,\n        // but until then we have to stick with reading client rects.\n        // --\n        // The same has been observed with Firefox on Windows7\n        // --\n        // The same has been oversved with Safari\n        return false;\n    }\n    return true;\n})();\nlet monospaceAssumptionsAreValid = true;\nexport class DomReadingContext {\n    constructor(domNode, endNode) {\n        this._domNode = domNode;\n        this._clientRectDeltaLeft = 0;\n        this._clientRectScale = 1;\n        this._clientRectRead = false;\n        this.endNode = endNode;\n    }\n    readClientRect() {\n        if (!this._clientRectRead) {\n            this._clientRectRead = true;\n            const rect = this._domNode.getBoundingClientRect();\n            this._clientRectDeltaLeft = rect.left;\n            this._clientRectScale = rect.width / this._domNode.offsetWidth;\n        }\n    }\n    get clientRectDeltaLeft() {\n        if (!this._clientRectRead) {\n            this.readClientRect();\n        }\n        return this._clientRectDeltaLeft;\n    }\n    get clientRectScale() {\n        if (!this._clientRectRead) {\n            this.readClientRect();\n        }\n        return this._clientRectScale;\n    }\n}\nexport class ViewLineOptions {\n    constructor(config, themeType) {\n        this.themeType = themeType;\n        const options = config.options;\n        const fontInfo = options.get(46 /* EditorOption.fontInfo */);\n        this.renderWhitespace = options.get(90 /* EditorOption.renderWhitespace */);\n        this.renderControlCharacters = options.get(85 /* EditorOption.renderControlCharacters */);\n        this.spaceWidth = fontInfo.spaceWidth;\n        this.middotWidth = fontInfo.middotWidth;\n        this.wsmiddotWidth = fontInfo.wsmiddotWidth;\n        this.useMonospaceOptimizations = (fontInfo.isMonospace\n            && !options.get(29 /* EditorOption.disableMonospaceOptimizations */));\n        this.canUseHalfwidthRightwardsArrow = fontInfo.canUseHalfwidthRightwardsArrow;\n        this.lineHeight = options.get(61 /* EditorOption.lineHeight */);\n        this.stopRenderingLineAfter = options.get(107 /* EditorOption.stopRenderingLineAfter */);\n        this.fontLigatures = options.get(47 /* EditorOption.fontLigatures */);\n    }\n    equals(other) {\n        return (this.themeType === other.themeType\n            && this.renderWhitespace === other.renderWhitespace\n            && this.renderControlCharacters === other.renderControlCharacters\n            && this.spaceWidth === other.spaceWidth\n            && this.middotWidth === other.middotWidth\n            && this.wsmiddotWidth === other.wsmiddotWidth\n            && this.useMonospaceOptimizations === other.useMonospaceOptimizations\n            && this.canUseHalfwidthRightwardsArrow === other.canUseHalfwidthRightwardsArrow\n            && this.lineHeight === other.lineHeight\n            && this.stopRenderingLineAfter === other.stopRenderingLineAfter\n            && this.fontLigatures === other.fontLigatures);\n    }\n}\nexport class ViewLine {\n    constructor(options) {\n        this._options = options;\n        this._isMaybeInvalid = true;\n        this._renderedViewLine = null;\n    }\n    // --- begin IVisibleLineData\n    getDomNode() {\n        if (this._renderedViewLine && this._renderedViewLine.domNode) {\n            return this._renderedViewLine.domNode.domNode;\n        }\n        return null;\n    }\n    setDomNode(domNode) {\n        if (this._renderedViewLine) {\n            this._renderedViewLine.domNode = createFastDomNode(domNode);\n        }\n        else {\n            throw new Error('I have no rendered view line to set the dom node to...');\n        }\n    }\n    onContentChanged() {\n        this._isMaybeInvalid = true;\n    }\n    onTokensChanged() {\n        this._isMaybeInvalid = true;\n    }\n    onDecorationsChanged() {\n        this._isMaybeInvalid = true;\n    }\n    onOptionsChanged(newOptions) {\n        this._isMaybeInvalid = true;\n        this._options = newOptions;\n    }\n    onSelectionChanged() {\n        if (isHighContrast(this._options.themeType) || this._options.renderWhitespace === 'selection') {\n            this._isMaybeInvalid = true;\n            return true;\n        }\n        return false;\n    }\n    renderLine(lineNumber, deltaTop, viewportData, sb) {\n        if (this._isMaybeInvalid === false) {\n            // it appears that nothing relevant has changed\n            return false;\n        }\n        this._isMaybeInvalid = false;\n        const lineData = viewportData.getViewLineRenderingData(lineNumber);\n        const options = this._options;\n        const actualInlineDecorations = LineDecoration.filter(lineData.inlineDecorations, lineNumber, lineData.minColumn, lineData.maxColumn);\n        // Only send selection information when needed for rendering whitespace\n        let selectionsOnLine = null;\n        if (isHighContrast(options.themeType) || this._options.renderWhitespace === 'selection') {\n            const selections = viewportData.selections;\n            for (const selection of selections) {\n                if (selection.endLineNumber < lineNumber || selection.startLineNumber > lineNumber) {\n                    // Selection does not intersect line\n                    continue;\n                }\n                const startColumn = (selection.startLineNumber === lineNumber ? selection.startColumn : lineData.minColumn);\n                const endColumn = (selection.endLineNumber === lineNumber ? selection.endColumn : lineData.maxColumn);\n                if (startColumn < endColumn) {\n                    if (isHighContrast(options.themeType) || this._options.renderWhitespace !== 'selection') {\n                        actualInlineDecorations.push(new LineDecoration(startColumn, endColumn, 'inline-selected-text', 0 /* InlineDecorationType.Regular */));\n                    }\n                    else {\n                        if (!selectionsOnLine) {\n                            selectionsOnLine = [];\n                        }\n                        selectionsOnLine.push(new LineRange(startColumn - 1, endColumn - 1));\n                    }\n                }\n            }\n        }\n        const renderLineInput = new RenderLineInput(options.useMonospaceOptimizations, options.canUseHalfwidthRightwardsArrow, lineData.content, lineData.continuesWithWrappedLine, lineData.isBasicASCII, lineData.containsRTL, lineData.minColumn - 1, lineData.tokens, actualInlineDecorations, lineData.tabSize, lineData.startVisibleColumn, options.spaceWidth, options.middotWidth, options.wsmiddotWidth, options.stopRenderingLineAfter, options.renderWhitespace, options.renderControlCharacters, options.fontLigatures !== EditorFontLigatures.OFF, selectionsOnLine);\n        if (this._renderedViewLine && this._renderedViewLine.input.equals(renderLineInput)) {\n            // no need to do anything, we have the same render input\n            return false;\n        }\n        sb.appendASCIIString('<div style=\"top:');\n        sb.appendASCIIString(String(deltaTop));\n        sb.appendASCIIString('px;height:');\n        sb.appendASCIIString(String(this._options.lineHeight));\n        sb.appendASCIIString('px;\" class=\"');\n        sb.appendASCIIString(ViewLine.CLASS_NAME);\n        sb.appendASCIIString('\">');\n        const output = renderViewLine(renderLineInput, sb);\n        sb.appendASCIIString('</div>');\n        let renderedViewLine = null;\n        if (monospaceAssumptionsAreValid && canUseFastRenderedViewLine && lineData.isBasicASCII && options.useMonospaceOptimizations && output.containsForeignElements === 0 /* ForeignElementType.None */) {\n            if (lineData.content.length < 300 && renderLineInput.lineTokens.getCount() < 100) {\n                // Browser rounding errors have been observed in Chrome and IE, so using the fast\n                // view line only for short lines. Please test before removing the length check...\n                // ---\n                // Another rounding error has been observed on Linux in VSCode, where <span> width\n                // rounding errors add up to an observable large number...\n                // ---\n                // Also see another example of rounding errors on Windows in\n                // https://github.com/microsoft/vscode/issues/33178\n                renderedViewLine = new FastRenderedViewLine(this._renderedViewLine ? this._renderedViewLine.domNode : null, renderLineInput, output.characterMapping);\n            }\n        }\n        if (!renderedViewLine) {\n            renderedViewLine = createRenderedLine(this._renderedViewLine ? this._renderedViewLine.domNode : null, renderLineInput, output.characterMapping, output.containsRTL, output.containsForeignElements);\n        }\n        this._renderedViewLine = renderedViewLine;\n        return true;\n    }\n    layoutLine(lineNumber, deltaTop) {\n        if (this._renderedViewLine && this._renderedViewLine.domNode) {\n            this._renderedViewLine.domNode.setTop(deltaTop);\n            this._renderedViewLine.domNode.setHeight(this._options.lineHeight);\n        }\n    }\n    // --- end IVisibleLineData\n    getWidth() {\n        if (!this._renderedViewLine) {\n            return 0;\n        }\n        return this._renderedViewLine.getWidth();\n    }\n    getWidthIsFast() {\n        if (!this._renderedViewLine) {\n            return true;\n        }\n        return this._renderedViewLine.getWidthIsFast();\n    }\n    needsMonospaceFontCheck() {\n        if (!this._renderedViewLine) {\n            return false;\n        }\n        return (this._renderedViewLine instanceof FastRenderedViewLine);\n    }\n    monospaceAssumptionsAreValid() {\n        if (!this._renderedViewLine) {\n            return monospaceAssumptionsAreValid;\n        }\n        if (this._renderedViewLine instanceof FastRenderedViewLine) {\n            return this._renderedViewLine.monospaceAssumptionsAreValid();\n        }\n        return monospaceAssumptionsAreValid;\n    }\n    onMonospaceAssumptionsInvalidated() {\n        if (this._renderedViewLine && this._renderedViewLine instanceof FastRenderedViewLine) {\n            this._renderedViewLine = this._renderedViewLine.toSlowRenderedLine();\n        }\n    }\n    getVisibleRangesForRange(lineNumber, startColumn, endColumn, context) {\n        if (!this._renderedViewLine) {\n            return null;\n        }\n        startColumn = Math.min(this._renderedViewLine.input.lineContent.length + 1, Math.max(1, startColumn));\n        endColumn = Math.min(this._renderedViewLine.input.lineContent.length + 1, Math.max(1, endColumn));\n        const stopRenderingLineAfter = this._renderedViewLine.input.stopRenderingLineAfter;\n        let outsideRenderedLine = false;\n        if (stopRenderingLineAfter !== -1 && startColumn > stopRenderingLineAfter + 1 && endColumn > stopRenderingLineAfter + 1) {\n            // This range is obviously not visible\n            outsideRenderedLine = true;\n        }\n        if (stopRenderingLineAfter !== -1 && startColumn > stopRenderingLineAfter + 1) {\n            startColumn = stopRenderingLineAfter + 1;\n        }\n        if (stopRenderingLineAfter !== -1 && endColumn > stopRenderingLineAfter + 1) {\n            endColumn = stopRenderingLineAfter + 1;\n        }\n        const horizontalRanges = this._renderedViewLine.getVisibleRangesForRange(lineNumber, startColumn, endColumn, context);\n        if (horizontalRanges && horizontalRanges.length > 0) {\n            return new VisibleRanges(outsideRenderedLine, horizontalRanges);\n        }\n        return null;\n    }\n    getColumnOfNodeOffset(lineNumber, spanNode, offset) {\n        if (!this._renderedViewLine) {\n            return 1;\n        }\n        return this._renderedViewLine.getColumnOfNodeOffset(lineNumber, spanNode, offset);\n    }\n}\nViewLine.CLASS_NAME = 'view-line';\n/**\n * A rendered line which is guaranteed to contain only regular ASCII and is rendered with a monospace font.\n */\nclass FastRenderedViewLine {\n    constructor(domNode, renderLineInput, characterMapping) {\n        this.domNode = domNode;\n        this.input = renderLineInput;\n        this._characterMapping = characterMapping;\n        this._charWidth = renderLineInput.spaceWidth;\n    }\n    getWidth() {\n        return Math.round(this._getCharPosition(this._characterMapping.length));\n    }\n    getWidthIsFast() {\n        return true;\n    }\n    monospaceAssumptionsAreValid() {\n        if (!this.domNode) {\n            return monospaceAssumptionsAreValid;\n        }\n        const expectedWidth = this.getWidth();\n        const actualWidth = this.domNode.domNode.firstChild.offsetWidth;\n        if (Math.abs(expectedWidth - actualWidth) >= 2) {\n            // more than 2px off\n            console.warn(`monospace assumptions have been violated, therefore disabling monospace optimizations!`);\n            monospaceAssumptionsAreValid = false;\n        }\n        return monospaceAssumptionsAreValid;\n    }\n    toSlowRenderedLine() {\n        return createRenderedLine(this.domNode, this.input, this._characterMapping, false, 0 /* ForeignElementType.None */);\n    }\n    getVisibleRangesForRange(lineNumber, startColumn, endColumn, context) {\n        const startPosition = this._getCharPosition(startColumn);\n        const endPosition = this._getCharPosition(endColumn);\n        return [new FloatHorizontalRange(startPosition, endPosition - startPosition)];\n    }\n    _getCharPosition(column) {\n        const horizontalOffset = this._characterMapping.getHorizontalOffset(column);\n        return this._charWidth * horizontalOffset;\n    }\n    getColumnOfNodeOffset(lineNumber, spanNode, offset) {\n        const spanNodeTextContentLength = spanNode.textContent.length;\n        let spanIndex = -1;\n        while (spanNode) {\n            spanNode = spanNode.previousSibling;\n            spanIndex++;\n        }\n        return this._characterMapping.getColumn(new DomPosition(spanIndex, offset), spanNodeTextContentLength);\n    }\n}\n/**\n * Every time we render a line, we save what we have rendered in an instance of this class.\n */\nclass RenderedViewLine {\n    constructor(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements) {\n        this.domNode = domNode;\n        this.input = renderLineInput;\n        this._characterMapping = characterMapping;\n        this._isWhitespaceOnly = /^\\s*$/.test(renderLineInput.lineContent);\n        this._containsForeignElements = containsForeignElements;\n        this._cachedWidth = -1;\n        this._pixelOffsetCache = null;\n        if (!containsRTL || this._characterMapping.length === 0 /* the line is empty */) {\n            this._pixelOffsetCache = new Float32Array(Math.max(2, this._characterMapping.length + 1));\n            for (let column = 0, len = this._characterMapping.length; column <= len; column++) {\n                this._pixelOffsetCache[column] = -1;\n            }\n        }\n    }\n    // --- Reading from the DOM methods\n    _getReadingTarget(myDomNode) {\n        return myDomNode.domNode.firstChild;\n    }\n    /**\n     * Width of the line in pixels\n     */\n    getWidth() {\n        if (!this.domNode) {\n            return 0;\n        }\n        if (this._cachedWidth === -1) {\n            this._cachedWidth = this._getReadingTarget(this.domNode).offsetWidth;\n        }\n        return this._cachedWidth;\n    }\n    getWidthIsFast() {\n        if (this._cachedWidth === -1) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Visible ranges for a model range\n     */\n    getVisibleRangesForRange(lineNumber, startColumn, endColumn, context) {\n        if (!this.domNode) {\n            return null;\n        }\n        if (this._pixelOffsetCache !== null) {\n            // the text is LTR\n            const startOffset = this._readPixelOffset(this.domNode, lineNumber, startColumn, context);\n            if (startOffset === -1) {\n                return null;\n            }\n            const endOffset = this._readPixelOffset(this.domNode, lineNumber, endColumn, context);\n            if (endOffset === -1) {\n                return null;\n            }\n            return [new FloatHorizontalRange(startOffset, endOffset - startOffset)];\n        }\n        return this._readVisibleRangesForRange(this.domNode, lineNumber, startColumn, endColumn, context);\n    }\n    _readVisibleRangesForRange(domNode, lineNumber, startColumn, endColumn, context) {\n        if (startColumn === endColumn) {\n            const pixelOffset = this._readPixelOffset(domNode, lineNumber, startColumn, context);\n            if (pixelOffset === -1) {\n                return null;\n            }\n            else {\n                return [new FloatHorizontalRange(pixelOffset, 0)];\n            }\n        }\n        else {\n            return this._readRawVisibleRangesForRange(domNode, startColumn, endColumn, context);\n        }\n    }\n    _readPixelOffset(domNode, lineNumber, column, context) {\n        if (this._characterMapping.length === 0) {\n            // This line has no content\n            if (this._containsForeignElements === 0 /* ForeignElementType.None */) {\n                // We can assume the line is really empty\n                return 0;\n            }\n            if (this._containsForeignElements === 2 /* ForeignElementType.After */) {\n                // We have foreign elements after the (empty) line\n                return 0;\n            }\n            if (this._containsForeignElements === 1 /* ForeignElementType.Before */) {\n                // We have foreign elements before the (empty) line\n                return this.getWidth();\n            }\n            // We have foreign elements before & after the (empty) line\n            const readingTarget = this._getReadingTarget(domNode);\n            if (readingTarget.firstChild) {\n                return readingTarget.firstChild.offsetWidth;\n            }\n            else {\n                return 0;\n            }\n        }\n        if (this._pixelOffsetCache !== null) {\n            // the text is LTR\n            const cachedPixelOffset = this._pixelOffsetCache[column];\n            if (cachedPixelOffset !== -1) {\n                return cachedPixelOffset;\n            }\n            const result = this._actualReadPixelOffset(domNode, lineNumber, column, context);\n            this._pixelOffsetCache[column] = result;\n            return result;\n        }\n        return this._actualReadPixelOffset(domNode, lineNumber, column, context);\n    }\n    _actualReadPixelOffset(domNode, lineNumber, column, context) {\n        if (this._characterMapping.length === 0) {\n            // This line has no content\n            const r = RangeUtil.readHorizontalRanges(this._getReadingTarget(domNode), 0, 0, 0, 0, context.clientRectDeltaLeft, context.clientRectScale, context.endNode);\n            if (!r || r.length === 0) {\n                return -1;\n            }\n            return r[0].left;\n        }\n        if (column === this._characterMapping.length && this._isWhitespaceOnly && this._containsForeignElements === 0 /* ForeignElementType.None */) {\n            // This branch helps in the case of whitespace only lines which have a width set\n            return this.getWidth();\n        }\n        const domPosition = this._characterMapping.getDomPosition(column);\n        const r = RangeUtil.readHorizontalRanges(this._getReadingTarget(domNode), domPosition.partIndex, domPosition.charIndex, domPosition.partIndex, domPosition.charIndex, context.clientRectDeltaLeft, context.clientRectScale, context.endNode);\n        if (!r || r.length === 0) {\n            return -1;\n        }\n        const result = r[0].left;\n        if (this.input.isBasicASCII) {\n            const horizontalOffset = this._characterMapping.getHorizontalOffset(column);\n            const expectedResult = Math.round(this.input.spaceWidth * horizontalOffset);\n            if (Math.abs(expectedResult - result) <= 1) {\n                return expectedResult;\n            }\n        }\n        return result;\n    }\n    _readRawVisibleRangesForRange(domNode, startColumn, endColumn, context) {\n        if (startColumn === 1 && endColumn === this._characterMapping.length) {\n            // This branch helps IE with bidi text & gives a performance boost to other browsers when reading visible ranges for an entire line\n            return [new FloatHorizontalRange(0, this.getWidth())];\n        }\n        const startDomPosition = this._characterMapping.getDomPosition(startColumn);\n        const endDomPosition = this._characterMapping.getDomPosition(endColumn);\n        return RangeUtil.readHorizontalRanges(this._getReadingTarget(domNode), startDomPosition.partIndex, startDomPosition.charIndex, endDomPosition.partIndex, endDomPosition.charIndex, context.clientRectDeltaLeft, context.clientRectScale, context.endNode);\n    }\n    /**\n     * Returns the column for the text found at a specific offset inside a rendered dom node\n     */\n    getColumnOfNodeOffset(lineNumber, spanNode, offset) {\n        const spanNodeTextContentLength = spanNode.textContent.length;\n        let spanIndex = -1;\n        while (spanNode) {\n            spanNode = spanNode.previousSibling;\n            spanIndex++;\n        }\n        return this._characterMapping.getColumn(new DomPosition(spanIndex, offset), spanNodeTextContentLength);\n    }\n}\nclass WebKitRenderedViewLine extends RenderedViewLine {\n    _readVisibleRangesForRange(domNode, lineNumber, startColumn, endColumn, context) {\n        const output = super._readVisibleRangesForRange(domNode, lineNumber, startColumn, endColumn, context);\n        if (!output || output.length === 0 || startColumn === endColumn || (startColumn === 1 && endColumn === this._characterMapping.length)) {\n            return output;\n        }\n        // WebKit is buggy and returns an expanded range (to contain words in some cases)\n        // The last client rect is enlarged (I think)\n        if (!this.input.containsRTL) {\n            // This is an attempt to patch things up\n            // Find position of last column\n            const endPixelOffset = this._readPixelOffset(domNode, lineNumber, endColumn, context);\n            if (endPixelOffset !== -1) {\n                const lastRange = output[output.length - 1];\n                if (lastRange.left < endPixelOffset) {\n                    // Trim down the width of the last visible range to not go after the last column's position\n                    lastRange.width = endPixelOffset - lastRange.left;\n                }\n            }\n        }\n        return output;\n    }\n}\nconst createRenderedLine = (function () {\n    if (browser.isWebKit) {\n        return createWebKitRenderedLine;\n    }\n    return createNormalRenderedLine;\n})();\nfunction createWebKitRenderedLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements) {\n    return new WebKitRenderedViewLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements);\n}\nfunction createNormalRenderedLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements) {\n    return new RenderedViewLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}