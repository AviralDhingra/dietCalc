{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { $, addDisposableListener, append, scheduleAtNextAnimationFrame } from '../../dom.js';\nimport { Sash } from '../sash/sash.js';\nimport { SmoothScrollableElement } from '../scrollbar/scrollableElement.js';\nimport { pushToEnd, pushToStart, range } from '../../../common/arrays.js';\nimport { Color } from '../../../common/color.js';\nimport { Emitter, Event } from '../../../common/event.js';\nimport { combinedDisposable, Disposable, dispose, toDisposable } from '../../../common/lifecycle.js';\nimport { clamp } from '../../../common/numbers.js';\nimport { Scrollable } from '../../../common/scrollable.js';\nimport * as types from '../../../common/types.js';\nimport './splitview.css';\nconst defaultStyles = {\n  separatorBorder: Color.transparent\n};\nclass ViewItem {\n  constructor(container, view, size, disposable) {\n    this.container = container;\n    this.view = view;\n    this.disposable = disposable;\n    this._cachedVisibleSize = undefined;\n    if (typeof size === 'number') {\n      this._size = size;\n      this._cachedVisibleSize = undefined;\n      container.classList.add('visible');\n    } else {\n      this._size = 0;\n      this._cachedVisibleSize = size.cachedVisibleSize;\n    }\n  }\n  set size(size) {\n    this._size = size;\n  }\n  get size() {\n    return this._size;\n  }\n  get visible() {\n    return typeof this._cachedVisibleSize === 'undefined';\n  }\n  setVisible(visible, size) {\n    var _a, _b;\n    if (visible === this.visible) {\n      return;\n    }\n    if (visible) {\n      this.size = clamp(this._cachedVisibleSize, this.viewMinimumSize, this.viewMaximumSize);\n      this._cachedVisibleSize = undefined;\n    } else {\n      this._cachedVisibleSize = typeof size === 'number' ? size : this.size;\n      this.size = 0;\n    }\n    this.container.classList.toggle('visible', visible);\n    (_b = (_a = this.view).setVisible) === null || _b === void 0 ? void 0 : _b.call(_a, visible);\n  }\n  get minimumSize() {\n    return this.visible ? this.view.minimumSize : 0;\n  }\n  get viewMinimumSize() {\n    return this.view.minimumSize;\n  }\n  get maximumSize() {\n    return this.visible ? this.view.maximumSize : 0;\n  }\n  get viewMaximumSize() {\n    return this.view.maximumSize;\n  }\n  get priority() {\n    return this.view.priority;\n  }\n  get snap() {\n    return !!this.view.snap;\n  }\n  set enabled(enabled) {\n    this.container.style.pointerEvents = enabled ? '' : 'none';\n  }\n  layout(offset, layoutContext) {\n    this.layoutContainer(offset);\n    this.view.layout(this.size, offset, layoutContext);\n  }\n  dispose() {\n    this.disposable.dispose();\n    return this.view;\n  }\n}\nclass VerticalViewItem extends ViewItem {\n  layoutContainer(offset) {\n    this.container.style.top = `${offset}px`;\n    this.container.style.height = `${this.size}px`;\n  }\n}\nclass HorizontalViewItem extends ViewItem {\n  layoutContainer(offset) {\n    this.container.style.left = `${offset}px`;\n    this.container.style.width = `${this.size}px`;\n  }\n}\nvar State;\n(function (State) {\n  State[State[\"Idle\"] = 0] = \"Idle\";\n  State[State[\"Busy\"] = 1] = \"Busy\";\n})(State || (State = {}));\nexport var Sizing;\n(function (Sizing) {\n  /**\n   * When adding or removing views, distribute the delta space among\n   * all other views.\n   */\n  Sizing.Distribute = {\n    type: 'distribute'\n  };\n  /**\n   * When adding or removing views, split the delta space with another\n   * specific view, indexed by the provided `index`.\n   */\n  function Split(index) {\n    return {\n      type: 'split',\n      index\n    };\n  }\n  Sizing.Split = Split;\n  /**\n   * When adding or removing views, assume the view is invisible.\n   */\n  function Invisible(cachedVisibleSize) {\n    return {\n      type: 'invisible',\n      cachedVisibleSize\n    };\n  }\n  Sizing.Invisible = Invisible;\n})(Sizing || (Sizing = {}));\n/**\n * The {@link SplitView} is the UI component which implements a one dimensional\n * flex-like layout algorithm for a collection of {@link IView} instances, which\n * are essentially HTMLElement instances with the following size constraints:\n *\n * - {@link IView.minimumSize}\n * - {@link IView.maximumSize}\n * - {@link IView.priority}\n * - {@link IView.snap}\n *\n * In case the SplitView doesn't have enough size to fit all views, it will overflow\n * its content with a scrollbar.\n *\n * In between each pair of views there will be a {@link Sash} allowing the user\n * to resize the views, making sure the constraints are respected.\n *\n * An optional {@link TLayoutContext layout context type} may be used in order to\n * pass along layout contextual data from the {@link SplitView.layout} method down\n * to each view's {@link IView.layout} calls.\n *\n * Features:\n * - Flex-like layout algorithm\n * - Snap support\n * - Orthogonal sash support, for corner sashes\n * - View hide/show support\n * - View swap/move support\n * - Alt key modifier behavior, macOS style\n */\nexport class SplitView extends Disposable {\n  /**\n   * Create a new {@link SplitView} instance.\n   */\n  constructor(container) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var _a, _b, _c, _d, _e;\n    super();\n    this.size = 0;\n    this.contentSize = 0;\n    this.proportions = undefined;\n    this.viewItems = [];\n    this.sashItems = [];\n    this.state = State.Idle;\n    this._onDidSashChange = this._register(new Emitter());\n    this._onDidSashReset = this._register(new Emitter());\n    this._startSnappingEnabled = true;\n    this._endSnappingEnabled = true;\n    /**\n     * Fires whenever the user resizes a {@link Sash sash}.\n     */\n    this.onDidSashChange = this._onDidSashChange.event;\n    /**\n     * Fires whenever the user double clicks a {@link Sash sash}.\n     */\n    this.onDidSashReset = this._onDidSashReset.event;\n    this.orientation = (_a = options.orientation) !== null && _a !== void 0 ? _a : 0 /* Orientation.VERTICAL */;\n    this.inverseAltBehavior = (_b = options.inverseAltBehavior) !== null && _b !== void 0 ? _b : false;\n    this.proportionalLayout = (_c = options.proportionalLayout) !== null && _c !== void 0 ? _c : true;\n    this.getSashOrthogonalSize = options.getSashOrthogonalSize;\n    this.el = document.createElement('div');\n    this.el.classList.add('monaco-split-view2');\n    this.el.classList.add(this.orientation === 0 /* Orientation.VERTICAL */ ? 'vertical' : 'horizontal');\n    container.appendChild(this.el);\n    this.sashContainer = append(this.el, $('.sash-container'));\n    this.viewContainer = $('.split-view-container');\n    this.scrollable = new Scrollable({\n      forceIntegerValues: true,\n      smoothScrollDuration: 125,\n      scheduleAtNextAnimationFrame\n    });\n    this.scrollableElement = this._register(new SmoothScrollableElement(this.viewContainer, {\n      vertical: this.orientation === 0 /* Orientation.VERTICAL */ ? (_d = options.scrollbarVisibility) !== null && _d !== void 0 ? _d : 1 /* ScrollbarVisibility.Auto */ : 2 /* ScrollbarVisibility.Hidden */,\n      horizontal: this.orientation === 1 /* Orientation.HORIZONTAL */ ? (_e = options.scrollbarVisibility) !== null && _e !== void 0 ? _e : 1 /* ScrollbarVisibility.Auto */ : 2 /* ScrollbarVisibility.Hidden */\n    }, this.scrollable));\n    this.onDidScroll = this.scrollableElement.onScroll;\n    this._register(this.onDidScroll(e => {\n      this.viewContainer.scrollTop = e.scrollTop;\n      this.viewContainer.scrollLeft = e.scrollLeft;\n    }));\n    append(this.el, this.scrollableElement.getDomNode());\n    this.style(options.styles || defaultStyles);\n    // We have an existing set of view, add them now\n    if (options.descriptor) {\n      this.size = options.descriptor.size;\n      options.descriptor.views.forEach((viewDescriptor, index) => {\n        const sizing = types.isUndefined(viewDescriptor.visible) || viewDescriptor.visible ? viewDescriptor.size : {\n          type: 'invisible',\n          cachedVisibleSize: viewDescriptor.size\n        };\n        const view = viewDescriptor.view;\n        this.doAddView(view, sizing, index, true);\n      });\n      // Initialize content size and proportions for first layout\n      this.contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n      this.saveProportions();\n    }\n  }\n  get orthogonalStartSash() {\n    return this._orthogonalStartSash;\n  }\n  get orthogonalEndSash() {\n    return this._orthogonalEndSash;\n  }\n  get startSnappingEnabled() {\n    return this._startSnappingEnabled;\n  }\n  get endSnappingEnabled() {\n    return this._endSnappingEnabled;\n  }\n  /**\n   * A reference to a sash, perpendicular to all sashes in this {@link SplitView},\n   * located at the left- or top-most side of the SplitView.\n   * Corner sashes will be created automatically at the intersections.\n   */\n  set orthogonalStartSash(sash) {\n    for (const sashItem of this.sashItems) {\n      sashItem.sash.orthogonalStartSash = sash;\n    }\n    this._orthogonalStartSash = sash;\n  }\n  /**\n   * A reference to a sash, perpendicular to all sashes in this {@link SplitView},\n   * located at the right- or bottom-most side of the SplitView.\n   * Corner sashes will be created automatically at the intersections.\n   */\n  set orthogonalEndSash(sash) {\n    for (const sashItem of this.sashItems) {\n      sashItem.sash.orthogonalEndSash = sash;\n    }\n    this._orthogonalEndSash = sash;\n  }\n  /**\n   * Enable/disable snapping at the beginning of this {@link SplitView}.\n   */\n  set startSnappingEnabled(startSnappingEnabled) {\n    if (this._startSnappingEnabled === startSnappingEnabled) {\n      return;\n    }\n    this._startSnappingEnabled = startSnappingEnabled;\n    this.updateSashEnablement();\n  }\n  /**\n   * Enable/disable snapping at the end of this {@link SplitView}.\n   */\n  set endSnappingEnabled(endSnappingEnabled) {\n    if (this._endSnappingEnabled === endSnappingEnabled) {\n      return;\n    }\n    this._endSnappingEnabled = endSnappingEnabled;\n    this.updateSashEnablement();\n  }\n  style(styles) {\n    if (styles.separatorBorder.isTransparent()) {\n      this.el.classList.remove('separator-border');\n      this.el.style.removeProperty('--separator-border');\n    } else {\n      this.el.classList.add('separator-border');\n      this.el.style.setProperty('--separator-border', styles.separatorBorder.toString());\n    }\n  }\n  /**\n   * Add a {@link IView view} to this {@link SplitView}.\n   *\n   * @param view The view to add.\n   * @param size Either a fixed size, or a dynamic {@link Sizing} strategy.\n   * @param index The index to insert the view on.\n   * @param skipLayout Whether layout should be skipped.\n   */\n  addView(view, size) {\n    let index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.viewItems.length;\n    let skipLayout = arguments.length > 3 ? arguments[3] : undefined;\n    this.doAddView(view, size, index, skipLayout);\n  }\n  /**\n   * Layout the {@link SplitView}.\n   *\n   * @param size The entire size of the {@link SplitView}.\n   * @param layoutContext An optional layout context to pass along to {@link IView views}.\n   */\n  layout(size, layoutContext) {\n    const previousSize = Math.max(this.size, this.contentSize);\n    this.size = size;\n    this.layoutContext = layoutContext;\n    if (!this.proportions) {\n      const indexes = range(this.viewItems.length);\n      const lowPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 1 /* LayoutPriority.Low */);\n      const highPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 2 /* LayoutPriority.High */);\n      this.resize(this.viewItems.length - 1, size - previousSize, undefined, lowPriorityIndexes, highPriorityIndexes);\n    } else {\n      for (let i = 0; i < this.viewItems.length; i++) {\n        const item = this.viewItems[i];\n        item.size = clamp(Math.round(this.proportions[i] * size), item.minimumSize, item.maximumSize);\n      }\n    }\n    this.distributeEmptySpace();\n    this.layoutViews();\n  }\n  saveProportions() {\n    if (this.proportionalLayout && this.contentSize > 0) {\n      this.proportions = this.viewItems.map(i => i.size / this.contentSize);\n    }\n  }\n  onSashStart(_ref) {\n    let {\n      sash,\n      start,\n      alt\n    } = _ref;\n    for (const item of this.viewItems) {\n      item.enabled = false;\n    }\n    const index = this.sashItems.findIndex(item => item.sash === sash);\n    // This way, we can press Alt while we resize a sash, macOS style!\n    const disposable = combinedDisposable(addDisposableListener(document.body, 'keydown', e => resetSashDragState(this.sashDragState.current, e.altKey)), addDisposableListener(document.body, 'keyup', () => resetSashDragState(this.sashDragState.current, false)));\n    const resetSashDragState = (start, alt) => {\n      const sizes = this.viewItems.map(i => i.size);\n      let minDelta = Number.NEGATIVE_INFINITY;\n      let maxDelta = Number.POSITIVE_INFINITY;\n      if (this.inverseAltBehavior) {\n        alt = !alt;\n      }\n      if (alt) {\n        // When we're using the last sash with Alt, we're resizing\n        // the view to the left/up, instead of right/down as usual\n        // Thus, we must do the inverse of the usual\n        const isLastSash = index === this.sashItems.length - 1;\n        if (isLastSash) {\n          const viewItem = this.viewItems[index];\n          minDelta = (viewItem.minimumSize - viewItem.size) / 2;\n          maxDelta = (viewItem.maximumSize - viewItem.size) / 2;\n        } else {\n          const viewItem = this.viewItems[index + 1];\n          minDelta = (viewItem.size - viewItem.maximumSize) / 2;\n          maxDelta = (viewItem.size - viewItem.minimumSize) / 2;\n        }\n      }\n      let snapBefore;\n      let snapAfter;\n      if (!alt) {\n        const upIndexes = range(index, -1);\n        const downIndexes = range(index + 1, this.viewItems.length);\n        const minDeltaUp = upIndexes.reduce((r, i) => r + (this.viewItems[i].minimumSize - sizes[i]), 0);\n        const maxDeltaUp = upIndexes.reduce((r, i) => r + (this.viewItems[i].viewMaximumSize - sizes[i]), 0);\n        const maxDeltaDown = downIndexes.length === 0 ? Number.POSITIVE_INFINITY : downIndexes.reduce((r, i) => r + (sizes[i] - this.viewItems[i].minimumSize), 0);\n        const minDeltaDown = downIndexes.length === 0 ? Number.NEGATIVE_INFINITY : downIndexes.reduce((r, i) => r + (sizes[i] - this.viewItems[i].viewMaximumSize), 0);\n        const minDelta = Math.max(minDeltaUp, minDeltaDown);\n        const maxDelta = Math.min(maxDeltaDown, maxDeltaUp);\n        const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n        const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n        if (typeof snapBeforeIndex === 'number') {\n          const viewItem = this.viewItems[snapBeforeIndex];\n          const halfSize = Math.floor(viewItem.viewMinimumSize / 2);\n          snapBefore = {\n            index: snapBeforeIndex,\n            limitDelta: viewItem.visible ? minDelta - halfSize : minDelta + halfSize,\n            size: viewItem.size\n          };\n        }\n        if (typeof snapAfterIndex === 'number') {\n          const viewItem = this.viewItems[snapAfterIndex];\n          const halfSize = Math.floor(viewItem.viewMinimumSize / 2);\n          snapAfter = {\n            index: snapAfterIndex,\n            limitDelta: viewItem.visible ? maxDelta + halfSize : maxDelta - halfSize,\n            size: viewItem.size\n          };\n        }\n      }\n      this.sashDragState = {\n        start,\n        current: start,\n        index,\n        sizes,\n        minDelta,\n        maxDelta,\n        alt,\n        snapBefore,\n        snapAfter,\n        disposable\n      };\n    };\n    resetSashDragState(start, alt);\n  }\n  onSashChange(_ref2) {\n    let {\n      current\n    } = _ref2;\n    const {\n      index,\n      start,\n      sizes,\n      alt,\n      minDelta,\n      maxDelta,\n      snapBefore,\n      snapAfter\n    } = this.sashDragState;\n    this.sashDragState.current = current;\n    const delta = current - start;\n    const newDelta = this.resize(index, delta, sizes, undefined, undefined, minDelta, maxDelta, snapBefore, snapAfter);\n    if (alt) {\n      const isLastSash = index === this.sashItems.length - 1;\n      const newSizes = this.viewItems.map(i => i.size);\n      const viewItemIndex = isLastSash ? index : index + 1;\n      const viewItem = this.viewItems[viewItemIndex];\n      const newMinDelta = viewItem.size - viewItem.maximumSize;\n      const newMaxDelta = viewItem.size - viewItem.minimumSize;\n      const resizeIndex = isLastSash ? index - 1 : index + 1;\n      this.resize(resizeIndex, -newDelta, newSizes, undefined, undefined, newMinDelta, newMaxDelta);\n    }\n    this.distributeEmptySpace();\n    this.layoutViews();\n  }\n  onSashEnd(index) {\n    this._onDidSashChange.fire(index);\n    this.sashDragState.disposable.dispose();\n    this.saveProportions();\n    for (const item of this.viewItems) {\n      item.enabled = true;\n    }\n  }\n  onViewChange(item, size) {\n    const index = this.viewItems.indexOf(item);\n    if (index < 0 || index >= this.viewItems.length) {\n      return;\n    }\n    size = typeof size === 'number' ? size : item.size;\n    size = clamp(size, item.minimumSize, item.maximumSize);\n    if (this.inverseAltBehavior && index > 0) {\n      // In this case, we want the view to grow or shrink both sides equally\n      // so we just resize the \"left\" side by half and let `resize` do the clamping magic\n      this.resize(index - 1, Math.floor((item.size - size) / 2));\n      this.distributeEmptySpace();\n      this.layoutViews();\n    } else {\n      item.size = size;\n      this.relayout([index], undefined);\n    }\n  }\n  /**\n   * Resize a {@link IView view} within the {@link SplitView}.\n   *\n   * @param index The {@link IView view} index.\n   * @param size The {@link IView view} size.\n   */\n  resizeView(index, size) {\n    if (this.state !== State.Idle) {\n      throw new Error('Cant modify splitview');\n    }\n    this.state = State.Busy;\n    if (index < 0 || index >= this.viewItems.length) {\n      return;\n    }\n    const indexes = range(this.viewItems.length).filter(i => i !== index);\n    const lowPriorityIndexes = [...indexes.filter(i => this.viewItems[i].priority === 1 /* LayoutPriority.Low */), index];\n    const highPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 2 /* LayoutPriority.High */);\n    const item = this.viewItems[index];\n    size = Math.round(size);\n    size = clamp(size, item.minimumSize, Math.min(item.maximumSize, this.size));\n    item.size = size;\n    this.relayout(lowPriorityIndexes, highPriorityIndexes);\n    this.state = State.Idle;\n  }\n  /**\n   * Distribute the entire {@link SplitView} size among all {@link IView views}.\n   */\n  distributeViewSizes() {\n    const flexibleViewItems = [];\n    let flexibleSize = 0;\n    for (const item of this.viewItems) {\n      if (item.maximumSize - item.minimumSize > 0) {\n        flexibleViewItems.push(item);\n        flexibleSize += item.size;\n      }\n    }\n    const size = Math.floor(flexibleSize / flexibleViewItems.length);\n    for (const item of flexibleViewItems) {\n      item.size = clamp(size, item.minimumSize, item.maximumSize);\n    }\n    const indexes = range(this.viewItems.length);\n    const lowPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 1 /* LayoutPriority.Low */);\n    const highPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 2 /* LayoutPriority.High */);\n    this.relayout(lowPriorityIndexes, highPriorityIndexes);\n  }\n  /**\n   * Returns the size of a {@link IView view}.\n   */\n  getViewSize(index) {\n    if (index < 0 || index >= this.viewItems.length) {\n      return -1;\n    }\n    return this.viewItems[index].size;\n  }\n  doAddView(view, size) {\n    let index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.viewItems.length;\n    let skipLayout = arguments.length > 3 ? arguments[3] : undefined;\n    if (this.state !== State.Idle) {\n      throw new Error('Cant modify splitview');\n    }\n    this.state = State.Busy;\n    // Add view\n    const container = $('.split-view-view');\n    if (index === this.viewItems.length) {\n      this.viewContainer.appendChild(container);\n    } else {\n      this.viewContainer.insertBefore(container, this.viewContainer.children.item(index));\n    }\n    const onChangeDisposable = view.onDidChange(size => this.onViewChange(item, size));\n    const containerDisposable = toDisposable(() => this.viewContainer.removeChild(container));\n    const disposable = combinedDisposable(onChangeDisposable, containerDisposable);\n    let viewSize;\n    if (typeof size === 'number') {\n      viewSize = size;\n    } else if (size.type === 'split') {\n      viewSize = this.getViewSize(size.index) / 2;\n    } else if (size.type === 'invisible') {\n      viewSize = {\n        cachedVisibleSize: size.cachedVisibleSize\n      };\n    } else {\n      viewSize = view.minimumSize;\n    }\n    const item = this.orientation === 0 /* Orientation.VERTICAL */ ? new VerticalViewItem(container, view, viewSize, disposable) : new HorizontalViewItem(container, view, viewSize, disposable);\n    this.viewItems.splice(index, 0, item);\n    // Add sash\n    if (this.viewItems.length > 1) {\n      const opts = {\n        orthogonalStartSash: this.orthogonalStartSash,\n        orthogonalEndSash: this.orthogonalEndSash\n      };\n      const sash = this.orientation === 0 /* Orientation.VERTICAL */ ? new Sash(this.sashContainer, {\n        getHorizontalSashTop: s => this.getSashPosition(s),\n        getHorizontalSashWidth: this.getSashOrthogonalSize\n      }, Object.assign(Object.assign({}, opts), {\n        orientation: 1 /* Orientation.HORIZONTAL */\n      })) : new Sash(this.sashContainer, {\n        getVerticalSashLeft: s => this.getSashPosition(s),\n        getVerticalSashHeight: this.getSashOrthogonalSize\n      }, Object.assign(Object.assign({}, opts), {\n        orientation: 0 /* Orientation.VERTICAL */\n      }));\n      const sashEventMapper = this.orientation === 0 /* Orientation.VERTICAL */ ? e => ({\n        sash,\n        start: e.startY,\n        current: e.currentY,\n        alt: e.altKey\n      }) : e => ({\n        sash,\n        start: e.startX,\n        current: e.currentX,\n        alt: e.altKey\n      });\n      const onStart = Event.map(sash.onDidStart, sashEventMapper);\n      const onStartDisposable = onStart(this.onSashStart, this);\n      const onChange = Event.map(sash.onDidChange, sashEventMapper);\n      const onChangeDisposable = onChange(this.onSashChange, this);\n      const onEnd = Event.map(sash.onDidEnd, () => this.sashItems.findIndex(item => item.sash === sash));\n      const onEndDisposable = onEnd(this.onSashEnd, this);\n      const onDidResetDisposable = sash.onDidReset(() => {\n        const index = this.sashItems.findIndex(item => item.sash === sash);\n        const upIndexes = range(index, -1);\n        const downIndexes = range(index + 1, this.viewItems.length);\n        const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n        const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n        if (typeof snapBeforeIndex === 'number' && !this.viewItems[snapBeforeIndex].visible) {\n          return;\n        }\n        if (typeof snapAfterIndex === 'number' && !this.viewItems[snapAfterIndex].visible) {\n          return;\n        }\n        this._onDidSashReset.fire(index);\n      });\n      const disposable = combinedDisposable(onStartDisposable, onChangeDisposable, onEndDisposable, onDidResetDisposable, sash);\n      const sashItem = {\n        sash,\n        disposable\n      };\n      this.sashItems.splice(index - 1, 0, sashItem);\n    }\n    container.appendChild(view.element);\n    let highPriorityIndexes;\n    if (typeof size !== 'number' && size.type === 'split') {\n      highPriorityIndexes = [size.index];\n    }\n    if (!skipLayout) {\n      this.relayout([index], highPriorityIndexes);\n    }\n    this.state = State.Idle;\n    if (!skipLayout && typeof size !== 'number' && size.type === 'distribute') {\n      this.distributeViewSizes();\n    }\n  }\n  relayout(lowPriorityIndexes, highPriorityIndexes) {\n    const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n    this.resize(this.viewItems.length - 1, this.size - contentSize, undefined, lowPriorityIndexes, highPriorityIndexes);\n    this.distributeEmptySpace();\n    this.layoutViews();\n    this.saveProportions();\n  }\n  resize(index, delta) {\n    let sizes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.viewItems.map(i => i.size);\n    let lowPriorityIndexes = arguments.length > 3 ? arguments[3] : undefined;\n    let highPriorityIndexes = arguments.length > 4 ? arguments[4] : undefined;\n    let overloadMinDelta = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : Number.NEGATIVE_INFINITY;\n    let overloadMaxDelta = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : Number.POSITIVE_INFINITY;\n    let snapBefore = arguments.length > 7 ? arguments[7] : undefined;\n    let snapAfter = arguments.length > 8 ? arguments[8] : undefined;\n    if (index < 0 || index >= this.viewItems.length) {\n      return 0;\n    }\n    const upIndexes = range(index, -1);\n    const downIndexes = range(index + 1, this.viewItems.length);\n    if (highPriorityIndexes) {\n      for (const index of highPriorityIndexes) {\n        pushToStart(upIndexes, index);\n        pushToStart(downIndexes, index);\n      }\n    }\n    if (lowPriorityIndexes) {\n      for (const index of lowPriorityIndexes) {\n        pushToEnd(upIndexes, index);\n        pushToEnd(downIndexes, index);\n      }\n    }\n    const upItems = upIndexes.map(i => this.viewItems[i]);\n    const upSizes = upIndexes.map(i => sizes[i]);\n    const downItems = downIndexes.map(i => this.viewItems[i]);\n    const downSizes = downIndexes.map(i => sizes[i]);\n    const minDeltaUp = upIndexes.reduce((r, i) => r + (this.viewItems[i].minimumSize - sizes[i]), 0);\n    const maxDeltaUp = upIndexes.reduce((r, i) => r + (this.viewItems[i].maximumSize - sizes[i]), 0);\n    const maxDeltaDown = downIndexes.length === 0 ? Number.POSITIVE_INFINITY : downIndexes.reduce((r, i) => r + (sizes[i] - this.viewItems[i].minimumSize), 0);\n    const minDeltaDown = downIndexes.length === 0 ? Number.NEGATIVE_INFINITY : downIndexes.reduce((r, i) => r + (sizes[i] - this.viewItems[i].maximumSize), 0);\n    const minDelta = Math.max(minDeltaUp, minDeltaDown, overloadMinDelta);\n    const maxDelta = Math.min(maxDeltaDown, maxDeltaUp, overloadMaxDelta);\n    let snapped = false;\n    if (snapBefore) {\n      const snapView = this.viewItems[snapBefore.index];\n      const visible = delta >= snapBefore.limitDelta;\n      snapped = visible !== snapView.visible;\n      snapView.setVisible(visible, snapBefore.size);\n    }\n    if (!snapped && snapAfter) {\n      const snapView = this.viewItems[snapAfter.index];\n      const visible = delta < snapAfter.limitDelta;\n      snapped = visible !== snapView.visible;\n      snapView.setVisible(visible, snapAfter.size);\n    }\n    if (snapped) {\n      return this.resize(index, delta, sizes, lowPriorityIndexes, highPriorityIndexes, overloadMinDelta, overloadMaxDelta);\n    }\n    delta = clamp(delta, minDelta, maxDelta);\n    for (let i = 0, deltaUp = delta; i < upItems.length; i++) {\n      const item = upItems[i];\n      const size = clamp(upSizes[i] + deltaUp, item.minimumSize, item.maximumSize);\n      const viewDelta = size - upSizes[i];\n      deltaUp -= viewDelta;\n      item.size = size;\n    }\n    for (let i = 0, deltaDown = delta; i < downItems.length; i++) {\n      const item = downItems[i];\n      const size = clamp(downSizes[i] - deltaDown, item.minimumSize, item.maximumSize);\n      const viewDelta = size - downSizes[i];\n      deltaDown += viewDelta;\n      item.size = size;\n    }\n    return delta;\n  }\n  distributeEmptySpace(lowPriorityIndex) {\n    const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n    let emptyDelta = this.size - contentSize;\n    const indexes = range(this.viewItems.length - 1, -1);\n    const lowPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 1 /* LayoutPriority.Low */);\n    const highPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 2 /* LayoutPriority.High */);\n    for (const index of highPriorityIndexes) {\n      pushToStart(indexes, index);\n    }\n    for (const index of lowPriorityIndexes) {\n      pushToEnd(indexes, index);\n    }\n    if (typeof lowPriorityIndex === 'number') {\n      pushToEnd(indexes, lowPriorityIndex);\n    }\n    for (let i = 0; emptyDelta !== 0 && i < indexes.length; i++) {\n      const item = this.viewItems[indexes[i]];\n      const size = clamp(item.size + emptyDelta, item.minimumSize, item.maximumSize);\n      const viewDelta = size - item.size;\n      emptyDelta -= viewDelta;\n      item.size = size;\n    }\n  }\n  layoutViews() {\n    // Save new content size\n    this.contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n    // Layout views\n    let offset = 0;\n    for (const viewItem of this.viewItems) {\n      viewItem.layout(offset, this.layoutContext);\n      offset += viewItem.size;\n    }\n    // Layout sashes\n    this.sashItems.forEach(item => item.sash.layout());\n    this.updateSashEnablement();\n    this.updateScrollableElement();\n  }\n  updateScrollableElement() {\n    if (this.orientation === 0 /* Orientation.VERTICAL */) {\n      this.scrollableElement.setScrollDimensions({\n        height: this.size,\n        scrollHeight: this.contentSize\n      });\n    } else {\n      this.scrollableElement.setScrollDimensions({\n        width: this.size,\n        scrollWidth: this.contentSize\n      });\n    }\n  }\n  updateSashEnablement() {\n    let previous = false;\n    const collapsesDown = this.viewItems.map(i => previous = i.size - i.minimumSize > 0 || previous);\n    previous = false;\n    const expandsDown = this.viewItems.map(i => previous = i.maximumSize - i.size > 0 || previous);\n    const reverseViews = [...this.viewItems].reverse();\n    previous = false;\n    const collapsesUp = reverseViews.map(i => previous = i.size - i.minimumSize > 0 || previous).reverse();\n    previous = false;\n    const expandsUp = reverseViews.map(i => previous = i.maximumSize - i.size > 0 || previous).reverse();\n    let position = 0;\n    for (let index = 0; index < this.sashItems.length; index++) {\n      const {\n        sash\n      } = this.sashItems[index];\n      const viewItem = this.viewItems[index];\n      position += viewItem.size;\n      const min = !(collapsesDown[index] && expandsUp[index + 1]);\n      const max = !(expandsDown[index] && collapsesUp[index + 1]);\n      if (min && max) {\n        const upIndexes = range(index, -1);\n        const downIndexes = range(index + 1, this.viewItems.length);\n        const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n        const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n        const snappedBefore = typeof snapBeforeIndex === 'number' && !this.viewItems[snapBeforeIndex].visible;\n        const snappedAfter = typeof snapAfterIndex === 'number' && !this.viewItems[snapAfterIndex].visible;\n        if (snappedBefore && collapsesUp[index] && (position > 0 || this.startSnappingEnabled)) {\n          sash.state = 1 /* SashState.AtMinimum */;\n        } else if (snappedAfter && collapsesDown[index] && (position < this.contentSize || this.endSnappingEnabled)) {\n          sash.state = 2 /* SashState.AtMaximum */;\n        } else {\n          sash.state = 0 /* SashState.Disabled */;\n        }\n      } else if (min && !max) {\n        sash.state = 1 /* SashState.AtMinimum */;\n      } else if (!min && max) {\n        sash.state = 2 /* SashState.AtMaximum */;\n      } else {\n        sash.state = 3 /* SashState.Enabled */;\n      }\n    }\n  }\n\n  getSashPosition(sash) {\n    let position = 0;\n    for (let i = 0; i < this.sashItems.length; i++) {\n      position += this.viewItems[i].size;\n      if (this.sashItems[i].sash === sash) {\n        return position;\n      }\n    }\n    return 0;\n  }\n  findFirstSnapIndex(indexes) {\n    // visible views first\n    for (const index of indexes) {\n      const viewItem = this.viewItems[index];\n      if (!viewItem.visible) {\n        continue;\n      }\n      if (viewItem.snap) {\n        return index;\n      }\n    }\n    // then, hidden views\n    for (const index of indexes) {\n      const viewItem = this.viewItems[index];\n      if (viewItem.visible && viewItem.maximumSize - viewItem.minimumSize > 0) {\n        return undefined;\n      }\n      if (!viewItem.visible && viewItem.snap) {\n        return index;\n      }\n    }\n    return undefined;\n  }\n  dispose() {\n    super.dispose();\n    dispose(this.viewItems);\n    this.viewItems = [];\n    this.sashItems.forEach(i => i.disposable.dispose());\n    this.sashItems = [];\n  }\n}","map":{"version":3,"names":["$","addDisposableListener","append","scheduleAtNextAnimationFrame","Sash","SmoothScrollableElement","pushToEnd","pushToStart","range","Color","Emitter","Event","combinedDisposable","Disposable","dispose","toDisposable","clamp","Scrollable","types","defaultStyles","separatorBorder","transparent","ViewItem","constructor","container","view","size","disposable","_cachedVisibleSize","undefined","_size","classList","add","cachedVisibleSize","visible","setVisible","_a","_b","viewMinimumSize","viewMaximumSize","toggle","call","minimumSize","maximumSize","priority","snap","enabled","style","pointerEvents","layout","offset","layoutContext","layoutContainer","VerticalViewItem","top","height","HorizontalViewItem","left","width","State","Sizing","Distribute","type","Split","index","Invisible","SplitView","options","_c","_d","_e","contentSize","proportions","viewItems","sashItems","state","Idle","_onDidSashChange","_register","_onDidSashReset","_startSnappingEnabled","_endSnappingEnabled","onDidSashChange","event","onDidSashReset","orientation","inverseAltBehavior","proportionalLayout","getSashOrthogonalSize","el","document","createElement","appendChild","sashContainer","viewContainer","scrollable","forceIntegerValues","smoothScrollDuration","scrollableElement","vertical","scrollbarVisibility","horizontal","onDidScroll","onScroll","e","scrollTop","scrollLeft","getDomNode","styles","descriptor","views","forEach","viewDescriptor","sizing","isUndefined","doAddView","reduce","r","i","saveProportions","orthogonalStartSash","_orthogonalStartSash","orthogonalEndSash","_orthogonalEndSash","startSnappingEnabled","endSnappingEnabled","sash","sashItem","updateSashEnablement","isTransparent","remove","removeProperty","setProperty","toString","addView","length","skipLayout","previousSize","Math","max","indexes","lowPriorityIndexes","filter","highPriorityIndexes","resize","item","round","distributeEmptySpace","layoutViews","map","onSashStart","start","alt","findIndex","body","resetSashDragState","sashDragState","current","altKey","sizes","minDelta","Number","NEGATIVE_INFINITY","maxDelta","POSITIVE_INFINITY","isLastSash","viewItem","snapBefore","snapAfter","upIndexes","downIndexes","minDeltaUp","maxDeltaUp","maxDeltaDown","minDeltaDown","min","snapBeforeIndex","findFirstSnapIndex","snapAfterIndex","halfSize","floor","limitDelta","onSashChange","delta","newDelta","newSizes","viewItemIndex","newMinDelta","newMaxDelta","resizeIndex","onSashEnd","fire","onViewChange","indexOf","relayout","resizeView","Error","Busy","distributeViewSizes","flexibleViewItems","flexibleSize","push","getViewSize","insertBefore","children","onChangeDisposable","onDidChange","containerDisposable","removeChild","viewSize","splice","opts","getHorizontalSashTop","s","getSashPosition","getHorizontalSashWidth","Object","assign","getVerticalSashLeft","getVerticalSashHeight","sashEventMapper","startY","currentY","startX","currentX","onStart","onDidStart","onStartDisposable","onChange","onEnd","onDidEnd","onEndDisposable","onDidResetDisposable","onDidReset","element","overloadMinDelta","overloadMaxDelta","upItems","upSizes","downItems","downSizes","snapped","snapView","deltaUp","viewDelta","deltaDown","lowPriorityIndex","emptyDelta","updateScrollableElement","setScrollDimensions","scrollHeight","scrollWidth","previous","collapsesDown","expandsDown","reverseViews","reverse","collapsesUp","expandsUp","position","snappedBefore","snappedAfter"],"sources":["/home/deathblade287/Desktop/AI-MODELS-TESTING/react-app/node_modules/monaco-editor/esm/vs/base/browser/ui/splitview/splitview.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { $, addDisposableListener, append, scheduleAtNextAnimationFrame } from '../../dom.js';\nimport { Sash } from '../sash/sash.js';\nimport { SmoothScrollableElement } from '../scrollbar/scrollableElement.js';\nimport { pushToEnd, pushToStart, range } from '../../../common/arrays.js';\nimport { Color } from '../../../common/color.js';\nimport { Emitter, Event } from '../../../common/event.js';\nimport { combinedDisposable, Disposable, dispose, toDisposable } from '../../../common/lifecycle.js';\nimport { clamp } from '../../../common/numbers.js';\nimport { Scrollable } from '../../../common/scrollable.js';\nimport * as types from '../../../common/types.js';\nimport './splitview.css';\nconst defaultStyles = {\n    separatorBorder: Color.transparent\n};\nclass ViewItem {\n    constructor(container, view, size, disposable) {\n        this.container = container;\n        this.view = view;\n        this.disposable = disposable;\n        this._cachedVisibleSize = undefined;\n        if (typeof size === 'number') {\n            this._size = size;\n            this._cachedVisibleSize = undefined;\n            container.classList.add('visible');\n        }\n        else {\n            this._size = 0;\n            this._cachedVisibleSize = size.cachedVisibleSize;\n        }\n    }\n    set size(size) {\n        this._size = size;\n    }\n    get size() {\n        return this._size;\n    }\n    get visible() {\n        return typeof this._cachedVisibleSize === 'undefined';\n    }\n    setVisible(visible, size) {\n        var _a, _b;\n        if (visible === this.visible) {\n            return;\n        }\n        if (visible) {\n            this.size = clamp(this._cachedVisibleSize, this.viewMinimumSize, this.viewMaximumSize);\n            this._cachedVisibleSize = undefined;\n        }\n        else {\n            this._cachedVisibleSize = typeof size === 'number' ? size : this.size;\n            this.size = 0;\n        }\n        this.container.classList.toggle('visible', visible);\n        (_b = (_a = this.view).setVisible) === null || _b === void 0 ? void 0 : _b.call(_a, visible);\n    }\n    get minimumSize() { return this.visible ? this.view.minimumSize : 0; }\n    get viewMinimumSize() { return this.view.minimumSize; }\n    get maximumSize() { return this.visible ? this.view.maximumSize : 0; }\n    get viewMaximumSize() { return this.view.maximumSize; }\n    get priority() { return this.view.priority; }\n    get snap() { return !!this.view.snap; }\n    set enabled(enabled) {\n        this.container.style.pointerEvents = enabled ? '' : 'none';\n    }\n    layout(offset, layoutContext) {\n        this.layoutContainer(offset);\n        this.view.layout(this.size, offset, layoutContext);\n    }\n    dispose() {\n        this.disposable.dispose();\n        return this.view;\n    }\n}\nclass VerticalViewItem extends ViewItem {\n    layoutContainer(offset) {\n        this.container.style.top = `${offset}px`;\n        this.container.style.height = `${this.size}px`;\n    }\n}\nclass HorizontalViewItem extends ViewItem {\n    layoutContainer(offset) {\n        this.container.style.left = `${offset}px`;\n        this.container.style.width = `${this.size}px`;\n    }\n}\nvar State;\n(function (State) {\n    State[State[\"Idle\"] = 0] = \"Idle\";\n    State[State[\"Busy\"] = 1] = \"Busy\";\n})(State || (State = {}));\nexport var Sizing;\n(function (Sizing) {\n    /**\n     * When adding or removing views, distribute the delta space among\n     * all other views.\n     */\n    Sizing.Distribute = { type: 'distribute' };\n    /**\n     * When adding or removing views, split the delta space with another\n     * specific view, indexed by the provided `index`.\n     */\n    function Split(index) { return { type: 'split', index }; }\n    Sizing.Split = Split;\n    /**\n     * When adding or removing views, assume the view is invisible.\n     */\n    function Invisible(cachedVisibleSize) { return { type: 'invisible', cachedVisibleSize }; }\n    Sizing.Invisible = Invisible;\n})(Sizing || (Sizing = {}));\n/**\n * The {@link SplitView} is the UI component which implements a one dimensional\n * flex-like layout algorithm for a collection of {@link IView} instances, which\n * are essentially HTMLElement instances with the following size constraints:\n *\n * - {@link IView.minimumSize}\n * - {@link IView.maximumSize}\n * - {@link IView.priority}\n * - {@link IView.snap}\n *\n * In case the SplitView doesn't have enough size to fit all views, it will overflow\n * its content with a scrollbar.\n *\n * In between each pair of views there will be a {@link Sash} allowing the user\n * to resize the views, making sure the constraints are respected.\n *\n * An optional {@link TLayoutContext layout context type} may be used in order to\n * pass along layout contextual data from the {@link SplitView.layout} method down\n * to each view's {@link IView.layout} calls.\n *\n * Features:\n * - Flex-like layout algorithm\n * - Snap support\n * - Orthogonal sash support, for corner sashes\n * - View hide/show support\n * - View swap/move support\n * - Alt key modifier behavior, macOS style\n */\nexport class SplitView extends Disposable {\n    /**\n     * Create a new {@link SplitView} instance.\n     */\n    constructor(container, options = {}) {\n        var _a, _b, _c, _d, _e;\n        super();\n        this.size = 0;\n        this.contentSize = 0;\n        this.proportions = undefined;\n        this.viewItems = [];\n        this.sashItems = [];\n        this.state = State.Idle;\n        this._onDidSashChange = this._register(new Emitter());\n        this._onDidSashReset = this._register(new Emitter());\n        this._startSnappingEnabled = true;\n        this._endSnappingEnabled = true;\n        /**\n         * Fires whenever the user resizes a {@link Sash sash}.\n         */\n        this.onDidSashChange = this._onDidSashChange.event;\n        /**\n         * Fires whenever the user double clicks a {@link Sash sash}.\n         */\n        this.onDidSashReset = this._onDidSashReset.event;\n        this.orientation = (_a = options.orientation) !== null && _a !== void 0 ? _a : 0 /* Orientation.VERTICAL */;\n        this.inverseAltBehavior = (_b = options.inverseAltBehavior) !== null && _b !== void 0 ? _b : false;\n        this.proportionalLayout = (_c = options.proportionalLayout) !== null && _c !== void 0 ? _c : true;\n        this.getSashOrthogonalSize = options.getSashOrthogonalSize;\n        this.el = document.createElement('div');\n        this.el.classList.add('monaco-split-view2');\n        this.el.classList.add(this.orientation === 0 /* Orientation.VERTICAL */ ? 'vertical' : 'horizontal');\n        container.appendChild(this.el);\n        this.sashContainer = append(this.el, $('.sash-container'));\n        this.viewContainer = $('.split-view-container');\n        this.scrollable = new Scrollable({\n            forceIntegerValues: true,\n            smoothScrollDuration: 125,\n            scheduleAtNextAnimationFrame\n        });\n        this.scrollableElement = this._register(new SmoothScrollableElement(this.viewContainer, {\n            vertical: this.orientation === 0 /* Orientation.VERTICAL */ ? ((_d = options.scrollbarVisibility) !== null && _d !== void 0 ? _d : 1 /* ScrollbarVisibility.Auto */) : 2 /* ScrollbarVisibility.Hidden */,\n            horizontal: this.orientation === 1 /* Orientation.HORIZONTAL */ ? ((_e = options.scrollbarVisibility) !== null && _e !== void 0 ? _e : 1 /* ScrollbarVisibility.Auto */) : 2 /* ScrollbarVisibility.Hidden */\n        }, this.scrollable));\n        this.onDidScroll = this.scrollableElement.onScroll;\n        this._register(this.onDidScroll(e => {\n            this.viewContainer.scrollTop = e.scrollTop;\n            this.viewContainer.scrollLeft = e.scrollLeft;\n        }));\n        append(this.el, this.scrollableElement.getDomNode());\n        this.style(options.styles || defaultStyles);\n        // We have an existing set of view, add them now\n        if (options.descriptor) {\n            this.size = options.descriptor.size;\n            options.descriptor.views.forEach((viewDescriptor, index) => {\n                const sizing = types.isUndefined(viewDescriptor.visible) || viewDescriptor.visible ? viewDescriptor.size : { type: 'invisible', cachedVisibleSize: viewDescriptor.size };\n                const view = viewDescriptor.view;\n                this.doAddView(view, sizing, index, true);\n            });\n            // Initialize content size and proportions for first layout\n            this.contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n            this.saveProportions();\n        }\n    }\n    get orthogonalStartSash() { return this._orthogonalStartSash; }\n    get orthogonalEndSash() { return this._orthogonalEndSash; }\n    get startSnappingEnabled() { return this._startSnappingEnabled; }\n    get endSnappingEnabled() { return this._endSnappingEnabled; }\n    /**\n     * A reference to a sash, perpendicular to all sashes in this {@link SplitView},\n     * located at the left- or top-most side of the SplitView.\n     * Corner sashes will be created automatically at the intersections.\n     */\n    set orthogonalStartSash(sash) {\n        for (const sashItem of this.sashItems) {\n            sashItem.sash.orthogonalStartSash = sash;\n        }\n        this._orthogonalStartSash = sash;\n    }\n    /**\n     * A reference to a sash, perpendicular to all sashes in this {@link SplitView},\n     * located at the right- or bottom-most side of the SplitView.\n     * Corner sashes will be created automatically at the intersections.\n     */\n    set orthogonalEndSash(sash) {\n        for (const sashItem of this.sashItems) {\n            sashItem.sash.orthogonalEndSash = sash;\n        }\n        this._orthogonalEndSash = sash;\n    }\n    /**\n     * Enable/disable snapping at the beginning of this {@link SplitView}.\n     */\n    set startSnappingEnabled(startSnappingEnabled) {\n        if (this._startSnappingEnabled === startSnappingEnabled) {\n            return;\n        }\n        this._startSnappingEnabled = startSnappingEnabled;\n        this.updateSashEnablement();\n    }\n    /**\n     * Enable/disable snapping at the end of this {@link SplitView}.\n     */\n    set endSnappingEnabled(endSnappingEnabled) {\n        if (this._endSnappingEnabled === endSnappingEnabled) {\n            return;\n        }\n        this._endSnappingEnabled = endSnappingEnabled;\n        this.updateSashEnablement();\n    }\n    style(styles) {\n        if (styles.separatorBorder.isTransparent()) {\n            this.el.classList.remove('separator-border');\n            this.el.style.removeProperty('--separator-border');\n        }\n        else {\n            this.el.classList.add('separator-border');\n            this.el.style.setProperty('--separator-border', styles.separatorBorder.toString());\n        }\n    }\n    /**\n     * Add a {@link IView view} to this {@link SplitView}.\n     *\n     * @param view The view to add.\n     * @param size Either a fixed size, or a dynamic {@link Sizing} strategy.\n     * @param index The index to insert the view on.\n     * @param skipLayout Whether layout should be skipped.\n     */\n    addView(view, size, index = this.viewItems.length, skipLayout) {\n        this.doAddView(view, size, index, skipLayout);\n    }\n    /**\n     * Layout the {@link SplitView}.\n     *\n     * @param size The entire size of the {@link SplitView}.\n     * @param layoutContext An optional layout context to pass along to {@link IView views}.\n     */\n    layout(size, layoutContext) {\n        const previousSize = Math.max(this.size, this.contentSize);\n        this.size = size;\n        this.layoutContext = layoutContext;\n        if (!this.proportions) {\n            const indexes = range(this.viewItems.length);\n            const lowPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 1 /* LayoutPriority.Low */);\n            const highPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 2 /* LayoutPriority.High */);\n            this.resize(this.viewItems.length - 1, size - previousSize, undefined, lowPriorityIndexes, highPriorityIndexes);\n        }\n        else {\n            for (let i = 0; i < this.viewItems.length; i++) {\n                const item = this.viewItems[i];\n                item.size = clamp(Math.round(this.proportions[i] * size), item.minimumSize, item.maximumSize);\n            }\n        }\n        this.distributeEmptySpace();\n        this.layoutViews();\n    }\n    saveProportions() {\n        if (this.proportionalLayout && this.contentSize > 0) {\n            this.proportions = this.viewItems.map(i => i.size / this.contentSize);\n        }\n    }\n    onSashStart({ sash, start, alt }) {\n        for (const item of this.viewItems) {\n            item.enabled = false;\n        }\n        const index = this.sashItems.findIndex(item => item.sash === sash);\n        // This way, we can press Alt while we resize a sash, macOS style!\n        const disposable = combinedDisposable(addDisposableListener(document.body, 'keydown', e => resetSashDragState(this.sashDragState.current, e.altKey)), addDisposableListener(document.body, 'keyup', () => resetSashDragState(this.sashDragState.current, false)));\n        const resetSashDragState = (start, alt) => {\n            const sizes = this.viewItems.map(i => i.size);\n            let minDelta = Number.NEGATIVE_INFINITY;\n            let maxDelta = Number.POSITIVE_INFINITY;\n            if (this.inverseAltBehavior) {\n                alt = !alt;\n            }\n            if (alt) {\n                // When we're using the last sash with Alt, we're resizing\n                // the view to the left/up, instead of right/down as usual\n                // Thus, we must do the inverse of the usual\n                const isLastSash = index === this.sashItems.length - 1;\n                if (isLastSash) {\n                    const viewItem = this.viewItems[index];\n                    minDelta = (viewItem.minimumSize - viewItem.size) / 2;\n                    maxDelta = (viewItem.maximumSize - viewItem.size) / 2;\n                }\n                else {\n                    const viewItem = this.viewItems[index + 1];\n                    minDelta = (viewItem.size - viewItem.maximumSize) / 2;\n                    maxDelta = (viewItem.size - viewItem.minimumSize) / 2;\n                }\n            }\n            let snapBefore;\n            let snapAfter;\n            if (!alt) {\n                const upIndexes = range(index, -1);\n                const downIndexes = range(index + 1, this.viewItems.length);\n                const minDeltaUp = upIndexes.reduce((r, i) => r + (this.viewItems[i].minimumSize - sizes[i]), 0);\n                const maxDeltaUp = upIndexes.reduce((r, i) => r + (this.viewItems[i].viewMaximumSize - sizes[i]), 0);\n                const maxDeltaDown = downIndexes.length === 0 ? Number.POSITIVE_INFINITY : downIndexes.reduce((r, i) => r + (sizes[i] - this.viewItems[i].minimumSize), 0);\n                const minDeltaDown = downIndexes.length === 0 ? Number.NEGATIVE_INFINITY : downIndexes.reduce((r, i) => r + (sizes[i] - this.viewItems[i].viewMaximumSize), 0);\n                const minDelta = Math.max(minDeltaUp, minDeltaDown);\n                const maxDelta = Math.min(maxDeltaDown, maxDeltaUp);\n                const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n                const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n                if (typeof snapBeforeIndex === 'number') {\n                    const viewItem = this.viewItems[snapBeforeIndex];\n                    const halfSize = Math.floor(viewItem.viewMinimumSize / 2);\n                    snapBefore = {\n                        index: snapBeforeIndex,\n                        limitDelta: viewItem.visible ? minDelta - halfSize : minDelta + halfSize,\n                        size: viewItem.size\n                    };\n                }\n                if (typeof snapAfterIndex === 'number') {\n                    const viewItem = this.viewItems[snapAfterIndex];\n                    const halfSize = Math.floor(viewItem.viewMinimumSize / 2);\n                    snapAfter = {\n                        index: snapAfterIndex,\n                        limitDelta: viewItem.visible ? maxDelta + halfSize : maxDelta - halfSize,\n                        size: viewItem.size\n                    };\n                }\n            }\n            this.sashDragState = { start, current: start, index, sizes, minDelta, maxDelta, alt, snapBefore, snapAfter, disposable };\n        };\n        resetSashDragState(start, alt);\n    }\n    onSashChange({ current }) {\n        const { index, start, sizes, alt, minDelta, maxDelta, snapBefore, snapAfter } = this.sashDragState;\n        this.sashDragState.current = current;\n        const delta = current - start;\n        const newDelta = this.resize(index, delta, sizes, undefined, undefined, minDelta, maxDelta, snapBefore, snapAfter);\n        if (alt) {\n            const isLastSash = index === this.sashItems.length - 1;\n            const newSizes = this.viewItems.map(i => i.size);\n            const viewItemIndex = isLastSash ? index : index + 1;\n            const viewItem = this.viewItems[viewItemIndex];\n            const newMinDelta = viewItem.size - viewItem.maximumSize;\n            const newMaxDelta = viewItem.size - viewItem.minimumSize;\n            const resizeIndex = isLastSash ? index - 1 : index + 1;\n            this.resize(resizeIndex, -newDelta, newSizes, undefined, undefined, newMinDelta, newMaxDelta);\n        }\n        this.distributeEmptySpace();\n        this.layoutViews();\n    }\n    onSashEnd(index) {\n        this._onDidSashChange.fire(index);\n        this.sashDragState.disposable.dispose();\n        this.saveProportions();\n        for (const item of this.viewItems) {\n            item.enabled = true;\n        }\n    }\n    onViewChange(item, size) {\n        const index = this.viewItems.indexOf(item);\n        if (index < 0 || index >= this.viewItems.length) {\n            return;\n        }\n        size = typeof size === 'number' ? size : item.size;\n        size = clamp(size, item.minimumSize, item.maximumSize);\n        if (this.inverseAltBehavior && index > 0) {\n            // In this case, we want the view to grow or shrink both sides equally\n            // so we just resize the \"left\" side by half and let `resize` do the clamping magic\n            this.resize(index - 1, Math.floor((item.size - size) / 2));\n            this.distributeEmptySpace();\n            this.layoutViews();\n        }\n        else {\n            item.size = size;\n            this.relayout([index], undefined);\n        }\n    }\n    /**\n     * Resize a {@link IView view} within the {@link SplitView}.\n     *\n     * @param index The {@link IView view} index.\n     * @param size The {@link IView view} size.\n     */\n    resizeView(index, size) {\n        if (this.state !== State.Idle) {\n            throw new Error('Cant modify splitview');\n        }\n        this.state = State.Busy;\n        if (index < 0 || index >= this.viewItems.length) {\n            return;\n        }\n        const indexes = range(this.viewItems.length).filter(i => i !== index);\n        const lowPriorityIndexes = [...indexes.filter(i => this.viewItems[i].priority === 1 /* LayoutPriority.Low */), index];\n        const highPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 2 /* LayoutPriority.High */);\n        const item = this.viewItems[index];\n        size = Math.round(size);\n        size = clamp(size, item.minimumSize, Math.min(item.maximumSize, this.size));\n        item.size = size;\n        this.relayout(lowPriorityIndexes, highPriorityIndexes);\n        this.state = State.Idle;\n    }\n    /**\n     * Distribute the entire {@link SplitView} size among all {@link IView views}.\n     */\n    distributeViewSizes() {\n        const flexibleViewItems = [];\n        let flexibleSize = 0;\n        for (const item of this.viewItems) {\n            if (item.maximumSize - item.minimumSize > 0) {\n                flexibleViewItems.push(item);\n                flexibleSize += item.size;\n            }\n        }\n        const size = Math.floor(flexibleSize / flexibleViewItems.length);\n        for (const item of flexibleViewItems) {\n            item.size = clamp(size, item.minimumSize, item.maximumSize);\n        }\n        const indexes = range(this.viewItems.length);\n        const lowPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 1 /* LayoutPriority.Low */);\n        const highPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 2 /* LayoutPriority.High */);\n        this.relayout(lowPriorityIndexes, highPriorityIndexes);\n    }\n    /**\n     * Returns the size of a {@link IView view}.\n     */\n    getViewSize(index) {\n        if (index < 0 || index >= this.viewItems.length) {\n            return -1;\n        }\n        return this.viewItems[index].size;\n    }\n    doAddView(view, size, index = this.viewItems.length, skipLayout) {\n        if (this.state !== State.Idle) {\n            throw new Error('Cant modify splitview');\n        }\n        this.state = State.Busy;\n        // Add view\n        const container = $('.split-view-view');\n        if (index === this.viewItems.length) {\n            this.viewContainer.appendChild(container);\n        }\n        else {\n            this.viewContainer.insertBefore(container, this.viewContainer.children.item(index));\n        }\n        const onChangeDisposable = view.onDidChange(size => this.onViewChange(item, size));\n        const containerDisposable = toDisposable(() => this.viewContainer.removeChild(container));\n        const disposable = combinedDisposable(onChangeDisposable, containerDisposable);\n        let viewSize;\n        if (typeof size === 'number') {\n            viewSize = size;\n        }\n        else if (size.type === 'split') {\n            viewSize = this.getViewSize(size.index) / 2;\n        }\n        else if (size.type === 'invisible') {\n            viewSize = { cachedVisibleSize: size.cachedVisibleSize };\n        }\n        else {\n            viewSize = view.minimumSize;\n        }\n        const item = this.orientation === 0 /* Orientation.VERTICAL */\n            ? new VerticalViewItem(container, view, viewSize, disposable)\n            : new HorizontalViewItem(container, view, viewSize, disposable);\n        this.viewItems.splice(index, 0, item);\n        // Add sash\n        if (this.viewItems.length > 1) {\n            const opts = { orthogonalStartSash: this.orthogonalStartSash, orthogonalEndSash: this.orthogonalEndSash };\n            const sash = this.orientation === 0 /* Orientation.VERTICAL */\n                ? new Sash(this.sashContainer, { getHorizontalSashTop: s => this.getSashPosition(s), getHorizontalSashWidth: this.getSashOrthogonalSize }, Object.assign(Object.assign({}, opts), { orientation: 1 /* Orientation.HORIZONTAL */ }))\n                : new Sash(this.sashContainer, { getVerticalSashLeft: s => this.getSashPosition(s), getVerticalSashHeight: this.getSashOrthogonalSize }, Object.assign(Object.assign({}, opts), { orientation: 0 /* Orientation.VERTICAL */ }));\n            const sashEventMapper = this.orientation === 0 /* Orientation.VERTICAL */\n                ? (e) => ({ sash, start: e.startY, current: e.currentY, alt: e.altKey })\n                : (e) => ({ sash, start: e.startX, current: e.currentX, alt: e.altKey });\n            const onStart = Event.map(sash.onDidStart, sashEventMapper);\n            const onStartDisposable = onStart(this.onSashStart, this);\n            const onChange = Event.map(sash.onDidChange, sashEventMapper);\n            const onChangeDisposable = onChange(this.onSashChange, this);\n            const onEnd = Event.map(sash.onDidEnd, () => this.sashItems.findIndex(item => item.sash === sash));\n            const onEndDisposable = onEnd(this.onSashEnd, this);\n            const onDidResetDisposable = sash.onDidReset(() => {\n                const index = this.sashItems.findIndex(item => item.sash === sash);\n                const upIndexes = range(index, -1);\n                const downIndexes = range(index + 1, this.viewItems.length);\n                const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n                const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n                if (typeof snapBeforeIndex === 'number' && !this.viewItems[snapBeforeIndex].visible) {\n                    return;\n                }\n                if (typeof snapAfterIndex === 'number' && !this.viewItems[snapAfterIndex].visible) {\n                    return;\n                }\n                this._onDidSashReset.fire(index);\n            });\n            const disposable = combinedDisposable(onStartDisposable, onChangeDisposable, onEndDisposable, onDidResetDisposable, sash);\n            const sashItem = { sash, disposable };\n            this.sashItems.splice(index - 1, 0, sashItem);\n        }\n        container.appendChild(view.element);\n        let highPriorityIndexes;\n        if (typeof size !== 'number' && size.type === 'split') {\n            highPriorityIndexes = [size.index];\n        }\n        if (!skipLayout) {\n            this.relayout([index], highPriorityIndexes);\n        }\n        this.state = State.Idle;\n        if (!skipLayout && typeof size !== 'number' && size.type === 'distribute') {\n            this.distributeViewSizes();\n        }\n    }\n    relayout(lowPriorityIndexes, highPriorityIndexes) {\n        const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n        this.resize(this.viewItems.length - 1, this.size - contentSize, undefined, lowPriorityIndexes, highPriorityIndexes);\n        this.distributeEmptySpace();\n        this.layoutViews();\n        this.saveProportions();\n    }\n    resize(index, delta, sizes = this.viewItems.map(i => i.size), lowPriorityIndexes, highPriorityIndexes, overloadMinDelta = Number.NEGATIVE_INFINITY, overloadMaxDelta = Number.POSITIVE_INFINITY, snapBefore, snapAfter) {\n        if (index < 0 || index >= this.viewItems.length) {\n            return 0;\n        }\n        const upIndexes = range(index, -1);\n        const downIndexes = range(index + 1, this.viewItems.length);\n        if (highPriorityIndexes) {\n            for (const index of highPriorityIndexes) {\n                pushToStart(upIndexes, index);\n                pushToStart(downIndexes, index);\n            }\n        }\n        if (lowPriorityIndexes) {\n            for (const index of lowPriorityIndexes) {\n                pushToEnd(upIndexes, index);\n                pushToEnd(downIndexes, index);\n            }\n        }\n        const upItems = upIndexes.map(i => this.viewItems[i]);\n        const upSizes = upIndexes.map(i => sizes[i]);\n        const downItems = downIndexes.map(i => this.viewItems[i]);\n        const downSizes = downIndexes.map(i => sizes[i]);\n        const minDeltaUp = upIndexes.reduce((r, i) => r + (this.viewItems[i].minimumSize - sizes[i]), 0);\n        const maxDeltaUp = upIndexes.reduce((r, i) => r + (this.viewItems[i].maximumSize - sizes[i]), 0);\n        const maxDeltaDown = downIndexes.length === 0 ? Number.POSITIVE_INFINITY : downIndexes.reduce((r, i) => r + (sizes[i] - this.viewItems[i].minimumSize), 0);\n        const minDeltaDown = downIndexes.length === 0 ? Number.NEGATIVE_INFINITY : downIndexes.reduce((r, i) => r + (sizes[i] - this.viewItems[i].maximumSize), 0);\n        const minDelta = Math.max(minDeltaUp, minDeltaDown, overloadMinDelta);\n        const maxDelta = Math.min(maxDeltaDown, maxDeltaUp, overloadMaxDelta);\n        let snapped = false;\n        if (snapBefore) {\n            const snapView = this.viewItems[snapBefore.index];\n            const visible = delta >= snapBefore.limitDelta;\n            snapped = visible !== snapView.visible;\n            snapView.setVisible(visible, snapBefore.size);\n        }\n        if (!snapped && snapAfter) {\n            const snapView = this.viewItems[snapAfter.index];\n            const visible = delta < snapAfter.limitDelta;\n            snapped = visible !== snapView.visible;\n            snapView.setVisible(visible, snapAfter.size);\n        }\n        if (snapped) {\n            return this.resize(index, delta, sizes, lowPriorityIndexes, highPriorityIndexes, overloadMinDelta, overloadMaxDelta);\n        }\n        delta = clamp(delta, minDelta, maxDelta);\n        for (let i = 0, deltaUp = delta; i < upItems.length; i++) {\n            const item = upItems[i];\n            const size = clamp(upSizes[i] + deltaUp, item.minimumSize, item.maximumSize);\n            const viewDelta = size - upSizes[i];\n            deltaUp -= viewDelta;\n            item.size = size;\n        }\n        for (let i = 0, deltaDown = delta; i < downItems.length; i++) {\n            const item = downItems[i];\n            const size = clamp(downSizes[i] - deltaDown, item.minimumSize, item.maximumSize);\n            const viewDelta = size - downSizes[i];\n            deltaDown += viewDelta;\n            item.size = size;\n        }\n        return delta;\n    }\n    distributeEmptySpace(lowPriorityIndex) {\n        const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n        let emptyDelta = this.size - contentSize;\n        const indexes = range(this.viewItems.length - 1, -1);\n        const lowPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 1 /* LayoutPriority.Low */);\n        const highPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 2 /* LayoutPriority.High */);\n        for (const index of highPriorityIndexes) {\n            pushToStart(indexes, index);\n        }\n        for (const index of lowPriorityIndexes) {\n            pushToEnd(indexes, index);\n        }\n        if (typeof lowPriorityIndex === 'number') {\n            pushToEnd(indexes, lowPriorityIndex);\n        }\n        for (let i = 0; emptyDelta !== 0 && i < indexes.length; i++) {\n            const item = this.viewItems[indexes[i]];\n            const size = clamp(item.size + emptyDelta, item.minimumSize, item.maximumSize);\n            const viewDelta = size - item.size;\n            emptyDelta -= viewDelta;\n            item.size = size;\n        }\n    }\n    layoutViews() {\n        // Save new content size\n        this.contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n        // Layout views\n        let offset = 0;\n        for (const viewItem of this.viewItems) {\n            viewItem.layout(offset, this.layoutContext);\n            offset += viewItem.size;\n        }\n        // Layout sashes\n        this.sashItems.forEach(item => item.sash.layout());\n        this.updateSashEnablement();\n        this.updateScrollableElement();\n    }\n    updateScrollableElement() {\n        if (this.orientation === 0 /* Orientation.VERTICAL */) {\n            this.scrollableElement.setScrollDimensions({\n                height: this.size,\n                scrollHeight: this.contentSize\n            });\n        }\n        else {\n            this.scrollableElement.setScrollDimensions({\n                width: this.size,\n                scrollWidth: this.contentSize\n            });\n        }\n    }\n    updateSashEnablement() {\n        let previous = false;\n        const collapsesDown = this.viewItems.map(i => previous = (i.size - i.minimumSize > 0) || previous);\n        previous = false;\n        const expandsDown = this.viewItems.map(i => previous = (i.maximumSize - i.size > 0) || previous);\n        const reverseViews = [...this.viewItems].reverse();\n        previous = false;\n        const collapsesUp = reverseViews.map(i => previous = (i.size - i.minimumSize > 0) || previous).reverse();\n        previous = false;\n        const expandsUp = reverseViews.map(i => previous = (i.maximumSize - i.size > 0) || previous).reverse();\n        let position = 0;\n        for (let index = 0; index < this.sashItems.length; index++) {\n            const { sash } = this.sashItems[index];\n            const viewItem = this.viewItems[index];\n            position += viewItem.size;\n            const min = !(collapsesDown[index] && expandsUp[index + 1]);\n            const max = !(expandsDown[index] && collapsesUp[index + 1]);\n            if (min && max) {\n                const upIndexes = range(index, -1);\n                const downIndexes = range(index + 1, this.viewItems.length);\n                const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n                const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n                const snappedBefore = typeof snapBeforeIndex === 'number' && !this.viewItems[snapBeforeIndex].visible;\n                const snappedAfter = typeof snapAfterIndex === 'number' && !this.viewItems[snapAfterIndex].visible;\n                if (snappedBefore && collapsesUp[index] && (position > 0 || this.startSnappingEnabled)) {\n                    sash.state = 1 /* SashState.AtMinimum */;\n                }\n                else if (snappedAfter && collapsesDown[index] && (position < this.contentSize || this.endSnappingEnabled)) {\n                    sash.state = 2 /* SashState.AtMaximum */;\n                }\n                else {\n                    sash.state = 0 /* SashState.Disabled */;\n                }\n            }\n            else if (min && !max) {\n                sash.state = 1 /* SashState.AtMinimum */;\n            }\n            else if (!min && max) {\n                sash.state = 2 /* SashState.AtMaximum */;\n            }\n            else {\n                sash.state = 3 /* SashState.Enabled */;\n            }\n        }\n    }\n    getSashPosition(sash) {\n        let position = 0;\n        for (let i = 0; i < this.sashItems.length; i++) {\n            position += this.viewItems[i].size;\n            if (this.sashItems[i].sash === sash) {\n                return position;\n            }\n        }\n        return 0;\n    }\n    findFirstSnapIndex(indexes) {\n        // visible views first\n        for (const index of indexes) {\n            const viewItem = this.viewItems[index];\n            if (!viewItem.visible) {\n                continue;\n            }\n            if (viewItem.snap) {\n                return index;\n            }\n        }\n        // then, hidden views\n        for (const index of indexes) {\n            const viewItem = this.viewItems[index];\n            if (viewItem.visible && viewItem.maximumSize - viewItem.minimumSize > 0) {\n                return undefined;\n            }\n            if (!viewItem.visible && viewItem.snap) {\n                return index;\n            }\n        }\n        return undefined;\n    }\n    dispose() {\n        super.dispose();\n        dispose(this.viewItems);\n        this.viewItems = [];\n        this.sashItems.forEach(i => i.disposable.dispose());\n        this.sashItems = [];\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,CAAC,EAAEC,qBAAqB,EAAEC,MAAM,EAAEC,4BAA4B,QAAQ,cAAc;AAC7F,SAASC,IAAI,QAAQ,iBAAiB;AACtC,SAASC,uBAAuB,QAAQ,mCAAmC;AAC3E,SAASC,SAAS,EAAEC,WAAW,EAAEC,KAAK,QAAQ,2BAA2B;AACzE,SAASC,KAAK,QAAQ,0BAA0B;AAChD,SAASC,OAAO,EAAEC,KAAK,QAAQ,0BAA0B;AACzD,SAASC,kBAAkB,EAAEC,UAAU,EAAEC,OAAO,EAAEC,YAAY,QAAQ,8BAA8B;AACpG,SAASC,KAAK,QAAQ,4BAA4B;AAClD,SAASC,UAAU,QAAQ,+BAA+B;AAC1D,OAAO,KAAKC,KAAK,MAAM,0BAA0B;AACjD,OAAO,iBAAiB;AACxB,MAAMC,aAAa,GAAG;EAClBC,eAAe,EAAEX,KAAK,CAACY;AAC3B,CAAC;AACD,MAAMC,QAAQ,CAAC;EACXC,WAAW,CAACC,SAAS,EAAEC,IAAI,EAAEC,IAAI,EAAEC,UAAU,EAAE;IAC3C,IAAI,CAACH,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACE,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,kBAAkB,GAAGC,SAAS;IACnC,IAAI,OAAOH,IAAI,KAAK,QAAQ,EAAE;MAC1B,IAAI,CAACI,KAAK,GAAGJ,IAAI;MACjB,IAAI,CAACE,kBAAkB,GAAGC,SAAS;MACnCL,SAAS,CAACO,SAAS,CAACC,GAAG,CAAC,SAAS,CAAC;IACtC,CAAC,MACI;MACD,IAAI,CAACF,KAAK,GAAG,CAAC;MACd,IAAI,CAACF,kBAAkB,GAAGF,IAAI,CAACO,iBAAiB;IACpD;EACJ;EACA,IAAIP,IAAI,CAACA,IAAI,EAAE;IACX,IAAI,CAACI,KAAK,GAAGJ,IAAI;EACrB;EACA,IAAIA,IAAI,GAAG;IACP,OAAO,IAAI,CAACI,KAAK;EACrB;EACA,IAAII,OAAO,GAAG;IACV,OAAO,OAAO,IAAI,CAACN,kBAAkB,KAAK,WAAW;EACzD;EACAO,UAAU,CAACD,OAAO,EAAER,IAAI,EAAE;IACtB,IAAIU,EAAE,EAAEC,EAAE;IACV,IAAIH,OAAO,KAAK,IAAI,CAACA,OAAO,EAAE;MAC1B;IACJ;IACA,IAAIA,OAAO,EAAE;MACT,IAAI,CAACR,IAAI,GAAGV,KAAK,CAAC,IAAI,CAACY,kBAAkB,EAAE,IAAI,CAACU,eAAe,EAAE,IAAI,CAACC,eAAe,CAAC;MACtF,IAAI,CAACX,kBAAkB,GAAGC,SAAS;IACvC,CAAC,MACI;MACD,IAAI,CAACD,kBAAkB,GAAG,OAAOF,IAAI,KAAK,QAAQ,GAAGA,IAAI,GAAG,IAAI,CAACA,IAAI;MACrE,IAAI,CAACA,IAAI,GAAG,CAAC;IACjB;IACA,IAAI,CAACF,SAAS,CAACO,SAAS,CAACS,MAAM,CAAC,SAAS,EAAEN,OAAO,CAAC;IACnD,CAACG,EAAE,GAAG,CAACD,EAAE,GAAG,IAAI,CAACX,IAAI,EAAEU,UAAU,MAAM,IAAI,IAAIE,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACI,IAAI,CAACL,EAAE,EAAEF,OAAO,CAAC;EAChG;EACA,IAAIQ,WAAW,GAAG;IAAE,OAAO,IAAI,CAACR,OAAO,GAAG,IAAI,CAACT,IAAI,CAACiB,WAAW,GAAG,CAAC;EAAE;EACrE,IAAIJ,eAAe,GAAG;IAAE,OAAO,IAAI,CAACb,IAAI,CAACiB,WAAW;EAAE;EACtD,IAAIC,WAAW,GAAG;IAAE,OAAO,IAAI,CAACT,OAAO,GAAG,IAAI,CAACT,IAAI,CAACkB,WAAW,GAAG,CAAC;EAAE;EACrE,IAAIJ,eAAe,GAAG;IAAE,OAAO,IAAI,CAACd,IAAI,CAACkB,WAAW;EAAE;EACtD,IAAIC,QAAQ,GAAG;IAAE,OAAO,IAAI,CAACnB,IAAI,CAACmB,QAAQ;EAAE;EAC5C,IAAIC,IAAI,GAAG;IAAE,OAAO,CAAC,CAAC,IAAI,CAACpB,IAAI,CAACoB,IAAI;EAAE;EACtC,IAAIC,OAAO,CAACA,OAAO,EAAE;IACjB,IAAI,CAACtB,SAAS,CAACuB,KAAK,CAACC,aAAa,GAAGF,OAAO,GAAG,EAAE,GAAG,MAAM;EAC9D;EACAG,MAAM,CAACC,MAAM,EAAEC,aAAa,EAAE;IAC1B,IAAI,CAACC,eAAe,CAACF,MAAM,CAAC;IAC5B,IAAI,CAACzB,IAAI,CAACwB,MAAM,CAAC,IAAI,CAACvB,IAAI,EAAEwB,MAAM,EAAEC,aAAa,CAAC;EACtD;EACArC,OAAO,GAAG;IACN,IAAI,CAACa,UAAU,CAACb,OAAO,EAAE;IACzB,OAAO,IAAI,CAACW,IAAI;EACpB;AACJ;AACA,MAAM4B,gBAAgB,SAAS/B,QAAQ,CAAC;EACpC8B,eAAe,CAACF,MAAM,EAAE;IACpB,IAAI,CAAC1B,SAAS,CAACuB,KAAK,CAACO,GAAG,GAAI,GAAEJ,MAAO,IAAG;IACxC,IAAI,CAAC1B,SAAS,CAACuB,KAAK,CAACQ,MAAM,GAAI,GAAE,IAAI,CAAC7B,IAAK,IAAG;EAClD;AACJ;AACA,MAAM8B,kBAAkB,SAASlC,QAAQ,CAAC;EACtC8B,eAAe,CAACF,MAAM,EAAE;IACpB,IAAI,CAAC1B,SAAS,CAACuB,KAAK,CAACU,IAAI,GAAI,GAAEP,MAAO,IAAG;IACzC,IAAI,CAAC1B,SAAS,CAACuB,KAAK,CAACW,KAAK,GAAI,GAAE,IAAI,CAAChC,IAAK,IAAG;EACjD;AACJ;AACA,IAAIiC,KAAK;AACT,CAAC,UAAUA,KAAK,EAAE;EACdA,KAAK,CAACA,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM;EACjCA,KAAK,CAACA,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM;AACrC,CAAC,EAAEA,KAAK,KAAKA,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;AACzB,OAAO,IAAIC,MAAM;AACjB,CAAC,UAAUA,MAAM,EAAE;EACf;AACJ;AACA;AACA;EACIA,MAAM,CAACC,UAAU,GAAG;IAAEC,IAAI,EAAE;EAAa,CAAC;EAC1C;AACJ;AACA;AACA;EACI,SAASC,KAAK,CAACC,KAAK,EAAE;IAAE,OAAO;MAAEF,IAAI,EAAE,OAAO;MAAEE;IAAM,CAAC;EAAE;EACzDJ,MAAM,CAACG,KAAK,GAAGA,KAAK;EACpB;AACJ;AACA;EACI,SAASE,SAAS,CAAChC,iBAAiB,EAAE;IAAE,OAAO;MAAE6B,IAAI,EAAE,WAAW;MAAE7B;IAAkB,CAAC;EAAE;EACzF2B,MAAM,CAACK,SAAS,GAAGA,SAAS;AAChC,CAAC,EAAEL,MAAM,KAAKA,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMM,SAAS,SAASrD,UAAU,CAAC;EACtC;AACJ;AACA;EACIU,WAAW,CAACC,SAAS,EAAgB;IAAA,IAAd2C,OAAO,uEAAG,CAAC,CAAC;IAC/B,IAAI/B,EAAE,EAAEC,EAAE,EAAE+B,EAAE,EAAEC,EAAE,EAAEC,EAAE;IACtB,KAAK,EAAE;IACP,IAAI,CAAC5C,IAAI,GAAG,CAAC;IACb,IAAI,CAAC6C,WAAW,GAAG,CAAC;IACpB,IAAI,CAACC,WAAW,GAAG3C,SAAS;IAC5B,IAAI,CAAC4C,SAAS,GAAG,EAAE;IACnB,IAAI,CAACC,SAAS,GAAG,EAAE;IACnB,IAAI,CAACC,KAAK,GAAGhB,KAAK,CAACiB,IAAI;IACvB,IAAI,CAACC,gBAAgB,GAAG,IAAI,CAACC,SAAS,CAAC,IAAIpE,OAAO,EAAE,CAAC;IACrD,IAAI,CAACqE,eAAe,GAAG,IAAI,CAACD,SAAS,CAAC,IAAIpE,OAAO,EAAE,CAAC;IACpD,IAAI,CAACsE,qBAAqB,GAAG,IAAI;IACjC,IAAI,CAACC,mBAAmB,GAAG,IAAI;IAC/B;AACR;AACA;IACQ,IAAI,CAACC,eAAe,GAAG,IAAI,CAACL,gBAAgB,CAACM,KAAK;IAClD;AACR;AACA;IACQ,IAAI,CAACC,cAAc,GAAG,IAAI,CAACL,eAAe,CAACI,KAAK;IAChD,IAAI,CAACE,WAAW,GAAG,CAACjD,EAAE,GAAG+B,OAAO,CAACkB,WAAW,MAAM,IAAI,IAAIjD,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,CAAC,CAAC;IACjF,IAAI,CAACkD,kBAAkB,GAAG,CAACjD,EAAE,GAAG8B,OAAO,CAACmB,kBAAkB,MAAM,IAAI,IAAIjD,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,KAAK;IAClG,IAAI,CAACkD,kBAAkB,GAAG,CAACnB,EAAE,GAAGD,OAAO,CAACoB,kBAAkB,MAAM,IAAI,IAAInB,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,IAAI;IACjG,IAAI,CAACoB,qBAAqB,GAAGrB,OAAO,CAACqB,qBAAqB;IAC1D,IAAI,CAACC,EAAE,GAAGC,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;IACvC,IAAI,CAACF,EAAE,CAAC1D,SAAS,CAACC,GAAG,CAAC,oBAAoB,CAAC;IAC3C,IAAI,CAACyD,EAAE,CAAC1D,SAAS,CAACC,GAAG,CAAC,IAAI,CAACqD,WAAW,KAAK,CAAC,CAAC,6BAA6B,UAAU,GAAG,YAAY,CAAC;IACpG7D,SAAS,CAACoE,WAAW,CAAC,IAAI,CAACH,EAAE,CAAC;IAC9B,IAAI,CAACI,aAAa,GAAG3F,MAAM,CAAC,IAAI,CAACuF,EAAE,EAAEzF,CAAC,CAAC,iBAAiB,CAAC,CAAC;IAC1D,IAAI,CAAC8F,aAAa,GAAG9F,CAAC,CAAC,uBAAuB,CAAC;IAC/C,IAAI,CAAC+F,UAAU,GAAG,IAAI9E,UAAU,CAAC;MAC7B+E,kBAAkB,EAAE,IAAI;MACxBC,oBAAoB,EAAE,GAAG;MACzB9F;IACJ,CAAC,CAAC;IACF,IAAI,CAAC+F,iBAAiB,GAAG,IAAI,CAACpB,SAAS,CAAC,IAAIzE,uBAAuB,CAAC,IAAI,CAACyF,aAAa,EAAE;MACpFK,QAAQ,EAAE,IAAI,CAACd,WAAW,KAAK,CAAC,CAAC,6BAA8B,CAAChB,EAAE,GAAGF,OAAO,CAACiC,mBAAmB,MAAM,IAAI,IAAI/B,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,CAAC,CAAC,iCAAkC,CAAC,CAAC;MACzKgC,UAAU,EAAE,IAAI,CAAChB,WAAW,KAAK,CAAC,CAAC,+BAAgC,CAACf,EAAE,GAAGH,OAAO,CAACiC,mBAAmB,MAAM,IAAI,IAAI9B,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,CAAC,CAAC,iCAAkC,CAAC,CAAC;IACjL,CAAC,EAAE,IAAI,CAACyB,UAAU,CAAC,CAAC;IACpB,IAAI,CAACO,WAAW,GAAG,IAAI,CAACJ,iBAAiB,CAACK,QAAQ;IAClD,IAAI,CAACzB,SAAS,CAAC,IAAI,CAACwB,WAAW,CAACE,CAAC,IAAI;MACjC,IAAI,CAACV,aAAa,CAACW,SAAS,GAAGD,CAAC,CAACC,SAAS;MAC1C,IAAI,CAACX,aAAa,CAACY,UAAU,GAAGF,CAAC,CAACE,UAAU;IAChD,CAAC,CAAC,CAAC;IACHxG,MAAM,CAAC,IAAI,CAACuF,EAAE,EAAE,IAAI,CAACS,iBAAiB,CAACS,UAAU,EAAE,CAAC;IACpD,IAAI,CAAC5D,KAAK,CAACoB,OAAO,CAACyC,MAAM,IAAIzF,aAAa,CAAC;IAC3C;IACA,IAAIgD,OAAO,CAAC0C,UAAU,EAAE;MACpB,IAAI,CAACnF,IAAI,GAAGyC,OAAO,CAAC0C,UAAU,CAACnF,IAAI;MACnCyC,OAAO,CAAC0C,UAAU,CAACC,KAAK,CAACC,OAAO,CAAC,CAACC,cAAc,EAAEhD,KAAK,KAAK;QACxD,MAAMiD,MAAM,GAAG/F,KAAK,CAACgG,WAAW,CAACF,cAAc,CAAC9E,OAAO,CAAC,IAAI8E,cAAc,CAAC9E,OAAO,GAAG8E,cAAc,CAACtF,IAAI,GAAG;UAAEoC,IAAI,EAAE,WAAW;UAAE7B,iBAAiB,EAAE+E,cAAc,CAACtF;QAAK,CAAC;QACxK,MAAMD,IAAI,GAAGuF,cAAc,CAACvF,IAAI;QAChC,IAAI,CAAC0F,SAAS,CAAC1F,IAAI,EAAEwF,MAAM,EAAEjD,KAAK,EAAE,IAAI,CAAC;MAC7C,CAAC,CAAC;MACF;MACA,IAAI,CAACO,WAAW,GAAG,IAAI,CAACE,SAAS,CAAC2C,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC5F,IAAI,EAAE,CAAC,CAAC;MACjE,IAAI,CAAC6F,eAAe,EAAE;IAC1B;EACJ;EACA,IAAIC,mBAAmB,GAAG;IAAE,OAAO,IAAI,CAACC,oBAAoB;EAAE;EAC9D,IAAIC,iBAAiB,GAAG;IAAE,OAAO,IAAI,CAACC,kBAAkB;EAAE;EAC1D,IAAIC,oBAAoB,GAAG;IAAE,OAAO,IAAI,CAAC5C,qBAAqB;EAAE;EAChE,IAAI6C,kBAAkB,GAAG;IAAE,OAAO,IAAI,CAAC5C,mBAAmB;EAAE;EAC5D;AACJ;AACA;AACA;AACA;EACI,IAAIuC,mBAAmB,CAACM,IAAI,EAAE;IAC1B,KAAK,MAAMC,QAAQ,IAAI,IAAI,CAACrD,SAAS,EAAE;MACnCqD,QAAQ,CAACD,IAAI,CAACN,mBAAmB,GAAGM,IAAI;IAC5C;IACA,IAAI,CAACL,oBAAoB,GAAGK,IAAI;EACpC;EACA;AACJ;AACA;AACA;AACA;EACI,IAAIJ,iBAAiB,CAACI,IAAI,EAAE;IACxB,KAAK,MAAMC,QAAQ,IAAI,IAAI,CAACrD,SAAS,EAAE;MACnCqD,QAAQ,CAACD,IAAI,CAACJ,iBAAiB,GAAGI,IAAI;IAC1C;IACA,IAAI,CAACH,kBAAkB,GAAGG,IAAI;EAClC;EACA;AACJ;AACA;EACI,IAAIF,oBAAoB,CAACA,oBAAoB,EAAE;IAC3C,IAAI,IAAI,CAAC5C,qBAAqB,KAAK4C,oBAAoB,EAAE;MACrD;IACJ;IACA,IAAI,CAAC5C,qBAAqB,GAAG4C,oBAAoB;IACjD,IAAI,CAACI,oBAAoB,EAAE;EAC/B;EACA;AACJ;AACA;EACI,IAAIH,kBAAkB,CAACA,kBAAkB,EAAE;IACvC,IAAI,IAAI,CAAC5C,mBAAmB,KAAK4C,kBAAkB,EAAE;MACjD;IACJ;IACA,IAAI,CAAC5C,mBAAmB,GAAG4C,kBAAkB;IAC7C,IAAI,CAACG,oBAAoB,EAAE;EAC/B;EACAjF,KAAK,CAAC6D,MAAM,EAAE;IACV,IAAIA,MAAM,CAACxF,eAAe,CAAC6G,aAAa,EAAE,EAAE;MACxC,IAAI,CAACxC,EAAE,CAAC1D,SAAS,CAACmG,MAAM,CAAC,kBAAkB,CAAC;MAC5C,IAAI,CAACzC,EAAE,CAAC1C,KAAK,CAACoF,cAAc,CAAC,oBAAoB,CAAC;IACtD,CAAC,MACI;MACD,IAAI,CAAC1C,EAAE,CAAC1D,SAAS,CAACC,GAAG,CAAC,kBAAkB,CAAC;MACzC,IAAI,CAACyD,EAAE,CAAC1C,KAAK,CAACqF,WAAW,CAAC,oBAAoB,EAAExB,MAAM,CAACxF,eAAe,CAACiH,QAAQ,EAAE,CAAC;IACtF;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,OAAO,CAAC7G,IAAI,EAAEC,IAAI,EAA6C;IAAA,IAA3CsC,KAAK,uEAAG,IAAI,CAACS,SAAS,CAAC8D,MAAM;IAAA,IAAEC,UAAU;IACzD,IAAI,CAACrB,SAAS,CAAC1F,IAAI,EAAEC,IAAI,EAAEsC,KAAK,EAAEwE,UAAU,CAAC;EACjD;EACA;AACJ;AACA;AACA;AACA;AACA;EACIvF,MAAM,CAACvB,IAAI,EAAEyB,aAAa,EAAE;IACxB,MAAMsF,YAAY,GAAGC,IAAI,CAACC,GAAG,CAAC,IAAI,CAACjH,IAAI,EAAE,IAAI,CAAC6C,WAAW,CAAC;IAC1D,IAAI,CAAC7C,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACyB,aAAa,GAAGA,aAAa;IAClC,IAAI,CAAC,IAAI,CAACqB,WAAW,EAAE;MACnB,MAAMoE,OAAO,GAAGpI,KAAK,CAAC,IAAI,CAACiE,SAAS,CAAC8D,MAAM,CAAC;MAC5C,MAAMM,kBAAkB,GAAGD,OAAO,CAACE,MAAM,CAACxB,CAAC,IAAI,IAAI,CAAC7C,SAAS,CAAC6C,CAAC,CAAC,CAAC1E,QAAQ,KAAK,CAAC,CAAC,yBAAyB;MACzG,MAAMmG,mBAAmB,GAAGH,OAAO,CAACE,MAAM,CAACxB,CAAC,IAAI,IAAI,CAAC7C,SAAS,CAAC6C,CAAC,CAAC,CAAC1E,QAAQ,KAAK,CAAC,CAAC,0BAA0B;MAC3G,IAAI,CAACoG,MAAM,CAAC,IAAI,CAACvE,SAAS,CAAC8D,MAAM,GAAG,CAAC,EAAE7G,IAAI,GAAG+G,YAAY,EAAE5G,SAAS,EAAEgH,kBAAkB,EAAEE,mBAAmB,CAAC;IACnH,CAAC,MACI;MACD,KAAK,IAAIzB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC7C,SAAS,CAAC8D,MAAM,EAAEjB,CAAC,EAAE,EAAE;QAC5C,MAAM2B,IAAI,GAAG,IAAI,CAACxE,SAAS,CAAC6C,CAAC,CAAC;QAC9B2B,IAAI,CAACvH,IAAI,GAAGV,KAAK,CAAC0H,IAAI,CAACQ,KAAK,CAAC,IAAI,CAAC1E,WAAW,CAAC8C,CAAC,CAAC,GAAG5F,IAAI,CAAC,EAAEuH,IAAI,CAACvG,WAAW,EAAEuG,IAAI,CAACtG,WAAW,CAAC;MACjG;IACJ;IACA,IAAI,CAACwG,oBAAoB,EAAE;IAC3B,IAAI,CAACC,WAAW,EAAE;EACtB;EACA7B,eAAe,GAAG;IACd,IAAI,IAAI,CAAChC,kBAAkB,IAAI,IAAI,CAAChB,WAAW,GAAG,CAAC,EAAE;MACjD,IAAI,CAACC,WAAW,GAAG,IAAI,CAACC,SAAS,CAAC4E,GAAG,CAAC/B,CAAC,IAAIA,CAAC,CAAC5F,IAAI,GAAG,IAAI,CAAC6C,WAAW,CAAC;IACzE;EACJ;EACA+E,WAAW,OAAuB;IAAA,IAAtB;MAAExB,IAAI;MAAEyB,KAAK;MAAEC;IAAI,CAAC;IAC5B,KAAK,MAAMP,IAAI,IAAI,IAAI,CAACxE,SAAS,EAAE;MAC/BwE,IAAI,CAACnG,OAAO,GAAG,KAAK;IACxB;IACA,MAAMkB,KAAK,GAAG,IAAI,CAACU,SAAS,CAAC+E,SAAS,CAACR,IAAI,IAAIA,IAAI,CAACnB,IAAI,KAAKA,IAAI,CAAC;IAClE;IACA,MAAMnG,UAAU,GAAGf,kBAAkB,CAACX,qBAAqB,CAACyF,QAAQ,CAACgE,IAAI,EAAE,SAAS,EAAElD,CAAC,IAAImD,kBAAkB,CAAC,IAAI,CAACC,aAAa,CAACC,OAAO,EAAErD,CAAC,CAACsD,MAAM,CAAC,CAAC,EAAE7J,qBAAqB,CAACyF,QAAQ,CAACgE,IAAI,EAAE,OAAO,EAAE,MAAMC,kBAAkB,CAAC,IAAI,CAACC,aAAa,CAACC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;IACjQ,MAAMF,kBAAkB,GAAG,CAACJ,KAAK,EAAEC,GAAG,KAAK;MACvC,MAAMO,KAAK,GAAG,IAAI,CAACtF,SAAS,CAAC4E,GAAG,CAAC/B,CAAC,IAAIA,CAAC,CAAC5F,IAAI,CAAC;MAC7C,IAAIsI,QAAQ,GAAGC,MAAM,CAACC,iBAAiB;MACvC,IAAIC,QAAQ,GAAGF,MAAM,CAACG,iBAAiB;MACvC,IAAI,IAAI,CAAC9E,kBAAkB,EAAE;QACzBkE,GAAG,GAAG,CAACA,GAAG;MACd;MACA,IAAIA,GAAG,EAAE;QACL;QACA;QACA;QACA,MAAMa,UAAU,GAAGrG,KAAK,KAAK,IAAI,CAACU,SAAS,CAAC6D,MAAM,GAAG,CAAC;QACtD,IAAI8B,UAAU,EAAE;UACZ,MAAMC,QAAQ,GAAG,IAAI,CAAC7F,SAAS,CAACT,KAAK,CAAC;UACtCgG,QAAQ,GAAG,CAACM,QAAQ,CAAC5H,WAAW,GAAG4H,QAAQ,CAAC5I,IAAI,IAAI,CAAC;UACrDyI,QAAQ,GAAG,CAACG,QAAQ,CAAC3H,WAAW,GAAG2H,QAAQ,CAAC5I,IAAI,IAAI,CAAC;QACzD,CAAC,MACI;UACD,MAAM4I,QAAQ,GAAG,IAAI,CAAC7F,SAAS,CAACT,KAAK,GAAG,CAAC,CAAC;UAC1CgG,QAAQ,GAAG,CAACM,QAAQ,CAAC5I,IAAI,GAAG4I,QAAQ,CAAC3H,WAAW,IAAI,CAAC;UACrDwH,QAAQ,GAAG,CAACG,QAAQ,CAAC5I,IAAI,GAAG4I,QAAQ,CAAC5H,WAAW,IAAI,CAAC;QACzD;MACJ;MACA,IAAI6H,UAAU;MACd,IAAIC,SAAS;MACb,IAAI,CAAChB,GAAG,EAAE;QACN,MAAMiB,SAAS,GAAGjK,KAAK,CAACwD,KAAK,EAAE,CAAC,CAAC,CAAC;QAClC,MAAM0G,WAAW,GAAGlK,KAAK,CAACwD,KAAK,GAAG,CAAC,EAAE,IAAI,CAACS,SAAS,CAAC8D,MAAM,CAAC;QAC3D,MAAMoC,UAAU,GAAGF,SAAS,CAACrD,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,IAAI,IAAI,CAAC5C,SAAS,CAAC6C,CAAC,CAAC,CAAC5E,WAAW,GAAGqH,KAAK,CAACzC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;QAChG,MAAMsD,UAAU,GAAGH,SAAS,CAACrD,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,IAAI,IAAI,CAAC5C,SAAS,CAAC6C,CAAC,CAAC,CAAC/E,eAAe,GAAGwH,KAAK,CAACzC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;QACpG,MAAMuD,YAAY,GAAGH,WAAW,CAACnC,MAAM,KAAK,CAAC,GAAG0B,MAAM,CAACG,iBAAiB,GAAGM,WAAW,CAACtD,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,IAAI0C,KAAK,CAACzC,CAAC,CAAC,GAAG,IAAI,CAAC7C,SAAS,CAAC6C,CAAC,CAAC,CAAC5E,WAAW,CAAC,EAAE,CAAC,CAAC;QAC1J,MAAMoI,YAAY,GAAGJ,WAAW,CAACnC,MAAM,KAAK,CAAC,GAAG0B,MAAM,CAACC,iBAAiB,GAAGQ,WAAW,CAACtD,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,IAAI0C,KAAK,CAACzC,CAAC,CAAC,GAAG,IAAI,CAAC7C,SAAS,CAAC6C,CAAC,CAAC,CAAC/E,eAAe,CAAC,EAAE,CAAC,CAAC;QAC9J,MAAMyH,QAAQ,GAAGtB,IAAI,CAACC,GAAG,CAACgC,UAAU,EAAEG,YAAY,CAAC;QACnD,MAAMX,QAAQ,GAAGzB,IAAI,CAACqC,GAAG,CAACF,YAAY,EAAED,UAAU,CAAC;QACnD,MAAMI,eAAe,GAAG,IAAI,CAACC,kBAAkB,CAACR,SAAS,CAAC;QAC1D,MAAMS,cAAc,GAAG,IAAI,CAACD,kBAAkB,CAACP,WAAW,CAAC;QAC3D,IAAI,OAAOM,eAAe,KAAK,QAAQ,EAAE;UACrC,MAAMV,QAAQ,GAAG,IAAI,CAAC7F,SAAS,CAACuG,eAAe,CAAC;UAChD,MAAMG,QAAQ,GAAGzC,IAAI,CAAC0C,KAAK,CAACd,QAAQ,CAAChI,eAAe,GAAG,CAAC,CAAC;UACzDiI,UAAU,GAAG;YACTvG,KAAK,EAAEgH,eAAe;YACtBK,UAAU,EAAEf,QAAQ,CAACpI,OAAO,GAAG8H,QAAQ,GAAGmB,QAAQ,GAAGnB,QAAQ,GAAGmB,QAAQ;YACxEzJ,IAAI,EAAE4I,QAAQ,CAAC5I;UACnB,CAAC;QACL;QACA,IAAI,OAAOwJ,cAAc,KAAK,QAAQ,EAAE;UACpC,MAAMZ,QAAQ,GAAG,IAAI,CAAC7F,SAAS,CAACyG,cAAc,CAAC;UAC/C,MAAMC,QAAQ,GAAGzC,IAAI,CAAC0C,KAAK,CAACd,QAAQ,CAAChI,eAAe,GAAG,CAAC,CAAC;UACzDkI,SAAS,GAAG;YACRxG,KAAK,EAAEkH,cAAc;YACrBG,UAAU,EAAEf,QAAQ,CAACpI,OAAO,GAAGiI,QAAQ,GAAGgB,QAAQ,GAAGhB,QAAQ,GAAGgB,QAAQ;YACxEzJ,IAAI,EAAE4I,QAAQ,CAAC5I;UACnB,CAAC;QACL;MACJ;MACA,IAAI,CAACkI,aAAa,GAAG;QAAEL,KAAK;QAAEM,OAAO,EAAEN,KAAK;QAAEvF,KAAK;QAAE+F,KAAK;QAAEC,QAAQ;QAAEG,QAAQ;QAAEX,GAAG;QAAEe,UAAU;QAAEC,SAAS;QAAE7I;MAAW,CAAC;IAC5H,CAAC;IACDgI,kBAAkB,CAACJ,KAAK,EAAEC,GAAG,CAAC;EAClC;EACA8B,YAAY,QAAc;IAAA,IAAb;MAAEzB;IAAQ,CAAC;IACpB,MAAM;MAAE7F,KAAK;MAAEuF,KAAK;MAAEQ,KAAK;MAAEP,GAAG;MAAEQ,QAAQ;MAAEG,QAAQ;MAAEI,UAAU;MAAEC;IAAU,CAAC,GAAG,IAAI,CAACZ,aAAa;IAClG,IAAI,CAACA,aAAa,CAACC,OAAO,GAAGA,OAAO;IACpC,MAAM0B,KAAK,GAAG1B,OAAO,GAAGN,KAAK;IAC7B,MAAMiC,QAAQ,GAAG,IAAI,CAACxC,MAAM,CAAChF,KAAK,EAAEuH,KAAK,EAAExB,KAAK,EAAElI,SAAS,EAAEA,SAAS,EAAEmI,QAAQ,EAAEG,QAAQ,EAAEI,UAAU,EAAEC,SAAS,CAAC;IAClH,IAAIhB,GAAG,EAAE;MACL,MAAMa,UAAU,GAAGrG,KAAK,KAAK,IAAI,CAACU,SAAS,CAAC6D,MAAM,GAAG,CAAC;MACtD,MAAMkD,QAAQ,GAAG,IAAI,CAAChH,SAAS,CAAC4E,GAAG,CAAC/B,CAAC,IAAIA,CAAC,CAAC5F,IAAI,CAAC;MAChD,MAAMgK,aAAa,GAAGrB,UAAU,GAAGrG,KAAK,GAAGA,KAAK,GAAG,CAAC;MACpD,MAAMsG,QAAQ,GAAG,IAAI,CAAC7F,SAAS,CAACiH,aAAa,CAAC;MAC9C,MAAMC,WAAW,GAAGrB,QAAQ,CAAC5I,IAAI,GAAG4I,QAAQ,CAAC3H,WAAW;MACxD,MAAMiJ,WAAW,GAAGtB,QAAQ,CAAC5I,IAAI,GAAG4I,QAAQ,CAAC5H,WAAW;MACxD,MAAMmJ,WAAW,GAAGxB,UAAU,GAAGrG,KAAK,GAAG,CAAC,GAAGA,KAAK,GAAG,CAAC;MACtD,IAAI,CAACgF,MAAM,CAAC6C,WAAW,EAAE,CAACL,QAAQ,EAAEC,QAAQ,EAAE5J,SAAS,EAAEA,SAAS,EAAE8J,WAAW,EAAEC,WAAW,CAAC;IACjG;IACA,IAAI,CAACzC,oBAAoB,EAAE;IAC3B,IAAI,CAACC,WAAW,EAAE;EACtB;EACA0C,SAAS,CAAC9H,KAAK,EAAE;IACb,IAAI,CAACa,gBAAgB,CAACkH,IAAI,CAAC/H,KAAK,CAAC;IACjC,IAAI,CAAC4F,aAAa,CAACjI,UAAU,CAACb,OAAO,EAAE;IACvC,IAAI,CAACyG,eAAe,EAAE;IACtB,KAAK,MAAM0B,IAAI,IAAI,IAAI,CAACxE,SAAS,EAAE;MAC/BwE,IAAI,CAACnG,OAAO,GAAG,IAAI;IACvB;EACJ;EACAkJ,YAAY,CAAC/C,IAAI,EAAEvH,IAAI,EAAE;IACrB,MAAMsC,KAAK,GAAG,IAAI,CAACS,SAAS,CAACwH,OAAO,CAAChD,IAAI,CAAC;IAC1C,IAAIjF,KAAK,GAAG,CAAC,IAAIA,KAAK,IAAI,IAAI,CAACS,SAAS,CAAC8D,MAAM,EAAE;MAC7C;IACJ;IACA7G,IAAI,GAAG,OAAOA,IAAI,KAAK,QAAQ,GAAGA,IAAI,GAAGuH,IAAI,CAACvH,IAAI;IAClDA,IAAI,GAAGV,KAAK,CAACU,IAAI,EAAEuH,IAAI,CAACvG,WAAW,EAAEuG,IAAI,CAACtG,WAAW,CAAC;IACtD,IAAI,IAAI,CAAC2C,kBAAkB,IAAItB,KAAK,GAAG,CAAC,EAAE;MACtC;MACA;MACA,IAAI,CAACgF,MAAM,CAAChF,KAAK,GAAG,CAAC,EAAE0E,IAAI,CAAC0C,KAAK,CAAC,CAACnC,IAAI,CAACvH,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC,CAAC;MAC1D,IAAI,CAACyH,oBAAoB,EAAE;MAC3B,IAAI,CAACC,WAAW,EAAE;IACtB,CAAC,MACI;MACDH,IAAI,CAACvH,IAAI,GAAGA,IAAI;MAChB,IAAI,CAACwK,QAAQ,CAAC,CAAClI,KAAK,CAAC,EAAEnC,SAAS,CAAC;IACrC;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;EACIsK,UAAU,CAACnI,KAAK,EAAEtC,IAAI,EAAE;IACpB,IAAI,IAAI,CAACiD,KAAK,KAAKhB,KAAK,CAACiB,IAAI,EAAE;MAC3B,MAAM,IAAIwH,KAAK,CAAC,uBAAuB,CAAC;IAC5C;IACA,IAAI,CAACzH,KAAK,GAAGhB,KAAK,CAAC0I,IAAI;IACvB,IAAIrI,KAAK,GAAG,CAAC,IAAIA,KAAK,IAAI,IAAI,CAACS,SAAS,CAAC8D,MAAM,EAAE;MAC7C;IACJ;IACA,MAAMK,OAAO,GAAGpI,KAAK,CAAC,IAAI,CAACiE,SAAS,CAAC8D,MAAM,CAAC,CAACO,MAAM,CAACxB,CAAC,IAAIA,CAAC,KAAKtD,KAAK,CAAC;IACrE,MAAM6E,kBAAkB,GAAG,CAAC,GAAGD,OAAO,CAACE,MAAM,CAACxB,CAAC,IAAI,IAAI,CAAC7C,SAAS,CAAC6C,CAAC,CAAC,CAAC1E,QAAQ,KAAK,CAAC,CAAC,yBAAyB,EAAEoB,KAAK,CAAC;IACrH,MAAM+E,mBAAmB,GAAGH,OAAO,CAACE,MAAM,CAACxB,CAAC,IAAI,IAAI,CAAC7C,SAAS,CAAC6C,CAAC,CAAC,CAAC1E,QAAQ,KAAK,CAAC,CAAC,0BAA0B;IAC3G,MAAMqG,IAAI,GAAG,IAAI,CAACxE,SAAS,CAACT,KAAK,CAAC;IAClCtC,IAAI,GAAGgH,IAAI,CAACQ,KAAK,CAACxH,IAAI,CAAC;IACvBA,IAAI,GAAGV,KAAK,CAACU,IAAI,EAAEuH,IAAI,CAACvG,WAAW,EAAEgG,IAAI,CAACqC,GAAG,CAAC9B,IAAI,CAACtG,WAAW,EAAE,IAAI,CAACjB,IAAI,CAAC,CAAC;IAC3EuH,IAAI,CAACvH,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACwK,QAAQ,CAACrD,kBAAkB,EAAEE,mBAAmB,CAAC;IACtD,IAAI,CAACpE,KAAK,GAAGhB,KAAK,CAACiB,IAAI;EAC3B;EACA;AACJ;AACA;EACI0H,mBAAmB,GAAG;IAClB,MAAMC,iBAAiB,GAAG,EAAE;IAC5B,IAAIC,YAAY,GAAG,CAAC;IACpB,KAAK,MAAMvD,IAAI,IAAI,IAAI,CAACxE,SAAS,EAAE;MAC/B,IAAIwE,IAAI,CAACtG,WAAW,GAAGsG,IAAI,CAACvG,WAAW,GAAG,CAAC,EAAE;QACzC6J,iBAAiB,CAACE,IAAI,CAACxD,IAAI,CAAC;QAC5BuD,YAAY,IAAIvD,IAAI,CAACvH,IAAI;MAC7B;IACJ;IACA,MAAMA,IAAI,GAAGgH,IAAI,CAAC0C,KAAK,CAACoB,YAAY,GAAGD,iBAAiB,CAAChE,MAAM,CAAC;IAChE,KAAK,MAAMU,IAAI,IAAIsD,iBAAiB,EAAE;MAClCtD,IAAI,CAACvH,IAAI,GAAGV,KAAK,CAACU,IAAI,EAAEuH,IAAI,CAACvG,WAAW,EAAEuG,IAAI,CAACtG,WAAW,CAAC;IAC/D;IACA,MAAMiG,OAAO,GAAGpI,KAAK,CAAC,IAAI,CAACiE,SAAS,CAAC8D,MAAM,CAAC;IAC5C,MAAMM,kBAAkB,GAAGD,OAAO,CAACE,MAAM,CAACxB,CAAC,IAAI,IAAI,CAAC7C,SAAS,CAAC6C,CAAC,CAAC,CAAC1E,QAAQ,KAAK,CAAC,CAAC,yBAAyB;IACzG,MAAMmG,mBAAmB,GAAGH,OAAO,CAACE,MAAM,CAACxB,CAAC,IAAI,IAAI,CAAC7C,SAAS,CAAC6C,CAAC,CAAC,CAAC1E,QAAQ,KAAK,CAAC,CAAC,0BAA0B;IAC3G,IAAI,CAACsJ,QAAQ,CAACrD,kBAAkB,EAAEE,mBAAmB,CAAC;EAC1D;EACA;AACJ;AACA;EACI2D,WAAW,CAAC1I,KAAK,EAAE;IACf,IAAIA,KAAK,GAAG,CAAC,IAAIA,KAAK,IAAI,IAAI,CAACS,SAAS,CAAC8D,MAAM,EAAE;MAC7C,OAAO,CAAC,CAAC;IACb;IACA,OAAO,IAAI,CAAC9D,SAAS,CAACT,KAAK,CAAC,CAACtC,IAAI;EACrC;EACAyF,SAAS,CAAC1F,IAAI,EAAEC,IAAI,EAA6C;IAAA,IAA3CsC,KAAK,uEAAG,IAAI,CAACS,SAAS,CAAC8D,MAAM;IAAA,IAAEC,UAAU;IAC3D,IAAI,IAAI,CAAC7D,KAAK,KAAKhB,KAAK,CAACiB,IAAI,EAAE;MAC3B,MAAM,IAAIwH,KAAK,CAAC,uBAAuB,CAAC;IAC5C;IACA,IAAI,CAACzH,KAAK,GAAGhB,KAAK,CAAC0I,IAAI;IACvB;IACA,MAAM7K,SAAS,GAAGxB,CAAC,CAAC,kBAAkB,CAAC;IACvC,IAAIgE,KAAK,KAAK,IAAI,CAACS,SAAS,CAAC8D,MAAM,EAAE;MACjC,IAAI,CAACzC,aAAa,CAACF,WAAW,CAACpE,SAAS,CAAC;IAC7C,CAAC,MACI;MACD,IAAI,CAACsE,aAAa,CAAC6G,YAAY,CAACnL,SAAS,EAAE,IAAI,CAACsE,aAAa,CAAC8G,QAAQ,CAAC3D,IAAI,CAACjF,KAAK,CAAC,CAAC;IACvF;IACA,MAAM6I,kBAAkB,GAAGpL,IAAI,CAACqL,WAAW,CAACpL,IAAI,IAAI,IAAI,CAACsK,YAAY,CAAC/C,IAAI,EAAEvH,IAAI,CAAC,CAAC;IAClF,MAAMqL,mBAAmB,GAAGhM,YAAY,CAAC,MAAM,IAAI,CAAC+E,aAAa,CAACkH,WAAW,CAACxL,SAAS,CAAC,CAAC;IACzF,MAAMG,UAAU,GAAGf,kBAAkB,CAACiM,kBAAkB,EAAEE,mBAAmB,CAAC;IAC9E,IAAIE,QAAQ;IACZ,IAAI,OAAOvL,IAAI,KAAK,QAAQ,EAAE;MAC1BuL,QAAQ,GAAGvL,IAAI;IACnB,CAAC,MACI,IAAIA,IAAI,CAACoC,IAAI,KAAK,OAAO,EAAE;MAC5BmJ,QAAQ,GAAG,IAAI,CAACP,WAAW,CAAChL,IAAI,CAACsC,KAAK,CAAC,GAAG,CAAC;IAC/C,CAAC,MACI,IAAItC,IAAI,CAACoC,IAAI,KAAK,WAAW,EAAE;MAChCmJ,QAAQ,GAAG;QAAEhL,iBAAiB,EAAEP,IAAI,CAACO;MAAkB,CAAC;IAC5D,CAAC,MACI;MACDgL,QAAQ,GAAGxL,IAAI,CAACiB,WAAW;IAC/B;IACA,MAAMuG,IAAI,GAAG,IAAI,CAAC5D,WAAW,KAAK,CAAC,CAAC,6BAC9B,IAAIhC,gBAAgB,CAAC7B,SAAS,EAAEC,IAAI,EAAEwL,QAAQ,EAAEtL,UAAU,CAAC,GAC3D,IAAI6B,kBAAkB,CAAChC,SAAS,EAAEC,IAAI,EAAEwL,QAAQ,EAAEtL,UAAU,CAAC;IACnE,IAAI,CAAC8C,SAAS,CAACyI,MAAM,CAAClJ,KAAK,EAAE,CAAC,EAAEiF,IAAI,CAAC;IACrC;IACA,IAAI,IAAI,CAACxE,SAAS,CAAC8D,MAAM,GAAG,CAAC,EAAE;MAC3B,MAAM4E,IAAI,GAAG;QAAE3F,mBAAmB,EAAE,IAAI,CAACA,mBAAmB;QAAEE,iBAAiB,EAAE,IAAI,CAACA;MAAkB,CAAC;MACzG,MAAMI,IAAI,GAAG,IAAI,CAACzC,WAAW,KAAK,CAAC,CAAC,6BAC9B,IAAIjF,IAAI,CAAC,IAAI,CAACyF,aAAa,EAAE;QAAEuH,oBAAoB,EAAEC,CAAC,IAAI,IAAI,CAACC,eAAe,CAACD,CAAC,CAAC;QAAEE,sBAAsB,EAAE,IAAI,CAAC/H;MAAsB,CAAC,EAAEgI,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEN,IAAI,CAAC,EAAE;QAAE9H,WAAW,EAAE,CAAC,CAAC;MAA6B,CAAC,CAAC,CAAC,GACjO,IAAIjF,IAAI,CAAC,IAAI,CAACyF,aAAa,EAAE;QAAE6H,mBAAmB,EAAEL,CAAC,IAAI,IAAI,CAACC,eAAe,CAACD,CAAC,CAAC;QAAEM,qBAAqB,EAAE,IAAI,CAACnI;MAAsB,CAAC,EAAEgI,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEN,IAAI,CAAC,EAAE;QAAE9H,WAAW,EAAE,CAAC,CAAC;MAA2B,CAAC,CAAC,CAAC;MACnO,MAAMuI,eAAe,GAAG,IAAI,CAACvI,WAAW,KAAK,CAAC,CAAC,6BACxCmB,CAAC,KAAM;QAAEsB,IAAI;QAAEyB,KAAK,EAAE/C,CAAC,CAACqH,MAAM;QAAEhE,OAAO,EAAErD,CAAC,CAACsH,QAAQ;QAAEtE,GAAG,EAAEhD,CAAC,CAACsD;MAAO,CAAC,CAAC,GACrEtD,CAAC,KAAM;QAAEsB,IAAI;QAAEyB,KAAK,EAAE/C,CAAC,CAACuH,MAAM;QAAElE,OAAO,EAAErD,CAAC,CAACwH,QAAQ;QAAExE,GAAG,EAAEhD,CAAC,CAACsD;MAAO,CAAC,CAAC;MAC5E,MAAMmE,OAAO,GAAGtN,KAAK,CAAC0I,GAAG,CAACvB,IAAI,CAACoG,UAAU,EAAEN,eAAe,CAAC;MAC3D,MAAMO,iBAAiB,GAAGF,OAAO,CAAC,IAAI,CAAC3E,WAAW,EAAE,IAAI,CAAC;MACzD,MAAM8E,QAAQ,GAAGzN,KAAK,CAAC0I,GAAG,CAACvB,IAAI,CAACgF,WAAW,EAAEc,eAAe,CAAC;MAC7D,MAAMf,kBAAkB,GAAGuB,QAAQ,CAAC,IAAI,CAAC9C,YAAY,EAAE,IAAI,CAAC;MAC5D,MAAM+C,KAAK,GAAG1N,KAAK,CAAC0I,GAAG,CAACvB,IAAI,CAACwG,QAAQ,EAAE,MAAM,IAAI,CAAC5J,SAAS,CAAC+E,SAAS,CAACR,IAAI,IAAIA,IAAI,CAACnB,IAAI,KAAKA,IAAI,CAAC,CAAC;MAClG,MAAMyG,eAAe,GAAGF,KAAK,CAAC,IAAI,CAACvC,SAAS,EAAE,IAAI,CAAC;MACnD,MAAM0C,oBAAoB,GAAG1G,IAAI,CAAC2G,UAAU,CAAC,MAAM;QAC/C,MAAMzK,KAAK,GAAG,IAAI,CAACU,SAAS,CAAC+E,SAAS,CAACR,IAAI,IAAIA,IAAI,CAACnB,IAAI,KAAKA,IAAI,CAAC;QAClE,MAAM2C,SAAS,GAAGjK,KAAK,CAACwD,KAAK,EAAE,CAAC,CAAC,CAAC;QAClC,MAAM0G,WAAW,GAAGlK,KAAK,CAACwD,KAAK,GAAG,CAAC,EAAE,IAAI,CAACS,SAAS,CAAC8D,MAAM,CAAC;QAC3D,MAAMyC,eAAe,GAAG,IAAI,CAACC,kBAAkB,CAACR,SAAS,CAAC;QAC1D,MAAMS,cAAc,GAAG,IAAI,CAACD,kBAAkB,CAACP,WAAW,CAAC;QAC3D,IAAI,OAAOM,eAAe,KAAK,QAAQ,IAAI,CAAC,IAAI,CAACvG,SAAS,CAACuG,eAAe,CAAC,CAAC9I,OAAO,EAAE;UACjF;QACJ;QACA,IAAI,OAAOgJ,cAAc,KAAK,QAAQ,IAAI,CAAC,IAAI,CAACzG,SAAS,CAACyG,cAAc,CAAC,CAAChJ,OAAO,EAAE;UAC/E;QACJ;QACA,IAAI,CAAC6C,eAAe,CAACgH,IAAI,CAAC/H,KAAK,CAAC;MACpC,CAAC,CAAC;MACF,MAAMrC,UAAU,GAAGf,kBAAkB,CAACuN,iBAAiB,EAAEtB,kBAAkB,EAAE0B,eAAe,EAAEC,oBAAoB,EAAE1G,IAAI,CAAC;MACzH,MAAMC,QAAQ,GAAG;QAAED,IAAI;QAAEnG;MAAW,CAAC;MACrC,IAAI,CAAC+C,SAAS,CAACwI,MAAM,CAAClJ,KAAK,GAAG,CAAC,EAAE,CAAC,EAAE+D,QAAQ,CAAC;IACjD;IACAvG,SAAS,CAACoE,WAAW,CAACnE,IAAI,CAACiN,OAAO,CAAC;IACnC,IAAI3F,mBAAmB;IACvB,IAAI,OAAOrH,IAAI,KAAK,QAAQ,IAAIA,IAAI,CAACoC,IAAI,KAAK,OAAO,EAAE;MACnDiF,mBAAmB,GAAG,CAACrH,IAAI,CAACsC,KAAK,CAAC;IACtC;IACA,IAAI,CAACwE,UAAU,EAAE;MACb,IAAI,CAAC0D,QAAQ,CAAC,CAAClI,KAAK,CAAC,EAAE+E,mBAAmB,CAAC;IAC/C;IACA,IAAI,CAACpE,KAAK,GAAGhB,KAAK,CAACiB,IAAI;IACvB,IAAI,CAAC4D,UAAU,IAAI,OAAO9G,IAAI,KAAK,QAAQ,IAAIA,IAAI,CAACoC,IAAI,KAAK,YAAY,EAAE;MACvE,IAAI,CAACwI,mBAAmB,EAAE;IAC9B;EACJ;EACAJ,QAAQ,CAACrD,kBAAkB,EAAEE,mBAAmB,EAAE;IAC9C,MAAMxE,WAAW,GAAG,IAAI,CAACE,SAAS,CAAC2C,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC5F,IAAI,EAAE,CAAC,CAAC;IAClE,IAAI,CAACsH,MAAM,CAAC,IAAI,CAACvE,SAAS,CAAC8D,MAAM,GAAG,CAAC,EAAE,IAAI,CAAC7G,IAAI,GAAG6C,WAAW,EAAE1C,SAAS,EAAEgH,kBAAkB,EAAEE,mBAAmB,CAAC;IACnH,IAAI,CAACI,oBAAoB,EAAE;IAC3B,IAAI,CAACC,WAAW,EAAE;IAClB,IAAI,CAAC7B,eAAe,EAAE;EAC1B;EACAyB,MAAM,CAAChF,KAAK,EAAEuH,KAAK,EAAqM;IAAA,IAAnMxB,KAAK,uEAAG,IAAI,CAACtF,SAAS,CAAC4E,GAAG,CAAC/B,CAAC,IAAIA,CAAC,CAAC5F,IAAI,CAAC;IAAA,IAAEmH,kBAAkB;IAAA,IAAEE,mBAAmB;IAAA,IAAE4F,gBAAgB,uEAAG1E,MAAM,CAACC,iBAAiB;IAAA,IAAE0E,gBAAgB,uEAAG3E,MAAM,CAACG,iBAAiB;IAAA,IAAEG,UAAU;IAAA,IAAEC,SAAS;IAClN,IAAIxG,KAAK,GAAG,CAAC,IAAIA,KAAK,IAAI,IAAI,CAACS,SAAS,CAAC8D,MAAM,EAAE;MAC7C,OAAO,CAAC;IACZ;IACA,MAAMkC,SAAS,GAAGjK,KAAK,CAACwD,KAAK,EAAE,CAAC,CAAC,CAAC;IAClC,MAAM0G,WAAW,GAAGlK,KAAK,CAACwD,KAAK,GAAG,CAAC,EAAE,IAAI,CAACS,SAAS,CAAC8D,MAAM,CAAC;IAC3D,IAAIQ,mBAAmB,EAAE;MACrB,KAAK,MAAM/E,KAAK,IAAI+E,mBAAmB,EAAE;QACrCxI,WAAW,CAACkK,SAAS,EAAEzG,KAAK,CAAC;QAC7BzD,WAAW,CAACmK,WAAW,EAAE1G,KAAK,CAAC;MACnC;IACJ;IACA,IAAI6E,kBAAkB,EAAE;MACpB,KAAK,MAAM7E,KAAK,IAAI6E,kBAAkB,EAAE;QACpCvI,SAAS,CAACmK,SAAS,EAAEzG,KAAK,CAAC;QAC3B1D,SAAS,CAACoK,WAAW,EAAE1G,KAAK,CAAC;MACjC;IACJ;IACA,MAAM6K,OAAO,GAAGpE,SAAS,CAACpB,GAAG,CAAC/B,CAAC,IAAI,IAAI,CAAC7C,SAAS,CAAC6C,CAAC,CAAC,CAAC;IACrD,MAAMwH,OAAO,GAAGrE,SAAS,CAACpB,GAAG,CAAC/B,CAAC,IAAIyC,KAAK,CAACzC,CAAC,CAAC,CAAC;IAC5C,MAAMyH,SAAS,GAAGrE,WAAW,CAACrB,GAAG,CAAC/B,CAAC,IAAI,IAAI,CAAC7C,SAAS,CAAC6C,CAAC,CAAC,CAAC;IACzD,MAAM0H,SAAS,GAAGtE,WAAW,CAACrB,GAAG,CAAC/B,CAAC,IAAIyC,KAAK,CAACzC,CAAC,CAAC,CAAC;IAChD,MAAMqD,UAAU,GAAGF,SAAS,CAACrD,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,IAAI,IAAI,CAAC5C,SAAS,CAAC6C,CAAC,CAAC,CAAC5E,WAAW,GAAGqH,KAAK,CAACzC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IAChG,MAAMsD,UAAU,GAAGH,SAAS,CAACrD,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,IAAI,IAAI,CAAC5C,SAAS,CAAC6C,CAAC,CAAC,CAAC3E,WAAW,GAAGoH,KAAK,CAACzC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IAChG,MAAMuD,YAAY,GAAGH,WAAW,CAACnC,MAAM,KAAK,CAAC,GAAG0B,MAAM,CAACG,iBAAiB,GAAGM,WAAW,CAACtD,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,IAAI0C,KAAK,CAACzC,CAAC,CAAC,GAAG,IAAI,CAAC7C,SAAS,CAAC6C,CAAC,CAAC,CAAC5E,WAAW,CAAC,EAAE,CAAC,CAAC;IAC1J,MAAMoI,YAAY,GAAGJ,WAAW,CAACnC,MAAM,KAAK,CAAC,GAAG0B,MAAM,CAACC,iBAAiB,GAAGQ,WAAW,CAACtD,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,IAAI0C,KAAK,CAACzC,CAAC,CAAC,GAAG,IAAI,CAAC7C,SAAS,CAAC6C,CAAC,CAAC,CAAC3E,WAAW,CAAC,EAAE,CAAC,CAAC;IAC1J,MAAMqH,QAAQ,GAAGtB,IAAI,CAACC,GAAG,CAACgC,UAAU,EAAEG,YAAY,EAAE6D,gBAAgB,CAAC;IACrE,MAAMxE,QAAQ,GAAGzB,IAAI,CAACqC,GAAG,CAACF,YAAY,EAAED,UAAU,EAAEgE,gBAAgB,CAAC;IACrE,IAAIK,OAAO,GAAG,KAAK;IACnB,IAAI1E,UAAU,EAAE;MACZ,MAAM2E,QAAQ,GAAG,IAAI,CAACzK,SAAS,CAAC8F,UAAU,CAACvG,KAAK,CAAC;MACjD,MAAM9B,OAAO,GAAGqJ,KAAK,IAAIhB,UAAU,CAACc,UAAU;MAC9C4D,OAAO,GAAG/M,OAAO,KAAKgN,QAAQ,CAAChN,OAAO;MACtCgN,QAAQ,CAAC/M,UAAU,CAACD,OAAO,EAAEqI,UAAU,CAAC7I,IAAI,CAAC;IACjD;IACA,IAAI,CAACuN,OAAO,IAAIzE,SAAS,EAAE;MACvB,MAAM0E,QAAQ,GAAG,IAAI,CAACzK,SAAS,CAAC+F,SAAS,CAACxG,KAAK,CAAC;MAChD,MAAM9B,OAAO,GAAGqJ,KAAK,GAAGf,SAAS,CAACa,UAAU;MAC5C4D,OAAO,GAAG/M,OAAO,KAAKgN,QAAQ,CAAChN,OAAO;MACtCgN,QAAQ,CAAC/M,UAAU,CAACD,OAAO,EAAEsI,SAAS,CAAC9I,IAAI,CAAC;IAChD;IACA,IAAIuN,OAAO,EAAE;MACT,OAAO,IAAI,CAACjG,MAAM,CAAChF,KAAK,EAAEuH,KAAK,EAAExB,KAAK,EAAElB,kBAAkB,EAAEE,mBAAmB,EAAE4F,gBAAgB,EAAEC,gBAAgB,CAAC;IACxH;IACArD,KAAK,GAAGvK,KAAK,CAACuK,KAAK,EAAEvB,QAAQ,EAAEG,QAAQ,CAAC;IACxC,KAAK,IAAI7C,CAAC,GAAG,CAAC,EAAE6H,OAAO,GAAG5D,KAAK,EAAEjE,CAAC,GAAGuH,OAAO,CAACtG,MAAM,EAAEjB,CAAC,EAAE,EAAE;MACtD,MAAM2B,IAAI,GAAG4F,OAAO,CAACvH,CAAC,CAAC;MACvB,MAAM5F,IAAI,GAAGV,KAAK,CAAC8N,OAAO,CAACxH,CAAC,CAAC,GAAG6H,OAAO,EAAElG,IAAI,CAACvG,WAAW,EAAEuG,IAAI,CAACtG,WAAW,CAAC;MAC5E,MAAMyM,SAAS,GAAG1N,IAAI,GAAGoN,OAAO,CAACxH,CAAC,CAAC;MACnC6H,OAAO,IAAIC,SAAS;MACpBnG,IAAI,CAACvH,IAAI,GAAGA,IAAI;IACpB;IACA,KAAK,IAAI4F,CAAC,GAAG,CAAC,EAAE+H,SAAS,GAAG9D,KAAK,EAAEjE,CAAC,GAAGyH,SAAS,CAACxG,MAAM,EAAEjB,CAAC,EAAE,EAAE;MAC1D,MAAM2B,IAAI,GAAG8F,SAAS,CAACzH,CAAC,CAAC;MACzB,MAAM5F,IAAI,GAAGV,KAAK,CAACgO,SAAS,CAAC1H,CAAC,CAAC,GAAG+H,SAAS,EAAEpG,IAAI,CAACvG,WAAW,EAAEuG,IAAI,CAACtG,WAAW,CAAC;MAChF,MAAMyM,SAAS,GAAG1N,IAAI,GAAGsN,SAAS,CAAC1H,CAAC,CAAC;MACrC+H,SAAS,IAAID,SAAS;MACtBnG,IAAI,CAACvH,IAAI,GAAGA,IAAI;IACpB;IACA,OAAO6J,KAAK;EAChB;EACApC,oBAAoB,CAACmG,gBAAgB,EAAE;IACnC,MAAM/K,WAAW,GAAG,IAAI,CAACE,SAAS,CAAC2C,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC5F,IAAI,EAAE,CAAC,CAAC;IAClE,IAAI6N,UAAU,GAAG,IAAI,CAAC7N,IAAI,GAAG6C,WAAW;IACxC,MAAMqE,OAAO,GAAGpI,KAAK,CAAC,IAAI,CAACiE,SAAS,CAAC8D,MAAM,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;IACpD,MAAMM,kBAAkB,GAAGD,OAAO,CAACE,MAAM,CAACxB,CAAC,IAAI,IAAI,CAAC7C,SAAS,CAAC6C,CAAC,CAAC,CAAC1E,QAAQ,KAAK,CAAC,CAAC,yBAAyB;IACzG,MAAMmG,mBAAmB,GAAGH,OAAO,CAACE,MAAM,CAACxB,CAAC,IAAI,IAAI,CAAC7C,SAAS,CAAC6C,CAAC,CAAC,CAAC1E,QAAQ,KAAK,CAAC,CAAC,0BAA0B;IAC3G,KAAK,MAAMoB,KAAK,IAAI+E,mBAAmB,EAAE;MACrCxI,WAAW,CAACqI,OAAO,EAAE5E,KAAK,CAAC;IAC/B;IACA,KAAK,MAAMA,KAAK,IAAI6E,kBAAkB,EAAE;MACpCvI,SAAS,CAACsI,OAAO,EAAE5E,KAAK,CAAC;IAC7B;IACA,IAAI,OAAOsL,gBAAgB,KAAK,QAAQ,EAAE;MACtChP,SAAS,CAACsI,OAAO,EAAE0G,gBAAgB,CAAC;IACxC;IACA,KAAK,IAAIhI,CAAC,GAAG,CAAC,EAAEiI,UAAU,KAAK,CAAC,IAAIjI,CAAC,GAAGsB,OAAO,CAACL,MAAM,EAAEjB,CAAC,EAAE,EAAE;MACzD,MAAM2B,IAAI,GAAG,IAAI,CAACxE,SAAS,CAACmE,OAAO,CAACtB,CAAC,CAAC,CAAC;MACvC,MAAM5F,IAAI,GAAGV,KAAK,CAACiI,IAAI,CAACvH,IAAI,GAAG6N,UAAU,EAAEtG,IAAI,CAACvG,WAAW,EAAEuG,IAAI,CAACtG,WAAW,CAAC;MAC9E,MAAMyM,SAAS,GAAG1N,IAAI,GAAGuH,IAAI,CAACvH,IAAI;MAClC6N,UAAU,IAAIH,SAAS;MACvBnG,IAAI,CAACvH,IAAI,GAAGA,IAAI;IACpB;EACJ;EACA0H,WAAW,GAAG;IACV;IACA,IAAI,CAAC7E,WAAW,GAAG,IAAI,CAACE,SAAS,CAAC2C,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC5F,IAAI,EAAE,CAAC,CAAC;IACjE;IACA,IAAIwB,MAAM,GAAG,CAAC;IACd,KAAK,MAAMoH,QAAQ,IAAI,IAAI,CAAC7F,SAAS,EAAE;MACnC6F,QAAQ,CAACrH,MAAM,CAACC,MAAM,EAAE,IAAI,CAACC,aAAa,CAAC;MAC3CD,MAAM,IAAIoH,QAAQ,CAAC5I,IAAI;IAC3B;IACA;IACA,IAAI,CAACgD,SAAS,CAACqC,OAAO,CAACkC,IAAI,IAAIA,IAAI,CAACnB,IAAI,CAAC7E,MAAM,EAAE,CAAC;IAClD,IAAI,CAAC+E,oBAAoB,EAAE;IAC3B,IAAI,CAACwH,uBAAuB,EAAE;EAClC;EACAA,uBAAuB,GAAG;IACtB,IAAI,IAAI,CAACnK,WAAW,KAAK,CAAC,CAAC,4BAA4B;MACnD,IAAI,CAACa,iBAAiB,CAACuJ,mBAAmB,CAAC;QACvClM,MAAM,EAAE,IAAI,CAAC7B,IAAI;QACjBgO,YAAY,EAAE,IAAI,CAACnL;MACvB,CAAC,CAAC;IACN,CAAC,MACI;MACD,IAAI,CAAC2B,iBAAiB,CAACuJ,mBAAmB,CAAC;QACvC/L,KAAK,EAAE,IAAI,CAAChC,IAAI;QAChBiO,WAAW,EAAE,IAAI,CAACpL;MACtB,CAAC,CAAC;IACN;EACJ;EACAyD,oBAAoB,GAAG;IACnB,IAAI4H,QAAQ,GAAG,KAAK;IACpB,MAAMC,aAAa,GAAG,IAAI,CAACpL,SAAS,CAAC4E,GAAG,CAAC/B,CAAC,IAAIsI,QAAQ,GAAItI,CAAC,CAAC5F,IAAI,GAAG4F,CAAC,CAAC5E,WAAW,GAAG,CAAC,IAAKkN,QAAQ,CAAC;IAClGA,QAAQ,GAAG,KAAK;IAChB,MAAME,WAAW,GAAG,IAAI,CAACrL,SAAS,CAAC4E,GAAG,CAAC/B,CAAC,IAAIsI,QAAQ,GAAItI,CAAC,CAAC3E,WAAW,GAAG2E,CAAC,CAAC5F,IAAI,GAAG,CAAC,IAAKkO,QAAQ,CAAC;IAChG,MAAMG,YAAY,GAAG,CAAC,GAAG,IAAI,CAACtL,SAAS,CAAC,CAACuL,OAAO,EAAE;IAClDJ,QAAQ,GAAG,KAAK;IAChB,MAAMK,WAAW,GAAGF,YAAY,CAAC1G,GAAG,CAAC/B,CAAC,IAAIsI,QAAQ,GAAItI,CAAC,CAAC5F,IAAI,GAAG4F,CAAC,CAAC5E,WAAW,GAAG,CAAC,IAAKkN,QAAQ,CAAC,CAACI,OAAO,EAAE;IACxGJ,QAAQ,GAAG,KAAK;IAChB,MAAMM,SAAS,GAAGH,YAAY,CAAC1G,GAAG,CAAC/B,CAAC,IAAIsI,QAAQ,GAAItI,CAAC,CAAC3E,WAAW,GAAG2E,CAAC,CAAC5F,IAAI,GAAG,CAAC,IAAKkO,QAAQ,CAAC,CAACI,OAAO,EAAE;IACtG,IAAIG,QAAQ,GAAG,CAAC;IAChB,KAAK,IAAInM,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAG,IAAI,CAACU,SAAS,CAAC6D,MAAM,EAAEvE,KAAK,EAAE,EAAE;MACxD,MAAM;QAAE8D;MAAK,CAAC,GAAG,IAAI,CAACpD,SAAS,CAACV,KAAK,CAAC;MACtC,MAAMsG,QAAQ,GAAG,IAAI,CAAC7F,SAAS,CAACT,KAAK,CAAC;MACtCmM,QAAQ,IAAI7F,QAAQ,CAAC5I,IAAI;MACzB,MAAMqJ,GAAG,GAAG,EAAE8E,aAAa,CAAC7L,KAAK,CAAC,IAAIkM,SAAS,CAAClM,KAAK,GAAG,CAAC,CAAC,CAAC;MAC3D,MAAM2E,GAAG,GAAG,EAAEmH,WAAW,CAAC9L,KAAK,CAAC,IAAIiM,WAAW,CAACjM,KAAK,GAAG,CAAC,CAAC,CAAC;MAC3D,IAAI+G,GAAG,IAAIpC,GAAG,EAAE;QACZ,MAAM8B,SAAS,GAAGjK,KAAK,CAACwD,KAAK,EAAE,CAAC,CAAC,CAAC;QAClC,MAAM0G,WAAW,GAAGlK,KAAK,CAACwD,KAAK,GAAG,CAAC,EAAE,IAAI,CAACS,SAAS,CAAC8D,MAAM,CAAC;QAC3D,MAAMyC,eAAe,GAAG,IAAI,CAACC,kBAAkB,CAACR,SAAS,CAAC;QAC1D,MAAMS,cAAc,GAAG,IAAI,CAACD,kBAAkB,CAACP,WAAW,CAAC;QAC3D,MAAM0F,aAAa,GAAG,OAAOpF,eAAe,KAAK,QAAQ,IAAI,CAAC,IAAI,CAACvG,SAAS,CAACuG,eAAe,CAAC,CAAC9I,OAAO;QACrG,MAAMmO,YAAY,GAAG,OAAOnF,cAAc,KAAK,QAAQ,IAAI,CAAC,IAAI,CAACzG,SAAS,CAACyG,cAAc,CAAC,CAAChJ,OAAO;QAClG,IAAIkO,aAAa,IAAIH,WAAW,CAACjM,KAAK,CAAC,KAAKmM,QAAQ,GAAG,CAAC,IAAI,IAAI,CAACvI,oBAAoB,CAAC,EAAE;UACpFE,IAAI,CAACnD,KAAK,GAAG,CAAC,CAAC;QACnB,CAAC,MACI,IAAI0L,YAAY,IAAIR,aAAa,CAAC7L,KAAK,CAAC,KAAKmM,QAAQ,GAAG,IAAI,CAAC5L,WAAW,IAAI,IAAI,CAACsD,kBAAkB,CAAC,EAAE;UACvGC,IAAI,CAACnD,KAAK,GAAG,CAAC,CAAC;QACnB,CAAC,MACI;UACDmD,IAAI,CAACnD,KAAK,GAAG,CAAC,CAAC;QACnB;MACJ,CAAC,MACI,IAAIoG,GAAG,IAAI,CAACpC,GAAG,EAAE;QAClBb,IAAI,CAACnD,KAAK,GAAG,CAAC,CAAC;MACnB,CAAC,MACI,IAAI,CAACoG,GAAG,IAAIpC,GAAG,EAAE;QAClBb,IAAI,CAACnD,KAAK,GAAG,CAAC,CAAC;MACnB,CAAC,MACI;QACDmD,IAAI,CAACnD,KAAK,GAAG,CAAC,CAAC;MACnB;IACJ;EACJ;;EACA2I,eAAe,CAACxF,IAAI,EAAE;IAClB,IAAIqI,QAAQ,GAAG,CAAC;IAChB,KAAK,IAAI7I,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC5C,SAAS,CAAC6D,MAAM,EAAEjB,CAAC,EAAE,EAAE;MAC5C6I,QAAQ,IAAI,IAAI,CAAC1L,SAAS,CAAC6C,CAAC,CAAC,CAAC5F,IAAI;MAClC,IAAI,IAAI,CAACgD,SAAS,CAAC4C,CAAC,CAAC,CAACQ,IAAI,KAAKA,IAAI,EAAE;QACjC,OAAOqI,QAAQ;MACnB;IACJ;IACA,OAAO,CAAC;EACZ;EACAlF,kBAAkB,CAACrC,OAAO,EAAE;IACxB;IACA,KAAK,MAAM5E,KAAK,IAAI4E,OAAO,EAAE;MACzB,MAAM0B,QAAQ,GAAG,IAAI,CAAC7F,SAAS,CAACT,KAAK,CAAC;MACtC,IAAI,CAACsG,QAAQ,CAACpI,OAAO,EAAE;QACnB;MACJ;MACA,IAAIoI,QAAQ,CAACzH,IAAI,EAAE;QACf,OAAOmB,KAAK;MAChB;IACJ;IACA;IACA,KAAK,MAAMA,KAAK,IAAI4E,OAAO,EAAE;MACzB,MAAM0B,QAAQ,GAAG,IAAI,CAAC7F,SAAS,CAACT,KAAK,CAAC;MACtC,IAAIsG,QAAQ,CAACpI,OAAO,IAAIoI,QAAQ,CAAC3H,WAAW,GAAG2H,QAAQ,CAAC5H,WAAW,GAAG,CAAC,EAAE;QACrE,OAAOb,SAAS;MACpB;MACA,IAAI,CAACyI,QAAQ,CAACpI,OAAO,IAAIoI,QAAQ,CAACzH,IAAI,EAAE;QACpC,OAAOmB,KAAK;MAChB;IACJ;IACA,OAAOnC,SAAS;EACpB;EACAf,OAAO,GAAG;IACN,KAAK,CAACA,OAAO,EAAE;IACfA,OAAO,CAAC,IAAI,CAAC2D,SAAS,CAAC;IACvB,IAAI,CAACA,SAAS,GAAG,EAAE;IACnB,IAAI,CAACC,SAAS,CAACqC,OAAO,CAACO,CAAC,IAAIA,CAAC,CAAC3F,UAAU,CAACb,OAAO,EAAE,CAAC;IACnD,IAAI,CAAC4D,SAAS,GAAG,EAAE;EACvB;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}