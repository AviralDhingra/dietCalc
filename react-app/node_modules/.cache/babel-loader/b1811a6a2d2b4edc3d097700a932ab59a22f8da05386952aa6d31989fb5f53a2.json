{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { illegalArgument } from './errors.js';\nexport function createKeybinding(keybinding, OS) {\n  if (keybinding === 0) {\n    return null;\n  }\n  const firstPart = (keybinding & 0x0000FFFF) >>> 0;\n  const chordPart = (keybinding & 0xFFFF0000) >>> 16;\n  if (chordPart !== 0) {\n    return new ChordKeybinding([createSimpleKeybinding(firstPart, OS), createSimpleKeybinding(chordPart, OS)]);\n  }\n  return new ChordKeybinding([createSimpleKeybinding(firstPart, OS)]);\n}\nexport function createSimpleKeybinding(keybinding, OS) {\n  const ctrlCmd = keybinding & 2048 /* BinaryKeybindingsMask.CtrlCmd */ ? true : false;\n  const winCtrl = keybinding & 256 /* BinaryKeybindingsMask.WinCtrl */ ? true : false;\n  const ctrlKey = OS === 2 /* OperatingSystem.Macintosh */ ? winCtrl : ctrlCmd;\n  const shiftKey = keybinding & 1024 /* BinaryKeybindingsMask.Shift */ ? true : false;\n  const altKey = keybinding & 512 /* BinaryKeybindingsMask.Alt */ ? true : false;\n  const metaKey = OS === 2 /* OperatingSystem.Macintosh */ ? ctrlCmd : winCtrl;\n  const keyCode = keybinding & 255 /* BinaryKeybindingsMask.KeyCode */;\n  return new SimpleKeybinding(ctrlKey, shiftKey, altKey, metaKey, keyCode);\n}\nexport class SimpleKeybinding {\n  constructor(ctrlKey, shiftKey, altKey, metaKey, keyCode) {\n    this.ctrlKey = ctrlKey;\n    this.shiftKey = shiftKey;\n    this.altKey = altKey;\n    this.metaKey = metaKey;\n    this.keyCode = keyCode;\n  }\n  equals(other) {\n    return this.ctrlKey === other.ctrlKey && this.shiftKey === other.shiftKey && this.altKey === other.altKey && this.metaKey === other.metaKey && this.keyCode === other.keyCode;\n  }\n  isModifierKey() {\n    return this.keyCode === 0 /* KeyCode.Unknown */ || this.keyCode === 5 /* KeyCode.Ctrl */ || this.keyCode === 57 /* KeyCode.Meta */ || this.keyCode === 6 /* KeyCode.Alt */ || this.keyCode === 4 /* KeyCode.Shift */;\n  }\n\n  toChord() {\n    return new ChordKeybinding([this]);\n  }\n  /**\n   * Does this keybinding refer to the key code of a modifier and it also has the modifier flag?\n   */\n  isDuplicateModifierCase() {\n    return this.ctrlKey && this.keyCode === 5 /* KeyCode.Ctrl */ || this.shiftKey && this.keyCode === 4 /* KeyCode.Shift */ || this.altKey && this.keyCode === 6 /* KeyCode.Alt */ || this.metaKey && this.keyCode === 57 /* KeyCode.Meta */;\n  }\n}\n\nexport class ChordKeybinding {\n  constructor(parts) {\n    if (parts.length === 0) {\n      throw illegalArgument(`parts`);\n    }\n    this.parts = parts;\n  }\n}\nexport class ScanCodeBinding {\n  constructor(ctrlKey, shiftKey, altKey, metaKey, scanCode) {\n    this.ctrlKey = ctrlKey;\n    this.shiftKey = shiftKey;\n    this.altKey = altKey;\n    this.metaKey = metaKey;\n    this.scanCode = scanCode;\n  }\n  /**\n   * Does this keybinding refer to the key code of a modifier and it also has the modifier flag?\n   */\n  isDuplicateModifierCase() {\n    return this.ctrlKey && (this.scanCode === 157 /* ScanCode.ControlLeft */ || this.scanCode === 161 /* ScanCode.ControlRight */) || this.shiftKey && (this.scanCode === 158 /* ScanCode.ShiftLeft */ || this.scanCode === 162 /* ScanCode.ShiftRight */) || this.altKey && (this.scanCode === 159 /* ScanCode.AltLeft */ || this.scanCode === 163 /* ScanCode.AltRight */) || this.metaKey && (this.scanCode === 160 /* ScanCode.MetaLeft */ || this.scanCode === 164 /* ScanCode.MetaRight */);\n  }\n}\n\nexport class ResolvedKeybindingPart {\n  constructor(ctrlKey, shiftKey, altKey, metaKey, kbLabel, kbAriaLabel) {\n    this.ctrlKey = ctrlKey;\n    this.shiftKey = shiftKey;\n    this.altKey = altKey;\n    this.metaKey = metaKey;\n    this.keyLabel = kbLabel;\n    this.keyAriaLabel = kbAriaLabel;\n  }\n}\n/**\n * A resolved keybinding. Can be a simple keybinding or a chord keybinding.\n */\nexport class ResolvedKeybinding {}","map":{"version":3,"names":["illegalArgument","createKeybinding","keybinding","OS","firstPart","chordPart","ChordKeybinding","createSimpleKeybinding","ctrlCmd","winCtrl","ctrlKey","shiftKey","altKey","metaKey","keyCode","SimpleKeybinding","constructor","equals","other","isModifierKey","toChord","isDuplicateModifierCase","parts","length","ScanCodeBinding","scanCode","ResolvedKeybindingPart","kbLabel","kbAriaLabel","keyLabel","keyAriaLabel","ResolvedKeybinding"],"sources":["/home/deathblade287/Desktop/AI-MODELS-TESTING/react-app/node_modules/monaco-editor/esm/vs/base/common/keybindings.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { illegalArgument } from './errors.js';\nexport function createKeybinding(keybinding, OS) {\n    if (keybinding === 0) {\n        return null;\n    }\n    const firstPart = (keybinding & 0x0000FFFF) >>> 0;\n    const chordPart = (keybinding & 0xFFFF0000) >>> 16;\n    if (chordPart !== 0) {\n        return new ChordKeybinding([\n            createSimpleKeybinding(firstPart, OS),\n            createSimpleKeybinding(chordPart, OS)\n        ]);\n    }\n    return new ChordKeybinding([createSimpleKeybinding(firstPart, OS)]);\n}\nexport function createSimpleKeybinding(keybinding, OS) {\n    const ctrlCmd = (keybinding & 2048 /* BinaryKeybindingsMask.CtrlCmd */ ? true : false);\n    const winCtrl = (keybinding & 256 /* BinaryKeybindingsMask.WinCtrl */ ? true : false);\n    const ctrlKey = (OS === 2 /* OperatingSystem.Macintosh */ ? winCtrl : ctrlCmd);\n    const shiftKey = (keybinding & 1024 /* BinaryKeybindingsMask.Shift */ ? true : false);\n    const altKey = (keybinding & 512 /* BinaryKeybindingsMask.Alt */ ? true : false);\n    const metaKey = (OS === 2 /* OperatingSystem.Macintosh */ ? ctrlCmd : winCtrl);\n    const keyCode = (keybinding & 255 /* BinaryKeybindingsMask.KeyCode */);\n    return new SimpleKeybinding(ctrlKey, shiftKey, altKey, metaKey, keyCode);\n}\nexport class SimpleKeybinding {\n    constructor(ctrlKey, shiftKey, altKey, metaKey, keyCode) {\n        this.ctrlKey = ctrlKey;\n        this.shiftKey = shiftKey;\n        this.altKey = altKey;\n        this.metaKey = metaKey;\n        this.keyCode = keyCode;\n    }\n    equals(other) {\n        return (this.ctrlKey === other.ctrlKey\n            && this.shiftKey === other.shiftKey\n            && this.altKey === other.altKey\n            && this.metaKey === other.metaKey\n            && this.keyCode === other.keyCode);\n    }\n    isModifierKey() {\n        return (this.keyCode === 0 /* KeyCode.Unknown */\n            || this.keyCode === 5 /* KeyCode.Ctrl */\n            || this.keyCode === 57 /* KeyCode.Meta */\n            || this.keyCode === 6 /* KeyCode.Alt */\n            || this.keyCode === 4 /* KeyCode.Shift */);\n    }\n    toChord() {\n        return new ChordKeybinding([this]);\n    }\n    /**\n     * Does this keybinding refer to the key code of a modifier and it also has the modifier flag?\n     */\n    isDuplicateModifierCase() {\n        return ((this.ctrlKey && this.keyCode === 5 /* KeyCode.Ctrl */)\n            || (this.shiftKey && this.keyCode === 4 /* KeyCode.Shift */)\n            || (this.altKey && this.keyCode === 6 /* KeyCode.Alt */)\n            || (this.metaKey && this.keyCode === 57 /* KeyCode.Meta */));\n    }\n}\nexport class ChordKeybinding {\n    constructor(parts) {\n        if (parts.length === 0) {\n            throw illegalArgument(`parts`);\n        }\n        this.parts = parts;\n    }\n}\nexport class ScanCodeBinding {\n    constructor(ctrlKey, shiftKey, altKey, metaKey, scanCode) {\n        this.ctrlKey = ctrlKey;\n        this.shiftKey = shiftKey;\n        this.altKey = altKey;\n        this.metaKey = metaKey;\n        this.scanCode = scanCode;\n    }\n    /**\n     * Does this keybinding refer to the key code of a modifier and it also has the modifier flag?\n     */\n    isDuplicateModifierCase() {\n        return ((this.ctrlKey && (this.scanCode === 157 /* ScanCode.ControlLeft */ || this.scanCode === 161 /* ScanCode.ControlRight */))\n            || (this.shiftKey && (this.scanCode === 158 /* ScanCode.ShiftLeft */ || this.scanCode === 162 /* ScanCode.ShiftRight */))\n            || (this.altKey && (this.scanCode === 159 /* ScanCode.AltLeft */ || this.scanCode === 163 /* ScanCode.AltRight */))\n            || (this.metaKey && (this.scanCode === 160 /* ScanCode.MetaLeft */ || this.scanCode === 164 /* ScanCode.MetaRight */)));\n    }\n}\nexport class ResolvedKeybindingPart {\n    constructor(ctrlKey, shiftKey, altKey, metaKey, kbLabel, kbAriaLabel) {\n        this.ctrlKey = ctrlKey;\n        this.shiftKey = shiftKey;\n        this.altKey = altKey;\n        this.metaKey = metaKey;\n        this.keyLabel = kbLabel;\n        this.keyAriaLabel = kbAriaLabel;\n    }\n}\n/**\n * A resolved keybinding. Can be a simple keybinding or a chord keybinding.\n */\nexport class ResolvedKeybinding {\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,eAAe,QAAQ,aAAa;AAC7C,OAAO,SAASC,gBAAgB,CAACC,UAAU,EAAEC,EAAE,EAAE;EAC7C,IAAID,UAAU,KAAK,CAAC,EAAE;IAClB,OAAO,IAAI;EACf;EACA,MAAME,SAAS,GAAG,CAACF,UAAU,GAAG,UAAU,MAAM,CAAC;EACjD,MAAMG,SAAS,GAAG,CAACH,UAAU,GAAG,UAAU,MAAM,EAAE;EAClD,IAAIG,SAAS,KAAK,CAAC,EAAE;IACjB,OAAO,IAAIC,eAAe,CAAC,CACvBC,sBAAsB,CAACH,SAAS,EAAED,EAAE,CAAC,EACrCI,sBAAsB,CAACF,SAAS,EAAEF,EAAE,CAAC,CACxC,CAAC;EACN;EACA,OAAO,IAAIG,eAAe,CAAC,CAACC,sBAAsB,CAACH,SAAS,EAAED,EAAE,CAAC,CAAC,CAAC;AACvE;AACA,OAAO,SAASI,sBAAsB,CAACL,UAAU,EAAEC,EAAE,EAAE;EACnD,MAAMK,OAAO,GAAIN,UAAU,GAAG,IAAI,CAAC,sCAAsC,IAAI,GAAG,KAAM;EACtF,MAAMO,OAAO,GAAIP,UAAU,GAAG,GAAG,CAAC,sCAAsC,IAAI,GAAG,KAAM;EACrF,MAAMQ,OAAO,GAAIP,EAAE,KAAK,CAAC,CAAC,kCAAkCM,OAAO,GAAGD,OAAQ;EAC9E,MAAMG,QAAQ,GAAIT,UAAU,GAAG,IAAI,CAAC,oCAAoC,IAAI,GAAG,KAAM;EACrF,MAAMU,MAAM,GAAIV,UAAU,GAAG,GAAG,CAAC,kCAAkC,IAAI,GAAG,KAAM;EAChF,MAAMW,OAAO,GAAIV,EAAE,KAAK,CAAC,CAAC,kCAAkCK,OAAO,GAAGC,OAAQ;EAC9E,MAAMK,OAAO,GAAIZ,UAAU,GAAG,GAAG,CAAC,mCAAoC;EACtE,OAAO,IAAIa,gBAAgB,CAACL,OAAO,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,OAAO,EAAEC,OAAO,CAAC;AAC5E;AACA,OAAO,MAAMC,gBAAgB,CAAC;EAC1BC,WAAW,CAACN,OAAO,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,OAAO,EAAEC,OAAO,EAAE;IACrD,IAAI,CAACJ,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,OAAO,GAAGA,OAAO;EAC1B;EACAG,MAAM,CAACC,KAAK,EAAE;IACV,OAAQ,IAAI,CAACR,OAAO,KAAKQ,KAAK,CAACR,OAAO,IAC/B,IAAI,CAACC,QAAQ,KAAKO,KAAK,CAACP,QAAQ,IAChC,IAAI,CAACC,MAAM,KAAKM,KAAK,CAACN,MAAM,IAC5B,IAAI,CAACC,OAAO,KAAKK,KAAK,CAACL,OAAO,IAC9B,IAAI,CAACC,OAAO,KAAKI,KAAK,CAACJ,OAAO;EACzC;EACAK,aAAa,GAAG;IACZ,OAAQ,IAAI,CAACL,OAAO,KAAK,CAAC,CAAC,yBACpB,IAAI,CAACA,OAAO,KAAK,CAAC,CAAC,sBACnB,IAAI,CAACA,OAAO,KAAK,EAAE,CAAC,sBACpB,IAAI,CAACA,OAAO,KAAK,CAAC,CAAC,qBACnB,IAAI,CAACA,OAAO,KAAK,CAAC,CAAC;EAC9B;;EACAM,OAAO,GAAG;IACN,OAAO,IAAId,eAAe,CAAC,CAAC,IAAI,CAAC,CAAC;EACtC;EACA;AACJ;AACA;EACIe,uBAAuB,GAAG;IACtB,OAAS,IAAI,CAACX,OAAO,IAAI,IAAI,CAACI,OAAO,KAAK,CAAC,CAAC,sBACpC,IAAI,CAACH,QAAQ,IAAI,IAAI,CAACG,OAAO,KAAK,CAAC,CAAC,mBAAoB,IACxD,IAAI,CAACF,MAAM,IAAI,IAAI,CAACE,OAAO,KAAK,CAAC,CAAC,iBAAkB,IACpD,IAAI,CAACD,OAAO,IAAI,IAAI,CAACC,OAAO,KAAK,EAAE,CAAC,kBAAmB;EACnE;AACJ;;AACA,OAAO,MAAMR,eAAe,CAAC;EACzBU,WAAW,CAACM,KAAK,EAAE;IACf,IAAIA,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;MACpB,MAAMvB,eAAe,CAAE,OAAM,CAAC;IAClC;IACA,IAAI,CAACsB,KAAK,GAAGA,KAAK;EACtB;AACJ;AACA,OAAO,MAAME,eAAe,CAAC;EACzBR,WAAW,CAACN,OAAO,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,OAAO,EAAEY,QAAQ,EAAE;IACtD,IAAI,CAACf,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACY,QAAQ,GAAGA,QAAQ;EAC5B;EACA;AACJ;AACA;EACIJ,uBAAuB,GAAG;IACtB,OAAS,IAAI,CAACX,OAAO,KAAK,IAAI,CAACe,QAAQ,KAAK,GAAG,CAAC,8BAA8B,IAAI,CAACA,QAAQ,KAAK,GAAG,CAAC,4BAA4B,IACxH,IAAI,CAACd,QAAQ,KAAK,IAAI,CAACc,QAAQ,KAAK,GAAG,CAAC,4BAA4B,IAAI,CAACA,QAAQ,KAAK,GAAG,CAAC,0BAA2B,IACrH,IAAI,CAACb,MAAM,KAAK,IAAI,CAACa,QAAQ,KAAK,GAAG,CAAC,0BAA0B,IAAI,CAACA,QAAQ,KAAK,GAAG,CAAC,wBAAyB,IAC/G,IAAI,CAACZ,OAAO,KAAK,IAAI,CAACY,QAAQ,KAAK,GAAG,CAAC,2BAA2B,IAAI,CAACA,QAAQ,KAAK,GAAG,CAAC,yBAA0B;EAC9H;AACJ;;AACA,OAAO,MAAMC,sBAAsB,CAAC;EAChCV,WAAW,CAACN,OAAO,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,OAAO,EAAEc,OAAO,EAAEC,WAAW,EAAE;IAClE,IAAI,CAAClB,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACgB,QAAQ,GAAGF,OAAO;IACvB,IAAI,CAACG,YAAY,GAAGF,WAAW;EACnC;AACJ;AACA;AACA;AACA;AACA,OAAO,MAAMG,kBAAkB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}