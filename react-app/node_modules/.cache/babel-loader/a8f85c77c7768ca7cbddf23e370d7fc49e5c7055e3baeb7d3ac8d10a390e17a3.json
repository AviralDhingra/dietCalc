{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable, DisposableStore, dispose } from '../../../base/common/lifecycle.js';\nimport * as platform from '../../../base/common/platform.js';\nimport * as errors from '../../../base/common/errors.js';\nimport { TextModel } from '../model/textModel.js';\nimport { EDITOR_MODEL_DEFAULTS } from '../core/textModelDefaults.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nimport { ILanguageService } from '../languages/language.js';\nimport { IModelService } from './model.js';\nimport { ITextResourcePropertiesService } from './textResourceConfiguration.js';\nimport { IConfigurationService } from '../../../platform/configuration/common/configuration.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { CancellationTokenSource } from '../../../base/common/cancellation.js';\nimport { IThemeService } from '../../../platform/theme/common/themeService.js';\nimport { ILogService } from '../../../platform/log/common/log.js';\nimport { IUndoRedoService } from '../../../platform/undoRedo/common/undoRedo.js';\nimport { StringSHA1 } from '../../../base/common/hash.js';\nimport { isEditStackElement } from '../model/editStack.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { SemanticTokensProviderStyling, toMultilineTokens2 } from './semanticTokensProviderStyling.js';\nimport { getDocumentSemanticTokens, hasDocumentSemanticTokensProvider, isSemanticTokens, isSemanticTokensEdits } from './getSemanticTokens.js';\nimport { equals } from '../../../base/common/objects.js';\nimport { ILanguageConfigurationService } from '../languages/languageConfigurationRegistry.js';\nimport { ILanguageFeatureDebounceService } from './languageFeatureDebounce.js';\nimport { StopWatch } from '../../../base/common/stopwatch.js';\nimport { ILanguageFeaturesService } from './languageFeatures.js';\nfunction MODEL_ID(resource) {\n  return resource.toString();\n}\nfunction computeModelSha1(model) {\n  // compute the sha1\n  const shaComputer = new StringSHA1();\n  const snapshot = model.createSnapshot();\n  let text;\n  while (text = snapshot.read()) {\n    shaComputer.update(text);\n  }\n  return shaComputer.digest();\n}\nclass ModelData {\n  constructor(model, onWillDispose, onDidChangeLanguage) {\n    this._modelEventListeners = new DisposableStore();\n    this.model = model;\n    this._languageSelection = null;\n    this._languageSelectionListener = null;\n    this._modelEventListeners.add(model.onWillDispose(() => onWillDispose(model)));\n    this._modelEventListeners.add(model.onDidChangeLanguage(e => onDidChangeLanguage(model, e)));\n  }\n  _disposeLanguageSelection() {\n    if (this._languageSelectionListener) {\n      this._languageSelectionListener.dispose();\n      this._languageSelectionListener = null;\n    }\n  }\n  dispose() {\n    this._modelEventListeners.dispose();\n    this._disposeLanguageSelection();\n  }\n  setLanguage(languageSelection) {\n    this._disposeLanguageSelection();\n    this._languageSelection = languageSelection;\n    this._languageSelectionListener = this._languageSelection.onDidChange(() => this.model.setMode(languageSelection.languageId));\n    this.model.setMode(languageSelection.languageId);\n  }\n}\nconst DEFAULT_EOL = platform.isLinux || platform.isMacintosh ? 1 /* DefaultEndOfLine.LF */ : 2 /* DefaultEndOfLine.CRLF */;\nclass DisposedModelInfo {\n  constructor(uri, initialUndoRedoSnapshot, time, sharesUndoRedoStack, heapSize, sha1, versionId, alternativeVersionId) {\n    this.uri = uri;\n    this.initialUndoRedoSnapshot = initialUndoRedoSnapshot;\n    this.time = time;\n    this.sharesUndoRedoStack = sharesUndoRedoStack;\n    this.heapSize = heapSize;\n    this.sha1 = sha1;\n    this.versionId = versionId;\n    this.alternativeVersionId = alternativeVersionId;\n  }\n}\nlet ModelService = class ModelService extends Disposable {\n  constructor(_configurationService, _resourcePropertiesService, _themeService, _logService, _undoRedoService, _languageService, _languageConfigurationService, _languageFeatureDebounceService, languageFeaturesService) {\n    super();\n    this._configurationService = _configurationService;\n    this._resourcePropertiesService = _resourcePropertiesService;\n    this._themeService = _themeService;\n    this._logService = _logService;\n    this._undoRedoService = _undoRedoService;\n    this._languageService = _languageService;\n    this._languageConfigurationService = _languageConfigurationService;\n    this._languageFeatureDebounceService = _languageFeatureDebounceService;\n    this._onModelAdded = this._register(new Emitter());\n    this.onModelAdded = this._onModelAdded.event;\n    this._onModelRemoved = this._register(new Emitter());\n    this.onModelRemoved = this._onModelRemoved.event;\n    this._onModelModeChanged = this._register(new Emitter());\n    this.onModelLanguageChanged = this._onModelModeChanged.event;\n    this._modelCreationOptionsByLanguageAndResource = Object.create(null);\n    this._models = {};\n    this._disposedModels = new Map();\n    this._disposedModelsHeapSize = 0;\n    this._semanticStyling = this._register(new SemanticStyling(this._themeService, this._languageService, this._logService));\n    this._register(this._configurationService.onDidChangeConfiguration(() => this._updateModelOptions()));\n    this._updateModelOptions();\n    this._register(new SemanticColoringFeature(this._semanticStyling, this, this._themeService, this._configurationService, this._languageFeatureDebounceService, languageFeaturesService));\n  }\n  static _readModelOptions(config, isForSimpleWidget) {\n    var _a;\n    let tabSize = EDITOR_MODEL_DEFAULTS.tabSize;\n    if (config.editor && typeof config.editor.tabSize !== 'undefined') {\n      const parsedTabSize = parseInt(config.editor.tabSize, 10);\n      if (!isNaN(parsedTabSize)) {\n        tabSize = parsedTabSize;\n      }\n      if (tabSize < 1) {\n        tabSize = 1;\n      }\n    }\n    let indentSize = tabSize;\n    if (config.editor && typeof config.editor.indentSize !== 'undefined' && config.editor.indentSize !== 'tabSize') {\n      const parsedIndentSize = parseInt(config.editor.indentSize, 10);\n      if (!isNaN(parsedIndentSize)) {\n        indentSize = parsedIndentSize;\n      }\n      if (indentSize < 1) {\n        indentSize = 1;\n      }\n    }\n    let insertSpaces = EDITOR_MODEL_DEFAULTS.insertSpaces;\n    if (config.editor && typeof config.editor.insertSpaces !== 'undefined') {\n      insertSpaces = config.editor.insertSpaces === 'false' ? false : Boolean(config.editor.insertSpaces);\n    }\n    let newDefaultEOL = DEFAULT_EOL;\n    const eol = config.eol;\n    if (eol === '\\r\\n') {\n      newDefaultEOL = 2 /* DefaultEndOfLine.CRLF */;\n    } else if (eol === '\\n') {\n      newDefaultEOL = 1 /* DefaultEndOfLine.LF */;\n    }\n\n    let trimAutoWhitespace = EDITOR_MODEL_DEFAULTS.trimAutoWhitespace;\n    if (config.editor && typeof config.editor.trimAutoWhitespace !== 'undefined') {\n      trimAutoWhitespace = config.editor.trimAutoWhitespace === 'false' ? false : Boolean(config.editor.trimAutoWhitespace);\n    }\n    let detectIndentation = EDITOR_MODEL_DEFAULTS.detectIndentation;\n    if (config.editor && typeof config.editor.detectIndentation !== 'undefined') {\n      detectIndentation = config.editor.detectIndentation === 'false' ? false : Boolean(config.editor.detectIndentation);\n    }\n    let largeFileOptimizations = EDITOR_MODEL_DEFAULTS.largeFileOptimizations;\n    if (config.editor && typeof config.editor.largeFileOptimizations !== 'undefined') {\n      largeFileOptimizations = config.editor.largeFileOptimizations === 'false' ? false : Boolean(config.editor.largeFileOptimizations);\n    }\n    let bracketPairColorizationOptions = EDITOR_MODEL_DEFAULTS.bracketPairColorizationOptions;\n    if (((_a = config.editor) === null || _a === void 0 ? void 0 : _a.bracketPairColorization) && typeof config.editor.bracketPairColorization === 'object') {\n      bracketPairColorizationOptions = {\n        enabled: !!config.editor.bracketPairColorization.enabled,\n        independentColorPoolPerBracketType: !!config.editor.bracketPairColorization.independentColorPoolPerBracketType\n      };\n    }\n    return {\n      isForSimpleWidget: isForSimpleWidget,\n      tabSize: tabSize,\n      indentSize: indentSize,\n      insertSpaces: insertSpaces,\n      detectIndentation: detectIndentation,\n      defaultEOL: newDefaultEOL,\n      trimAutoWhitespace: trimAutoWhitespace,\n      largeFileOptimizations: largeFileOptimizations,\n      bracketPairColorizationOptions\n    };\n  }\n  _getEOL(resource, language) {\n    if (resource) {\n      return this._resourcePropertiesService.getEOL(resource, language);\n    }\n    const eol = this._configurationService.getValue('files.eol', {\n      overrideIdentifier: language\n    });\n    if (eol && typeof eol === 'string' && eol !== 'auto') {\n      return eol;\n    }\n    return platform.OS === 3 /* platform.OperatingSystem.Linux */ || platform.OS === 2 /* platform.OperatingSystem.Macintosh */ ? '\\n' : '\\r\\n';\n  }\n  _shouldRestoreUndoStack() {\n    const result = this._configurationService.getValue('files.restoreUndoStack');\n    if (typeof result === 'boolean') {\n      return result;\n    }\n    return true;\n  }\n  getCreationOptions(language, resource, isForSimpleWidget) {\n    let creationOptions = this._modelCreationOptionsByLanguageAndResource[language + resource];\n    if (!creationOptions) {\n      const editor = this._configurationService.getValue('editor', {\n        overrideIdentifier: language,\n        resource\n      });\n      const eol = this._getEOL(resource, language);\n      creationOptions = ModelService._readModelOptions({\n        editor,\n        eol\n      }, isForSimpleWidget);\n      this._modelCreationOptionsByLanguageAndResource[language + resource] = creationOptions;\n    }\n    return creationOptions;\n  }\n  _updateModelOptions() {\n    const oldOptionsByLanguageAndResource = this._modelCreationOptionsByLanguageAndResource;\n    this._modelCreationOptionsByLanguageAndResource = Object.create(null);\n    // Update options on all models\n    const keys = Object.keys(this._models);\n    for (let i = 0, len = keys.length; i < len; i++) {\n      const modelId = keys[i];\n      const modelData = this._models[modelId];\n      const language = modelData.model.getLanguageId();\n      const uri = modelData.model.uri;\n      const oldOptions = oldOptionsByLanguageAndResource[language + uri];\n      const newOptions = this.getCreationOptions(language, uri, modelData.model.isForSimpleWidget);\n      ModelService._setModelOptionsForModel(modelData.model, newOptions, oldOptions);\n    }\n  }\n  static _setModelOptionsForModel(model, newOptions, currentOptions) {\n    if (currentOptions && currentOptions.defaultEOL !== newOptions.defaultEOL && model.getLineCount() === 1) {\n      model.setEOL(newOptions.defaultEOL === 1 /* DefaultEndOfLine.LF */ ? 0 /* EndOfLineSequence.LF */ : 1 /* EndOfLineSequence.CRLF */);\n    }\n\n    if (currentOptions && currentOptions.detectIndentation === newOptions.detectIndentation && currentOptions.insertSpaces === newOptions.insertSpaces && currentOptions.tabSize === newOptions.tabSize && currentOptions.indentSize === newOptions.indentSize && currentOptions.trimAutoWhitespace === newOptions.trimAutoWhitespace && equals(currentOptions.bracketPairColorizationOptions, newOptions.bracketPairColorizationOptions)) {\n      // Same indent opts, no need to touch the model\n      return;\n    }\n    if (newOptions.detectIndentation) {\n      model.detectIndentation(newOptions.insertSpaces, newOptions.tabSize);\n      model.updateOptions({\n        trimAutoWhitespace: newOptions.trimAutoWhitespace,\n        bracketColorizationOptions: newOptions.bracketPairColorizationOptions\n      });\n    } else {\n      model.updateOptions({\n        insertSpaces: newOptions.insertSpaces,\n        tabSize: newOptions.tabSize,\n        indentSize: newOptions.indentSize,\n        trimAutoWhitespace: newOptions.trimAutoWhitespace,\n        bracketColorizationOptions: newOptions.bracketPairColorizationOptions\n      });\n    }\n  }\n  // --- begin IModelService\n  _insertDisposedModel(disposedModelData) {\n    this._disposedModels.set(MODEL_ID(disposedModelData.uri), disposedModelData);\n    this._disposedModelsHeapSize += disposedModelData.heapSize;\n  }\n  _removeDisposedModel(resource) {\n    const disposedModelData = this._disposedModels.get(MODEL_ID(resource));\n    if (disposedModelData) {\n      this._disposedModelsHeapSize -= disposedModelData.heapSize;\n    }\n    this._disposedModels.delete(MODEL_ID(resource));\n    return disposedModelData;\n  }\n  _ensureDisposedModelsHeapSize(maxModelsHeapSize) {\n    if (this._disposedModelsHeapSize > maxModelsHeapSize) {\n      // we must remove some old undo stack elements to free up some memory\n      const disposedModels = [];\n      this._disposedModels.forEach(entry => {\n        if (!entry.sharesUndoRedoStack) {\n          disposedModels.push(entry);\n        }\n      });\n      disposedModels.sort((a, b) => a.time - b.time);\n      while (disposedModels.length > 0 && this._disposedModelsHeapSize > maxModelsHeapSize) {\n        const disposedModel = disposedModels.shift();\n        this._removeDisposedModel(disposedModel.uri);\n        if (disposedModel.initialUndoRedoSnapshot !== null) {\n          this._undoRedoService.restoreSnapshot(disposedModel.initialUndoRedoSnapshot);\n        }\n      }\n    }\n  }\n  _createModelData(value, languageId, resource, isForSimpleWidget) {\n    // create & save the model\n    const options = this.getCreationOptions(languageId, resource, isForSimpleWidget);\n    const model = new TextModel(value, languageId, options, resource, this._undoRedoService, this._languageService, this._languageConfigurationService);\n    if (resource && this._disposedModels.has(MODEL_ID(resource))) {\n      const disposedModelData = this._removeDisposedModel(resource);\n      const elements = this._undoRedoService.getElements(resource);\n      const sha1IsEqual = computeModelSha1(model) === disposedModelData.sha1;\n      if (sha1IsEqual || disposedModelData.sharesUndoRedoStack) {\n        for (const element of elements.past) {\n          if (isEditStackElement(element) && element.matchesResource(resource)) {\n            element.setModel(model);\n          }\n        }\n        for (const element of elements.future) {\n          if (isEditStackElement(element) && element.matchesResource(resource)) {\n            element.setModel(model);\n          }\n        }\n        this._undoRedoService.setElementsValidFlag(resource, true, element => isEditStackElement(element) && element.matchesResource(resource));\n        if (sha1IsEqual) {\n          model._overwriteVersionId(disposedModelData.versionId);\n          model._overwriteAlternativeVersionId(disposedModelData.alternativeVersionId);\n          model._overwriteInitialUndoRedoSnapshot(disposedModelData.initialUndoRedoSnapshot);\n        }\n      } else {\n        if (disposedModelData.initialUndoRedoSnapshot !== null) {\n          this._undoRedoService.restoreSnapshot(disposedModelData.initialUndoRedoSnapshot);\n        }\n      }\n    }\n    const modelId = MODEL_ID(model.uri);\n    if (this._models[modelId]) {\n      // There already exists a model with this id => this is a programmer error\n      throw new Error('ModelService: Cannot add model because it already exists!');\n    }\n    const modelData = new ModelData(model, model => this._onWillDispose(model), (model, e) => this._onDidChangeLanguage(model, e));\n    this._models[modelId] = modelData;\n    return modelData;\n  }\n  createModel(value, languageSelection, resource) {\n    let isForSimpleWidget = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    let modelData;\n    if (languageSelection) {\n      modelData = this._createModelData(value, languageSelection.languageId, resource, isForSimpleWidget);\n      this.setMode(modelData.model, languageSelection);\n    } else {\n      modelData = this._createModelData(value, PLAINTEXT_LANGUAGE_ID, resource, isForSimpleWidget);\n    }\n    this._onModelAdded.fire(modelData.model);\n    return modelData.model;\n  }\n  setMode(model, languageSelection) {\n    if (!languageSelection) {\n      return;\n    }\n    const modelData = this._models[MODEL_ID(model.uri)];\n    if (!modelData) {\n      return;\n    }\n    modelData.setLanguage(languageSelection);\n  }\n  getModels() {\n    const ret = [];\n    const keys = Object.keys(this._models);\n    for (let i = 0, len = keys.length; i < len; i++) {\n      const modelId = keys[i];\n      ret.push(this._models[modelId].model);\n    }\n    return ret;\n  }\n  getModel(resource) {\n    const modelId = MODEL_ID(resource);\n    const modelData = this._models[modelId];\n    if (!modelData) {\n      return null;\n    }\n    return modelData.model;\n  }\n  getSemanticTokensProviderStyling(provider) {\n    return this._semanticStyling.get(provider);\n  }\n  // --- end IModelService\n  _schemaShouldMaintainUndoRedoElements(resource) {\n    return resource.scheme === Schemas.file || resource.scheme === Schemas.vscodeRemote || resource.scheme === Schemas.vscodeUserData || resource.scheme === Schemas.vscodeNotebookCell || resource.scheme === 'fake-fs' // for tests\n    ;\n  }\n\n  _onWillDispose(model) {\n    const modelId = MODEL_ID(model.uri);\n    const modelData = this._models[modelId];\n    const sharesUndoRedoStack = this._undoRedoService.getUriComparisonKey(model.uri) !== model.uri.toString();\n    let maintainUndoRedoStack = false;\n    let heapSize = 0;\n    if (sharesUndoRedoStack || this._shouldRestoreUndoStack() && this._schemaShouldMaintainUndoRedoElements(model.uri)) {\n      const elements = this._undoRedoService.getElements(model.uri);\n      if (elements.past.length > 0 || elements.future.length > 0) {\n        for (const element of elements.past) {\n          if (isEditStackElement(element) && element.matchesResource(model.uri)) {\n            maintainUndoRedoStack = true;\n            heapSize += element.heapSize(model.uri);\n            element.setModel(model.uri); // remove reference from text buffer instance\n          }\n        }\n\n        for (const element of elements.future) {\n          if (isEditStackElement(element) && element.matchesResource(model.uri)) {\n            maintainUndoRedoStack = true;\n            heapSize += element.heapSize(model.uri);\n            element.setModel(model.uri); // remove reference from text buffer instance\n          }\n        }\n      }\n    }\n\n    const maxMemory = ModelService.MAX_MEMORY_FOR_CLOSED_FILES_UNDO_STACK;\n    if (!maintainUndoRedoStack) {\n      if (!sharesUndoRedoStack) {\n        const initialUndoRedoSnapshot = modelData.model.getInitialUndoRedoSnapshot();\n        if (initialUndoRedoSnapshot !== null) {\n          this._undoRedoService.restoreSnapshot(initialUndoRedoSnapshot);\n        }\n      }\n    } else if (!sharesUndoRedoStack && heapSize > maxMemory) {\n      // the undo stack for this file would never fit in the configured memory, so don't bother with it.\n      const initialUndoRedoSnapshot = modelData.model.getInitialUndoRedoSnapshot();\n      if (initialUndoRedoSnapshot !== null) {\n        this._undoRedoService.restoreSnapshot(initialUndoRedoSnapshot);\n      }\n    } else {\n      this._ensureDisposedModelsHeapSize(maxMemory - heapSize);\n      // We only invalidate the elements, but they remain in the undo-redo service.\n      this._undoRedoService.setElementsValidFlag(model.uri, false, element => isEditStackElement(element) && element.matchesResource(model.uri));\n      this._insertDisposedModel(new DisposedModelInfo(model.uri, modelData.model.getInitialUndoRedoSnapshot(), Date.now(), sharesUndoRedoStack, heapSize, computeModelSha1(model), model.getVersionId(), model.getAlternativeVersionId()));\n    }\n    delete this._models[modelId];\n    modelData.dispose();\n    // clean up cache\n    delete this._modelCreationOptionsByLanguageAndResource[model.getLanguageId() + model.uri];\n    this._onModelRemoved.fire(model);\n  }\n  _onDidChangeLanguage(model, e) {\n    const oldLanguageId = e.oldLanguage;\n    const newLanguageId = model.getLanguageId();\n    const oldOptions = this.getCreationOptions(oldLanguageId, model.uri, model.isForSimpleWidget);\n    const newOptions = this.getCreationOptions(newLanguageId, model.uri, model.isForSimpleWidget);\n    ModelService._setModelOptionsForModel(model, newOptions, oldOptions);\n    this._onModelModeChanged.fire({\n      model,\n      oldLanguageId: oldLanguageId\n    });\n  }\n};\nModelService.MAX_MEMORY_FOR_CLOSED_FILES_UNDO_STACK = 20 * 1024 * 1024;\nModelService = __decorate([__param(0, IConfigurationService), __param(1, ITextResourcePropertiesService), __param(2, IThemeService), __param(3, ILogService), __param(4, IUndoRedoService), __param(5, ILanguageService), __param(6, ILanguageConfigurationService), __param(7, ILanguageFeatureDebounceService), __param(8, ILanguageFeaturesService)], ModelService);\nexport { ModelService };\nexport const SEMANTIC_HIGHLIGHTING_SETTING_ID = 'editor.semanticHighlighting';\nexport function isSemanticColoringEnabled(model, themeService, configurationService) {\n  var _a;\n  const setting = (_a = configurationService.getValue(SEMANTIC_HIGHLIGHTING_SETTING_ID, {\n    overrideIdentifier: model.getLanguageId(),\n    resource: model.uri\n  })) === null || _a === void 0 ? void 0 : _a.enabled;\n  if (typeof setting === 'boolean') {\n    return setting;\n  }\n  return themeService.getColorTheme().semanticHighlighting;\n}\nlet SemanticColoringFeature = class SemanticColoringFeature extends Disposable {\n  constructor(semanticStyling, modelService, themeService, configurationService, languageFeatureDebounceService, languageFeaturesService) {\n    super();\n    this._watchers = Object.create(null);\n    this._semanticStyling = semanticStyling;\n    const register = model => {\n      this._watchers[model.uri.toString()] = new ModelSemanticColoring(model, this._semanticStyling, themeService, languageFeatureDebounceService, languageFeaturesService);\n    };\n    const deregister = (model, modelSemanticColoring) => {\n      modelSemanticColoring.dispose();\n      delete this._watchers[model.uri.toString()];\n    };\n    const handleSettingOrThemeChange = () => {\n      for (const model of modelService.getModels()) {\n        const curr = this._watchers[model.uri.toString()];\n        if (isSemanticColoringEnabled(model, themeService, configurationService)) {\n          if (!curr) {\n            register(model);\n          }\n        } else {\n          if (curr) {\n            deregister(model, curr);\n          }\n        }\n      }\n    };\n    this._register(modelService.onModelAdded(model => {\n      if (isSemanticColoringEnabled(model, themeService, configurationService)) {\n        register(model);\n      }\n    }));\n    this._register(modelService.onModelRemoved(model => {\n      const curr = this._watchers[model.uri.toString()];\n      if (curr) {\n        deregister(model, curr);\n      }\n    }));\n    this._register(configurationService.onDidChangeConfiguration(e => {\n      if (e.affectsConfiguration(SEMANTIC_HIGHLIGHTING_SETTING_ID)) {\n        handleSettingOrThemeChange();\n      }\n    }));\n    this._register(themeService.onDidColorThemeChange(handleSettingOrThemeChange));\n  }\n  dispose() {\n    // Dispose all watchers\n    for (const watcher of Object.values(this._watchers)) {\n      watcher.dispose();\n    }\n    super.dispose();\n  }\n};\nSemanticColoringFeature = __decorate([__param(1, IModelService), __param(2, IThemeService), __param(3, IConfigurationService), __param(4, ILanguageFeatureDebounceService), __param(5, ILanguageFeaturesService)], SemanticColoringFeature);\nclass SemanticStyling extends Disposable {\n  constructor(_themeService, _languageService, _logService) {\n    super();\n    this._themeService = _themeService;\n    this._languageService = _languageService;\n    this._logService = _logService;\n    this._caches = new WeakMap();\n    this._register(this._themeService.onDidColorThemeChange(() => {\n      this._caches = new WeakMap();\n    }));\n  }\n  get(provider) {\n    if (!this._caches.has(provider)) {\n      this._caches.set(provider, new SemanticTokensProviderStyling(provider.getLegend(), this._themeService, this._languageService, this._logService));\n    }\n    return this._caches.get(provider);\n  }\n}\nclass SemanticTokensResponse {\n  constructor(provider, resultId, data) {\n    this.provider = provider;\n    this.resultId = resultId;\n    this.data = data;\n  }\n  dispose() {\n    this.provider.releaseDocumentSemanticTokens(this.resultId);\n  }\n}\nlet ModelSemanticColoring = class ModelSemanticColoring extends Disposable {\n  constructor(model, stylingProvider, themeService, languageFeatureDebounceService, languageFeaturesService) {\n    super();\n    this._isDisposed = false;\n    this._model = model;\n    this._semanticStyling = stylingProvider;\n    this._provider = languageFeaturesService.documentSemanticTokensProvider;\n    this._debounceInformation = languageFeatureDebounceService.for(this._provider, 'DocumentSemanticTokens', {\n      min: ModelSemanticColoring.REQUEST_MIN_DELAY,\n      max: ModelSemanticColoring.REQUEST_MAX_DELAY\n    });\n    this._fetchDocumentSemanticTokens = this._register(new RunOnceScheduler(() => this._fetchDocumentSemanticTokensNow(), ModelSemanticColoring.REQUEST_MIN_DELAY));\n    this._currentDocumentResponse = null;\n    this._currentDocumentRequestCancellationTokenSource = null;\n    this._documentProvidersChangeListeners = [];\n    this._register(this._model.onDidChangeContent(() => {\n      if (!this._fetchDocumentSemanticTokens.isScheduled()) {\n        this._fetchDocumentSemanticTokens.schedule(this._debounceInformation.get(this._model));\n      }\n    }));\n    this._register(this._model.onDidChangeLanguage(() => {\n      // clear any outstanding state\n      if (this._currentDocumentResponse) {\n        this._currentDocumentResponse.dispose();\n        this._currentDocumentResponse = null;\n      }\n      if (this._currentDocumentRequestCancellationTokenSource) {\n        this._currentDocumentRequestCancellationTokenSource.cancel();\n        this._currentDocumentRequestCancellationTokenSource = null;\n      }\n      this._setDocumentSemanticTokens(null, null, null, []);\n      this._fetchDocumentSemanticTokens.schedule(0);\n    }));\n    const bindDocumentChangeListeners = () => {\n      dispose(this._documentProvidersChangeListeners);\n      this._documentProvidersChangeListeners = [];\n      for (const provider of this._provider.all(model)) {\n        if (typeof provider.onDidChange === 'function') {\n          this._documentProvidersChangeListeners.push(provider.onDidChange(() => this._fetchDocumentSemanticTokens.schedule(0)));\n        }\n      }\n    };\n    bindDocumentChangeListeners();\n    this._register(this._provider.onDidChange(() => {\n      bindDocumentChangeListeners();\n      this._fetchDocumentSemanticTokens.schedule(this._debounceInformation.get(this._model));\n    }));\n    this._register(themeService.onDidColorThemeChange(_ => {\n      // clear out existing tokens\n      this._setDocumentSemanticTokens(null, null, null, []);\n      this._fetchDocumentSemanticTokens.schedule(this._debounceInformation.get(this._model));\n    }));\n    this._fetchDocumentSemanticTokens.schedule(0);\n  }\n  dispose() {\n    if (this._currentDocumentResponse) {\n      this._currentDocumentResponse.dispose();\n      this._currentDocumentResponse = null;\n    }\n    if (this._currentDocumentRequestCancellationTokenSource) {\n      this._currentDocumentRequestCancellationTokenSource.cancel();\n      this._currentDocumentRequestCancellationTokenSource = null;\n    }\n    this._setDocumentSemanticTokens(null, null, null, []);\n    this._isDisposed = true;\n    super.dispose();\n  }\n  _fetchDocumentSemanticTokensNow() {\n    if (this._currentDocumentRequestCancellationTokenSource) {\n      // there is already a request running, let it finish...\n      return;\n    }\n    if (!hasDocumentSemanticTokensProvider(this._provider, this._model)) {\n      // there is no provider\n      if (this._currentDocumentResponse) {\n        // there are semantic tokens set\n        this._model.tokenization.setSemanticTokens(null, false);\n      }\n      return;\n    }\n    const cancellationTokenSource = new CancellationTokenSource();\n    const lastProvider = this._currentDocumentResponse ? this._currentDocumentResponse.provider : null;\n    const lastResultId = this._currentDocumentResponse ? this._currentDocumentResponse.resultId || null : null;\n    const request = getDocumentSemanticTokens(this._provider, this._model, lastProvider, lastResultId, cancellationTokenSource.token);\n    this._currentDocumentRequestCancellationTokenSource = cancellationTokenSource;\n    const pendingChanges = [];\n    const contentChangeListener = this._model.onDidChangeContent(e => {\n      pendingChanges.push(e);\n    });\n    const sw = new StopWatch(false);\n    request.then(res => {\n      this._debounceInformation.update(this._model, sw.elapsed());\n      this._currentDocumentRequestCancellationTokenSource = null;\n      contentChangeListener.dispose();\n      if (!res) {\n        this._setDocumentSemanticTokens(null, null, null, pendingChanges);\n      } else {\n        const {\n          provider,\n          tokens\n        } = res;\n        const styling = this._semanticStyling.get(provider);\n        this._setDocumentSemanticTokens(provider, tokens || null, styling, pendingChanges);\n      }\n    }, err => {\n      const isExpectedError = err && (errors.isCancellationError(err) || typeof err.message === 'string' && err.message.indexOf('busy') !== -1);\n      if (!isExpectedError) {\n        errors.onUnexpectedError(err);\n      }\n      // Semantic tokens eats up all errors and considers errors to mean that the result is temporarily not available\n      // The API does not have a special error kind to express this...\n      this._currentDocumentRequestCancellationTokenSource = null;\n      contentChangeListener.dispose();\n      if (pendingChanges.length > 0) {\n        // More changes occurred while the request was running\n        if (!this._fetchDocumentSemanticTokens.isScheduled()) {\n          this._fetchDocumentSemanticTokens.schedule(this._debounceInformation.get(this._model));\n        }\n      }\n    });\n  }\n  static _copy(src, srcOffset, dest, destOffset, length) {\n    // protect against overflows\n    length = Math.min(length, dest.length - destOffset, src.length - srcOffset);\n    for (let i = 0; i < length; i++) {\n      dest[destOffset + i] = src[srcOffset + i];\n    }\n  }\n  _setDocumentSemanticTokens(provider, tokens, styling, pendingChanges) {\n    const currentResponse = this._currentDocumentResponse;\n    const rescheduleIfNeeded = () => {\n      if (pendingChanges.length > 0 && !this._fetchDocumentSemanticTokens.isScheduled()) {\n        this._fetchDocumentSemanticTokens.schedule(this._debounceInformation.get(this._model));\n      }\n    };\n    if (this._currentDocumentResponse) {\n      this._currentDocumentResponse.dispose();\n      this._currentDocumentResponse = null;\n    }\n    if (this._isDisposed) {\n      // disposed!\n      if (provider && tokens) {\n        provider.releaseDocumentSemanticTokens(tokens.resultId);\n      }\n      return;\n    }\n    if (!provider || !styling) {\n      this._model.tokenization.setSemanticTokens(null, false);\n      return;\n    }\n    if (!tokens) {\n      this._model.tokenization.setSemanticTokens(null, true);\n      rescheduleIfNeeded();\n      return;\n    }\n    if (isSemanticTokensEdits(tokens)) {\n      if (!currentResponse) {\n        // not possible!\n        this._model.tokenization.setSemanticTokens(null, true);\n        return;\n      }\n      if (tokens.edits.length === 0) {\n        // nothing to do!\n        tokens = {\n          resultId: tokens.resultId,\n          data: currentResponse.data\n        };\n      } else {\n        let deltaLength = 0;\n        for (const edit of tokens.edits) {\n          deltaLength += (edit.data ? edit.data.length : 0) - edit.deleteCount;\n        }\n        const srcData = currentResponse.data;\n        const destData = new Uint32Array(srcData.length + deltaLength);\n        let srcLastStart = srcData.length;\n        let destLastStart = destData.length;\n        for (let i = tokens.edits.length - 1; i >= 0; i--) {\n          const edit = tokens.edits[i];\n          if (edit.start > srcData.length) {\n            styling.warnInvalidEditStart(currentResponse.resultId, tokens.resultId, i, edit.start, srcData.length);\n            // The edits are invalid and there's no way to recover\n            this._model.tokenization.setSemanticTokens(null, true);\n            return;\n          }\n          const copyCount = srcLastStart - (edit.start + edit.deleteCount);\n          if (copyCount > 0) {\n            ModelSemanticColoring._copy(srcData, srcLastStart - copyCount, destData, destLastStart - copyCount, copyCount);\n            destLastStart -= copyCount;\n          }\n          if (edit.data) {\n            ModelSemanticColoring._copy(edit.data, 0, destData, destLastStart - edit.data.length, edit.data.length);\n            destLastStart -= edit.data.length;\n          }\n          srcLastStart = edit.start;\n        }\n        if (srcLastStart > 0) {\n          ModelSemanticColoring._copy(srcData, 0, destData, 0, srcLastStart);\n        }\n        tokens = {\n          resultId: tokens.resultId,\n          data: destData\n        };\n      }\n    }\n    if (isSemanticTokens(tokens)) {\n      this._currentDocumentResponse = new SemanticTokensResponse(provider, tokens.resultId, tokens.data);\n      const result = toMultilineTokens2(tokens, styling, this._model.getLanguageId());\n      // Adjust incoming semantic tokens\n      if (pendingChanges.length > 0) {\n        // More changes occurred while the request was running\n        // We need to:\n        // 1. Adjust incoming semantic tokens\n        // 2. Request them again\n        for (const change of pendingChanges) {\n          for (const area of result) {\n            for (const singleChange of change.changes) {\n              area.applyEdit(singleChange.range, singleChange.text);\n            }\n          }\n        }\n      }\n      this._model.tokenization.setSemanticTokens(result, true);\n    } else {\n      this._model.tokenization.setSemanticTokens(null, true);\n    }\n    rescheduleIfNeeded();\n  }\n};\nModelSemanticColoring.REQUEST_MIN_DELAY = 300;\nModelSemanticColoring.REQUEST_MAX_DELAY = 2000;\nModelSemanticColoring = __decorate([__param(2, IThemeService), __param(3, ILanguageFeatureDebounceService), __param(4, ILanguageFeaturesService)], ModelSemanticColoring);\nexport { ModelSemanticColoring };","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","Emitter","Disposable","DisposableStore","dispose","platform","errors","TextModel","EDITOR_MODEL_DEFAULTS","PLAINTEXT_LANGUAGE_ID","ILanguageService","IModelService","ITextResourcePropertiesService","IConfigurationService","RunOnceScheduler","CancellationTokenSource","IThemeService","ILogService","IUndoRedoService","StringSHA1","isEditStackElement","Schemas","SemanticTokensProviderStyling","toMultilineTokens2","getDocumentSemanticTokens","hasDocumentSemanticTokensProvider","isSemanticTokens","isSemanticTokensEdits","equals","ILanguageConfigurationService","ILanguageFeatureDebounceService","StopWatch","ILanguageFeaturesService","MODEL_ID","resource","toString","computeModelSha1","model","shaComputer","snapshot","createSnapshot","text","read","update","digest","ModelData","constructor","onWillDispose","onDidChangeLanguage","_modelEventListeners","_languageSelection","_languageSelectionListener","add","e","_disposeLanguageSelection","setLanguage","languageSelection","onDidChange","setMode","languageId","DEFAULT_EOL","isLinux","isMacintosh","DisposedModelInfo","uri","initialUndoRedoSnapshot","time","sharesUndoRedoStack","heapSize","sha1","versionId","alternativeVersionId","ModelService","_configurationService","_resourcePropertiesService","_themeService","_logService","_undoRedoService","_languageService","_languageConfigurationService","_languageFeatureDebounceService","languageFeaturesService","_onModelAdded","_register","onModelAdded","event","_onModelRemoved","onModelRemoved","_onModelModeChanged","onModelLanguageChanged","_modelCreationOptionsByLanguageAndResource","create","_models","_disposedModels","Map","_disposedModelsHeapSize","_semanticStyling","SemanticStyling","onDidChangeConfiguration","_updateModelOptions","SemanticColoringFeature","_readModelOptions","config","isForSimpleWidget","_a","tabSize","editor","parsedTabSize","parseInt","isNaN","indentSize","parsedIndentSize","insertSpaces","Boolean","newDefaultEOL","eol","trimAutoWhitespace","detectIndentation","largeFileOptimizations","bracketPairColorizationOptions","bracketPairColorization","enabled","independentColorPoolPerBracketType","defaultEOL","_getEOL","language","getEOL","getValue","overrideIdentifier","OS","_shouldRestoreUndoStack","result","getCreationOptions","creationOptions","oldOptionsByLanguageAndResource","keys","len","modelId","modelData","getLanguageId","oldOptions","newOptions","_setModelOptionsForModel","currentOptions","getLineCount","setEOL","updateOptions","bracketColorizationOptions","_insertDisposedModel","disposedModelData","set","_removeDisposedModel","get","delete","_ensureDisposedModelsHeapSize","maxModelsHeapSize","disposedModels","forEach","entry","push","sort","a","b","disposedModel","shift","restoreSnapshot","_createModelData","value","options","has","elements","getElements","sha1IsEqual","element","past","matchesResource","setModel","future","setElementsValidFlag","_overwriteVersionId","_overwriteAlternativeVersionId","_overwriteInitialUndoRedoSnapshot","Error","_onWillDispose","_onDidChangeLanguage","createModel","fire","getModels","ret","getModel","getSemanticTokensProviderStyling","provider","_schemaShouldMaintainUndoRedoElements","scheme","file","vscodeRemote","vscodeUserData","vscodeNotebookCell","getUriComparisonKey","maintainUndoRedoStack","maxMemory","MAX_MEMORY_FOR_CLOSED_FILES_UNDO_STACK","getInitialUndoRedoSnapshot","Date","now","getVersionId","getAlternativeVersionId","oldLanguageId","oldLanguage","newLanguageId","SEMANTIC_HIGHLIGHTING_SETTING_ID","isSemanticColoringEnabled","themeService","configurationService","setting","getColorTheme","semanticHighlighting","semanticStyling","modelService","languageFeatureDebounceService","_watchers","register","ModelSemanticColoring","deregister","modelSemanticColoring","handleSettingOrThemeChange","curr","affectsConfiguration","onDidColorThemeChange","watcher","values","_caches","WeakMap","getLegend","SemanticTokensResponse","resultId","data","releaseDocumentSemanticTokens","stylingProvider","_isDisposed","_model","_provider","documentSemanticTokensProvider","_debounceInformation","for","min","REQUEST_MIN_DELAY","max","REQUEST_MAX_DELAY","_fetchDocumentSemanticTokens","_fetchDocumentSemanticTokensNow","_currentDocumentResponse","_currentDocumentRequestCancellationTokenSource","_documentProvidersChangeListeners","onDidChangeContent","isScheduled","schedule","cancel","_setDocumentSemanticTokens","bindDocumentChangeListeners","all","_","tokenization","setSemanticTokens","cancellationTokenSource","lastProvider","lastResultId","request","token","pendingChanges","contentChangeListener","sw","then","res","elapsed","tokens","styling","err","isExpectedError","isCancellationError","message","indexOf","onUnexpectedError","_copy","src","srcOffset","dest","destOffset","Math","currentResponse","rescheduleIfNeeded","edits","deltaLength","edit","deleteCount","srcData","destData","Uint32Array","srcLastStart","destLastStart","start","warnInvalidEditStart","copyCount","change","area","singleChange","changes","applyEdit","range"],"sources":["/home/deathblade287/Desktop/AI-MODELS-TESTING/react-app/node_modules/monaco-editor/esm/vs/editor/common/services/modelService.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable, DisposableStore, dispose } from '../../../base/common/lifecycle.js';\nimport * as platform from '../../../base/common/platform.js';\nimport * as errors from '../../../base/common/errors.js';\nimport { TextModel } from '../model/textModel.js';\nimport { EDITOR_MODEL_DEFAULTS } from '../core/textModelDefaults.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nimport { ILanguageService } from '../languages/language.js';\nimport { IModelService } from './model.js';\nimport { ITextResourcePropertiesService } from './textResourceConfiguration.js';\nimport { IConfigurationService } from '../../../platform/configuration/common/configuration.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { CancellationTokenSource } from '../../../base/common/cancellation.js';\nimport { IThemeService } from '../../../platform/theme/common/themeService.js';\nimport { ILogService } from '../../../platform/log/common/log.js';\nimport { IUndoRedoService } from '../../../platform/undoRedo/common/undoRedo.js';\nimport { StringSHA1 } from '../../../base/common/hash.js';\nimport { isEditStackElement } from '../model/editStack.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { SemanticTokensProviderStyling, toMultilineTokens2 } from './semanticTokensProviderStyling.js';\nimport { getDocumentSemanticTokens, hasDocumentSemanticTokensProvider, isSemanticTokens, isSemanticTokensEdits } from './getSemanticTokens.js';\nimport { equals } from '../../../base/common/objects.js';\nimport { ILanguageConfigurationService } from '../languages/languageConfigurationRegistry.js';\nimport { ILanguageFeatureDebounceService } from './languageFeatureDebounce.js';\nimport { StopWatch } from '../../../base/common/stopwatch.js';\nimport { ILanguageFeaturesService } from './languageFeatures.js';\nfunction MODEL_ID(resource) {\n    return resource.toString();\n}\nfunction computeModelSha1(model) {\n    // compute the sha1\n    const shaComputer = new StringSHA1();\n    const snapshot = model.createSnapshot();\n    let text;\n    while ((text = snapshot.read())) {\n        shaComputer.update(text);\n    }\n    return shaComputer.digest();\n}\nclass ModelData {\n    constructor(model, onWillDispose, onDidChangeLanguage) {\n        this._modelEventListeners = new DisposableStore();\n        this.model = model;\n        this._languageSelection = null;\n        this._languageSelectionListener = null;\n        this._modelEventListeners.add(model.onWillDispose(() => onWillDispose(model)));\n        this._modelEventListeners.add(model.onDidChangeLanguage((e) => onDidChangeLanguage(model, e)));\n    }\n    _disposeLanguageSelection() {\n        if (this._languageSelectionListener) {\n            this._languageSelectionListener.dispose();\n            this._languageSelectionListener = null;\n        }\n    }\n    dispose() {\n        this._modelEventListeners.dispose();\n        this._disposeLanguageSelection();\n    }\n    setLanguage(languageSelection) {\n        this._disposeLanguageSelection();\n        this._languageSelection = languageSelection;\n        this._languageSelectionListener = this._languageSelection.onDidChange(() => this.model.setMode(languageSelection.languageId));\n        this.model.setMode(languageSelection.languageId);\n    }\n}\nconst DEFAULT_EOL = (platform.isLinux || platform.isMacintosh) ? 1 /* DefaultEndOfLine.LF */ : 2 /* DefaultEndOfLine.CRLF */;\nclass DisposedModelInfo {\n    constructor(uri, initialUndoRedoSnapshot, time, sharesUndoRedoStack, heapSize, sha1, versionId, alternativeVersionId) {\n        this.uri = uri;\n        this.initialUndoRedoSnapshot = initialUndoRedoSnapshot;\n        this.time = time;\n        this.sharesUndoRedoStack = sharesUndoRedoStack;\n        this.heapSize = heapSize;\n        this.sha1 = sha1;\n        this.versionId = versionId;\n        this.alternativeVersionId = alternativeVersionId;\n    }\n}\nlet ModelService = class ModelService extends Disposable {\n    constructor(_configurationService, _resourcePropertiesService, _themeService, _logService, _undoRedoService, _languageService, _languageConfigurationService, _languageFeatureDebounceService, languageFeaturesService) {\n        super();\n        this._configurationService = _configurationService;\n        this._resourcePropertiesService = _resourcePropertiesService;\n        this._themeService = _themeService;\n        this._logService = _logService;\n        this._undoRedoService = _undoRedoService;\n        this._languageService = _languageService;\n        this._languageConfigurationService = _languageConfigurationService;\n        this._languageFeatureDebounceService = _languageFeatureDebounceService;\n        this._onModelAdded = this._register(new Emitter());\n        this.onModelAdded = this._onModelAdded.event;\n        this._onModelRemoved = this._register(new Emitter());\n        this.onModelRemoved = this._onModelRemoved.event;\n        this._onModelModeChanged = this._register(new Emitter());\n        this.onModelLanguageChanged = this._onModelModeChanged.event;\n        this._modelCreationOptionsByLanguageAndResource = Object.create(null);\n        this._models = {};\n        this._disposedModels = new Map();\n        this._disposedModelsHeapSize = 0;\n        this._semanticStyling = this._register(new SemanticStyling(this._themeService, this._languageService, this._logService));\n        this._register(this._configurationService.onDidChangeConfiguration(() => this._updateModelOptions()));\n        this._updateModelOptions();\n        this._register(new SemanticColoringFeature(this._semanticStyling, this, this._themeService, this._configurationService, this._languageFeatureDebounceService, languageFeaturesService));\n    }\n    static _readModelOptions(config, isForSimpleWidget) {\n        var _a;\n        let tabSize = EDITOR_MODEL_DEFAULTS.tabSize;\n        if (config.editor && typeof config.editor.tabSize !== 'undefined') {\n            const parsedTabSize = parseInt(config.editor.tabSize, 10);\n            if (!isNaN(parsedTabSize)) {\n                tabSize = parsedTabSize;\n            }\n            if (tabSize < 1) {\n                tabSize = 1;\n            }\n        }\n        let indentSize = tabSize;\n        if (config.editor && typeof config.editor.indentSize !== 'undefined' && config.editor.indentSize !== 'tabSize') {\n            const parsedIndentSize = parseInt(config.editor.indentSize, 10);\n            if (!isNaN(parsedIndentSize)) {\n                indentSize = parsedIndentSize;\n            }\n            if (indentSize < 1) {\n                indentSize = 1;\n            }\n        }\n        let insertSpaces = EDITOR_MODEL_DEFAULTS.insertSpaces;\n        if (config.editor && typeof config.editor.insertSpaces !== 'undefined') {\n            insertSpaces = (config.editor.insertSpaces === 'false' ? false : Boolean(config.editor.insertSpaces));\n        }\n        let newDefaultEOL = DEFAULT_EOL;\n        const eol = config.eol;\n        if (eol === '\\r\\n') {\n            newDefaultEOL = 2 /* DefaultEndOfLine.CRLF */;\n        }\n        else if (eol === '\\n') {\n            newDefaultEOL = 1 /* DefaultEndOfLine.LF */;\n        }\n        let trimAutoWhitespace = EDITOR_MODEL_DEFAULTS.trimAutoWhitespace;\n        if (config.editor && typeof config.editor.trimAutoWhitespace !== 'undefined') {\n            trimAutoWhitespace = (config.editor.trimAutoWhitespace === 'false' ? false : Boolean(config.editor.trimAutoWhitespace));\n        }\n        let detectIndentation = EDITOR_MODEL_DEFAULTS.detectIndentation;\n        if (config.editor && typeof config.editor.detectIndentation !== 'undefined') {\n            detectIndentation = (config.editor.detectIndentation === 'false' ? false : Boolean(config.editor.detectIndentation));\n        }\n        let largeFileOptimizations = EDITOR_MODEL_DEFAULTS.largeFileOptimizations;\n        if (config.editor && typeof config.editor.largeFileOptimizations !== 'undefined') {\n            largeFileOptimizations = (config.editor.largeFileOptimizations === 'false' ? false : Boolean(config.editor.largeFileOptimizations));\n        }\n        let bracketPairColorizationOptions = EDITOR_MODEL_DEFAULTS.bracketPairColorizationOptions;\n        if (((_a = config.editor) === null || _a === void 0 ? void 0 : _a.bracketPairColorization) && typeof config.editor.bracketPairColorization === 'object') {\n            bracketPairColorizationOptions = {\n                enabled: !!config.editor.bracketPairColorization.enabled,\n                independentColorPoolPerBracketType: !!config.editor.bracketPairColorization.independentColorPoolPerBracketType\n            };\n        }\n        return {\n            isForSimpleWidget: isForSimpleWidget,\n            tabSize: tabSize,\n            indentSize: indentSize,\n            insertSpaces: insertSpaces,\n            detectIndentation: detectIndentation,\n            defaultEOL: newDefaultEOL,\n            trimAutoWhitespace: trimAutoWhitespace,\n            largeFileOptimizations: largeFileOptimizations,\n            bracketPairColorizationOptions\n        };\n    }\n    _getEOL(resource, language) {\n        if (resource) {\n            return this._resourcePropertiesService.getEOL(resource, language);\n        }\n        const eol = this._configurationService.getValue('files.eol', { overrideIdentifier: language });\n        if (eol && typeof eol === 'string' && eol !== 'auto') {\n            return eol;\n        }\n        return platform.OS === 3 /* platform.OperatingSystem.Linux */ || platform.OS === 2 /* platform.OperatingSystem.Macintosh */ ? '\\n' : '\\r\\n';\n    }\n    _shouldRestoreUndoStack() {\n        const result = this._configurationService.getValue('files.restoreUndoStack');\n        if (typeof result === 'boolean') {\n            return result;\n        }\n        return true;\n    }\n    getCreationOptions(language, resource, isForSimpleWidget) {\n        let creationOptions = this._modelCreationOptionsByLanguageAndResource[language + resource];\n        if (!creationOptions) {\n            const editor = this._configurationService.getValue('editor', { overrideIdentifier: language, resource });\n            const eol = this._getEOL(resource, language);\n            creationOptions = ModelService._readModelOptions({ editor, eol }, isForSimpleWidget);\n            this._modelCreationOptionsByLanguageAndResource[language + resource] = creationOptions;\n        }\n        return creationOptions;\n    }\n    _updateModelOptions() {\n        const oldOptionsByLanguageAndResource = this._modelCreationOptionsByLanguageAndResource;\n        this._modelCreationOptionsByLanguageAndResource = Object.create(null);\n        // Update options on all models\n        const keys = Object.keys(this._models);\n        for (let i = 0, len = keys.length; i < len; i++) {\n            const modelId = keys[i];\n            const modelData = this._models[modelId];\n            const language = modelData.model.getLanguageId();\n            const uri = modelData.model.uri;\n            const oldOptions = oldOptionsByLanguageAndResource[language + uri];\n            const newOptions = this.getCreationOptions(language, uri, modelData.model.isForSimpleWidget);\n            ModelService._setModelOptionsForModel(modelData.model, newOptions, oldOptions);\n        }\n    }\n    static _setModelOptionsForModel(model, newOptions, currentOptions) {\n        if (currentOptions && currentOptions.defaultEOL !== newOptions.defaultEOL && model.getLineCount() === 1) {\n            model.setEOL(newOptions.defaultEOL === 1 /* DefaultEndOfLine.LF */ ? 0 /* EndOfLineSequence.LF */ : 1 /* EndOfLineSequence.CRLF */);\n        }\n        if (currentOptions\n            && (currentOptions.detectIndentation === newOptions.detectIndentation)\n            && (currentOptions.insertSpaces === newOptions.insertSpaces)\n            && (currentOptions.tabSize === newOptions.tabSize)\n            && (currentOptions.indentSize === newOptions.indentSize)\n            && (currentOptions.trimAutoWhitespace === newOptions.trimAutoWhitespace)\n            && equals(currentOptions.bracketPairColorizationOptions, newOptions.bracketPairColorizationOptions)) {\n            // Same indent opts, no need to touch the model\n            return;\n        }\n        if (newOptions.detectIndentation) {\n            model.detectIndentation(newOptions.insertSpaces, newOptions.tabSize);\n            model.updateOptions({\n                trimAutoWhitespace: newOptions.trimAutoWhitespace,\n                bracketColorizationOptions: newOptions.bracketPairColorizationOptions\n            });\n        }\n        else {\n            model.updateOptions({\n                insertSpaces: newOptions.insertSpaces,\n                tabSize: newOptions.tabSize,\n                indentSize: newOptions.indentSize,\n                trimAutoWhitespace: newOptions.trimAutoWhitespace,\n                bracketColorizationOptions: newOptions.bracketPairColorizationOptions\n            });\n        }\n    }\n    // --- begin IModelService\n    _insertDisposedModel(disposedModelData) {\n        this._disposedModels.set(MODEL_ID(disposedModelData.uri), disposedModelData);\n        this._disposedModelsHeapSize += disposedModelData.heapSize;\n    }\n    _removeDisposedModel(resource) {\n        const disposedModelData = this._disposedModels.get(MODEL_ID(resource));\n        if (disposedModelData) {\n            this._disposedModelsHeapSize -= disposedModelData.heapSize;\n        }\n        this._disposedModels.delete(MODEL_ID(resource));\n        return disposedModelData;\n    }\n    _ensureDisposedModelsHeapSize(maxModelsHeapSize) {\n        if (this._disposedModelsHeapSize > maxModelsHeapSize) {\n            // we must remove some old undo stack elements to free up some memory\n            const disposedModels = [];\n            this._disposedModels.forEach(entry => {\n                if (!entry.sharesUndoRedoStack) {\n                    disposedModels.push(entry);\n                }\n            });\n            disposedModels.sort((a, b) => a.time - b.time);\n            while (disposedModels.length > 0 && this._disposedModelsHeapSize > maxModelsHeapSize) {\n                const disposedModel = disposedModels.shift();\n                this._removeDisposedModel(disposedModel.uri);\n                if (disposedModel.initialUndoRedoSnapshot !== null) {\n                    this._undoRedoService.restoreSnapshot(disposedModel.initialUndoRedoSnapshot);\n                }\n            }\n        }\n    }\n    _createModelData(value, languageId, resource, isForSimpleWidget) {\n        // create & save the model\n        const options = this.getCreationOptions(languageId, resource, isForSimpleWidget);\n        const model = new TextModel(value, languageId, options, resource, this._undoRedoService, this._languageService, this._languageConfigurationService);\n        if (resource && this._disposedModels.has(MODEL_ID(resource))) {\n            const disposedModelData = this._removeDisposedModel(resource);\n            const elements = this._undoRedoService.getElements(resource);\n            const sha1IsEqual = (computeModelSha1(model) === disposedModelData.sha1);\n            if (sha1IsEqual || disposedModelData.sharesUndoRedoStack) {\n                for (const element of elements.past) {\n                    if (isEditStackElement(element) && element.matchesResource(resource)) {\n                        element.setModel(model);\n                    }\n                }\n                for (const element of elements.future) {\n                    if (isEditStackElement(element) && element.matchesResource(resource)) {\n                        element.setModel(model);\n                    }\n                }\n                this._undoRedoService.setElementsValidFlag(resource, true, (element) => (isEditStackElement(element) && element.matchesResource(resource)));\n                if (sha1IsEqual) {\n                    model._overwriteVersionId(disposedModelData.versionId);\n                    model._overwriteAlternativeVersionId(disposedModelData.alternativeVersionId);\n                    model._overwriteInitialUndoRedoSnapshot(disposedModelData.initialUndoRedoSnapshot);\n                }\n            }\n            else {\n                if (disposedModelData.initialUndoRedoSnapshot !== null) {\n                    this._undoRedoService.restoreSnapshot(disposedModelData.initialUndoRedoSnapshot);\n                }\n            }\n        }\n        const modelId = MODEL_ID(model.uri);\n        if (this._models[modelId]) {\n            // There already exists a model with this id => this is a programmer error\n            throw new Error('ModelService: Cannot add model because it already exists!');\n        }\n        const modelData = new ModelData(model, (model) => this._onWillDispose(model), (model, e) => this._onDidChangeLanguage(model, e));\n        this._models[modelId] = modelData;\n        return modelData;\n    }\n    createModel(value, languageSelection, resource, isForSimpleWidget = false) {\n        let modelData;\n        if (languageSelection) {\n            modelData = this._createModelData(value, languageSelection.languageId, resource, isForSimpleWidget);\n            this.setMode(modelData.model, languageSelection);\n        }\n        else {\n            modelData = this._createModelData(value, PLAINTEXT_LANGUAGE_ID, resource, isForSimpleWidget);\n        }\n        this._onModelAdded.fire(modelData.model);\n        return modelData.model;\n    }\n    setMode(model, languageSelection) {\n        if (!languageSelection) {\n            return;\n        }\n        const modelData = this._models[MODEL_ID(model.uri)];\n        if (!modelData) {\n            return;\n        }\n        modelData.setLanguage(languageSelection);\n    }\n    getModels() {\n        const ret = [];\n        const keys = Object.keys(this._models);\n        for (let i = 0, len = keys.length; i < len; i++) {\n            const modelId = keys[i];\n            ret.push(this._models[modelId].model);\n        }\n        return ret;\n    }\n    getModel(resource) {\n        const modelId = MODEL_ID(resource);\n        const modelData = this._models[modelId];\n        if (!modelData) {\n            return null;\n        }\n        return modelData.model;\n    }\n    getSemanticTokensProviderStyling(provider) {\n        return this._semanticStyling.get(provider);\n    }\n    // --- end IModelService\n    _schemaShouldMaintainUndoRedoElements(resource) {\n        return (resource.scheme === Schemas.file\n            || resource.scheme === Schemas.vscodeRemote\n            || resource.scheme === Schemas.vscodeUserData\n            || resource.scheme === Schemas.vscodeNotebookCell\n            || resource.scheme === 'fake-fs' // for tests\n        );\n    }\n    _onWillDispose(model) {\n        const modelId = MODEL_ID(model.uri);\n        const modelData = this._models[modelId];\n        const sharesUndoRedoStack = (this._undoRedoService.getUriComparisonKey(model.uri) !== model.uri.toString());\n        let maintainUndoRedoStack = false;\n        let heapSize = 0;\n        if (sharesUndoRedoStack || (this._shouldRestoreUndoStack() && this._schemaShouldMaintainUndoRedoElements(model.uri))) {\n            const elements = this._undoRedoService.getElements(model.uri);\n            if (elements.past.length > 0 || elements.future.length > 0) {\n                for (const element of elements.past) {\n                    if (isEditStackElement(element) && element.matchesResource(model.uri)) {\n                        maintainUndoRedoStack = true;\n                        heapSize += element.heapSize(model.uri);\n                        element.setModel(model.uri); // remove reference from text buffer instance\n                    }\n                }\n                for (const element of elements.future) {\n                    if (isEditStackElement(element) && element.matchesResource(model.uri)) {\n                        maintainUndoRedoStack = true;\n                        heapSize += element.heapSize(model.uri);\n                        element.setModel(model.uri); // remove reference from text buffer instance\n                    }\n                }\n            }\n        }\n        const maxMemory = ModelService.MAX_MEMORY_FOR_CLOSED_FILES_UNDO_STACK;\n        if (!maintainUndoRedoStack) {\n            if (!sharesUndoRedoStack) {\n                const initialUndoRedoSnapshot = modelData.model.getInitialUndoRedoSnapshot();\n                if (initialUndoRedoSnapshot !== null) {\n                    this._undoRedoService.restoreSnapshot(initialUndoRedoSnapshot);\n                }\n            }\n        }\n        else if (!sharesUndoRedoStack && heapSize > maxMemory) {\n            // the undo stack for this file would never fit in the configured memory, so don't bother with it.\n            const initialUndoRedoSnapshot = modelData.model.getInitialUndoRedoSnapshot();\n            if (initialUndoRedoSnapshot !== null) {\n                this._undoRedoService.restoreSnapshot(initialUndoRedoSnapshot);\n            }\n        }\n        else {\n            this._ensureDisposedModelsHeapSize(maxMemory - heapSize);\n            // We only invalidate the elements, but they remain in the undo-redo service.\n            this._undoRedoService.setElementsValidFlag(model.uri, false, (element) => (isEditStackElement(element) && element.matchesResource(model.uri)));\n            this._insertDisposedModel(new DisposedModelInfo(model.uri, modelData.model.getInitialUndoRedoSnapshot(), Date.now(), sharesUndoRedoStack, heapSize, computeModelSha1(model), model.getVersionId(), model.getAlternativeVersionId()));\n        }\n        delete this._models[modelId];\n        modelData.dispose();\n        // clean up cache\n        delete this._modelCreationOptionsByLanguageAndResource[model.getLanguageId() + model.uri];\n        this._onModelRemoved.fire(model);\n    }\n    _onDidChangeLanguage(model, e) {\n        const oldLanguageId = e.oldLanguage;\n        const newLanguageId = model.getLanguageId();\n        const oldOptions = this.getCreationOptions(oldLanguageId, model.uri, model.isForSimpleWidget);\n        const newOptions = this.getCreationOptions(newLanguageId, model.uri, model.isForSimpleWidget);\n        ModelService._setModelOptionsForModel(model, newOptions, oldOptions);\n        this._onModelModeChanged.fire({ model, oldLanguageId: oldLanguageId });\n    }\n};\nModelService.MAX_MEMORY_FOR_CLOSED_FILES_UNDO_STACK = 20 * 1024 * 1024;\nModelService = __decorate([\n    __param(0, IConfigurationService),\n    __param(1, ITextResourcePropertiesService),\n    __param(2, IThemeService),\n    __param(3, ILogService),\n    __param(4, IUndoRedoService),\n    __param(5, ILanguageService),\n    __param(6, ILanguageConfigurationService),\n    __param(7, ILanguageFeatureDebounceService),\n    __param(8, ILanguageFeaturesService)\n], ModelService);\nexport { ModelService };\nexport const SEMANTIC_HIGHLIGHTING_SETTING_ID = 'editor.semanticHighlighting';\nexport function isSemanticColoringEnabled(model, themeService, configurationService) {\n    var _a;\n    const setting = (_a = configurationService.getValue(SEMANTIC_HIGHLIGHTING_SETTING_ID, { overrideIdentifier: model.getLanguageId(), resource: model.uri })) === null || _a === void 0 ? void 0 : _a.enabled;\n    if (typeof setting === 'boolean') {\n        return setting;\n    }\n    return themeService.getColorTheme().semanticHighlighting;\n}\nlet SemanticColoringFeature = class SemanticColoringFeature extends Disposable {\n    constructor(semanticStyling, modelService, themeService, configurationService, languageFeatureDebounceService, languageFeaturesService) {\n        super();\n        this._watchers = Object.create(null);\n        this._semanticStyling = semanticStyling;\n        const register = (model) => {\n            this._watchers[model.uri.toString()] = new ModelSemanticColoring(model, this._semanticStyling, themeService, languageFeatureDebounceService, languageFeaturesService);\n        };\n        const deregister = (model, modelSemanticColoring) => {\n            modelSemanticColoring.dispose();\n            delete this._watchers[model.uri.toString()];\n        };\n        const handleSettingOrThemeChange = () => {\n            for (const model of modelService.getModels()) {\n                const curr = this._watchers[model.uri.toString()];\n                if (isSemanticColoringEnabled(model, themeService, configurationService)) {\n                    if (!curr) {\n                        register(model);\n                    }\n                }\n                else {\n                    if (curr) {\n                        deregister(model, curr);\n                    }\n                }\n            }\n        };\n        this._register(modelService.onModelAdded((model) => {\n            if (isSemanticColoringEnabled(model, themeService, configurationService)) {\n                register(model);\n            }\n        }));\n        this._register(modelService.onModelRemoved((model) => {\n            const curr = this._watchers[model.uri.toString()];\n            if (curr) {\n                deregister(model, curr);\n            }\n        }));\n        this._register(configurationService.onDidChangeConfiguration(e => {\n            if (e.affectsConfiguration(SEMANTIC_HIGHLIGHTING_SETTING_ID)) {\n                handleSettingOrThemeChange();\n            }\n        }));\n        this._register(themeService.onDidColorThemeChange(handleSettingOrThemeChange));\n    }\n    dispose() {\n        // Dispose all watchers\n        for (const watcher of Object.values(this._watchers)) {\n            watcher.dispose();\n        }\n        super.dispose();\n    }\n};\nSemanticColoringFeature = __decorate([\n    __param(1, IModelService),\n    __param(2, IThemeService),\n    __param(3, IConfigurationService),\n    __param(4, ILanguageFeatureDebounceService),\n    __param(5, ILanguageFeaturesService)\n], SemanticColoringFeature);\nclass SemanticStyling extends Disposable {\n    constructor(_themeService, _languageService, _logService) {\n        super();\n        this._themeService = _themeService;\n        this._languageService = _languageService;\n        this._logService = _logService;\n        this._caches = new WeakMap();\n        this._register(this._themeService.onDidColorThemeChange(() => {\n            this._caches = new WeakMap();\n        }));\n    }\n    get(provider) {\n        if (!this._caches.has(provider)) {\n            this._caches.set(provider, new SemanticTokensProviderStyling(provider.getLegend(), this._themeService, this._languageService, this._logService));\n        }\n        return this._caches.get(provider);\n    }\n}\nclass SemanticTokensResponse {\n    constructor(provider, resultId, data) {\n        this.provider = provider;\n        this.resultId = resultId;\n        this.data = data;\n    }\n    dispose() {\n        this.provider.releaseDocumentSemanticTokens(this.resultId);\n    }\n}\nlet ModelSemanticColoring = class ModelSemanticColoring extends Disposable {\n    constructor(model, stylingProvider, themeService, languageFeatureDebounceService, languageFeaturesService) {\n        super();\n        this._isDisposed = false;\n        this._model = model;\n        this._semanticStyling = stylingProvider;\n        this._provider = languageFeaturesService.documentSemanticTokensProvider;\n        this._debounceInformation = languageFeatureDebounceService.for(this._provider, 'DocumentSemanticTokens', { min: ModelSemanticColoring.REQUEST_MIN_DELAY, max: ModelSemanticColoring.REQUEST_MAX_DELAY });\n        this._fetchDocumentSemanticTokens = this._register(new RunOnceScheduler(() => this._fetchDocumentSemanticTokensNow(), ModelSemanticColoring.REQUEST_MIN_DELAY));\n        this._currentDocumentResponse = null;\n        this._currentDocumentRequestCancellationTokenSource = null;\n        this._documentProvidersChangeListeners = [];\n        this._register(this._model.onDidChangeContent(() => {\n            if (!this._fetchDocumentSemanticTokens.isScheduled()) {\n                this._fetchDocumentSemanticTokens.schedule(this._debounceInformation.get(this._model));\n            }\n        }));\n        this._register(this._model.onDidChangeLanguage(() => {\n            // clear any outstanding state\n            if (this._currentDocumentResponse) {\n                this._currentDocumentResponse.dispose();\n                this._currentDocumentResponse = null;\n            }\n            if (this._currentDocumentRequestCancellationTokenSource) {\n                this._currentDocumentRequestCancellationTokenSource.cancel();\n                this._currentDocumentRequestCancellationTokenSource = null;\n            }\n            this._setDocumentSemanticTokens(null, null, null, []);\n            this._fetchDocumentSemanticTokens.schedule(0);\n        }));\n        const bindDocumentChangeListeners = () => {\n            dispose(this._documentProvidersChangeListeners);\n            this._documentProvidersChangeListeners = [];\n            for (const provider of this._provider.all(model)) {\n                if (typeof provider.onDidChange === 'function') {\n                    this._documentProvidersChangeListeners.push(provider.onDidChange(() => this._fetchDocumentSemanticTokens.schedule(0)));\n                }\n            }\n        };\n        bindDocumentChangeListeners();\n        this._register(this._provider.onDidChange(() => {\n            bindDocumentChangeListeners();\n            this._fetchDocumentSemanticTokens.schedule(this._debounceInformation.get(this._model));\n        }));\n        this._register(themeService.onDidColorThemeChange(_ => {\n            // clear out existing tokens\n            this._setDocumentSemanticTokens(null, null, null, []);\n            this._fetchDocumentSemanticTokens.schedule(this._debounceInformation.get(this._model));\n        }));\n        this._fetchDocumentSemanticTokens.schedule(0);\n    }\n    dispose() {\n        if (this._currentDocumentResponse) {\n            this._currentDocumentResponse.dispose();\n            this._currentDocumentResponse = null;\n        }\n        if (this._currentDocumentRequestCancellationTokenSource) {\n            this._currentDocumentRequestCancellationTokenSource.cancel();\n            this._currentDocumentRequestCancellationTokenSource = null;\n        }\n        this._setDocumentSemanticTokens(null, null, null, []);\n        this._isDisposed = true;\n        super.dispose();\n    }\n    _fetchDocumentSemanticTokensNow() {\n        if (this._currentDocumentRequestCancellationTokenSource) {\n            // there is already a request running, let it finish...\n            return;\n        }\n        if (!hasDocumentSemanticTokensProvider(this._provider, this._model)) {\n            // there is no provider\n            if (this._currentDocumentResponse) {\n                // there are semantic tokens set\n                this._model.tokenization.setSemanticTokens(null, false);\n            }\n            return;\n        }\n        const cancellationTokenSource = new CancellationTokenSource();\n        const lastProvider = this._currentDocumentResponse ? this._currentDocumentResponse.provider : null;\n        const lastResultId = this._currentDocumentResponse ? this._currentDocumentResponse.resultId || null : null;\n        const request = getDocumentSemanticTokens(this._provider, this._model, lastProvider, lastResultId, cancellationTokenSource.token);\n        this._currentDocumentRequestCancellationTokenSource = cancellationTokenSource;\n        const pendingChanges = [];\n        const contentChangeListener = this._model.onDidChangeContent((e) => {\n            pendingChanges.push(e);\n        });\n        const sw = new StopWatch(false);\n        request.then((res) => {\n            this._debounceInformation.update(this._model, sw.elapsed());\n            this._currentDocumentRequestCancellationTokenSource = null;\n            contentChangeListener.dispose();\n            if (!res) {\n                this._setDocumentSemanticTokens(null, null, null, pendingChanges);\n            }\n            else {\n                const { provider, tokens } = res;\n                const styling = this._semanticStyling.get(provider);\n                this._setDocumentSemanticTokens(provider, tokens || null, styling, pendingChanges);\n            }\n        }, (err) => {\n            const isExpectedError = err && (errors.isCancellationError(err) || (typeof err.message === 'string' && err.message.indexOf('busy') !== -1));\n            if (!isExpectedError) {\n                errors.onUnexpectedError(err);\n            }\n            // Semantic tokens eats up all errors and considers errors to mean that the result is temporarily not available\n            // The API does not have a special error kind to express this...\n            this._currentDocumentRequestCancellationTokenSource = null;\n            contentChangeListener.dispose();\n            if (pendingChanges.length > 0) {\n                // More changes occurred while the request was running\n                if (!this._fetchDocumentSemanticTokens.isScheduled()) {\n                    this._fetchDocumentSemanticTokens.schedule(this._debounceInformation.get(this._model));\n                }\n            }\n        });\n    }\n    static _copy(src, srcOffset, dest, destOffset, length) {\n        // protect against overflows\n        length = Math.min(length, dest.length - destOffset, src.length - srcOffset);\n        for (let i = 0; i < length; i++) {\n            dest[destOffset + i] = src[srcOffset + i];\n        }\n    }\n    _setDocumentSemanticTokens(provider, tokens, styling, pendingChanges) {\n        const currentResponse = this._currentDocumentResponse;\n        const rescheduleIfNeeded = () => {\n            if (pendingChanges.length > 0 && !this._fetchDocumentSemanticTokens.isScheduled()) {\n                this._fetchDocumentSemanticTokens.schedule(this._debounceInformation.get(this._model));\n            }\n        };\n        if (this._currentDocumentResponse) {\n            this._currentDocumentResponse.dispose();\n            this._currentDocumentResponse = null;\n        }\n        if (this._isDisposed) {\n            // disposed!\n            if (provider && tokens) {\n                provider.releaseDocumentSemanticTokens(tokens.resultId);\n            }\n            return;\n        }\n        if (!provider || !styling) {\n            this._model.tokenization.setSemanticTokens(null, false);\n            return;\n        }\n        if (!tokens) {\n            this._model.tokenization.setSemanticTokens(null, true);\n            rescheduleIfNeeded();\n            return;\n        }\n        if (isSemanticTokensEdits(tokens)) {\n            if (!currentResponse) {\n                // not possible!\n                this._model.tokenization.setSemanticTokens(null, true);\n                return;\n            }\n            if (tokens.edits.length === 0) {\n                // nothing to do!\n                tokens = {\n                    resultId: tokens.resultId,\n                    data: currentResponse.data\n                };\n            }\n            else {\n                let deltaLength = 0;\n                for (const edit of tokens.edits) {\n                    deltaLength += (edit.data ? edit.data.length : 0) - edit.deleteCount;\n                }\n                const srcData = currentResponse.data;\n                const destData = new Uint32Array(srcData.length + deltaLength);\n                let srcLastStart = srcData.length;\n                let destLastStart = destData.length;\n                for (let i = tokens.edits.length - 1; i >= 0; i--) {\n                    const edit = tokens.edits[i];\n                    if (edit.start > srcData.length) {\n                        styling.warnInvalidEditStart(currentResponse.resultId, tokens.resultId, i, edit.start, srcData.length);\n                        // The edits are invalid and there's no way to recover\n                        this._model.tokenization.setSemanticTokens(null, true);\n                        return;\n                    }\n                    const copyCount = srcLastStart - (edit.start + edit.deleteCount);\n                    if (copyCount > 0) {\n                        ModelSemanticColoring._copy(srcData, srcLastStart - copyCount, destData, destLastStart - copyCount, copyCount);\n                        destLastStart -= copyCount;\n                    }\n                    if (edit.data) {\n                        ModelSemanticColoring._copy(edit.data, 0, destData, destLastStart - edit.data.length, edit.data.length);\n                        destLastStart -= edit.data.length;\n                    }\n                    srcLastStart = edit.start;\n                }\n                if (srcLastStart > 0) {\n                    ModelSemanticColoring._copy(srcData, 0, destData, 0, srcLastStart);\n                }\n                tokens = {\n                    resultId: tokens.resultId,\n                    data: destData\n                };\n            }\n        }\n        if (isSemanticTokens(tokens)) {\n            this._currentDocumentResponse = new SemanticTokensResponse(provider, tokens.resultId, tokens.data);\n            const result = toMultilineTokens2(tokens, styling, this._model.getLanguageId());\n            // Adjust incoming semantic tokens\n            if (pendingChanges.length > 0) {\n                // More changes occurred while the request was running\n                // We need to:\n                // 1. Adjust incoming semantic tokens\n                // 2. Request them again\n                for (const change of pendingChanges) {\n                    for (const area of result) {\n                        for (const singleChange of change.changes) {\n                            area.applyEdit(singleChange.range, singleChange.text);\n                        }\n                    }\n                }\n            }\n            this._model.tokenization.setSemanticTokens(result, true);\n        }\n        else {\n            this._model.tokenization.setSemanticTokens(null, true);\n        }\n        rescheduleIfNeeded();\n    }\n};\nModelSemanticColoring.REQUEST_MIN_DELAY = 300;\nModelSemanticColoring.REQUEST_MAX_DELAY = 2000;\nModelSemanticColoring = __decorate([\n    __param(2, IThemeService),\n    __param(3, ILanguageFeatureDebounceService),\n    __param(4, ILanguageFeaturesService)\n], ModelSemanticColoring);\nexport { ModelSemanticColoring };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}