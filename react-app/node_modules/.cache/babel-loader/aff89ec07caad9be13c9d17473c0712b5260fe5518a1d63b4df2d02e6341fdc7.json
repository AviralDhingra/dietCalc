{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar _a;\nimport './media/diffReview.css';\nimport * as nls from '../../../nls.js';\nimport * as dom from '../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../base/browser/fastDomNode.js';\nimport { ActionBar } from '../../../base/browser/ui/actionbar/actionbar.js';\nimport { DomScrollableElement } from '../../../base/browser/ui/scrollbar/scrollableElement.js';\nimport { Action } from '../../../base/common/actions.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { applyFontInfo } from '../config/domFontInfo.js';\nimport { EditorAction, registerEditorAction } from '../editorExtensions.js';\nimport { ICodeEditorService } from '../services/codeEditorService.js';\nimport { EditorFontLigatures } from '../../common/config/editorOptions.js';\nimport { LineTokens } from '../../common/tokens/lineTokens.js';\nimport { Position } from '../../common/core/position.js';\nimport { editorLineNumbers } from '../../common/core/editorColorRegistry.js';\nimport { RenderLineInput, renderViewLine2 as renderViewLine } from '../../common/viewLayout/viewLineRenderer.js';\nimport { ViewLineRenderingData } from '../../common/viewModel.js';\nimport { ContextKeyExpr } from '../../../platform/contextkey/common/contextkey.js';\nimport { scrollbarShadow } from '../../../platform/theme/common/colorRegistry.js';\nimport { registerThemingParticipant, ThemeIcon } from '../../../platform/theme/common/themeService.js';\nimport { Codicon } from '../../../base/common/codicons.js';\nimport { registerIcon } from '../../../platform/theme/common/iconRegistry.js';\nimport { ILanguageService } from '../../common/languages/language.js';\nconst DIFF_LINES_PADDING = 3;\nclass DiffEntry {\n  constructor(originalLineStart, originalLineEnd, modifiedLineStart, modifiedLineEnd) {\n    this.originalLineStart = originalLineStart;\n    this.originalLineEnd = originalLineEnd;\n    this.modifiedLineStart = modifiedLineStart;\n    this.modifiedLineEnd = modifiedLineEnd;\n  }\n  getType() {\n    if (this.originalLineStart === 0) {\n      return 1 /* DiffEntryType.Insert */;\n    }\n\n    if (this.modifiedLineStart === 0) {\n      return 2 /* DiffEntryType.Delete */;\n    }\n\n    return 0 /* DiffEntryType.Equal */;\n  }\n}\n\nclass Diff {\n  constructor(entries) {\n    this.entries = entries;\n  }\n}\nconst diffReviewInsertIcon = registerIcon('diff-review-insert', Codicon.add, nls.localize('diffReviewInsertIcon', 'Icon for \\'Insert\\' in diff review.'));\nconst diffReviewRemoveIcon = registerIcon('diff-review-remove', Codicon.remove, nls.localize('diffReviewRemoveIcon', 'Icon for \\'Remove\\' in diff review.'));\nconst diffReviewCloseIcon = registerIcon('diff-review-close', Codicon.close, nls.localize('diffReviewCloseIcon', 'Icon for \\'Close\\' in diff review.'));\nlet DiffReview = class DiffReview extends Disposable {\n  constructor(diffEditor, _languageService) {\n    super();\n    this._languageService = _languageService;\n    this._width = 0;\n    this._diffEditor = diffEditor;\n    this._isVisible = false;\n    this.shadow = createFastDomNode(document.createElement('div'));\n    this.shadow.setClassName('diff-review-shadow');\n    this.actionBarContainer = createFastDomNode(document.createElement('div'));\n    this.actionBarContainer.setClassName('diff-review-actions');\n    this._actionBar = this._register(new ActionBar(this.actionBarContainer.domNode));\n    this._actionBar.push(new Action('diffreview.close', nls.localize('label.close', \"Close\"), 'close-diff-review ' + ThemeIcon.asClassName(diffReviewCloseIcon), true, () => __awaiter(this, void 0, void 0, function* () {\n      return this.hide();\n    })), {\n      label: false,\n      icon: true\n    });\n    this.domNode = createFastDomNode(document.createElement('div'));\n    this.domNode.setClassName('diff-review monaco-editor-background');\n    this._content = createFastDomNode(document.createElement('div'));\n    this._content.setClassName('diff-review-content');\n    this._content.setAttribute('role', 'code');\n    this.scrollbar = this._register(new DomScrollableElement(this._content.domNode, {}));\n    this.domNode.domNode.appendChild(this.scrollbar.getDomNode());\n    this._register(diffEditor.onDidUpdateDiff(() => {\n      if (!this._isVisible) {\n        return;\n      }\n      this._diffs = this._compute();\n      this._render();\n    }));\n    this._register(diffEditor.getModifiedEditor().onDidChangeCursorPosition(() => {\n      if (!this._isVisible) {\n        return;\n      }\n      this._render();\n    }));\n    this._register(dom.addStandardDisposableListener(this.domNode.domNode, 'click', e => {\n      e.preventDefault();\n      const row = dom.findParentWithClass(e.target, 'diff-review-row');\n      if (row) {\n        this._goToRow(row);\n      }\n    }));\n    this._register(dom.addStandardDisposableListener(this.domNode.domNode, 'keydown', e => {\n      if (e.equals(18 /* KeyCode.DownArrow */) || e.equals(2048 /* KeyMod.CtrlCmd */ | 18 /* KeyCode.DownArrow */) || e.equals(512 /* KeyMod.Alt */ | 18 /* KeyCode.DownArrow */)) {\n        e.preventDefault();\n        this._goToRow(this._getNextRow());\n      }\n      if (e.equals(16 /* KeyCode.UpArrow */) || e.equals(2048 /* KeyMod.CtrlCmd */ | 16 /* KeyCode.UpArrow */) || e.equals(512 /* KeyMod.Alt */ | 16 /* KeyCode.UpArrow */)) {\n        e.preventDefault();\n        this._goToRow(this._getPrevRow());\n      }\n      if (e.equals(9 /* KeyCode.Escape */) || e.equals(2048 /* KeyMod.CtrlCmd */ | 9 /* KeyCode.Escape */) || e.equals(512 /* KeyMod.Alt */ | 9 /* KeyCode.Escape */) || e.equals(1024 /* KeyMod.Shift */ | 9 /* KeyCode.Escape */)) {\n        e.preventDefault();\n        this.hide();\n      }\n      if (e.equals(10 /* KeyCode.Space */) || e.equals(3 /* KeyCode.Enter */)) {\n        e.preventDefault();\n        this.accept();\n      }\n    }));\n    this._diffs = [];\n    this._currentDiff = null;\n  }\n  prev() {\n    let index = 0;\n    if (!this._isVisible) {\n      this._diffs = this._compute();\n    }\n    if (this._isVisible) {\n      let currentIndex = -1;\n      for (let i = 0, len = this._diffs.length; i < len; i++) {\n        if (this._diffs[i] === this._currentDiff) {\n          currentIndex = i;\n          break;\n        }\n      }\n      index = this._diffs.length + currentIndex - 1;\n    } else {\n      index = this._findDiffIndex(this._diffEditor.getPosition());\n    }\n    if (this._diffs.length === 0) {\n      // Nothing to do\n      return;\n    }\n    index = index % this._diffs.length;\n    const entries = this._diffs[index].entries;\n    this._diffEditor.setPosition(new Position(entries[0].modifiedLineStart, 1));\n    this._diffEditor.setSelection({\n      startColumn: 1,\n      startLineNumber: entries[0].modifiedLineStart,\n      endColumn: 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */,\n      endLineNumber: entries[entries.length - 1].modifiedLineEnd\n    });\n    this._isVisible = true;\n    this._diffEditor.doLayout();\n    this._render();\n    this._goToRow(this._getNextRow());\n  }\n  next() {\n    let index = 0;\n    if (!this._isVisible) {\n      this._diffs = this._compute();\n    }\n    if (this._isVisible) {\n      let currentIndex = -1;\n      for (let i = 0, len = this._diffs.length; i < len; i++) {\n        if (this._diffs[i] === this._currentDiff) {\n          currentIndex = i;\n          break;\n        }\n      }\n      index = currentIndex + 1;\n    } else {\n      index = this._findDiffIndex(this._diffEditor.getPosition());\n    }\n    if (this._diffs.length === 0) {\n      // Nothing to do\n      return;\n    }\n    index = index % this._diffs.length;\n    const entries = this._diffs[index].entries;\n    this._diffEditor.setPosition(new Position(entries[0].modifiedLineStart, 1));\n    this._diffEditor.setSelection({\n      startColumn: 1,\n      startLineNumber: entries[0].modifiedLineStart,\n      endColumn: 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */,\n      endLineNumber: entries[entries.length - 1].modifiedLineEnd\n    });\n    this._isVisible = true;\n    this._diffEditor.doLayout();\n    this._render();\n    this._goToRow(this._getNextRow());\n  }\n  accept() {\n    let jumpToLineNumber = -1;\n    const current = this._getCurrentFocusedRow();\n    if (current) {\n      const lineNumber = parseInt(current.getAttribute('data-line'), 10);\n      if (!isNaN(lineNumber)) {\n        jumpToLineNumber = lineNumber;\n      }\n    }\n    this.hide();\n    if (jumpToLineNumber !== -1) {\n      this._diffEditor.setPosition(new Position(jumpToLineNumber, 1));\n      this._diffEditor.revealPosition(new Position(jumpToLineNumber, 1), 1 /* ScrollType.Immediate */);\n    }\n  }\n\n  hide() {\n    this._isVisible = false;\n    this._diffEditor.updateOptions({\n      readOnly: false\n    });\n    this._diffEditor.focus();\n    this._diffEditor.doLayout();\n    this._render();\n  }\n  _getPrevRow() {\n    const current = this._getCurrentFocusedRow();\n    if (!current) {\n      return this._getFirstRow();\n    }\n    if (current.previousElementSibling) {\n      return current.previousElementSibling;\n    }\n    return current;\n  }\n  _getNextRow() {\n    const current = this._getCurrentFocusedRow();\n    if (!current) {\n      return this._getFirstRow();\n    }\n    if (current.nextElementSibling) {\n      return current.nextElementSibling;\n    }\n    return current;\n  }\n  _getFirstRow() {\n    return this.domNode.domNode.querySelector('.diff-review-row');\n  }\n  _getCurrentFocusedRow() {\n    const result = document.activeElement;\n    if (result && /diff-review-row/.test(result.className)) {\n      return result;\n    }\n    return null;\n  }\n  _goToRow(row) {\n    const prev = this._getCurrentFocusedRow();\n    row.tabIndex = 0;\n    row.focus();\n    if (prev && prev !== row) {\n      prev.tabIndex = -1;\n    }\n    this.scrollbar.scanDomNode();\n  }\n  isVisible() {\n    return this._isVisible;\n  }\n  layout(top, width, height) {\n    this._width = width;\n    this.shadow.setTop(top - 6);\n    this.shadow.setWidth(width);\n    this.shadow.setHeight(this._isVisible ? 6 : 0);\n    this.domNode.setTop(top);\n    this.domNode.setWidth(width);\n    this.domNode.setHeight(height);\n    this._content.setHeight(height);\n    this._content.setWidth(width);\n    if (this._isVisible) {\n      this.actionBarContainer.setAttribute('aria-hidden', 'false');\n      this.actionBarContainer.setDisplay('block');\n    } else {\n      this.actionBarContainer.setAttribute('aria-hidden', 'true');\n      this.actionBarContainer.setDisplay('none');\n    }\n  }\n  _compute() {\n    const lineChanges = this._diffEditor.getLineChanges();\n    if (!lineChanges || lineChanges.length === 0) {\n      return [];\n    }\n    const originalModel = this._diffEditor.getOriginalEditor().getModel();\n    const modifiedModel = this._diffEditor.getModifiedEditor().getModel();\n    if (!originalModel || !modifiedModel) {\n      return [];\n    }\n    return DiffReview._mergeAdjacent(lineChanges, originalModel.getLineCount(), modifiedModel.getLineCount());\n  }\n  static _mergeAdjacent(lineChanges, originalLineCount, modifiedLineCount) {\n    if (!lineChanges || lineChanges.length === 0) {\n      return [];\n    }\n    const diffs = [];\n    let diffsLength = 0;\n    for (let i = 0, len = lineChanges.length; i < len; i++) {\n      const lineChange = lineChanges[i];\n      const originalStart = lineChange.originalStartLineNumber;\n      const originalEnd = lineChange.originalEndLineNumber;\n      const modifiedStart = lineChange.modifiedStartLineNumber;\n      const modifiedEnd = lineChange.modifiedEndLineNumber;\n      const r = [];\n      let rLength = 0;\n      // Emit before anchors\n      {\n        const originalEqualAbove = originalEnd === 0 ? originalStart : originalStart - 1;\n        const modifiedEqualAbove = modifiedEnd === 0 ? modifiedStart : modifiedStart - 1;\n        // Make sure we don't step into the previous diff\n        let minOriginal = 1;\n        let minModified = 1;\n        if (i > 0) {\n          const prevLineChange = lineChanges[i - 1];\n          if (prevLineChange.originalEndLineNumber === 0) {\n            minOriginal = prevLineChange.originalStartLineNumber + 1;\n          } else {\n            minOriginal = prevLineChange.originalEndLineNumber + 1;\n          }\n          if (prevLineChange.modifiedEndLineNumber === 0) {\n            minModified = prevLineChange.modifiedStartLineNumber + 1;\n          } else {\n            minModified = prevLineChange.modifiedEndLineNumber + 1;\n          }\n        }\n        let fromOriginal = originalEqualAbove - DIFF_LINES_PADDING + 1;\n        let fromModified = modifiedEqualAbove - DIFF_LINES_PADDING + 1;\n        if (fromOriginal < minOriginal) {\n          const delta = minOriginal - fromOriginal;\n          fromOriginal = fromOriginal + delta;\n          fromModified = fromModified + delta;\n        }\n        if (fromModified < minModified) {\n          const delta = minModified - fromModified;\n          fromOriginal = fromOriginal + delta;\n          fromModified = fromModified + delta;\n        }\n        r[rLength++] = new DiffEntry(fromOriginal, originalEqualAbove, fromModified, modifiedEqualAbove);\n      }\n      // Emit deleted lines\n      {\n        if (originalEnd !== 0) {\n          r[rLength++] = new DiffEntry(originalStart, originalEnd, 0, 0);\n        }\n      }\n      // Emit inserted lines\n      {\n        if (modifiedEnd !== 0) {\n          r[rLength++] = new DiffEntry(0, 0, modifiedStart, modifiedEnd);\n        }\n      }\n      // Emit after anchors\n      {\n        const originalEqualBelow = originalEnd === 0 ? originalStart + 1 : originalEnd + 1;\n        const modifiedEqualBelow = modifiedEnd === 0 ? modifiedStart + 1 : modifiedEnd + 1;\n        // Make sure we don't step into the next diff\n        let maxOriginal = originalLineCount;\n        let maxModified = modifiedLineCount;\n        if (i + 1 < len) {\n          const nextLineChange = lineChanges[i + 1];\n          if (nextLineChange.originalEndLineNumber === 0) {\n            maxOriginal = nextLineChange.originalStartLineNumber;\n          } else {\n            maxOriginal = nextLineChange.originalStartLineNumber - 1;\n          }\n          if (nextLineChange.modifiedEndLineNumber === 0) {\n            maxModified = nextLineChange.modifiedStartLineNumber;\n          } else {\n            maxModified = nextLineChange.modifiedStartLineNumber - 1;\n          }\n        }\n        let toOriginal = originalEqualBelow + DIFF_LINES_PADDING - 1;\n        let toModified = modifiedEqualBelow + DIFF_LINES_PADDING - 1;\n        if (toOriginal > maxOriginal) {\n          const delta = maxOriginal - toOriginal;\n          toOriginal = toOriginal + delta;\n          toModified = toModified + delta;\n        }\n        if (toModified > maxModified) {\n          const delta = maxModified - toModified;\n          toOriginal = toOriginal + delta;\n          toModified = toModified + delta;\n        }\n        r[rLength++] = new DiffEntry(originalEqualBelow, toOriginal, modifiedEqualBelow, toModified);\n      }\n      diffs[diffsLength++] = new Diff(r);\n    }\n    // Merge adjacent diffs\n    let curr = diffs[0].entries;\n    const r = [];\n    let rLength = 0;\n    for (let i = 1, len = diffs.length; i < len; i++) {\n      const thisDiff = diffs[i].entries;\n      const currLast = curr[curr.length - 1];\n      const thisFirst = thisDiff[0];\n      if (currLast.getType() === 0 /* DiffEntryType.Equal */ && thisFirst.getType() === 0 /* DiffEntryType.Equal */ && thisFirst.originalLineStart <= currLast.originalLineEnd) {\n        // We are dealing with equal lines that overlap\n        curr[curr.length - 1] = new DiffEntry(currLast.originalLineStart, thisFirst.originalLineEnd, currLast.modifiedLineStart, thisFirst.modifiedLineEnd);\n        curr = curr.concat(thisDiff.slice(1));\n        continue;\n      }\n      r[rLength++] = new Diff(curr);\n      curr = thisDiff;\n    }\n    r[rLength++] = new Diff(curr);\n    return r;\n  }\n  _findDiffIndex(pos) {\n    const lineNumber = pos.lineNumber;\n    for (let i = 0, len = this._diffs.length; i < len; i++) {\n      const diff = this._diffs[i].entries;\n      const lastModifiedLine = diff[diff.length - 1].modifiedLineEnd;\n      if (lineNumber <= lastModifiedLine) {\n        return i;\n      }\n    }\n    return 0;\n  }\n  _render() {\n    const originalOptions = this._diffEditor.getOriginalEditor().getOptions();\n    const modifiedOptions = this._diffEditor.getModifiedEditor().getOptions();\n    const originalModel = this._diffEditor.getOriginalEditor().getModel();\n    const modifiedModel = this._diffEditor.getModifiedEditor().getModel();\n    const originalModelOpts = originalModel.getOptions();\n    const modifiedModelOpts = modifiedModel.getOptions();\n    if (!this._isVisible || !originalModel || !modifiedModel) {\n      dom.clearNode(this._content.domNode);\n      this._currentDiff = null;\n      this.scrollbar.scanDomNode();\n      return;\n    }\n    this._diffEditor.updateOptions({\n      readOnly: true\n    });\n    const diffIndex = this._findDiffIndex(this._diffEditor.getPosition());\n    if (this._diffs[diffIndex] === this._currentDiff) {\n      return;\n    }\n    this._currentDiff = this._diffs[diffIndex];\n    const diffs = this._diffs[diffIndex].entries;\n    const container = document.createElement('div');\n    container.className = 'diff-review-table';\n    container.setAttribute('role', 'list');\n    container.setAttribute('aria-label', 'Difference review. Use \"Stage | Unstage | Revert Selected Ranges\" commands');\n    applyFontInfo(container, modifiedOptions.get(46 /* EditorOption.fontInfo */));\n    let minOriginalLine = 0;\n    let maxOriginalLine = 0;\n    let minModifiedLine = 0;\n    let maxModifiedLine = 0;\n    for (let i = 0, len = diffs.length; i < len; i++) {\n      const diffEntry = diffs[i];\n      const originalLineStart = diffEntry.originalLineStart;\n      const originalLineEnd = diffEntry.originalLineEnd;\n      const modifiedLineStart = diffEntry.modifiedLineStart;\n      const modifiedLineEnd = diffEntry.modifiedLineEnd;\n      if (originalLineStart !== 0 && (minOriginalLine === 0 || originalLineStart < minOriginalLine)) {\n        minOriginalLine = originalLineStart;\n      }\n      if (originalLineEnd !== 0 && (maxOriginalLine === 0 || originalLineEnd > maxOriginalLine)) {\n        maxOriginalLine = originalLineEnd;\n      }\n      if (modifiedLineStart !== 0 && (minModifiedLine === 0 || modifiedLineStart < minModifiedLine)) {\n        minModifiedLine = modifiedLineStart;\n      }\n      if (modifiedLineEnd !== 0 && (maxModifiedLine === 0 || modifiedLineEnd > maxModifiedLine)) {\n        maxModifiedLine = modifiedLineEnd;\n      }\n    }\n    const header = document.createElement('div');\n    header.className = 'diff-review-row';\n    const cell = document.createElement('div');\n    cell.className = 'diff-review-cell diff-review-summary';\n    const originalChangedLinesCnt = maxOriginalLine - minOriginalLine + 1;\n    const modifiedChangedLinesCnt = maxModifiedLine - minModifiedLine + 1;\n    cell.appendChild(document.createTextNode(`${diffIndex + 1}/${this._diffs.length}: @@ -${minOriginalLine},${originalChangedLinesCnt} +${minModifiedLine},${modifiedChangedLinesCnt} @@`));\n    header.setAttribute('data-line', String(minModifiedLine));\n    const getAriaLines = lines => {\n      if (lines === 0) {\n        return nls.localize('no_lines_changed', \"no lines changed\");\n      } else if (lines === 1) {\n        return nls.localize('one_line_changed', \"1 line changed\");\n      } else {\n        return nls.localize('more_lines_changed', \"{0} lines changed\", lines);\n      }\n    };\n    const originalChangedLinesCntAria = getAriaLines(originalChangedLinesCnt);\n    const modifiedChangedLinesCntAria = getAriaLines(modifiedChangedLinesCnt);\n    header.setAttribute('aria-label', nls.localize({\n      key: 'header',\n      comment: ['This is the ARIA label for a git diff header.', 'A git diff header looks like this: @@ -154,12 +159,39 @@.', 'That encodes that at original line 154 (which is now line 159), 12 lines were removed/changed with 39 lines.', 'Variables 0 and 1 refer to the diff index out of total number of diffs.', 'Variables 2 and 4 will be numbers (a line number).', 'Variables 3 and 5 will be \"no lines changed\", \"1 line changed\" or \"X lines changed\", localized separately.']\n    }, \"Difference {0} of {1}: original line {2}, {3}, modified line {4}, {5}\", diffIndex + 1, this._diffs.length, minOriginalLine, originalChangedLinesCntAria, minModifiedLine, modifiedChangedLinesCntAria));\n    header.appendChild(cell);\n    // @@ -504,7 +517,7 @@\n    header.setAttribute('role', 'listitem');\n    container.appendChild(header);\n    const lineHeight = modifiedOptions.get(61 /* EditorOption.lineHeight */);\n    let modLine = minModifiedLine;\n    for (let i = 0, len = diffs.length; i < len; i++) {\n      const diffEntry = diffs[i];\n      DiffReview._renderSection(container, diffEntry, modLine, lineHeight, this._width, originalOptions, originalModel, originalModelOpts, modifiedOptions, modifiedModel, modifiedModelOpts, this._languageService.languageIdCodec);\n      if (diffEntry.modifiedLineStart !== 0) {\n        modLine = diffEntry.modifiedLineEnd;\n      }\n    }\n    dom.clearNode(this._content.domNode);\n    this._content.domNode.appendChild(container);\n    this.scrollbar.scanDomNode();\n  }\n  static _renderSection(dest, diffEntry, modLine, lineHeight, width, originalOptions, originalModel, originalModelOpts, modifiedOptions, modifiedModel, modifiedModelOpts, languageIdCodec) {\n    const type = diffEntry.getType();\n    let rowClassName = 'diff-review-row';\n    let lineNumbersExtraClassName = '';\n    const spacerClassName = 'diff-review-spacer';\n    let spacerIcon = null;\n    switch (type) {\n      case 1 /* DiffEntryType.Insert */:\n        rowClassName = 'diff-review-row line-insert';\n        lineNumbersExtraClassName = ' char-insert';\n        spacerIcon = diffReviewInsertIcon;\n        break;\n      case 2 /* DiffEntryType.Delete */:\n        rowClassName = 'diff-review-row line-delete';\n        lineNumbersExtraClassName = ' char-delete';\n        spacerIcon = diffReviewRemoveIcon;\n        break;\n    }\n    const originalLineStart = diffEntry.originalLineStart;\n    const originalLineEnd = diffEntry.originalLineEnd;\n    const modifiedLineStart = diffEntry.modifiedLineStart;\n    const modifiedLineEnd = diffEntry.modifiedLineEnd;\n    const cnt = Math.max(modifiedLineEnd - modifiedLineStart, originalLineEnd - originalLineStart);\n    const originalLayoutInfo = originalOptions.get(133 /* EditorOption.layoutInfo */);\n    const originalLineNumbersWidth = originalLayoutInfo.glyphMarginWidth + originalLayoutInfo.lineNumbersWidth;\n    const modifiedLayoutInfo = modifiedOptions.get(133 /* EditorOption.layoutInfo */);\n    const modifiedLineNumbersWidth = 10 + modifiedLayoutInfo.glyphMarginWidth + modifiedLayoutInfo.lineNumbersWidth;\n    for (let i = 0; i <= cnt; i++) {\n      const originalLine = originalLineStart === 0 ? 0 : originalLineStart + i;\n      const modifiedLine = modifiedLineStart === 0 ? 0 : modifiedLineStart + i;\n      const row = document.createElement('div');\n      row.style.minWidth = width + 'px';\n      row.className = rowClassName;\n      row.setAttribute('role', 'listitem');\n      if (modifiedLine !== 0) {\n        modLine = modifiedLine;\n      }\n      row.setAttribute('data-line', String(modLine));\n      const cell = document.createElement('div');\n      cell.className = 'diff-review-cell';\n      cell.style.height = `${lineHeight}px`;\n      row.appendChild(cell);\n      const originalLineNumber = document.createElement('span');\n      originalLineNumber.style.width = originalLineNumbersWidth + 'px';\n      originalLineNumber.style.minWidth = originalLineNumbersWidth + 'px';\n      originalLineNumber.className = 'diff-review-line-number' + lineNumbersExtraClassName;\n      if (originalLine !== 0) {\n        originalLineNumber.appendChild(document.createTextNode(String(originalLine)));\n      } else {\n        originalLineNumber.innerText = '\\u00a0';\n      }\n      cell.appendChild(originalLineNumber);\n      const modifiedLineNumber = document.createElement('span');\n      modifiedLineNumber.style.width = modifiedLineNumbersWidth + 'px';\n      modifiedLineNumber.style.minWidth = modifiedLineNumbersWidth + 'px';\n      modifiedLineNumber.style.paddingRight = '10px';\n      modifiedLineNumber.className = 'diff-review-line-number' + lineNumbersExtraClassName;\n      if (modifiedLine !== 0) {\n        modifiedLineNumber.appendChild(document.createTextNode(String(modifiedLine)));\n      } else {\n        modifiedLineNumber.innerText = '\\u00a0';\n      }\n      cell.appendChild(modifiedLineNumber);\n      const spacer = document.createElement('span');\n      spacer.className = spacerClassName;\n      if (spacerIcon) {\n        const spacerCodicon = document.createElement('span');\n        spacerCodicon.className = ThemeIcon.asClassName(spacerIcon);\n        spacerCodicon.innerText = '\\u00a0\\u00a0';\n        spacer.appendChild(spacerCodicon);\n      } else {\n        spacer.innerText = '\\u00a0\\u00a0';\n      }\n      cell.appendChild(spacer);\n      let lineContent;\n      if (modifiedLine !== 0) {\n        let html = this._renderLine(modifiedModel, modifiedOptions, modifiedModelOpts.tabSize, modifiedLine, languageIdCodec);\n        if (DiffReview._ttPolicy) {\n          html = DiffReview._ttPolicy.createHTML(html);\n        }\n        cell.insertAdjacentHTML('beforeend', html);\n        lineContent = modifiedModel.getLineContent(modifiedLine);\n      } else {\n        let html = this._renderLine(originalModel, originalOptions, originalModelOpts.tabSize, originalLine, languageIdCodec);\n        if (DiffReview._ttPolicy) {\n          html = DiffReview._ttPolicy.createHTML(html);\n        }\n        cell.insertAdjacentHTML('beforeend', html);\n        lineContent = originalModel.getLineContent(originalLine);\n      }\n      if (lineContent.length === 0) {\n        lineContent = nls.localize('blankLine', \"blank\");\n      }\n      let ariaLabel = '';\n      switch (type) {\n        case 0 /* DiffEntryType.Equal */:\n          if (originalLine === modifiedLine) {\n            ariaLabel = nls.localize({\n              key: 'unchangedLine',\n              comment: ['The placeholders are contents of the line and should not be translated.']\n            }, \"{0} unchanged line {1}\", lineContent, originalLine);\n          } else {\n            ariaLabel = nls.localize('equalLine', \"{0} original line {1} modified line {2}\", lineContent, originalLine, modifiedLine);\n          }\n          break;\n        case 1 /* DiffEntryType.Insert */:\n          ariaLabel = nls.localize('insertLine', \"+ {0} modified line {1}\", lineContent, modifiedLine);\n          break;\n        case 2 /* DiffEntryType.Delete */:\n          ariaLabel = nls.localize('deleteLine', \"- {0} original line {1}\", lineContent, originalLine);\n          break;\n      }\n      row.setAttribute('aria-label', ariaLabel);\n      dest.appendChild(row);\n    }\n  }\n  static _renderLine(model, options, tabSize, lineNumber, languageIdCodec) {\n    const lineContent = model.getLineContent(lineNumber);\n    const fontInfo = options.get(46 /* EditorOption.fontInfo */);\n    const lineTokens = LineTokens.createEmpty(lineContent, languageIdCodec);\n    const isBasicASCII = ViewLineRenderingData.isBasicASCII(lineContent, model.mightContainNonBasicASCII());\n    const containsRTL = ViewLineRenderingData.containsRTL(lineContent, isBasicASCII, model.mightContainRTL());\n    const r = renderViewLine(new RenderLineInput(fontInfo.isMonospace && !options.get(29 /* EditorOption.disableMonospaceOptimizations */), fontInfo.canUseHalfwidthRightwardsArrow, lineContent, false, isBasicASCII, containsRTL, 0, lineTokens, [], tabSize, 0, fontInfo.spaceWidth, fontInfo.middotWidth, fontInfo.wsmiddotWidth, options.get(107 /* EditorOption.stopRenderingLineAfter */), options.get(90 /* EditorOption.renderWhitespace */), options.get(85 /* EditorOption.renderControlCharacters */), options.get(47 /* EditorOption.fontLigatures */) !== EditorFontLigatures.OFF, null));\n    return r.html;\n  }\n};\nDiffReview._ttPolicy = (_a = window.trustedTypes) === null || _a === void 0 ? void 0 : _a.createPolicy('diffReview', {\n  createHTML: value => value\n});\nDiffReview = __decorate([__param(1, ILanguageService)], DiffReview);\nexport { DiffReview };\n// theming\nregisterThemingParticipant((theme, collector) => {\n  const lineNumbers = theme.getColor(editorLineNumbers);\n  if (lineNumbers) {\n    collector.addRule(`.monaco-diff-editor .diff-review-line-number { color: ${lineNumbers}; }`);\n  }\n  const shadow = theme.getColor(scrollbarShadow);\n  if (shadow) {\n    collector.addRule(`.monaco-diff-editor .diff-review-shadow { box-shadow: ${shadow} 0 -6px 6px -6px inset; }`);\n  }\n});\nclass DiffReviewNext extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.diffReview.next',\n      label: nls.localize('editor.action.diffReview.next', \"Go to Next Difference\"),\n      alias: 'Go to Next Difference',\n      precondition: ContextKeyExpr.has('isInDiffEditor'),\n      kbOpts: {\n        kbExpr: null,\n        primary: 65 /* KeyCode.F7 */,\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n\n  run(accessor, editor) {\n    const diffEditor = findFocusedDiffEditor(accessor);\n    if (diffEditor) {\n      diffEditor.diffReviewNext();\n    }\n  }\n}\nclass DiffReviewPrev extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.diffReview.prev',\n      label: nls.localize('editor.action.diffReview.prev', \"Go to Previous Difference\"),\n      alias: 'Go to Previous Difference',\n      precondition: ContextKeyExpr.has('isInDiffEditor'),\n      kbOpts: {\n        kbExpr: null,\n        primary: 1024 /* KeyMod.Shift */ | 65 /* KeyCode.F7 */,\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n\n  run(accessor, editor) {\n    const diffEditor = findFocusedDiffEditor(accessor);\n    if (diffEditor) {\n      diffEditor.diffReviewPrev();\n    }\n  }\n}\nfunction findFocusedDiffEditor(accessor) {\n  const codeEditorService = accessor.get(ICodeEditorService);\n  const diffEditors = codeEditorService.listDiffEditors();\n  const activeCodeEditor = codeEditorService.getActiveCodeEditor();\n  if (!activeCodeEditor) {\n    return null;\n  }\n  for (let i = 0, len = diffEditors.length; i < len; i++) {\n    const diffEditor = diffEditors[i];\n    if (diffEditor.getModifiedEditor().getId() === activeCodeEditor.getId() || diffEditor.getOriginalEditor().getId() === activeCodeEditor.getId()) {\n      return diffEditor;\n    }\n  }\n  return null;\n}\nregisterEditorAction(DiffReviewNext);\nregisterEditorAction(DiffReviewPrev);","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","_a","nls","dom","createFastDomNode","ActionBar","DomScrollableElement","Action","Disposable","applyFontInfo","EditorAction","registerEditorAction","ICodeEditorService","EditorFontLigatures","LineTokens","Position","editorLineNumbers","RenderLineInput","renderViewLine2","renderViewLine","ViewLineRenderingData","ContextKeyExpr","scrollbarShadow","registerThemingParticipant","ThemeIcon","Codicon","registerIcon","ILanguageService","DIFF_LINES_PADDING","DiffEntry","constructor","originalLineStart","originalLineEnd","modifiedLineStart","modifiedLineEnd","getType","Diff","entries","diffReviewInsertIcon","add","localize","diffReviewRemoveIcon","remove","diffReviewCloseIcon","close","DiffReview","diffEditor","_languageService","_width","_diffEditor","_isVisible","shadow","document","createElement","setClassName","actionBarContainer","_actionBar","_register","domNode","push","asClassName","hide","label","icon","_content","setAttribute","scrollbar","appendChild","getDomNode","onDidUpdateDiff","_diffs","_compute","_render","getModifiedEditor","onDidChangeCursorPosition","addStandardDisposableListener","preventDefault","row","findParentWithClass","_goToRow","equals","_getNextRow","_getPrevRow","accept","_currentDiff","prev","index","currentIndex","len","_findDiffIndex","getPosition","setPosition","setSelection","startColumn","startLineNumber","endColumn","endLineNumber","doLayout","jumpToLineNumber","current","_getCurrentFocusedRow","lineNumber","parseInt","getAttribute","isNaN","revealPosition","updateOptions","readOnly","focus","_getFirstRow","previousElementSibling","nextElementSibling","querySelector","activeElement","test","className","tabIndex","scanDomNode","isVisible","layout","top","width","height","setTop","setWidth","setHeight","setDisplay","lineChanges","getLineChanges","originalModel","getOriginalEditor","getModel","modifiedModel","_mergeAdjacent","getLineCount","originalLineCount","modifiedLineCount","diffs","diffsLength","lineChange","originalStart","originalStartLineNumber","originalEnd","originalEndLineNumber","modifiedStart","modifiedStartLineNumber","modifiedEnd","modifiedEndLineNumber","rLength","originalEqualAbove","modifiedEqualAbove","minOriginal","minModified","prevLineChange","fromOriginal","fromModified","delta","originalEqualBelow","modifiedEqualBelow","maxOriginal","maxModified","nextLineChange","toOriginal","toModified","curr","thisDiff","currLast","thisFirst","concat","slice","pos","diff","lastModifiedLine","originalOptions","getOptions","modifiedOptions","originalModelOpts","modifiedModelOpts","clearNode","diffIndex","container","get","minOriginalLine","maxOriginalLine","minModifiedLine","maxModifiedLine","diffEntry","header","cell","originalChangedLinesCnt","modifiedChangedLinesCnt","createTextNode","String","getAriaLines","lines","originalChangedLinesCntAria","modifiedChangedLinesCntAria","comment","lineHeight","modLine","_renderSection","languageIdCodec","dest","type","rowClassName","lineNumbersExtraClassName","spacerClassName","spacerIcon","cnt","Math","max","originalLayoutInfo","originalLineNumbersWidth","glyphMarginWidth","lineNumbersWidth","modifiedLayoutInfo","modifiedLineNumbersWidth","originalLine","modifiedLine","style","minWidth","originalLineNumber","innerText","modifiedLineNumber","paddingRight","spacer","spacerCodicon","lineContent","html","_renderLine","tabSize","_ttPolicy","createHTML","insertAdjacentHTML","getLineContent","ariaLabel","model","options","fontInfo","lineTokens","createEmpty","isBasicASCII","mightContainNonBasicASCII","containsRTL","mightContainRTL","isMonospace","canUseHalfwidthRightwardsArrow","spaceWidth","middotWidth","wsmiddotWidth","OFF","window","trustedTypes","createPolicy","theme","collector","lineNumbers","getColor","addRule","DiffReviewNext","id","alias","precondition","has","kbOpts","kbExpr","primary","weight","run","accessor","editor","findFocusedDiffEditor","diffReviewNext","DiffReviewPrev","diffReviewPrev","codeEditorService","diffEditors","listDiffEditors","activeCodeEditor","getActiveCodeEditor","getId"],"sources":["/home/deathblade287/Desktop/AI-MODELS-TESTING/react-app/node_modules/monaco-editor/esm/vs/editor/browser/widget/diffReview.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar _a;\nimport './media/diffReview.css';\nimport * as nls from '../../../nls.js';\nimport * as dom from '../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../base/browser/fastDomNode.js';\nimport { ActionBar } from '../../../base/browser/ui/actionbar/actionbar.js';\nimport { DomScrollableElement } from '../../../base/browser/ui/scrollbar/scrollableElement.js';\nimport { Action } from '../../../base/common/actions.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { applyFontInfo } from '../config/domFontInfo.js';\nimport { EditorAction, registerEditorAction } from '../editorExtensions.js';\nimport { ICodeEditorService } from '../services/codeEditorService.js';\nimport { EditorFontLigatures } from '../../common/config/editorOptions.js';\nimport { LineTokens } from '../../common/tokens/lineTokens.js';\nimport { Position } from '../../common/core/position.js';\nimport { editorLineNumbers } from '../../common/core/editorColorRegistry.js';\nimport { RenderLineInput, renderViewLine2 as renderViewLine } from '../../common/viewLayout/viewLineRenderer.js';\nimport { ViewLineRenderingData } from '../../common/viewModel.js';\nimport { ContextKeyExpr } from '../../../platform/contextkey/common/contextkey.js';\nimport { scrollbarShadow } from '../../../platform/theme/common/colorRegistry.js';\nimport { registerThemingParticipant, ThemeIcon } from '../../../platform/theme/common/themeService.js';\nimport { Codicon } from '../../../base/common/codicons.js';\nimport { registerIcon } from '../../../platform/theme/common/iconRegistry.js';\nimport { ILanguageService } from '../../common/languages/language.js';\nconst DIFF_LINES_PADDING = 3;\nclass DiffEntry {\n    constructor(originalLineStart, originalLineEnd, modifiedLineStart, modifiedLineEnd) {\n        this.originalLineStart = originalLineStart;\n        this.originalLineEnd = originalLineEnd;\n        this.modifiedLineStart = modifiedLineStart;\n        this.modifiedLineEnd = modifiedLineEnd;\n    }\n    getType() {\n        if (this.originalLineStart === 0) {\n            return 1 /* DiffEntryType.Insert */;\n        }\n        if (this.modifiedLineStart === 0) {\n            return 2 /* DiffEntryType.Delete */;\n        }\n        return 0 /* DiffEntryType.Equal */;\n    }\n}\nclass Diff {\n    constructor(entries) {\n        this.entries = entries;\n    }\n}\nconst diffReviewInsertIcon = registerIcon('diff-review-insert', Codicon.add, nls.localize('diffReviewInsertIcon', 'Icon for \\'Insert\\' in diff review.'));\nconst diffReviewRemoveIcon = registerIcon('diff-review-remove', Codicon.remove, nls.localize('diffReviewRemoveIcon', 'Icon for \\'Remove\\' in diff review.'));\nconst diffReviewCloseIcon = registerIcon('diff-review-close', Codicon.close, nls.localize('diffReviewCloseIcon', 'Icon for \\'Close\\' in diff review.'));\nlet DiffReview = class DiffReview extends Disposable {\n    constructor(diffEditor, _languageService) {\n        super();\n        this._languageService = _languageService;\n        this._width = 0;\n        this._diffEditor = diffEditor;\n        this._isVisible = false;\n        this.shadow = createFastDomNode(document.createElement('div'));\n        this.shadow.setClassName('diff-review-shadow');\n        this.actionBarContainer = createFastDomNode(document.createElement('div'));\n        this.actionBarContainer.setClassName('diff-review-actions');\n        this._actionBar = this._register(new ActionBar(this.actionBarContainer.domNode));\n        this._actionBar.push(new Action('diffreview.close', nls.localize('label.close', \"Close\"), 'close-diff-review ' + ThemeIcon.asClassName(diffReviewCloseIcon), true, () => __awaiter(this, void 0, void 0, function* () { return this.hide(); })), { label: false, icon: true });\n        this.domNode = createFastDomNode(document.createElement('div'));\n        this.domNode.setClassName('diff-review monaco-editor-background');\n        this._content = createFastDomNode(document.createElement('div'));\n        this._content.setClassName('diff-review-content');\n        this._content.setAttribute('role', 'code');\n        this.scrollbar = this._register(new DomScrollableElement(this._content.domNode, {}));\n        this.domNode.domNode.appendChild(this.scrollbar.getDomNode());\n        this._register(diffEditor.onDidUpdateDiff(() => {\n            if (!this._isVisible) {\n                return;\n            }\n            this._diffs = this._compute();\n            this._render();\n        }));\n        this._register(diffEditor.getModifiedEditor().onDidChangeCursorPosition(() => {\n            if (!this._isVisible) {\n                return;\n            }\n            this._render();\n        }));\n        this._register(dom.addStandardDisposableListener(this.domNode.domNode, 'click', (e) => {\n            e.preventDefault();\n            const row = dom.findParentWithClass(e.target, 'diff-review-row');\n            if (row) {\n                this._goToRow(row);\n            }\n        }));\n        this._register(dom.addStandardDisposableListener(this.domNode.domNode, 'keydown', (e) => {\n            if (e.equals(18 /* KeyCode.DownArrow */)\n                || e.equals(2048 /* KeyMod.CtrlCmd */ | 18 /* KeyCode.DownArrow */)\n                || e.equals(512 /* KeyMod.Alt */ | 18 /* KeyCode.DownArrow */)) {\n                e.preventDefault();\n                this._goToRow(this._getNextRow());\n            }\n            if (e.equals(16 /* KeyCode.UpArrow */)\n                || e.equals(2048 /* KeyMod.CtrlCmd */ | 16 /* KeyCode.UpArrow */)\n                || e.equals(512 /* KeyMod.Alt */ | 16 /* KeyCode.UpArrow */)) {\n                e.preventDefault();\n                this._goToRow(this._getPrevRow());\n            }\n            if (e.equals(9 /* KeyCode.Escape */)\n                || e.equals(2048 /* KeyMod.CtrlCmd */ | 9 /* KeyCode.Escape */)\n                || e.equals(512 /* KeyMod.Alt */ | 9 /* KeyCode.Escape */)\n                || e.equals(1024 /* KeyMod.Shift */ | 9 /* KeyCode.Escape */)) {\n                e.preventDefault();\n                this.hide();\n            }\n            if (e.equals(10 /* KeyCode.Space */)\n                || e.equals(3 /* KeyCode.Enter */)) {\n                e.preventDefault();\n                this.accept();\n            }\n        }));\n        this._diffs = [];\n        this._currentDiff = null;\n    }\n    prev() {\n        let index = 0;\n        if (!this._isVisible) {\n            this._diffs = this._compute();\n        }\n        if (this._isVisible) {\n            let currentIndex = -1;\n            for (let i = 0, len = this._diffs.length; i < len; i++) {\n                if (this._diffs[i] === this._currentDiff) {\n                    currentIndex = i;\n                    break;\n                }\n            }\n            index = (this._diffs.length + currentIndex - 1);\n        }\n        else {\n            index = this._findDiffIndex(this._diffEditor.getPosition());\n        }\n        if (this._diffs.length === 0) {\n            // Nothing to do\n            return;\n        }\n        index = index % this._diffs.length;\n        const entries = this._diffs[index].entries;\n        this._diffEditor.setPosition(new Position(entries[0].modifiedLineStart, 1));\n        this._diffEditor.setSelection({ startColumn: 1, startLineNumber: entries[0].modifiedLineStart, endColumn: 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */, endLineNumber: entries[entries.length - 1].modifiedLineEnd });\n        this._isVisible = true;\n        this._diffEditor.doLayout();\n        this._render();\n        this._goToRow(this._getNextRow());\n    }\n    next() {\n        let index = 0;\n        if (!this._isVisible) {\n            this._diffs = this._compute();\n        }\n        if (this._isVisible) {\n            let currentIndex = -1;\n            for (let i = 0, len = this._diffs.length; i < len; i++) {\n                if (this._diffs[i] === this._currentDiff) {\n                    currentIndex = i;\n                    break;\n                }\n            }\n            index = (currentIndex + 1);\n        }\n        else {\n            index = this._findDiffIndex(this._diffEditor.getPosition());\n        }\n        if (this._diffs.length === 0) {\n            // Nothing to do\n            return;\n        }\n        index = index % this._diffs.length;\n        const entries = this._diffs[index].entries;\n        this._diffEditor.setPosition(new Position(entries[0].modifiedLineStart, 1));\n        this._diffEditor.setSelection({ startColumn: 1, startLineNumber: entries[0].modifiedLineStart, endColumn: 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */, endLineNumber: entries[entries.length - 1].modifiedLineEnd });\n        this._isVisible = true;\n        this._diffEditor.doLayout();\n        this._render();\n        this._goToRow(this._getNextRow());\n    }\n    accept() {\n        let jumpToLineNumber = -1;\n        const current = this._getCurrentFocusedRow();\n        if (current) {\n            const lineNumber = parseInt(current.getAttribute('data-line'), 10);\n            if (!isNaN(lineNumber)) {\n                jumpToLineNumber = lineNumber;\n            }\n        }\n        this.hide();\n        if (jumpToLineNumber !== -1) {\n            this._diffEditor.setPosition(new Position(jumpToLineNumber, 1));\n            this._diffEditor.revealPosition(new Position(jumpToLineNumber, 1), 1 /* ScrollType.Immediate */);\n        }\n    }\n    hide() {\n        this._isVisible = false;\n        this._diffEditor.updateOptions({ readOnly: false });\n        this._diffEditor.focus();\n        this._diffEditor.doLayout();\n        this._render();\n    }\n    _getPrevRow() {\n        const current = this._getCurrentFocusedRow();\n        if (!current) {\n            return this._getFirstRow();\n        }\n        if (current.previousElementSibling) {\n            return current.previousElementSibling;\n        }\n        return current;\n    }\n    _getNextRow() {\n        const current = this._getCurrentFocusedRow();\n        if (!current) {\n            return this._getFirstRow();\n        }\n        if (current.nextElementSibling) {\n            return current.nextElementSibling;\n        }\n        return current;\n    }\n    _getFirstRow() {\n        return this.domNode.domNode.querySelector('.diff-review-row');\n    }\n    _getCurrentFocusedRow() {\n        const result = document.activeElement;\n        if (result && /diff-review-row/.test(result.className)) {\n            return result;\n        }\n        return null;\n    }\n    _goToRow(row) {\n        const prev = this._getCurrentFocusedRow();\n        row.tabIndex = 0;\n        row.focus();\n        if (prev && prev !== row) {\n            prev.tabIndex = -1;\n        }\n        this.scrollbar.scanDomNode();\n    }\n    isVisible() {\n        return this._isVisible;\n    }\n    layout(top, width, height) {\n        this._width = width;\n        this.shadow.setTop(top - 6);\n        this.shadow.setWidth(width);\n        this.shadow.setHeight(this._isVisible ? 6 : 0);\n        this.domNode.setTop(top);\n        this.domNode.setWidth(width);\n        this.domNode.setHeight(height);\n        this._content.setHeight(height);\n        this._content.setWidth(width);\n        if (this._isVisible) {\n            this.actionBarContainer.setAttribute('aria-hidden', 'false');\n            this.actionBarContainer.setDisplay('block');\n        }\n        else {\n            this.actionBarContainer.setAttribute('aria-hidden', 'true');\n            this.actionBarContainer.setDisplay('none');\n        }\n    }\n    _compute() {\n        const lineChanges = this._diffEditor.getLineChanges();\n        if (!lineChanges || lineChanges.length === 0) {\n            return [];\n        }\n        const originalModel = this._diffEditor.getOriginalEditor().getModel();\n        const modifiedModel = this._diffEditor.getModifiedEditor().getModel();\n        if (!originalModel || !modifiedModel) {\n            return [];\n        }\n        return DiffReview._mergeAdjacent(lineChanges, originalModel.getLineCount(), modifiedModel.getLineCount());\n    }\n    static _mergeAdjacent(lineChanges, originalLineCount, modifiedLineCount) {\n        if (!lineChanges || lineChanges.length === 0) {\n            return [];\n        }\n        const diffs = [];\n        let diffsLength = 0;\n        for (let i = 0, len = lineChanges.length; i < len; i++) {\n            const lineChange = lineChanges[i];\n            const originalStart = lineChange.originalStartLineNumber;\n            const originalEnd = lineChange.originalEndLineNumber;\n            const modifiedStart = lineChange.modifiedStartLineNumber;\n            const modifiedEnd = lineChange.modifiedEndLineNumber;\n            const r = [];\n            let rLength = 0;\n            // Emit before anchors\n            {\n                const originalEqualAbove = (originalEnd === 0 ? originalStart : originalStart - 1);\n                const modifiedEqualAbove = (modifiedEnd === 0 ? modifiedStart : modifiedStart - 1);\n                // Make sure we don't step into the previous diff\n                let minOriginal = 1;\n                let minModified = 1;\n                if (i > 0) {\n                    const prevLineChange = lineChanges[i - 1];\n                    if (prevLineChange.originalEndLineNumber === 0) {\n                        minOriginal = prevLineChange.originalStartLineNumber + 1;\n                    }\n                    else {\n                        minOriginal = prevLineChange.originalEndLineNumber + 1;\n                    }\n                    if (prevLineChange.modifiedEndLineNumber === 0) {\n                        minModified = prevLineChange.modifiedStartLineNumber + 1;\n                    }\n                    else {\n                        minModified = prevLineChange.modifiedEndLineNumber + 1;\n                    }\n                }\n                let fromOriginal = originalEqualAbove - DIFF_LINES_PADDING + 1;\n                let fromModified = modifiedEqualAbove - DIFF_LINES_PADDING + 1;\n                if (fromOriginal < minOriginal) {\n                    const delta = minOriginal - fromOriginal;\n                    fromOriginal = fromOriginal + delta;\n                    fromModified = fromModified + delta;\n                }\n                if (fromModified < minModified) {\n                    const delta = minModified - fromModified;\n                    fromOriginal = fromOriginal + delta;\n                    fromModified = fromModified + delta;\n                }\n                r[rLength++] = new DiffEntry(fromOriginal, originalEqualAbove, fromModified, modifiedEqualAbove);\n            }\n            // Emit deleted lines\n            {\n                if (originalEnd !== 0) {\n                    r[rLength++] = new DiffEntry(originalStart, originalEnd, 0, 0);\n                }\n            }\n            // Emit inserted lines\n            {\n                if (modifiedEnd !== 0) {\n                    r[rLength++] = new DiffEntry(0, 0, modifiedStart, modifiedEnd);\n                }\n            }\n            // Emit after anchors\n            {\n                const originalEqualBelow = (originalEnd === 0 ? originalStart + 1 : originalEnd + 1);\n                const modifiedEqualBelow = (modifiedEnd === 0 ? modifiedStart + 1 : modifiedEnd + 1);\n                // Make sure we don't step into the next diff\n                let maxOriginal = originalLineCount;\n                let maxModified = modifiedLineCount;\n                if (i + 1 < len) {\n                    const nextLineChange = lineChanges[i + 1];\n                    if (nextLineChange.originalEndLineNumber === 0) {\n                        maxOriginal = nextLineChange.originalStartLineNumber;\n                    }\n                    else {\n                        maxOriginal = nextLineChange.originalStartLineNumber - 1;\n                    }\n                    if (nextLineChange.modifiedEndLineNumber === 0) {\n                        maxModified = nextLineChange.modifiedStartLineNumber;\n                    }\n                    else {\n                        maxModified = nextLineChange.modifiedStartLineNumber - 1;\n                    }\n                }\n                let toOriginal = originalEqualBelow + DIFF_LINES_PADDING - 1;\n                let toModified = modifiedEqualBelow + DIFF_LINES_PADDING - 1;\n                if (toOriginal > maxOriginal) {\n                    const delta = maxOriginal - toOriginal;\n                    toOriginal = toOriginal + delta;\n                    toModified = toModified + delta;\n                }\n                if (toModified > maxModified) {\n                    const delta = maxModified - toModified;\n                    toOriginal = toOriginal + delta;\n                    toModified = toModified + delta;\n                }\n                r[rLength++] = new DiffEntry(originalEqualBelow, toOriginal, modifiedEqualBelow, toModified);\n            }\n            diffs[diffsLength++] = new Diff(r);\n        }\n        // Merge adjacent diffs\n        let curr = diffs[0].entries;\n        const r = [];\n        let rLength = 0;\n        for (let i = 1, len = diffs.length; i < len; i++) {\n            const thisDiff = diffs[i].entries;\n            const currLast = curr[curr.length - 1];\n            const thisFirst = thisDiff[0];\n            if (currLast.getType() === 0 /* DiffEntryType.Equal */\n                && thisFirst.getType() === 0 /* DiffEntryType.Equal */\n                && thisFirst.originalLineStart <= currLast.originalLineEnd) {\n                // We are dealing with equal lines that overlap\n                curr[curr.length - 1] = new DiffEntry(currLast.originalLineStart, thisFirst.originalLineEnd, currLast.modifiedLineStart, thisFirst.modifiedLineEnd);\n                curr = curr.concat(thisDiff.slice(1));\n                continue;\n            }\n            r[rLength++] = new Diff(curr);\n            curr = thisDiff;\n        }\n        r[rLength++] = new Diff(curr);\n        return r;\n    }\n    _findDiffIndex(pos) {\n        const lineNumber = pos.lineNumber;\n        for (let i = 0, len = this._diffs.length; i < len; i++) {\n            const diff = this._diffs[i].entries;\n            const lastModifiedLine = diff[diff.length - 1].modifiedLineEnd;\n            if (lineNumber <= lastModifiedLine) {\n                return i;\n            }\n        }\n        return 0;\n    }\n    _render() {\n        const originalOptions = this._diffEditor.getOriginalEditor().getOptions();\n        const modifiedOptions = this._diffEditor.getModifiedEditor().getOptions();\n        const originalModel = this._diffEditor.getOriginalEditor().getModel();\n        const modifiedModel = this._diffEditor.getModifiedEditor().getModel();\n        const originalModelOpts = originalModel.getOptions();\n        const modifiedModelOpts = modifiedModel.getOptions();\n        if (!this._isVisible || !originalModel || !modifiedModel) {\n            dom.clearNode(this._content.domNode);\n            this._currentDiff = null;\n            this.scrollbar.scanDomNode();\n            return;\n        }\n        this._diffEditor.updateOptions({ readOnly: true });\n        const diffIndex = this._findDiffIndex(this._diffEditor.getPosition());\n        if (this._diffs[diffIndex] === this._currentDiff) {\n            return;\n        }\n        this._currentDiff = this._diffs[diffIndex];\n        const diffs = this._diffs[diffIndex].entries;\n        const container = document.createElement('div');\n        container.className = 'diff-review-table';\n        container.setAttribute('role', 'list');\n        container.setAttribute('aria-label', 'Difference review. Use \"Stage | Unstage | Revert Selected Ranges\" commands');\n        applyFontInfo(container, modifiedOptions.get(46 /* EditorOption.fontInfo */));\n        let minOriginalLine = 0;\n        let maxOriginalLine = 0;\n        let minModifiedLine = 0;\n        let maxModifiedLine = 0;\n        for (let i = 0, len = diffs.length; i < len; i++) {\n            const diffEntry = diffs[i];\n            const originalLineStart = diffEntry.originalLineStart;\n            const originalLineEnd = diffEntry.originalLineEnd;\n            const modifiedLineStart = diffEntry.modifiedLineStart;\n            const modifiedLineEnd = diffEntry.modifiedLineEnd;\n            if (originalLineStart !== 0 && ((minOriginalLine === 0 || originalLineStart < minOriginalLine))) {\n                minOriginalLine = originalLineStart;\n            }\n            if (originalLineEnd !== 0 && ((maxOriginalLine === 0 || originalLineEnd > maxOriginalLine))) {\n                maxOriginalLine = originalLineEnd;\n            }\n            if (modifiedLineStart !== 0 && ((minModifiedLine === 0 || modifiedLineStart < minModifiedLine))) {\n                minModifiedLine = modifiedLineStart;\n            }\n            if (modifiedLineEnd !== 0 && ((maxModifiedLine === 0 || modifiedLineEnd > maxModifiedLine))) {\n                maxModifiedLine = modifiedLineEnd;\n            }\n        }\n        const header = document.createElement('div');\n        header.className = 'diff-review-row';\n        const cell = document.createElement('div');\n        cell.className = 'diff-review-cell diff-review-summary';\n        const originalChangedLinesCnt = maxOriginalLine - minOriginalLine + 1;\n        const modifiedChangedLinesCnt = maxModifiedLine - minModifiedLine + 1;\n        cell.appendChild(document.createTextNode(`${diffIndex + 1}/${this._diffs.length}: @@ -${minOriginalLine},${originalChangedLinesCnt} +${minModifiedLine},${modifiedChangedLinesCnt} @@`));\n        header.setAttribute('data-line', String(minModifiedLine));\n        const getAriaLines = (lines) => {\n            if (lines === 0) {\n                return nls.localize('no_lines_changed', \"no lines changed\");\n            }\n            else if (lines === 1) {\n                return nls.localize('one_line_changed', \"1 line changed\");\n            }\n            else {\n                return nls.localize('more_lines_changed', \"{0} lines changed\", lines);\n            }\n        };\n        const originalChangedLinesCntAria = getAriaLines(originalChangedLinesCnt);\n        const modifiedChangedLinesCntAria = getAriaLines(modifiedChangedLinesCnt);\n        header.setAttribute('aria-label', nls.localize({\n            key: 'header',\n            comment: [\n                'This is the ARIA label for a git diff header.',\n                'A git diff header looks like this: @@ -154,12 +159,39 @@.',\n                'That encodes that at original line 154 (which is now line 159), 12 lines were removed/changed with 39 lines.',\n                'Variables 0 and 1 refer to the diff index out of total number of diffs.',\n                'Variables 2 and 4 will be numbers (a line number).',\n                'Variables 3 and 5 will be \"no lines changed\", \"1 line changed\" or \"X lines changed\", localized separately.'\n            ]\n        }, \"Difference {0} of {1}: original line {2}, {3}, modified line {4}, {5}\", (diffIndex + 1), this._diffs.length, minOriginalLine, originalChangedLinesCntAria, minModifiedLine, modifiedChangedLinesCntAria));\n        header.appendChild(cell);\n        // @@ -504,7 +517,7 @@\n        header.setAttribute('role', 'listitem');\n        container.appendChild(header);\n        const lineHeight = modifiedOptions.get(61 /* EditorOption.lineHeight */);\n        let modLine = minModifiedLine;\n        for (let i = 0, len = diffs.length; i < len; i++) {\n            const diffEntry = diffs[i];\n            DiffReview._renderSection(container, diffEntry, modLine, lineHeight, this._width, originalOptions, originalModel, originalModelOpts, modifiedOptions, modifiedModel, modifiedModelOpts, this._languageService.languageIdCodec);\n            if (diffEntry.modifiedLineStart !== 0) {\n                modLine = diffEntry.modifiedLineEnd;\n            }\n        }\n        dom.clearNode(this._content.domNode);\n        this._content.domNode.appendChild(container);\n        this.scrollbar.scanDomNode();\n    }\n    static _renderSection(dest, diffEntry, modLine, lineHeight, width, originalOptions, originalModel, originalModelOpts, modifiedOptions, modifiedModel, modifiedModelOpts, languageIdCodec) {\n        const type = diffEntry.getType();\n        let rowClassName = 'diff-review-row';\n        let lineNumbersExtraClassName = '';\n        const spacerClassName = 'diff-review-spacer';\n        let spacerIcon = null;\n        switch (type) {\n            case 1 /* DiffEntryType.Insert */:\n                rowClassName = 'diff-review-row line-insert';\n                lineNumbersExtraClassName = ' char-insert';\n                spacerIcon = diffReviewInsertIcon;\n                break;\n            case 2 /* DiffEntryType.Delete */:\n                rowClassName = 'diff-review-row line-delete';\n                lineNumbersExtraClassName = ' char-delete';\n                spacerIcon = diffReviewRemoveIcon;\n                break;\n        }\n        const originalLineStart = diffEntry.originalLineStart;\n        const originalLineEnd = diffEntry.originalLineEnd;\n        const modifiedLineStart = diffEntry.modifiedLineStart;\n        const modifiedLineEnd = diffEntry.modifiedLineEnd;\n        const cnt = Math.max(modifiedLineEnd - modifiedLineStart, originalLineEnd - originalLineStart);\n        const originalLayoutInfo = originalOptions.get(133 /* EditorOption.layoutInfo */);\n        const originalLineNumbersWidth = originalLayoutInfo.glyphMarginWidth + originalLayoutInfo.lineNumbersWidth;\n        const modifiedLayoutInfo = modifiedOptions.get(133 /* EditorOption.layoutInfo */);\n        const modifiedLineNumbersWidth = 10 + modifiedLayoutInfo.glyphMarginWidth + modifiedLayoutInfo.lineNumbersWidth;\n        for (let i = 0; i <= cnt; i++) {\n            const originalLine = (originalLineStart === 0 ? 0 : originalLineStart + i);\n            const modifiedLine = (modifiedLineStart === 0 ? 0 : modifiedLineStart + i);\n            const row = document.createElement('div');\n            row.style.minWidth = width + 'px';\n            row.className = rowClassName;\n            row.setAttribute('role', 'listitem');\n            if (modifiedLine !== 0) {\n                modLine = modifiedLine;\n            }\n            row.setAttribute('data-line', String(modLine));\n            const cell = document.createElement('div');\n            cell.className = 'diff-review-cell';\n            cell.style.height = `${lineHeight}px`;\n            row.appendChild(cell);\n            const originalLineNumber = document.createElement('span');\n            originalLineNumber.style.width = (originalLineNumbersWidth + 'px');\n            originalLineNumber.style.minWidth = (originalLineNumbersWidth + 'px');\n            originalLineNumber.className = 'diff-review-line-number' + lineNumbersExtraClassName;\n            if (originalLine !== 0) {\n                originalLineNumber.appendChild(document.createTextNode(String(originalLine)));\n            }\n            else {\n                originalLineNumber.innerText = '\\u00a0';\n            }\n            cell.appendChild(originalLineNumber);\n            const modifiedLineNumber = document.createElement('span');\n            modifiedLineNumber.style.width = (modifiedLineNumbersWidth + 'px');\n            modifiedLineNumber.style.minWidth = (modifiedLineNumbersWidth + 'px');\n            modifiedLineNumber.style.paddingRight = '10px';\n            modifiedLineNumber.className = 'diff-review-line-number' + lineNumbersExtraClassName;\n            if (modifiedLine !== 0) {\n                modifiedLineNumber.appendChild(document.createTextNode(String(modifiedLine)));\n            }\n            else {\n                modifiedLineNumber.innerText = '\\u00a0';\n            }\n            cell.appendChild(modifiedLineNumber);\n            const spacer = document.createElement('span');\n            spacer.className = spacerClassName;\n            if (spacerIcon) {\n                const spacerCodicon = document.createElement('span');\n                spacerCodicon.className = ThemeIcon.asClassName(spacerIcon);\n                spacerCodicon.innerText = '\\u00a0\\u00a0';\n                spacer.appendChild(spacerCodicon);\n            }\n            else {\n                spacer.innerText = '\\u00a0\\u00a0';\n            }\n            cell.appendChild(spacer);\n            let lineContent;\n            if (modifiedLine !== 0) {\n                let html = this._renderLine(modifiedModel, modifiedOptions, modifiedModelOpts.tabSize, modifiedLine, languageIdCodec);\n                if (DiffReview._ttPolicy) {\n                    html = DiffReview._ttPolicy.createHTML(html);\n                }\n                cell.insertAdjacentHTML('beforeend', html);\n                lineContent = modifiedModel.getLineContent(modifiedLine);\n            }\n            else {\n                let html = this._renderLine(originalModel, originalOptions, originalModelOpts.tabSize, originalLine, languageIdCodec);\n                if (DiffReview._ttPolicy) {\n                    html = DiffReview._ttPolicy.createHTML(html);\n                }\n                cell.insertAdjacentHTML('beforeend', html);\n                lineContent = originalModel.getLineContent(originalLine);\n            }\n            if (lineContent.length === 0) {\n                lineContent = nls.localize('blankLine', \"blank\");\n            }\n            let ariaLabel = '';\n            switch (type) {\n                case 0 /* DiffEntryType.Equal */:\n                    if (originalLine === modifiedLine) {\n                        ariaLabel = nls.localize({ key: 'unchangedLine', comment: ['The placeholders are contents of the line and should not be translated.'] }, \"{0} unchanged line {1}\", lineContent, originalLine);\n                    }\n                    else {\n                        ariaLabel = nls.localize('equalLine', \"{0} original line {1} modified line {2}\", lineContent, originalLine, modifiedLine);\n                    }\n                    break;\n                case 1 /* DiffEntryType.Insert */:\n                    ariaLabel = nls.localize('insertLine', \"+ {0} modified line {1}\", lineContent, modifiedLine);\n                    break;\n                case 2 /* DiffEntryType.Delete */:\n                    ariaLabel = nls.localize('deleteLine', \"- {0} original line {1}\", lineContent, originalLine);\n                    break;\n            }\n            row.setAttribute('aria-label', ariaLabel);\n            dest.appendChild(row);\n        }\n    }\n    static _renderLine(model, options, tabSize, lineNumber, languageIdCodec) {\n        const lineContent = model.getLineContent(lineNumber);\n        const fontInfo = options.get(46 /* EditorOption.fontInfo */);\n        const lineTokens = LineTokens.createEmpty(lineContent, languageIdCodec);\n        const isBasicASCII = ViewLineRenderingData.isBasicASCII(lineContent, model.mightContainNonBasicASCII());\n        const containsRTL = ViewLineRenderingData.containsRTL(lineContent, isBasicASCII, model.mightContainRTL());\n        const r = renderViewLine(new RenderLineInput((fontInfo.isMonospace && !options.get(29 /* EditorOption.disableMonospaceOptimizations */)), fontInfo.canUseHalfwidthRightwardsArrow, lineContent, false, isBasicASCII, containsRTL, 0, lineTokens, [], tabSize, 0, fontInfo.spaceWidth, fontInfo.middotWidth, fontInfo.wsmiddotWidth, options.get(107 /* EditorOption.stopRenderingLineAfter */), options.get(90 /* EditorOption.renderWhitespace */), options.get(85 /* EditorOption.renderControlCharacters */), options.get(47 /* EditorOption.fontLigatures */) !== EditorFontLigatures.OFF, null));\n        return r.html;\n    }\n};\nDiffReview._ttPolicy = (_a = window.trustedTypes) === null || _a === void 0 ? void 0 : _a.createPolicy('diffReview', { createHTML: value => value });\nDiffReview = __decorate([\n    __param(1, ILanguageService)\n], DiffReview);\nexport { DiffReview };\n// theming\nregisterThemingParticipant((theme, collector) => {\n    const lineNumbers = theme.getColor(editorLineNumbers);\n    if (lineNumbers) {\n        collector.addRule(`.monaco-diff-editor .diff-review-line-number { color: ${lineNumbers}; }`);\n    }\n    const shadow = theme.getColor(scrollbarShadow);\n    if (shadow) {\n        collector.addRule(`.monaco-diff-editor .diff-review-shadow { box-shadow: ${shadow} 0 -6px 6px -6px inset; }`);\n    }\n});\nclass DiffReviewNext extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.diffReview.next',\n            label: nls.localize('editor.action.diffReview.next', \"Go to Next Difference\"),\n            alias: 'Go to Next Difference',\n            precondition: ContextKeyExpr.has('isInDiffEditor'),\n            kbOpts: {\n                kbExpr: null,\n                primary: 65 /* KeyCode.F7 */,\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    run(accessor, editor) {\n        const diffEditor = findFocusedDiffEditor(accessor);\n        if (diffEditor) {\n            diffEditor.diffReviewNext();\n        }\n    }\n}\nclass DiffReviewPrev extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.diffReview.prev',\n            label: nls.localize('editor.action.diffReview.prev', \"Go to Previous Difference\"),\n            alias: 'Go to Previous Difference',\n            precondition: ContextKeyExpr.has('isInDiffEditor'),\n            kbOpts: {\n                kbExpr: null,\n                primary: 1024 /* KeyMod.Shift */ | 65 /* KeyCode.F7 */,\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    run(accessor, editor) {\n        const diffEditor = findFocusedDiffEditor(accessor);\n        if (diffEditor) {\n            diffEditor.diffReviewPrev();\n        }\n    }\n}\nfunction findFocusedDiffEditor(accessor) {\n    const codeEditorService = accessor.get(ICodeEditorService);\n    const diffEditors = codeEditorService.listDiffEditors();\n    const activeCodeEditor = codeEditorService.getActiveCodeEditor();\n    if (!activeCodeEditor) {\n        return null;\n    }\n    for (let i = 0, len = diffEditors.length; i < len; i++) {\n        const diffEditor = diffEditors[i];\n        if (diffEditor.getModifiedEditor().getId() === activeCodeEditor.getId() || diffEditor.getOriginalEditor().getId() === activeCodeEditor.getId()) {\n            return diffEditor;\n        }\n    }\n    return null;\n}\nregisterEditorAction(DiffReviewNext);\nregisterEditorAction(DiffReviewPrev);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}