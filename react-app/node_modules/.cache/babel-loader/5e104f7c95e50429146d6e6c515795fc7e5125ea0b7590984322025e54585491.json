{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { KeyCodeUtils, IMMUTABLE_CODE_TO_KEY_CODE } from '../../../base/common/keyCodes.js';\nimport { ChordKeybinding, SimpleKeybinding } from '../../../base/common/keybindings.js';\nimport { BaseResolvedKeybinding } from './baseResolvedKeybinding.js';\nimport { removeElementsAfterNulls } from './resolvedKeybindingItem.js';\n/**\n * Do not instantiate. Use KeybindingService to get a ResolvedKeybinding seeded with information about the current kb layout.\n */\nexport class USLayoutResolvedKeybinding extends BaseResolvedKeybinding {\n  constructor(actual, os) {\n    super(os, actual.parts);\n  }\n  _keyCodeToUILabel(keyCode) {\n    if (this._os === 2 /* OperatingSystem.Macintosh */) {\n      switch (keyCode) {\n        case 15 /* KeyCode.LeftArrow */:\n          return '←';\n        case 16 /* KeyCode.UpArrow */:\n          return '↑';\n        case 17 /* KeyCode.RightArrow */:\n          return '→';\n        case 18 /* KeyCode.DownArrow */:\n          return '↓';\n      }\n    }\n    return KeyCodeUtils.toString(keyCode);\n  }\n  _getLabel(keybinding) {\n    if (keybinding.isDuplicateModifierCase()) {\n      return '';\n    }\n    return this._keyCodeToUILabel(keybinding.keyCode);\n  }\n  _getAriaLabel(keybinding) {\n    if (keybinding.isDuplicateModifierCase()) {\n      return '';\n    }\n    return KeyCodeUtils.toString(keybinding.keyCode);\n  }\n  _getElectronAccelerator(keybinding) {\n    return KeyCodeUtils.toElectronAccelerator(keybinding.keyCode);\n  }\n  _getDispatchPart(keybinding) {\n    return USLayoutResolvedKeybinding.getDispatchStr(keybinding);\n  }\n  static getDispatchStr(keybinding) {\n    if (keybinding.isModifierKey()) {\n      return null;\n    }\n    let result = '';\n    if (keybinding.ctrlKey) {\n      result += 'ctrl+';\n    }\n    if (keybinding.shiftKey) {\n      result += 'shift+';\n    }\n    if (keybinding.altKey) {\n      result += 'alt+';\n    }\n    if (keybinding.metaKey) {\n      result += 'meta+';\n    }\n    result += KeyCodeUtils.toString(keybinding.keyCode);\n    return result;\n  }\n  _getSingleModifierDispatchPart(keybinding) {\n    if (keybinding.keyCode === 5 /* KeyCode.Ctrl */ && !keybinding.shiftKey && !keybinding.altKey && !keybinding.metaKey) {\n      return 'ctrl';\n    }\n    if (keybinding.keyCode === 4 /* KeyCode.Shift */ && !keybinding.ctrlKey && !keybinding.altKey && !keybinding.metaKey) {\n      return 'shift';\n    }\n    if (keybinding.keyCode === 6 /* KeyCode.Alt */ && !keybinding.ctrlKey && !keybinding.shiftKey && !keybinding.metaKey) {\n      return 'alt';\n    }\n    if (keybinding.keyCode === 57 /* KeyCode.Meta */ && !keybinding.ctrlKey && !keybinding.shiftKey && !keybinding.altKey) {\n      return 'meta';\n    }\n    return null;\n  }\n  /**\n   * *NOTE*: Check return value for `KeyCode.Unknown`.\n   */\n  static _scanCodeToKeyCode(scanCode) {\n    const immutableKeyCode = IMMUTABLE_CODE_TO_KEY_CODE[scanCode];\n    if (immutableKeyCode !== -1 /* KeyCode.DependsOnKbLayout */) {\n      return immutableKeyCode;\n    }\n    switch (scanCode) {\n      case 10 /* ScanCode.KeyA */:\n        return 31 /* KeyCode.KeyA */;\n      case 11 /* ScanCode.KeyB */:\n        return 32 /* KeyCode.KeyB */;\n      case 12 /* ScanCode.KeyC */:\n        return 33 /* KeyCode.KeyC */;\n      case 13 /* ScanCode.KeyD */:\n        return 34 /* KeyCode.KeyD */;\n      case 14 /* ScanCode.KeyE */:\n        return 35 /* KeyCode.KeyE */;\n      case 15 /* ScanCode.KeyF */:\n        return 36 /* KeyCode.KeyF */;\n      case 16 /* ScanCode.KeyG */:\n        return 37 /* KeyCode.KeyG */;\n      case 17 /* ScanCode.KeyH */:\n        return 38 /* KeyCode.KeyH */;\n      case 18 /* ScanCode.KeyI */:\n        return 39 /* KeyCode.KeyI */;\n      case 19 /* ScanCode.KeyJ */:\n        return 40 /* KeyCode.KeyJ */;\n      case 20 /* ScanCode.KeyK */:\n        return 41 /* KeyCode.KeyK */;\n      case 21 /* ScanCode.KeyL */:\n        return 42 /* KeyCode.KeyL */;\n      case 22 /* ScanCode.KeyM */:\n        return 43 /* KeyCode.KeyM */;\n      case 23 /* ScanCode.KeyN */:\n        return 44 /* KeyCode.KeyN */;\n      case 24 /* ScanCode.KeyO */:\n        return 45 /* KeyCode.KeyO */;\n      case 25 /* ScanCode.KeyP */:\n        return 46 /* KeyCode.KeyP */;\n      case 26 /* ScanCode.KeyQ */:\n        return 47 /* KeyCode.KeyQ */;\n      case 27 /* ScanCode.KeyR */:\n        return 48 /* KeyCode.KeyR */;\n      case 28 /* ScanCode.KeyS */:\n        return 49 /* KeyCode.KeyS */;\n      case 29 /* ScanCode.KeyT */:\n        return 50 /* KeyCode.KeyT */;\n      case 30 /* ScanCode.KeyU */:\n        return 51 /* KeyCode.KeyU */;\n      case 31 /* ScanCode.KeyV */:\n        return 52 /* KeyCode.KeyV */;\n      case 32 /* ScanCode.KeyW */:\n        return 53 /* KeyCode.KeyW */;\n      case 33 /* ScanCode.KeyX */:\n        return 54 /* KeyCode.KeyX */;\n      case 34 /* ScanCode.KeyY */:\n        return 55 /* KeyCode.KeyY */;\n      case 35 /* ScanCode.KeyZ */:\n        return 56 /* KeyCode.KeyZ */;\n      case 36 /* ScanCode.Digit1 */:\n        return 22 /* KeyCode.Digit1 */;\n      case 37 /* ScanCode.Digit2 */:\n        return 23 /* KeyCode.Digit2 */;\n      case 38 /* ScanCode.Digit3 */:\n        return 24 /* KeyCode.Digit3 */;\n      case 39 /* ScanCode.Digit4 */:\n        return 25 /* KeyCode.Digit4 */;\n      case 40 /* ScanCode.Digit5 */:\n        return 26 /* KeyCode.Digit5 */;\n      case 41 /* ScanCode.Digit6 */:\n        return 27 /* KeyCode.Digit6 */;\n      case 42 /* ScanCode.Digit7 */:\n        return 28 /* KeyCode.Digit7 */;\n      case 43 /* ScanCode.Digit8 */:\n        return 29 /* KeyCode.Digit8 */;\n      case 44 /* ScanCode.Digit9 */:\n        return 30 /* KeyCode.Digit9 */;\n      case 45 /* ScanCode.Digit0 */:\n        return 21 /* KeyCode.Digit0 */;\n      case 51 /* ScanCode.Minus */:\n        return 83 /* KeyCode.Minus */;\n      case 52 /* ScanCode.Equal */:\n        return 81 /* KeyCode.Equal */;\n      case 53 /* ScanCode.BracketLeft */:\n        return 87 /* KeyCode.BracketLeft */;\n      case 54 /* ScanCode.BracketRight */:\n        return 89 /* KeyCode.BracketRight */;\n      case 55 /* ScanCode.Backslash */:\n        return 88 /* KeyCode.Backslash */;\n      case 56 /* ScanCode.IntlHash */:\n        return 0 /* KeyCode.Unknown */;\n      // missing\n      case 57 /* ScanCode.Semicolon */:\n        return 80 /* KeyCode.Semicolon */;\n      case 58 /* ScanCode.Quote */:\n        return 90 /* KeyCode.Quote */;\n      case 59 /* ScanCode.Backquote */:\n        return 86 /* KeyCode.Backquote */;\n      case 60 /* ScanCode.Comma */:\n        return 82 /* KeyCode.Comma */;\n      case 61 /* ScanCode.Period */:\n        return 84 /* KeyCode.Period */;\n      case 62 /* ScanCode.Slash */:\n        return 85 /* KeyCode.Slash */;\n      case 106 /* ScanCode.IntlBackslash */:\n        return 92 /* KeyCode.IntlBackslash */;\n    }\n\n    return 0 /* KeyCode.Unknown */;\n  }\n\n  static _resolveSimpleUserBinding(binding) {\n    if (!binding) {\n      return null;\n    }\n    if (binding instanceof SimpleKeybinding) {\n      return binding;\n    }\n    const keyCode = this._scanCodeToKeyCode(binding.scanCode);\n    if (keyCode === 0 /* KeyCode.Unknown */) {\n      return null;\n    }\n    return new SimpleKeybinding(binding.ctrlKey, binding.shiftKey, binding.altKey, binding.metaKey, keyCode);\n  }\n  static resolveUserBinding(input, os) {\n    const parts = removeElementsAfterNulls(input.map(keybinding => this._resolveSimpleUserBinding(keybinding)));\n    if (parts.length > 0) {\n      return [new USLayoutResolvedKeybinding(new ChordKeybinding(parts), os)];\n    }\n    return [];\n  }\n}","map":{"version":3,"names":["KeyCodeUtils","IMMUTABLE_CODE_TO_KEY_CODE","ChordKeybinding","SimpleKeybinding","BaseResolvedKeybinding","removeElementsAfterNulls","USLayoutResolvedKeybinding","constructor","actual","os","parts","_keyCodeToUILabel","keyCode","_os","toString","_getLabel","keybinding","isDuplicateModifierCase","_getAriaLabel","_getElectronAccelerator","toElectronAccelerator","_getDispatchPart","getDispatchStr","isModifierKey","result","ctrlKey","shiftKey","altKey","metaKey","_getSingleModifierDispatchPart","_scanCodeToKeyCode","scanCode","immutableKeyCode","_resolveSimpleUserBinding","binding","resolveUserBinding","input","map","length"],"sources":["/home/deathblade287/Desktop/AI-MODELS-TESTING/react-app/node_modules/monaco-editor/esm/vs/platform/keybinding/common/usLayoutResolvedKeybinding.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { KeyCodeUtils, IMMUTABLE_CODE_TO_KEY_CODE } from '../../../base/common/keyCodes.js';\nimport { ChordKeybinding, SimpleKeybinding } from '../../../base/common/keybindings.js';\nimport { BaseResolvedKeybinding } from './baseResolvedKeybinding.js';\nimport { removeElementsAfterNulls } from './resolvedKeybindingItem.js';\n/**\n * Do not instantiate. Use KeybindingService to get a ResolvedKeybinding seeded with information about the current kb layout.\n */\nexport class USLayoutResolvedKeybinding extends BaseResolvedKeybinding {\n    constructor(actual, os) {\n        super(os, actual.parts);\n    }\n    _keyCodeToUILabel(keyCode) {\n        if (this._os === 2 /* OperatingSystem.Macintosh */) {\n            switch (keyCode) {\n                case 15 /* KeyCode.LeftArrow */:\n                    return '←';\n                case 16 /* KeyCode.UpArrow */:\n                    return '↑';\n                case 17 /* KeyCode.RightArrow */:\n                    return '→';\n                case 18 /* KeyCode.DownArrow */:\n                    return '↓';\n            }\n        }\n        return KeyCodeUtils.toString(keyCode);\n    }\n    _getLabel(keybinding) {\n        if (keybinding.isDuplicateModifierCase()) {\n            return '';\n        }\n        return this._keyCodeToUILabel(keybinding.keyCode);\n    }\n    _getAriaLabel(keybinding) {\n        if (keybinding.isDuplicateModifierCase()) {\n            return '';\n        }\n        return KeyCodeUtils.toString(keybinding.keyCode);\n    }\n    _getElectronAccelerator(keybinding) {\n        return KeyCodeUtils.toElectronAccelerator(keybinding.keyCode);\n    }\n    _getDispatchPart(keybinding) {\n        return USLayoutResolvedKeybinding.getDispatchStr(keybinding);\n    }\n    static getDispatchStr(keybinding) {\n        if (keybinding.isModifierKey()) {\n            return null;\n        }\n        let result = '';\n        if (keybinding.ctrlKey) {\n            result += 'ctrl+';\n        }\n        if (keybinding.shiftKey) {\n            result += 'shift+';\n        }\n        if (keybinding.altKey) {\n            result += 'alt+';\n        }\n        if (keybinding.metaKey) {\n            result += 'meta+';\n        }\n        result += KeyCodeUtils.toString(keybinding.keyCode);\n        return result;\n    }\n    _getSingleModifierDispatchPart(keybinding) {\n        if (keybinding.keyCode === 5 /* KeyCode.Ctrl */ && !keybinding.shiftKey && !keybinding.altKey && !keybinding.metaKey) {\n            return 'ctrl';\n        }\n        if (keybinding.keyCode === 4 /* KeyCode.Shift */ && !keybinding.ctrlKey && !keybinding.altKey && !keybinding.metaKey) {\n            return 'shift';\n        }\n        if (keybinding.keyCode === 6 /* KeyCode.Alt */ && !keybinding.ctrlKey && !keybinding.shiftKey && !keybinding.metaKey) {\n            return 'alt';\n        }\n        if (keybinding.keyCode === 57 /* KeyCode.Meta */ && !keybinding.ctrlKey && !keybinding.shiftKey && !keybinding.altKey) {\n            return 'meta';\n        }\n        return null;\n    }\n    /**\n     * *NOTE*: Check return value for `KeyCode.Unknown`.\n     */\n    static _scanCodeToKeyCode(scanCode) {\n        const immutableKeyCode = IMMUTABLE_CODE_TO_KEY_CODE[scanCode];\n        if (immutableKeyCode !== -1 /* KeyCode.DependsOnKbLayout */) {\n            return immutableKeyCode;\n        }\n        switch (scanCode) {\n            case 10 /* ScanCode.KeyA */: return 31 /* KeyCode.KeyA */;\n            case 11 /* ScanCode.KeyB */: return 32 /* KeyCode.KeyB */;\n            case 12 /* ScanCode.KeyC */: return 33 /* KeyCode.KeyC */;\n            case 13 /* ScanCode.KeyD */: return 34 /* KeyCode.KeyD */;\n            case 14 /* ScanCode.KeyE */: return 35 /* KeyCode.KeyE */;\n            case 15 /* ScanCode.KeyF */: return 36 /* KeyCode.KeyF */;\n            case 16 /* ScanCode.KeyG */: return 37 /* KeyCode.KeyG */;\n            case 17 /* ScanCode.KeyH */: return 38 /* KeyCode.KeyH */;\n            case 18 /* ScanCode.KeyI */: return 39 /* KeyCode.KeyI */;\n            case 19 /* ScanCode.KeyJ */: return 40 /* KeyCode.KeyJ */;\n            case 20 /* ScanCode.KeyK */: return 41 /* KeyCode.KeyK */;\n            case 21 /* ScanCode.KeyL */: return 42 /* KeyCode.KeyL */;\n            case 22 /* ScanCode.KeyM */: return 43 /* KeyCode.KeyM */;\n            case 23 /* ScanCode.KeyN */: return 44 /* KeyCode.KeyN */;\n            case 24 /* ScanCode.KeyO */: return 45 /* KeyCode.KeyO */;\n            case 25 /* ScanCode.KeyP */: return 46 /* KeyCode.KeyP */;\n            case 26 /* ScanCode.KeyQ */: return 47 /* KeyCode.KeyQ */;\n            case 27 /* ScanCode.KeyR */: return 48 /* KeyCode.KeyR */;\n            case 28 /* ScanCode.KeyS */: return 49 /* KeyCode.KeyS */;\n            case 29 /* ScanCode.KeyT */: return 50 /* KeyCode.KeyT */;\n            case 30 /* ScanCode.KeyU */: return 51 /* KeyCode.KeyU */;\n            case 31 /* ScanCode.KeyV */: return 52 /* KeyCode.KeyV */;\n            case 32 /* ScanCode.KeyW */: return 53 /* KeyCode.KeyW */;\n            case 33 /* ScanCode.KeyX */: return 54 /* KeyCode.KeyX */;\n            case 34 /* ScanCode.KeyY */: return 55 /* KeyCode.KeyY */;\n            case 35 /* ScanCode.KeyZ */: return 56 /* KeyCode.KeyZ */;\n            case 36 /* ScanCode.Digit1 */: return 22 /* KeyCode.Digit1 */;\n            case 37 /* ScanCode.Digit2 */: return 23 /* KeyCode.Digit2 */;\n            case 38 /* ScanCode.Digit3 */: return 24 /* KeyCode.Digit3 */;\n            case 39 /* ScanCode.Digit4 */: return 25 /* KeyCode.Digit4 */;\n            case 40 /* ScanCode.Digit5 */: return 26 /* KeyCode.Digit5 */;\n            case 41 /* ScanCode.Digit6 */: return 27 /* KeyCode.Digit6 */;\n            case 42 /* ScanCode.Digit7 */: return 28 /* KeyCode.Digit7 */;\n            case 43 /* ScanCode.Digit8 */: return 29 /* KeyCode.Digit8 */;\n            case 44 /* ScanCode.Digit9 */: return 30 /* KeyCode.Digit9 */;\n            case 45 /* ScanCode.Digit0 */: return 21 /* KeyCode.Digit0 */;\n            case 51 /* ScanCode.Minus */: return 83 /* KeyCode.Minus */;\n            case 52 /* ScanCode.Equal */: return 81 /* KeyCode.Equal */;\n            case 53 /* ScanCode.BracketLeft */: return 87 /* KeyCode.BracketLeft */;\n            case 54 /* ScanCode.BracketRight */: return 89 /* KeyCode.BracketRight */;\n            case 55 /* ScanCode.Backslash */: return 88 /* KeyCode.Backslash */;\n            case 56 /* ScanCode.IntlHash */: return 0 /* KeyCode.Unknown */; // missing\n            case 57 /* ScanCode.Semicolon */: return 80 /* KeyCode.Semicolon */;\n            case 58 /* ScanCode.Quote */: return 90 /* KeyCode.Quote */;\n            case 59 /* ScanCode.Backquote */: return 86 /* KeyCode.Backquote */;\n            case 60 /* ScanCode.Comma */: return 82 /* KeyCode.Comma */;\n            case 61 /* ScanCode.Period */: return 84 /* KeyCode.Period */;\n            case 62 /* ScanCode.Slash */: return 85 /* KeyCode.Slash */;\n            case 106 /* ScanCode.IntlBackslash */: return 92 /* KeyCode.IntlBackslash */;\n        }\n        return 0 /* KeyCode.Unknown */;\n    }\n    static _resolveSimpleUserBinding(binding) {\n        if (!binding) {\n            return null;\n        }\n        if (binding instanceof SimpleKeybinding) {\n            return binding;\n        }\n        const keyCode = this._scanCodeToKeyCode(binding.scanCode);\n        if (keyCode === 0 /* KeyCode.Unknown */) {\n            return null;\n        }\n        return new SimpleKeybinding(binding.ctrlKey, binding.shiftKey, binding.altKey, binding.metaKey, keyCode);\n    }\n    static resolveUserBinding(input, os) {\n        const parts = removeElementsAfterNulls(input.map(keybinding => this._resolveSimpleUserBinding(keybinding)));\n        if (parts.length > 0) {\n            return [new USLayoutResolvedKeybinding(new ChordKeybinding(parts), os)];\n        }\n        return [];\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,YAAY,EAAEC,0BAA0B,QAAQ,kCAAkC;AAC3F,SAASC,eAAe,EAAEC,gBAAgB,QAAQ,qCAAqC;AACvF,SAASC,sBAAsB,QAAQ,6BAA6B;AACpE,SAASC,wBAAwB,QAAQ,6BAA6B;AACtE;AACA;AACA;AACA,OAAO,MAAMC,0BAA0B,SAASF,sBAAsB,CAAC;EACnEG,WAAW,CAACC,MAAM,EAAEC,EAAE,EAAE;IACpB,KAAK,CAACA,EAAE,EAAED,MAAM,CAACE,KAAK,CAAC;EAC3B;EACAC,iBAAiB,CAACC,OAAO,EAAE;IACvB,IAAI,IAAI,CAACC,GAAG,KAAK,CAAC,CAAC,iCAAiC;MAChD,QAAQD,OAAO;QACX,KAAK,EAAE,CAAC;UACJ,OAAO,GAAG;QACd,KAAK,EAAE,CAAC;UACJ,OAAO,GAAG;QACd,KAAK,EAAE,CAAC;UACJ,OAAO,GAAG;QACd,KAAK,EAAE,CAAC;UACJ,OAAO,GAAG;MAAC;IAEvB;IACA,OAAOZ,YAAY,CAACc,QAAQ,CAACF,OAAO,CAAC;EACzC;EACAG,SAAS,CAACC,UAAU,EAAE;IAClB,IAAIA,UAAU,CAACC,uBAAuB,EAAE,EAAE;MACtC,OAAO,EAAE;IACb;IACA,OAAO,IAAI,CAACN,iBAAiB,CAACK,UAAU,CAACJ,OAAO,CAAC;EACrD;EACAM,aAAa,CAACF,UAAU,EAAE;IACtB,IAAIA,UAAU,CAACC,uBAAuB,EAAE,EAAE;MACtC,OAAO,EAAE;IACb;IACA,OAAOjB,YAAY,CAACc,QAAQ,CAACE,UAAU,CAACJ,OAAO,CAAC;EACpD;EACAO,uBAAuB,CAACH,UAAU,EAAE;IAChC,OAAOhB,YAAY,CAACoB,qBAAqB,CAACJ,UAAU,CAACJ,OAAO,CAAC;EACjE;EACAS,gBAAgB,CAACL,UAAU,EAAE;IACzB,OAAOV,0BAA0B,CAACgB,cAAc,CAACN,UAAU,CAAC;EAChE;EACA,OAAOM,cAAc,CAACN,UAAU,EAAE;IAC9B,IAAIA,UAAU,CAACO,aAAa,EAAE,EAAE;MAC5B,OAAO,IAAI;IACf;IACA,IAAIC,MAAM,GAAG,EAAE;IACf,IAAIR,UAAU,CAACS,OAAO,EAAE;MACpBD,MAAM,IAAI,OAAO;IACrB;IACA,IAAIR,UAAU,CAACU,QAAQ,EAAE;MACrBF,MAAM,IAAI,QAAQ;IACtB;IACA,IAAIR,UAAU,CAACW,MAAM,EAAE;MACnBH,MAAM,IAAI,MAAM;IACpB;IACA,IAAIR,UAAU,CAACY,OAAO,EAAE;MACpBJ,MAAM,IAAI,OAAO;IACrB;IACAA,MAAM,IAAIxB,YAAY,CAACc,QAAQ,CAACE,UAAU,CAACJ,OAAO,CAAC;IACnD,OAAOY,MAAM;EACjB;EACAK,8BAA8B,CAACb,UAAU,EAAE;IACvC,IAAIA,UAAU,CAACJ,OAAO,KAAK,CAAC,CAAC,sBAAsB,CAACI,UAAU,CAACU,QAAQ,IAAI,CAACV,UAAU,CAACW,MAAM,IAAI,CAACX,UAAU,CAACY,OAAO,EAAE;MAClH,OAAO,MAAM;IACjB;IACA,IAAIZ,UAAU,CAACJ,OAAO,KAAK,CAAC,CAAC,uBAAuB,CAACI,UAAU,CAACS,OAAO,IAAI,CAACT,UAAU,CAACW,MAAM,IAAI,CAACX,UAAU,CAACY,OAAO,EAAE;MAClH,OAAO,OAAO;IAClB;IACA,IAAIZ,UAAU,CAACJ,OAAO,KAAK,CAAC,CAAC,qBAAqB,CAACI,UAAU,CAACS,OAAO,IAAI,CAACT,UAAU,CAACU,QAAQ,IAAI,CAACV,UAAU,CAACY,OAAO,EAAE;MAClH,OAAO,KAAK;IAChB;IACA,IAAIZ,UAAU,CAACJ,OAAO,KAAK,EAAE,CAAC,sBAAsB,CAACI,UAAU,CAACS,OAAO,IAAI,CAACT,UAAU,CAACU,QAAQ,IAAI,CAACV,UAAU,CAACW,MAAM,EAAE;MACnH,OAAO,MAAM;IACjB;IACA,OAAO,IAAI;EACf;EACA;AACJ;AACA;EACI,OAAOG,kBAAkB,CAACC,QAAQ,EAAE;IAChC,MAAMC,gBAAgB,GAAG/B,0BAA0B,CAAC8B,QAAQ,CAAC;IAC7D,IAAIC,gBAAgB,KAAK,CAAC,CAAC,CAAC,iCAAiC;MACzD,OAAOA,gBAAgB;IAC3B;IACA,QAAQD,QAAQ;MACZ,KAAK,EAAE,CAAC;QAAqB,OAAO,EAAE,CAAC;MACvC,KAAK,EAAE,CAAC;QAAqB,OAAO,EAAE,CAAC;MACvC,KAAK,EAAE,CAAC;QAAqB,OAAO,EAAE,CAAC;MACvC,KAAK,EAAE,CAAC;QAAqB,OAAO,EAAE,CAAC;MACvC,KAAK,EAAE,CAAC;QAAqB,OAAO,EAAE,CAAC;MACvC,KAAK,EAAE,CAAC;QAAqB,OAAO,EAAE,CAAC;MACvC,KAAK,EAAE,CAAC;QAAqB,OAAO,EAAE,CAAC;MACvC,KAAK,EAAE,CAAC;QAAqB,OAAO,EAAE,CAAC;MACvC,KAAK,EAAE,CAAC;QAAqB,OAAO,EAAE,CAAC;MACvC,KAAK,EAAE,CAAC;QAAqB,OAAO,EAAE,CAAC;MACvC,KAAK,EAAE,CAAC;QAAqB,OAAO,EAAE,CAAC;MACvC,KAAK,EAAE,CAAC;QAAqB,OAAO,EAAE,CAAC;MACvC,KAAK,EAAE,CAAC;QAAqB,OAAO,EAAE,CAAC;MACvC,KAAK,EAAE,CAAC;QAAqB,OAAO,EAAE,CAAC;MACvC,KAAK,EAAE,CAAC;QAAqB,OAAO,EAAE,CAAC;MACvC,KAAK,EAAE,CAAC;QAAqB,OAAO,EAAE,CAAC;MACvC,KAAK,EAAE,CAAC;QAAqB,OAAO,EAAE,CAAC;MACvC,KAAK,EAAE,CAAC;QAAqB,OAAO,EAAE,CAAC;MACvC,KAAK,EAAE,CAAC;QAAqB,OAAO,EAAE,CAAC;MACvC,KAAK,EAAE,CAAC;QAAqB,OAAO,EAAE,CAAC;MACvC,KAAK,EAAE,CAAC;QAAqB,OAAO,EAAE,CAAC;MACvC,KAAK,EAAE,CAAC;QAAqB,OAAO,EAAE,CAAC;MACvC,KAAK,EAAE,CAAC;QAAqB,OAAO,EAAE,CAAC;MACvC,KAAK,EAAE,CAAC;QAAqB,OAAO,EAAE,CAAC;MACvC,KAAK,EAAE,CAAC;QAAqB,OAAO,EAAE,CAAC;MACvC,KAAK,EAAE,CAAC;QAAqB,OAAO,EAAE,CAAC;MACvC,KAAK,EAAE,CAAC;QAAuB,OAAO,EAAE,CAAC;MACzC,KAAK,EAAE,CAAC;QAAuB,OAAO,EAAE,CAAC;MACzC,KAAK,EAAE,CAAC;QAAuB,OAAO,EAAE,CAAC;MACzC,KAAK,EAAE,CAAC;QAAuB,OAAO,EAAE,CAAC;MACzC,KAAK,EAAE,CAAC;QAAuB,OAAO,EAAE,CAAC;MACzC,KAAK,EAAE,CAAC;QAAuB,OAAO,EAAE,CAAC;MACzC,KAAK,EAAE,CAAC;QAAuB,OAAO,EAAE,CAAC;MACzC,KAAK,EAAE,CAAC;QAAuB,OAAO,EAAE,CAAC;MACzC,KAAK,EAAE,CAAC;QAAuB,OAAO,EAAE,CAAC;MACzC,KAAK,EAAE,CAAC;QAAuB,OAAO,EAAE,CAAC;MACzC,KAAK,EAAE,CAAC;QAAsB,OAAO,EAAE,CAAC;MACxC,KAAK,EAAE,CAAC;QAAsB,OAAO,EAAE,CAAC;MACxC,KAAK,EAAE,CAAC;QAA4B,OAAO,EAAE,CAAC;MAC9C,KAAK,EAAE,CAAC;QAA6B,OAAO,EAAE,CAAC;MAC/C,KAAK,EAAE,CAAC;QAA0B,OAAO,EAAE,CAAC;MAC5C,KAAK,EAAE,CAAC;QAAyB,OAAO,CAAC,CAAC;MAAuB;MACjE,KAAK,EAAE,CAAC;QAA0B,OAAO,EAAE,CAAC;MAC5C,KAAK,EAAE,CAAC;QAAsB,OAAO,EAAE,CAAC;MACxC,KAAK,EAAE,CAAC;QAA0B,OAAO,EAAE,CAAC;MAC5C,KAAK,EAAE,CAAC;QAAsB,OAAO,EAAE,CAAC;MACxC,KAAK,EAAE,CAAC;QAAuB,OAAO,EAAE,CAAC;MACzC,KAAK,EAAE,CAAC;QAAsB,OAAO,EAAE,CAAC;MACxC,KAAK,GAAG,CAAC;QAA8B,OAAO,EAAE,CAAC;IAA4B;;IAEjF,OAAO,CAAC,CAAC;EACb;;EACA,OAAOE,yBAAyB,CAACC,OAAO,EAAE;IACtC,IAAI,CAACA,OAAO,EAAE;MACV,OAAO,IAAI;IACf;IACA,IAAIA,OAAO,YAAY/B,gBAAgB,EAAE;MACrC,OAAO+B,OAAO;IAClB;IACA,MAAMtB,OAAO,GAAG,IAAI,CAACkB,kBAAkB,CAACI,OAAO,CAACH,QAAQ,CAAC;IACzD,IAAInB,OAAO,KAAK,CAAC,CAAC,uBAAuB;MACrC,OAAO,IAAI;IACf;IACA,OAAO,IAAIT,gBAAgB,CAAC+B,OAAO,CAACT,OAAO,EAAES,OAAO,CAACR,QAAQ,EAAEQ,OAAO,CAACP,MAAM,EAAEO,OAAO,CAACN,OAAO,EAAEhB,OAAO,CAAC;EAC5G;EACA,OAAOuB,kBAAkB,CAACC,KAAK,EAAE3B,EAAE,EAAE;IACjC,MAAMC,KAAK,GAAGL,wBAAwB,CAAC+B,KAAK,CAACC,GAAG,CAACrB,UAAU,IAAI,IAAI,CAACiB,yBAAyB,CAACjB,UAAU,CAAC,CAAC,CAAC;IAC3G,IAAIN,KAAK,CAAC4B,MAAM,GAAG,CAAC,EAAE;MAClB,OAAO,CAAC,IAAIhC,0BAA0B,CAAC,IAAIJ,eAAe,CAACQ,KAAK,CAAC,EAAED,EAAE,CAAC,CAAC;IAC3E;IACA,OAAO,EAAE;EACb;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}