{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nvar _a;\nimport './media/diffEditor.css';\nimport * as nls from '../../../nls.js';\nimport * as dom from '../../../base/browser/dom.js';\nimport * as assert from '../../../base/common/assert.js';\nimport { createFastDomNode } from '../../../base/browser/fastDomNode.js';\nimport { Sash } from '../../../base/browser/ui/sash/sash.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { applyFontInfo } from '../config/domFontInfo.js';\nimport { StableEditorScrollState } from '../stableEditorScroll.js';\nimport { ICodeEditorService } from '../services/codeEditorService.js';\nimport { CodeEditorWidget } from './codeEditorWidget.js';\nimport { DiffReview } from './diffReview.js';\nimport { EditorOptions, EditorFontLigatures, stringSet as validateStringSetOption, boolean as validateBooleanOption, clampedInt } from '../../common/config/editorOptions.js';\nimport { Position } from '../../common/core/position.js';\nimport { Range } from '../../common/core/range.js';\nimport { createStringBuilder } from '../../common/core/stringBuilder.js';\nimport * as editorCommon from '../../common/editorCommon.js';\nimport { ModelDecorationOptions } from '../../common/model/textModel.js';\nimport { IEditorWorkerService } from '../../common/services/editorWorker.js';\nimport { OverviewRulerZone } from '../../common/viewModel/overviewZoneManager.js';\nimport { LineDecoration } from '../../common/viewLayout/lineDecorations.js';\nimport { RenderLineInput, renderViewLine } from '../../common/viewLayout/viewLineRenderer.js';\nimport { InlineDecoration, ViewLineRenderingData } from '../../common/viewModel.js';\nimport { IContextKeyService } from '../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from '../../../platform/instantiation/common/instantiation.js';\nimport { ServiceCollection } from '../../../platform/instantiation/common/serviceCollection.js';\nimport { INotificationService } from '../../../platform/notification/common/notification.js';\nimport { defaultInsertColor, defaultRemoveColor, diffBorder, diffInserted, diffInsertedOutline, diffRemoved, diffRemovedOutline, scrollbarShadow, scrollbarSliderBackground, scrollbarSliderHoverBackground, scrollbarSliderActiveBackground, diffDiagonalFill, diffInsertedLineGutter, diffRemovedLineGutter, diffInsertedLine, diffRemovedLine, diffOverviewRulerInserted, diffOverviewRulerRemoved } from '../../../platform/theme/common/colorRegistry.js';\nimport { IThemeService, getThemeTypeSelector, registerThemingParticipant, ThemeIcon } from '../../../platform/theme/common/themeService.js';\nimport { IContextMenuService } from '../../../platform/contextview/browser/contextView.js';\nimport { InlineDiffMargin } from './inlineDiffMargin.js';\nimport { IClipboardService } from '../../../platform/clipboard/common/clipboardService.js';\nimport { EditorExtensionsRegistry } from '../editorExtensions.js';\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { IEditorProgressService } from '../../../platform/progress/common/progress.js';\nimport { ElementSizeObserver } from '../config/elementSizeObserver.js';\nimport { Codicon } from '../../../base/common/codicons.js';\nimport { MOUSE_CURSOR_TEXT_CSS_CLASS_NAME } from '../../../base/browser/ui/mouseCursor/mouseCursor.js';\nimport { registerIcon } from '../../../platform/theme/common/iconRegistry.js';\nimport { isHighContrast } from '../../../platform/theme/common/theme.js';\nclass VisualEditorState {\n  constructor(_contextMenuService, _clipboardService) {\n    this._contextMenuService = _contextMenuService;\n    this._clipboardService = _clipboardService;\n    this._zones = [];\n    this._inlineDiffMargins = [];\n    this._zonesMap = {};\n    this._decorations = [];\n  }\n  getForeignViewZones(allViewZones) {\n    return allViewZones.filter(z => !this._zonesMap[String(z.id)]);\n  }\n  clean(editor) {\n    // (1) View zones\n    if (this._zones.length > 0) {\n      editor.changeViewZones(viewChangeAccessor => {\n        for (const zoneId of this._zones) {\n          viewChangeAccessor.removeZone(zoneId);\n        }\n      });\n    }\n    this._zones = [];\n    this._zonesMap = {};\n    // (2) Model decorations\n    editor.changeDecorations(changeAccessor => {\n      this._decorations = changeAccessor.deltaDecorations(this._decorations, []);\n    });\n  }\n  apply(editor, overviewRuler, newDecorations, restoreScrollState) {\n    const scrollState = restoreScrollState ? StableEditorScrollState.capture(editor) : null;\n    // view zones\n    editor.changeViewZones(viewChangeAccessor => {\n      var _a;\n      for (const zoneId of this._zones) {\n        viewChangeAccessor.removeZone(zoneId);\n      }\n      for (const inlineDiffMargin of this._inlineDiffMargins) {\n        inlineDiffMargin.dispose();\n      }\n      this._zones = [];\n      this._zonesMap = {};\n      this._inlineDiffMargins = [];\n      for (let i = 0, length = newDecorations.zones.length; i < length; i++) {\n        const viewZone = newDecorations.zones[i];\n        viewZone.suppressMouseDown = true;\n        const zoneId = viewChangeAccessor.addZone(viewZone);\n        this._zones.push(zoneId);\n        this._zonesMap[String(zoneId)] = true;\n        if (newDecorations.zones[i].diff && viewZone.marginDomNode) {\n          viewZone.suppressMouseDown = false;\n          if (((_a = newDecorations.zones[i].diff) === null || _a === void 0 ? void 0 : _a.originalModel.getValueLength()) !== 0) {\n            // do not contribute diff margin actions for newly created files\n            this._inlineDiffMargins.push(new InlineDiffMargin(zoneId, viewZone.marginDomNode, editor, newDecorations.zones[i].diff, this._contextMenuService, this._clipboardService));\n          }\n        }\n      }\n    });\n    scrollState === null || scrollState === void 0 ? void 0 : scrollState.restore(editor);\n    // decorations\n    editor.changeDecorations(changeAccessor => {\n      this._decorations = changeAccessor.deltaDecorations(this._decorations, newDecorations.decorations);\n    });\n    // overview ruler\n    overviewRuler === null || overviewRuler === void 0 ? void 0 : overviewRuler.setZones(newDecorations.overviewZones);\n  }\n}\nlet DIFF_EDITOR_ID = 0;\nconst diffInsertIcon = registerIcon('diff-insert', Codicon.add, nls.localize('diffInsertIcon', 'Line decoration for inserts in the diff editor.'));\nconst diffRemoveIcon = registerIcon('diff-remove', Codicon.remove, nls.localize('diffRemoveIcon', 'Line decoration for removals in the diff editor.'));\nconst ttPolicy = (_a = window.trustedTypes) === null || _a === void 0 ? void 0 : _a.createPolicy('diffEditorWidget', {\n  createHTML: value => value\n});\nlet DiffEditorWidget = class DiffEditorWidget extends Disposable {\n  constructor(domElement, options, codeEditorWidgetOptions, clipboardService, editorWorkerService, contextKeyService, instantiationService, codeEditorService, themeService, notificationService, contextMenuService, _editorProgressService) {\n    super();\n    this._editorProgressService = _editorProgressService;\n    this._onDidDispose = this._register(new Emitter());\n    this.onDidDispose = this._onDidDispose.event;\n    this._onDidUpdateDiff = this._register(new Emitter());\n    this.onDidUpdateDiff = this._onDidUpdateDiff.event;\n    this._onDidContentSizeChange = this._register(new Emitter());\n    this._lastOriginalWarning = null;\n    this._lastModifiedWarning = null;\n    this._editorWorkerService = editorWorkerService;\n    this._codeEditorService = codeEditorService;\n    this._contextKeyService = this._register(contextKeyService.createScoped(domElement));\n    this._instantiationService = instantiationService.createChild(new ServiceCollection([IContextKeyService, this._contextKeyService]));\n    this._contextKeyService.createKey('isInDiffEditor', true);\n    this._themeService = themeService;\n    this._notificationService = notificationService;\n    this._id = ++DIFF_EDITOR_ID;\n    this._state = 0 /* editorBrowser.DiffEditorState.Idle */;\n    this._updatingDiffProgress = null;\n    this._domElement = domElement;\n    options = options || {};\n    this._options = validateDiffEditorOptions(options, {\n      enableSplitViewResizing: true,\n      renderSideBySide: true,\n      renderMarginRevertIcon: true,\n      maxComputationTime: 5000,\n      maxFileSize: 50,\n      ignoreTrimWhitespace: true,\n      renderIndicators: true,\n      originalEditable: false,\n      diffCodeLens: false,\n      renderOverviewRuler: true,\n      diffWordWrap: 'inherit'\n    });\n    if (typeof options.isInEmbeddedEditor !== 'undefined') {\n      this._contextKeyService.createKey('isInEmbeddedDiffEditor', options.isInEmbeddedEditor);\n    } else {\n      this._contextKeyService.createKey('isInEmbeddedDiffEditor', false);\n    }\n    this._updateDecorationsRunner = this._register(new RunOnceScheduler(() => this._updateDecorations(), 0));\n    this._containerDomElement = document.createElement('div');\n    this._containerDomElement.className = DiffEditorWidget._getClassName(this._themeService.getColorTheme(), this._options.renderSideBySide);\n    this._containerDomElement.style.position = 'relative';\n    this._containerDomElement.style.height = '100%';\n    this._domElement.appendChild(this._containerDomElement);\n    this._overviewViewportDomElement = createFastDomNode(document.createElement('div'));\n    this._overviewViewportDomElement.setClassName('diffViewport');\n    this._overviewViewportDomElement.setPosition('absolute');\n    this._overviewDomElement = document.createElement('div');\n    this._overviewDomElement.className = 'diffOverview';\n    this._overviewDomElement.style.position = 'absolute';\n    this._overviewDomElement.appendChild(this._overviewViewportDomElement.domNode);\n    this._register(dom.addStandardDisposableListener(this._overviewDomElement, dom.EventType.POINTER_DOWN, e => {\n      this._modifiedEditor.delegateVerticalScrollbarPointerDown(e);\n    }));\n    if (this._options.renderOverviewRuler) {\n      this._containerDomElement.appendChild(this._overviewDomElement);\n    }\n    // Create left side\n    this._originalDomNode = document.createElement('div');\n    this._originalDomNode.className = 'editor original';\n    this._originalDomNode.style.position = 'absolute';\n    this._originalDomNode.style.height = '100%';\n    this._containerDomElement.appendChild(this._originalDomNode);\n    // Create right side\n    this._modifiedDomNode = document.createElement('div');\n    this._modifiedDomNode.className = 'editor modified';\n    this._modifiedDomNode.style.position = 'absolute';\n    this._modifiedDomNode.style.height = '100%';\n    this._containerDomElement.appendChild(this._modifiedDomNode);\n    this._beginUpdateDecorationsTimeout = -1;\n    this._currentlyChangingViewZones = false;\n    this._diffComputationToken = 0;\n    this._originalEditorState = new VisualEditorState(contextMenuService, clipboardService);\n    this._modifiedEditorState = new VisualEditorState(contextMenuService, clipboardService);\n    this._isVisible = true;\n    this._isHandlingScrollEvent = false;\n    this._elementSizeObserver = this._register(new ElementSizeObserver(this._containerDomElement, options.dimension));\n    this._register(this._elementSizeObserver.onDidChange(() => this._onDidContainerSizeChanged()));\n    if (options.automaticLayout) {\n      this._elementSizeObserver.startObserving();\n    }\n    this._diffComputationResult = null;\n    this._originalEditor = this._createLeftHandSideEditor(options, codeEditorWidgetOptions.originalEditor || {});\n    this._modifiedEditor = this._createRightHandSideEditor(options, codeEditorWidgetOptions.modifiedEditor || {});\n    this._originalOverviewRuler = null;\n    this._modifiedOverviewRuler = null;\n    this._reviewPane = instantiationService.createInstance(DiffReview, this);\n    this._containerDomElement.appendChild(this._reviewPane.domNode.domNode);\n    this._containerDomElement.appendChild(this._reviewPane.shadow.domNode);\n    this._containerDomElement.appendChild(this._reviewPane.actionBarContainer.domNode);\n    if (this._options.renderSideBySide) {\n      this._setStrategy(new DiffEditorWidgetSideBySide(this._createDataSource(), this._options.enableSplitViewResizing));\n    } else {\n      this._setStrategy(new DiffEditorWidgetInline(this._createDataSource(), this._options.enableSplitViewResizing));\n    }\n    this._register(themeService.onDidColorThemeChange(t => {\n      if (this._strategy && this._strategy.applyColors(t)) {\n        this._updateDecorationsRunner.schedule();\n      }\n      this._containerDomElement.className = DiffEditorWidget._getClassName(this._themeService.getColorTheme(), this._options.renderSideBySide);\n    }));\n    const contributions = EditorExtensionsRegistry.getDiffEditorContributions();\n    for (const desc of contributions) {\n      try {\n        this._register(instantiationService.createInstance(desc.ctor, this));\n      } catch (err) {\n        onUnexpectedError(err);\n      }\n    }\n    this._codeEditorService.addDiffEditor(this);\n  }\n  _setState(newState) {\n    if (this._state === newState) {\n      return;\n    }\n    this._state = newState;\n    if (this._updatingDiffProgress) {\n      this._updatingDiffProgress.done();\n      this._updatingDiffProgress = null;\n    }\n    if (this._state === 1 /* editorBrowser.DiffEditorState.ComputingDiff */) {\n      this._updatingDiffProgress = this._editorProgressService.show(true, 1000);\n    }\n  }\n  diffReviewNext() {\n    this._reviewPane.next();\n  }\n  diffReviewPrev() {\n    this._reviewPane.prev();\n  }\n  static _getClassName(theme, renderSideBySide) {\n    let result = 'monaco-diff-editor monaco-editor-background ';\n    if (renderSideBySide) {\n      result += 'side-by-side ';\n    }\n    result += getThemeTypeSelector(theme.type);\n    return result;\n  }\n  _disposeOverviewRulers() {\n    if (this._originalOverviewRuler) {\n      this._overviewDomElement.removeChild(this._originalOverviewRuler.getDomNode());\n      this._originalOverviewRuler.dispose();\n      this._originalOverviewRuler = null;\n    }\n    if (this._modifiedOverviewRuler) {\n      this._overviewDomElement.removeChild(this._modifiedOverviewRuler.getDomNode());\n      this._modifiedOverviewRuler.dispose();\n      this._modifiedOverviewRuler = null;\n    }\n  }\n  _createOverviewRulers() {\n    if (!this._options.renderOverviewRuler) {\n      return;\n    }\n    assert.ok(!this._originalOverviewRuler && !this._modifiedOverviewRuler);\n    if (this._originalEditor.hasModel()) {\n      this._originalOverviewRuler = this._originalEditor.createOverviewRuler('original diffOverviewRuler');\n      this._overviewDomElement.appendChild(this._originalOverviewRuler.getDomNode());\n    }\n    if (this._modifiedEditor.hasModel()) {\n      this._modifiedOverviewRuler = this._modifiedEditor.createOverviewRuler('modified diffOverviewRuler');\n      this._overviewDomElement.appendChild(this._modifiedOverviewRuler.getDomNode());\n    }\n    this._layoutOverviewRulers();\n  }\n  _createLeftHandSideEditor(options, codeEditorWidgetOptions) {\n    const editor = this._createInnerEditor(this._instantiationService, this._originalDomNode, this._adjustOptionsForLeftHandSide(options), codeEditorWidgetOptions);\n    this._register(editor.onDidScrollChange(e => {\n      if (this._isHandlingScrollEvent) {\n        return;\n      }\n      if (!e.scrollTopChanged && !e.scrollLeftChanged && !e.scrollHeightChanged) {\n        return;\n      }\n      this._isHandlingScrollEvent = true;\n      this._modifiedEditor.setScrollPosition({\n        scrollLeft: e.scrollLeft,\n        scrollTop: e.scrollTop\n      });\n      this._isHandlingScrollEvent = false;\n      this._layoutOverviewViewport();\n    }));\n    this._register(editor.onDidChangeViewZones(() => {\n      this._onViewZonesChanged();\n    }));\n    this._register(editor.onDidChangeConfiguration(e => {\n      if (!editor.getModel()) {\n        return;\n      }\n      if (e.hasChanged(46 /* EditorOption.fontInfo */)) {\n        this._updateDecorationsRunner.schedule();\n      }\n      if (e.hasChanged(134 /* EditorOption.wrappingInfo */)) {\n        this._updateDecorationsRunner.cancel();\n        this._updateDecorations();\n      }\n    }));\n    this._register(editor.onDidChangeHiddenAreas(() => {\n      this._updateDecorationsRunner.cancel();\n      this._updateDecorations();\n    }));\n    this._register(editor.onDidChangeModelContent(() => {\n      if (this._isVisible) {\n        this._beginUpdateDecorationsSoon();\n      }\n    }));\n    const isInDiffLeftEditorKey = this._contextKeyService.createKey('isInDiffLeftEditor', editor.hasWidgetFocus());\n    this._register(editor.onDidFocusEditorWidget(() => isInDiffLeftEditorKey.set(true)));\n    this._register(editor.onDidBlurEditorWidget(() => isInDiffLeftEditorKey.set(false)));\n    this._register(editor.onDidContentSizeChange(e => {\n      const width = this._originalEditor.getContentWidth() + this._modifiedEditor.getContentWidth() + DiffEditorWidget.ONE_OVERVIEW_WIDTH;\n      const height = Math.max(this._modifiedEditor.getContentHeight(), this._originalEditor.getContentHeight());\n      this._onDidContentSizeChange.fire({\n        contentHeight: height,\n        contentWidth: width,\n        contentHeightChanged: e.contentHeightChanged,\n        contentWidthChanged: e.contentWidthChanged\n      });\n    }));\n    return editor;\n  }\n  _createRightHandSideEditor(options, codeEditorWidgetOptions) {\n    const editor = this._createInnerEditor(this._instantiationService, this._modifiedDomNode, this._adjustOptionsForRightHandSide(options), codeEditorWidgetOptions);\n    this._register(editor.onDidScrollChange(e => {\n      if (this._isHandlingScrollEvent) {\n        return;\n      }\n      if (!e.scrollTopChanged && !e.scrollLeftChanged && !e.scrollHeightChanged) {\n        return;\n      }\n      this._isHandlingScrollEvent = true;\n      this._originalEditor.setScrollPosition({\n        scrollLeft: e.scrollLeft,\n        scrollTop: e.scrollTop\n      });\n      this._isHandlingScrollEvent = false;\n      this._layoutOverviewViewport();\n    }));\n    this._register(editor.onDidChangeViewZones(() => {\n      this._onViewZonesChanged();\n    }));\n    this._register(editor.onDidChangeConfiguration(e => {\n      if (!editor.getModel()) {\n        return;\n      }\n      if (e.hasChanged(46 /* EditorOption.fontInfo */)) {\n        this._updateDecorationsRunner.schedule();\n      }\n      if (e.hasChanged(134 /* EditorOption.wrappingInfo */)) {\n        this._updateDecorationsRunner.cancel();\n        this._updateDecorations();\n      }\n    }));\n    this._register(editor.onDidChangeHiddenAreas(() => {\n      this._updateDecorationsRunner.cancel();\n      this._updateDecorations();\n    }));\n    this._register(editor.onDidChangeModelContent(() => {\n      if (this._isVisible) {\n        this._beginUpdateDecorationsSoon();\n      }\n    }));\n    this._register(editor.onDidChangeModelOptions(e => {\n      if (e.tabSize) {\n        this._updateDecorationsRunner.schedule();\n      }\n    }));\n    const isInDiffRightEditorKey = this._contextKeyService.createKey('isInDiffRightEditor', editor.hasWidgetFocus());\n    this._register(editor.onDidFocusEditorWidget(() => isInDiffRightEditorKey.set(true)));\n    this._register(editor.onDidBlurEditorWidget(() => isInDiffRightEditorKey.set(false)));\n    this._register(editor.onDidContentSizeChange(e => {\n      const width = this._originalEditor.getContentWidth() + this._modifiedEditor.getContentWidth() + DiffEditorWidget.ONE_OVERVIEW_WIDTH;\n      const height = Math.max(this._modifiedEditor.getContentHeight(), this._originalEditor.getContentHeight());\n      this._onDidContentSizeChange.fire({\n        contentHeight: height,\n        contentWidth: width,\n        contentHeightChanged: e.contentHeightChanged,\n        contentWidthChanged: e.contentWidthChanged\n      });\n    }));\n    // Revert change when an arrow is clicked.\n    this._register(editor.onMouseDown(event => {\n      var _a, _b;\n      if (!event.event.rightButton && event.target.position && ((_a = event.target.element) === null || _a === void 0 ? void 0 : _a.className.includes('arrow-revert-change'))) {\n        const lineNumber = event.target.position.lineNumber;\n        const change = (_b = this._diffComputationResult) === null || _b === void 0 ? void 0 : _b.changes.find(c => c.modifiedStartLineNumber === lineNumber - 1 || c.modifiedStartLineNumber === lineNumber);\n        if (change) {\n          this.revertChange(change);\n        }\n        event.event.stopPropagation();\n        this._updateDecorations();\n        return;\n      }\n    }));\n    return editor;\n  }\n  /**\n   * Reverts a change in the modified editor.\n   */\n  revertChange(change) {\n    const editor = this._modifiedEditor;\n    const original = this._originalEditor.getModel();\n    const modified = this._modifiedEditor.getModel();\n    if (!original || !modified || !editor) {\n      return;\n    }\n    const originalRange = change.originalEndLineNumber > 0 ? new Range(change.originalStartLineNumber, 1, change.originalEndLineNumber, original.getLineMaxColumn(change.originalEndLineNumber)) : null;\n    const originalContent = originalRange ? original.getValueInRange(originalRange) : null;\n    const newRange = change.modifiedEndLineNumber > 0 ? new Range(change.modifiedStartLineNumber, 1, change.modifiedEndLineNumber, modified.getLineMaxColumn(change.modifiedEndLineNumber)) : null;\n    const eol = modified.getEOL();\n    if (change.originalEndLineNumber === 0 && newRange) {\n      // Insert change.\n      // To revert: delete the new content and a linebreak (if possible)\n      let range = newRange;\n      if (change.modifiedStartLineNumber > 1) {\n        // Try to include a linebreak from before.\n        range = newRange.setStartPosition(change.modifiedStartLineNumber - 1, modified.getLineMaxColumn(change.modifiedStartLineNumber - 1));\n      } else if (change.modifiedEndLineNumber < modified.getLineCount()) {\n        // Try to include the linebreak from after.\n        range = newRange.setEndPosition(change.modifiedEndLineNumber + 1, 1);\n      }\n      editor.executeEdits('diffEditor', [{\n        range,\n        text: ''\n      }]);\n    } else if (change.modifiedEndLineNumber === 0 && originalContent !== null) {\n      // Delete change.\n      // To revert: insert the old content and a linebreak.\n      const insertAt = change.modifiedStartLineNumber < modified.getLineCount() ? new Position(change.modifiedStartLineNumber + 1, 1) : new Position(change.modifiedStartLineNumber, modified.getLineMaxColumn(change.modifiedStartLineNumber));\n      editor.executeEdits('diffEditor', [{\n        range: Range.fromPositions(insertAt, insertAt),\n        text: change.modifiedStartLineNumber < modified.getLineCount() ? originalContent + eol : eol + originalContent\n      }]);\n    } else if (newRange && originalContent !== null) {\n      // Modified change.\n      editor.executeEdits('diffEditor', [{\n        range: newRange,\n        text: originalContent\n      }]);\n    }\n  }\n  _createInnerEditor(instantiationService, container, options, editorWidgetOptions) {\n    return instantiationService.createInstance(CodeEditorWidget, container, options, editorWidgetOptions);\n  }\n  dispose() {\n    this._codeEditorService.removeDiffEditor(this);\n    if (this._beginUpdateDecorationsTimeout !== -1) {\n      window.clearTimeout(this._beginUpdateDecorationsTimeout);\n      this._beginUpdateDecorationsTimeout = -1;\n    }\n    this._cleanViewZonesAndDecorations();\n    if (this._originalOverviewRuler) {\n      this._overviewDomElement.removeChild(this._originalOverviewRuler.getDomNode());\n      this._originalOverviewRuler.dispose();\n    }\n    if (this._modifiedOverviewRuler) {\n      this._overviewDomElement.removeChild(this._modifiedOverviewRuler.getDomNode());\n      this._modifiedOverviewRuler.dispose();\n    }\n    this._overviewDomElement.removeChild(this._overviewViewportDomElement.domNode);\n    if (this._options.renderOverviewRuler) {\n      this._containerDomElement.removeChild(this._overviewDomElement);\n    }\n    this._containerDomElement.removeChild(this._originalDomNode);\n    this._originalEditor.dispose();\n    this._containerDomElement.removeChild(this._modifiedDomNode);\n    this._modifiedEditor.dispose();\n    this._strategy.dispose();\n    this._containerDomElement.removeChild(this._reviewPane.domNode.domNode);\n    this._containerDomElement.removeChild(this._reviewPane.shadow.domNode);\n    this._containerDomElement.removeChild(this._reviewPane.actionBarContainer.domNode);\n    this._reviewPane.dispose();\n    this._domElement.removeChild(this._containerDomElement);\n    this._onDidDispose.fire();\n    super.dispose();\n  }\n  //------------ begin IDiffEditor methods\n  getId() {\n    return this.getEditorType() + ':' + this._id;\n  }\n  getEditorType() {\n    return editorCommon.EditorType.IDiffEditor;\n  }\n  getLineChanges() {\n    if (!this._diffComputationResult) {\n      return null;\n    }\n    return this._diffComputationResult.changes;\n  }\n  getOriginalEditor() {\n    return this._originalEditor;\n  }\n  getModifiedEditor() {\n    return this._modifiedEditor;\n  }\n  updateOptions(_newOptions) {\n    const newOptions = validateDiffEditorOptions(_newOptions, this._options);\n    const changed = changedDiffEditorOptions(this._options, newOptions);\n    this._options = newOptions;\n    const beginUpdateDecorations = changed.ignoreTrimWhitespace || changed.renderIndicators || changed.renderMarginRevertIcon;\n    const beginUpdateDecorationsSoon = this._isVisible && (changed.maxComputationTime || changed.maxFileSize);\n    if (beginUpdateDecorations) {\n      this._beginUpdateDecorations();\n    } else if (beginUpdateDecorationsSoon) {\n      this._beginUpdateDecorationsSoon();\n    }\n    this._modifiedEditor.updateOptions(this._adjustOptionsForRightHandSide(_newOptions));\n    this._originalEditor.updateOptions(this._adjustOptionsForLeftHandSide(_newOptions));\n    // enableSplitViewResizing\n    this._strategy.setEnableSplitViewResizing(this._options.enableSplitViewResizing);\n    // renderSideBySide\n    if (changed.renderSideBySide) {\n      if (this._options.renderSideBySide) {\n        this._setStrategy(new DiffEditorWidgetSideBySide(this._createDataSource(), this._options.enableSplitViewResizing));\n      } else {\n        this._setStrategy(new DiffEditorWidgetInline(this._createDataSource(), this._options.enableSplitViewResizing));\n      }\n      // Update class name\n      this._containerDomElement.className = DiffEditorWidget._getClassName(this._themeService.getColorTheme(), this._options.renderSideBySide);\n    }\n    // renderOverviewRuler\n    if (changed.renderOverviewRuler) {\n      if (this._options.renderOverviewRuler) {\n        this._containerDomElement.appendChild(this._overviewDomElement);\n      } else {\n        this._containerDomElement.removeChild(this._overviewDomElement);\n      }\n    }\n  }\n  getModel() {\n    return {\n      original: this._originalEditor.getModel(),\n      modified: this._modifiedEditor.getModel()\n    };\n  }\n  setModel(model) {\n    // Guard us against partial null model\n    if (model && (!model.original || !model.modified)) {\n      throw new Error(!model.original ? 'DiffEditorWidget.setModel: Original model is null' : 'DiffEditorWidget.setModel: Modified model is null');\n    }\n    // Remove all view zones & decorations\n    this._cleanViewZonesAndDecorations();\n    this._disposeOverviewRulers();\n    // Update code editor models\n    this._originalEditor.setModel(model ? model.original : null);\n    this._modifiedEditor.setModel(model ? model.modified : null);\n    this._updateDecorationsRunner.cancel();\n    // this.originalEditor.onDidChangeModelOptions\n    if (model) {\n      this._originalEditor.setScrollTop(0);\n      this._modifiedEditor.setScrollTop(0);\n    }\n    // Disable any diff computations that will come in\n    this._diffComputationResult = null;\n    this._diffComputationToken++;\n    this._setState(0 /* editorBrowser.DiffEditorState.Idle */);\n    if (model) {\n      this._createOverviewRulers();\n      // Begin comparing\n      this._beginUpdateDecorations();\n    }\n    this._layoutOverviewViewport();\n  }\n  getContainerDomNode() {\n    return this._domElement;\n  }\n  getVisibleColumnFromPosition(position) {\n    return this._modifiedEditor.getVisibleColumnFromPosition(position);\n  }\n  getPosition() {\n    return this._modifiedEditor.getPosition();\n  }\n  setPosition(position) {\n    let source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'api';\n    this._modifiedEditor.setPosition(position, source);\n  }\n  revealLine(lineNumber) {\n    let scrollType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this._modifiedEditor.revealLine(lineNumber, scrollType);\n  }\n  revealLineInCenter(lineNumber) {\n    let scrollType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this._modifiedEditor.revealLineInCenter(lineNumber, scrollType);\n  }\n  revealLineInCenterIfOutsideViewport(lineNumber) {\n    let scrollType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this._modifiedEditor.revealLineInCenterIfOutsideViewport(lineNumber, scrollType);\n  }\n  revealLineNearTop(lineNumber) {\n    let scrollType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this._modifiedEditor.revealLineNearTop(lineNumber, scrollType);\n  }\n  revealPosition(position) {\n    let scrollType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this._modifiedEditor.revealPosition(position, scrollType);\n  }\n  revealPositionInCenter(position) {\n    let scrollType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this._modifiedEditor.revealPositionInCenter(position, scrollType);\n  }\n  revealPositionInCenterIfOutsideViewport(position) {\n    let scrollType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this._modifiedEditor.revealPositionInCenterIfOutsideViewport(position, scrollType);\n  }\n  revealPositionNearTop(position) {\n    let scrollType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this._modifiedEditor.revealPositionNearTop(position, scrollType);\n  }\n  getSelection() {\n    return this._modifiedEditor.getSelection();\n  }\n  getSelections() {\n    return this._modifiedEditor.getSelections();\n  }\n  setSelection(something) {\n    let source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'api';\n    this._modifiedEditor.setSelection(something, source);\n  }\n  setSelections(ranges) {\n    let source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'api';\n    this._modifiedEditor.setSelections(ranges, source);\n  }\n  revealLines(startLineNumber, endLineNumber) {\n    let scrollType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    this._modifiedEditor.revealLines(startLineNumber, endLineNumber, scrollType);\n  }\n  revealLinesInCenter(startLineNumber, endLineNumber) {\n    let scrollType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    this._modifiedEditor.revealLinesInCenter(startLineNumber, endLineNumber, scrollType);\n  }\n  revealLinesInCenterIfOutsideViewport(startLineNumber, endLineNumber) {\n    let scrollType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    this._modifiedEditor.revealLinesInCenterIfOutsideViewport(startLineNumber, endLineNumber, scrollType);\n  }\n  revealLinesNearTop(startLineNumber, endLineNumber) {\n    let scrollType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    this._modifiedEditor.revealLinesNearTop(startLineNumber, endLineNumber, scrollType);\n  }\n  revealRange(range) {\n    let scrollType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let revealVerticalInCenter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let revealHorizontal = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    this._modifiedEditor.revealRange(range, scrollType, revealVerticalInCenter, revealHorizontal);\n  }\n  revealRangeInCenter(range) {\n    let scrollType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this._modifiedEditor.revealRangeInCenter(range, scrollType);\n  }\n  revealRangeInCenterIfOutsideViewport(range) {\n    let scrollType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this._modifiedEditor.revealRangeInCenterIfOutsideViewport(range, scrollType);\n  }\n  revealRangeNearTop(range) {\n    let scrollType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this._modifiedEditor.revealRangeNearTop(range, scrollType);\n  }\n  revealRangeNearTopIfOutsideViewport(range) {\n    let scrollType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this._modifiedEditor.revealRangeNearTopIfOutsideViewport(range, scrollType);\n  }\n  revealRangeAtTop(range) {\n    let scrollType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this._modifiedEditor.revealRangeAtTop(range, scrollType);\n  }\n  getSupportedActions() {\n    return this._modifiedEditor.getSupportedActions();\n  }\n  saveViewState() {\n    const originalViewState = this._originalEditor.saveViewState();\n    const modifiedViewState = this._modifiedEditor.saveViewState();\n    return {\n      original: originalViewState,\n      modified: modifiedViewState\n    };\n  }\n  restoreViewState(s) {\n    if (s && s.original && s.modified) {\n      const diffEditorState = s;\n      this._originalEditor.restoreViewState(diffEditorState.original);\n      this._modifiedEditor.restoreViewState(diffEditorState.modified);\n    }\n  }\n  layout(dimension) {\n    this._elementSizeObserver.observe(dimension);\n  }\n  focus() {\n    this._modifiedEditor.focus();\n  }\n  hasTextFocus() {\n    return this._originalEditor.hasTextFocus() || this._modifiedEditor.hasTextFocus();\n  }\n  trigger(source, handlerId, payload) {\n    this._modifiedEditor.trigger(source, handlerId, payload);\n  }\n  createDecorationsCollection(decorations) {\n    return this._modifiedEditor.createDecorationsCollection(decorations);\n  }\n  changeDecorations(callback) {\n    return this._modifiedEditor.changeDecorations(callback);\n  }\n  //------------ end IDiffEditor methods\n  //------------ begin layouting methods\n  _onDidContainerSizeChanged() {\n    this._doLayout();\n  }\n  _getReviewHeight() {\n    return this._reviewPane.isVisible() ? this._elementSizeObserver.getHeight() : 0;\n  }\n  _layoutOverviewRulers() {\n    if (!this._options.renderOverviewRuler) {\n      return;\n    }\n    if (!this._originalOverviewRuler || !this._modifiedOverviewRuler) {\n      return;\n    }\n    const height = this._elementSizeObserver.getHeight();\n    const reviewHeight = this._getReviewHeight();\n    const freeSpace = DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH - 2 * DiffEditorWidget.ONE_OVERVIEW_WIDTH;\n    const layoutInfo = this._modifiedEditor.getLayoutInfo();\n    if (layoutInfo) {\n      this._originalOverviewRuler.setLayout({\n        top: 0,\n        width: DiffEditorWidget.ONE_OVERVIEW_WIDTH,\n        right: freeSpace + DiffEditorWidget.ONE_OVERVIEW_WIDTH,\n        height: height - reviewHeight\n      });\n      this._modifiedOverviewRuler.setLayout({\n        top: 0,\n        right: 0,\n        width: DiffEditorWidget.ONE_OVERVIEW_WIDTH,\n        height: height - reviewHeight\n      });\n    }\n  }\n  //------------ end layouting methods\n  _onViewZonesChanged() {\n    if (this._currentlyChangingViewZones) {\n      return;\n    }\n    this._updateDecorationsRunner.schedule();\n  }\n  _beginUpdateDecorationsSoon() {\n    // Clear previous timeout if necessary\n    if (this._beginUpdateDecorationsTimeout !== -1) {\n      window.clearTimeout(this._beginUpdateDecorationsTimeout);\n      this._beginUpdateDecorationsTimeout = -1;\n    }\n    this._beginUpdateDecorationsTimeout = window.setTimeout(() => this._beginUpdateDecorations(), DiffEditorWidget.UPDATE_DIFF_DECORATIONS_DELAY);\n  }\n  static _equals(a, b) {\n    if (!a && !b) {\n      return true;\n    }\n    if (!a || !b) {\n      return false;\n    }\n    return a.toString() === b.toString();\n  }\n  _beginUpdateDecorations() {\n    this._beginUpdateDecorationsTimeout = -1;\n    const currentOriginalModel = this._originalEditor.getModel();\n    const currentModifiedModel = this._modifiedEditor.getModel();\n    if (!currentOriginalModel || !currentModifiedModel) {\n      return;\n    }\n    // Prevent old diff requests to come if a new request has been initiated\n    // The best method would be to call cancel on the Promise, but this is not\n    // yet supported, so using tokens for now.\n    this._diffComputationToken++;\n    const currentToken = this._diffComputationToken;\n    const diffLimit = this._options.maxFileSize * 1024 * 1024; // MB\n    const canSyncModelForDiff = model => {\n      const bufferTextLength = model.getValueLength();\n      return diffLimit === 0 || bufferTextLength <= diffLimit;\n    };\n    if (!canSyncModelForDiff(currentOriginalModel) || !canSyncModelForDiff(currentModifiedModel)) {\n      if (!DiffEditorWidget._equals(currentOriginalModel.uri, this._lastOriginalWarning) || !DiffEditorWidget._equals(currentModifiedModel.uri, this._lastModifiedWarning)) {\n        this._lastOriginalWarning = currentOriginalModel.uri;\n        this._lastModifiedWarning = currentModifiedModel.uri;\n        this._notificationService.warn(nls.localize(\"diff.tooLarge\", \"Cannot compare files because one file is too large.\"));\n      }\n      return;\n    }\n    this._setState(1 /* editorBrowser.DiffEditorState.ComputingDiff */);\n    this._editorWorkerService.computeDiff(currentOriginalModel.uri, currentModifiedModel.uri, this._options.ignoreTrimWhitespace, this._options.maxComputationTime).then(result => {\n      if (currentToken === this._diffComputationToken && currentOriginalModel === this._originalEditor.getModel() && currentModifiedModel === this._modifiedEditor.getModel()) {\n        this._setState(2 /* editorBrowser.DiffEditorState.DiffComputed */);\n        this._diffComputationResult = result;\n        this._updateDecorationsRunner.schedule();\n        this._onDidUpdateDiff.fire();\n      }\n    }, error => {\n      if (currentToken === this._diffComputationToken && currentOriginalModel === this._originalEditor.getModel() && currentModifiedModel === this._modifiedEditor.getModel()) {\n        this._setState(2 /* editorBrowser.DiffEditorState.DiffComputed */);\n        this._diffComputationResult = null;\n        this._updateDecorationsRunner.schedule();\n      }\n    });\n  }\n  _cleanViewZonesAndDecorations() {\n    this._originalEditorState.clean(this._originalEditor);\n    this._modifiedEditorState.clean(this._modifiedEditor);\n  }\n  _updateDecorations() {\n    if (!this._originalEditor.getModel() || !this._modifiedEditor.getModel()) {\n      return;\n    }\n    const lineChanges = this._diffComputationResult ? this._diffComputationResult.changes : [];\n    const foreignOriginal = this._originalEditorState.getForeignViewZones(this._originalEditor.getWhitespaces());\n    const foreignModified = this._modifiedEditorState.getForeignViewZones(this._modifiedEditor.getWhitespaces());\n    const diffDecorations = this._strategy.getEditorsDiffDecorations(lineChanges, this._options.ignoreTrimWhitespace, this._options.renderIndicators, this._options.renderMarginRevertIcon, foreignOriginal, foreignModified);\n    try {\n      this._currentlyChangingViewZones = true;\n      this._originalEditorState.apply(this._originalEditor, this._originalOverviewRuler, diffDecorations.original, false);\n      this._modifiedEditorState.apply(this._modifiedEditor, this._modifiedOverviewRuler, diffDecorations.modified, true);\n    } finally {\n      this._currentlyChangingViewZones = false;\n    }\n  }\n  _adjustOptionsForSubEditor(options) {\n    const clonedOptions = Object.assign({}, options);\n    clonedOptions.inDiffEditor = true;\n    clonedOptions.automaticLayout = false;\n    // Clone scrollbar options before changing them\n    clonedOptions.scrollbar = Object.assign({}, clonedOptions.scrollbar || {});\n    clonedOptions.scrollbar.vertical = 'visible';\n    clonedOptions.folding = false;\n    clonedOptions.codeLens = this._options.diffCodeLens;\n    clonedOptions.fixedOverflowWidgets = true;\n    // clonedOptions.lineDecorationsWidth = '2ch';\n    // Clone minimap options before changing them\n    clonedOptions.minimap = Object.assign({}, clonedOptions.minimap || {});\n    clonedOptions.minimap.enabled = false;\n    return clonedOptions;\n  }\n  _adjustOptionsForLeftHandSide(options) {\n    const result = this._adjustOptionsForSubEditor(options);\n    if (!this._options.renderSideBySide) {\n      // never wrap hidden editor\n      result.wordWrapOverride1 = 'off';\n      result.wordWrapOverride2 = 'off';\n    } else {\n      result.wordWrapOverride1 = this._options.diffWordWrap;\n    }\n    if (options.originalAriaLabel) {\n      result.ariaLabel = options.originalAriaLabel;\n    }\n    result.readOnly = !this._options.originalEditable;\n    result.dropIntoEditor = {\n      enabled: !result.readOnly\n    };\n    result.extraEditorClassName = 'original-in-monaco-diff-editor';\n    return Object.assign(Object.assign({}, result), {\n      dimension: {\n        height: 0,\n        width: 0\n      }\n    });\n  }\n  _adjustOptionsForRightHandSide(options) {\n    const result = this._adjustOptionsForSubEditor(options);\n    if (options.modifiedAriaLabel) {\n      result.ariaLabel = options.modifiedAriaLabel;\n    }\n    result.wordWrapOverride1 = this._options.diffWordWrap;\n    result.revealHorizontalRightPadding = EditorOptions.revealHorizontalRightPadding.defaultValue + DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH;\n    result.scrollbar.verticalHasArrows = false;\n    result.extraEditorClassName = 'modified-in-monaco-diff-editor';\n    return Object.assign(Object.assign({}, result), {\n      dimension: {\n        height: 0,\n        width: 0\n      }\n    });\n  }\n  doLayout() {\n    this._elementSizeObserver.observe();\n    this._doLayout();\n  }\n  _doLayout() {\n    const width = this._elementSizeObserver.getWidth();\n    const height = this._elementSizeObserver.getHeight();\n    const reviewHeight = this._getReviewHeight();\n    const splitPoint = this._strategy.layout();\n    this._originalDomNode.style.width = splitPoint + 'px';\n    this._originalDomNode.style.left = '0px';\n    this._modifiedDomNode.style.width = width - splitPoint + 'px';\n    this._modifiedDomNode.style.left = splitPoint + 'px';\n    this._overviewDomElement.style.top = '0px';\n    this._overviewDomElement.style.height = height - reviewHeight + 'px';\n    this._overviewDomElement.style.width = DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH + 'px';\n    this._overviewDomElement.style.left = width - DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH + 'px';\n    this._overviewViewportDomElement.setWidth(DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH);\n    this._overviewViewportDomElement.setHeight(30);\n    this._originalEditor.layout({\n      width: splitPoint,\n      height: height - reviewHeight\n    });\n    this._modifiedEditor.layout({\n      width: width - splitPoint - (this._options.renderOverviewRuler ? DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH : 0),\n      height: height - reviewHeight\n    });\n    if (this._originalOverviewRuler || this._modifiedOverviewRuler) {\n      this._layoutOverviewRulers();\n    }\n    this._reviewPane.layout(height - reviewHeight, width, reviewHeight);\n    this._layoutOverviewViewport();\n  }\n  _layoutOverviewViewport() {\n    const layout = this._computeOverviewViewport();\n    if (!layout) {\n      this._overviewViewportDomElement.setTop(0);\n      this._overviewViewportDomElement.setHeight(0);\n    } else {\n      this._overviewViewportDomElement.setTop(layout.top);\n      this._overviewViewportDomElement.setHeight(layout.height);\n    }\n  }\n  _computeOverviewViewport() {\n    const layoutInfo = this._modifiedEditor.getLayoutInfo();\n    if (!layoutInfo) {\n      return null;\n    }\n    const scrollTop = this._modifiedEditor.getScrollTop();\n    const scrollHeight = this._modifiedEditor.getScrollHeight();\n    const computedAvailableSize = Math.max(0, layoutInfo.height);\n    const computedRepresentableSize = Math.max(0, computedAvailableSize - 2 * 0);\n    const computedRatio = scrollHeight > 0 ? computedRepresentableSize / scrollHeight : 0;\n    const computedSliderSize = Math.max(0, Math.floor(layoutInfo.height * computedRatio));\n    const computedSliderPosition = Math.floor(scrollTop * computedRatio);\n    return {\n      height: computedSliderSize,\n      top: computedSliderPosition\n    };\n  }\n  _createDataSource() {\n    return {\n      getWidth: () => {\n        return this._elementSizeObserver.getWidth();\n      },\n      getHeight: () => {\n        return this._elementSizeObserver.getHeight() - this._getReviewHeight();\n      },\n      getOptions: () => {\n        return {\n          renderOverviewRuler: this._options.renderOverviewRuler\n        };\n      },\n      getContainerDomNode: () => {\n        return this._containerDomElement;\n      },\n      relayoutEditors: () => {\n        this._doLayout();\n      },\n      getOriginalEditor: () => {\n        return this._originalEditor;\n      },\n      getModifiedEditor: () => {\n        return this._modifiedEditor;\n      }\n    };\n  }\n  _setStrategy(newStrategy) {\n    if (this._strategy) {\n      this._strategy.dispose();\n    }\n    this._strategy = newStrategy;\n    newStrategy.applyColors(this._themeService.getColorTheme());\n    if (this._diffComputationResult) {\n      this._updateDecorations();\n    }\n    // Just do a layout, the strategy might need it\n    this._doLayout();\n  }\n  _getLineChangeAtOrBeforeLineNumber(lineNumber, startLineNumberExtractor) {\n    const lineChanges = this._diffComputationResult ? this._diffComputationResult.changes : [];\n    if (lineChanges.length === 0 || lineNumber < startLineNumberExtractor(lineChanges[0])) {\n      // There are no changes or `lineNumber` is before the first change\n      return null;\n    }\n    let min = 0;\n    let max = lineChanges.length - 1;\n    while (min < max) {\n      const mid = Math.floor((min + max) / 2);\n      const midStart = startLineNumberExtractor(lineChanges[mid]);\n      const midEnd = mid + 1 <= max ? startLineNumberExtractor(lineChanges[mid + 1]) : 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */;\n      if (lineNumber < midStart) {\n        max = mid - 1;\n      } else if (lineNumber >= midEnd) {\n        min = mid + 1;\n      } else {\n        // HIT!\n        min = mid;\n        max = mid;\n      }\n    }\n    return lineChanges[min];\n  }\n  _getEquivalentLineForOriginalLineNumber(lineNumber) {\n    const lineChange = this._getLineChangeAtOrBeforeLineNumber(lineNumber, lineChange => lineChange.originalStartLineNumber);\n    if (!lineChange) {\n      return lineNumber;\n    }\n    const originalEquivalentLineNumber = lineChange.originalStartLineNumber + (lineChange.originalEndLineNumber > 0 ? -1 : 0);\n    const modifiedEquivalentLineNumber = lineChange.modifiedStartLineNumber + (lineChange.modifiedEndLineNumber > 0 ? -1 : 0);\n    const lineChangeOriginalLength = lineChange.originalEndLineNumber > 0 ? lineChange.originalEndLineNumber - lineChange.originalStartLineNumber + 1 : 0;\n    const lineChangeModifiedLength = lineChange.modifiedEndLineNumber > 0 ? lineChange.modifiedEndLineNumber - lineChange.modifiedStartLineNumber + 1 : 0;\n    const delta = lineNumber - originalEquivalentLineNumber;\n    if (delta <= lineChangeOriginalLength) {\n      return modifiedEquivalentLineNumber + Math.min(delta, lineChangeModifiedLength);\n    }\n    return modifiedEquivalentLineNumber + lineChangeModifiedLength - lineChangeOriginalLength + delta;\n  }\n  _getEquivalentLineForModifiedLineNumber(lineNumber) {\n    const lineChange = this._getLineChangeAtOrBeforeLineNumber(lineNumber, lineChange => lineChange.modifiedStartLineNumber);\n    if (!lineChange) {\n      return lineNumber;\n    }\n    const originalEquivalentLineNumber = lineChange.originalStartLineNumber + (lineChange.originalEndLineNumber > 0 ? -1 : 0);\n    const modifiedEquivalentLineNumber = lineChange.modifiedStartLineNumber + (lineChange.modifiedEndLineNumber > 0 ? -1 : 0);\n    const lineChangeOriginalLength = lineChange.originalEndLineNumber > 0 ? lineChange.originalEndLineNumber - lineChange.originalStartLineNumber + 1 : 0;\n    const lineChangeModifiedLength = lineChange.modifiedEndLineNumber > 0 ? lineChange.modifiedEndLineNumber - lineChange.modifiedStartLineNumber + 1 : 0;\n    const delta = lineNumber - modifiedEquivalentLineNumber;\n    if (delta <= lineChangeModifiedLength) {\n      return originalEquivalentLineNumber + Math.min(delta, lineChangeOriginalLength);\n    }\n    return originalEquivalentLineNumber + lineChangeOriginalLength - lineChangeModifiedLength + delta;\n  }\n  getDiffLineInformationForOriginal(lineNumber) {\n    if (!this._diffComputationResult) {\n      // Cannot answer that which I don't know\n      return null;\n    }\n    return {\n      equivalentLineNumber: this._getEquivalentLineForOriginalLineNumber(lineNumber)\n    };\n  }\n  getDiffLineInformationForModified(lineNumber) {\n    if (!this._diffComputationResult) {\n      // Cannot answer that which I don't know\n      return null;\n    }\n    return {\n      equivalentLineNumber: this._getEquivalentLineForModifiedLineNumber(lineNumber)\n    };\n  }\n};\nDiffEditorWidget.ONE_OVERVIEW_WIDTH = 15;\nDiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH = 30;\nDiffEditorWidget.UPDATE_DIFF_DECORATIONS_DELAY = 200; // ms\nDiffEditorWidget = __decorate([__param(3, IClipboardService), __param(4, IEditorWorkerService), __param(5, IContextKeyService), __param(6, IInstantiationService), __param(7, ICodeEditorService), __param(8, IThemeService), __param(9, INotificationService), __param(10, IContextMenuService), __param(11, IEditorProgressService)], DiffEditorWidget);\nexport { DiffEditorWidget };\nclass DiffEditorWidgetStyle extends Disposable {\n  constructor(dataSource) {\n    super();\n    this._dataSource = dataSource;\n    this._insertColor = null;\n    this._removeColor = null;\n  }\n  applyColors(theme) {\n    const newInsertColor = theme.getColor(diffOverviewRulerInserted) || (theme.getColor(diffInserted) || defaultInsertColor).transparent(2);\n    const newRemoveColor = theme.getColor(diffOverviewRulerRemoved) || (theme.getColor(diffRemoved) || defaultRemoveColor).transparent(2);\n    const hasChanges = !newInsertColor.equals(this._insertColor) || !newRemoveColor.equals(this._removeColor);\n    this._insertColor = newInsertColor;\n    this._removeColor = newRemoveColor;\n    return hasChanges;\n  }\n  getEditorsDiffDecorations(lineChanges, ignoreTrimWhitespace, renderIndicators, renderMarginRevertIcon, originalWhitespaces, modifiedWhitespaces) {\n    // Get view zones\n    modifiedWhitespaces = modifiedWhitespaces.sort((a, b) => {\n      return a.afterLineNumber - b.afterLineNumber;\n    });\n    originalWhitespaces = originalWhitespaces.sort((a, b) => {\n      return a.afterLineNumber - b.afterLineNumber;\n    });\n    const zones = this._getViewZones(lineChanges, originalWhitespaces, modifiedWhitespaces, renderIndicators);\n    // Get decorations & overview ruler zones\n    const originalDecorations = this._getOriginalEditorDecorations(zones, lineChanges, ignoreTrimWhitespace, renderIndicators);\n    const modifiedDecorations = this._getModifiedEditorDecorations(zones, lineChanges, ignoreTrimWhitespace, renderIndicators, renderMarginRevertIcon);\n    return {\n      original: {\n        decorations: originalDecorations.decorations,\n        overviewZones: originalDecorations.overviewZones,\n        zones: zones.original\n      },\n      modified: {\n        decorations: modifiedDecorations.decorations,\n        overviewZones: modifiedDecorations.overviewZones,\n        zones: zones.modified\n      }\n    };\n  }\n}\nclass ForeignViewZonesIterator {\n  constructor(source) {\n    this._source = source;\n    this._index = -1;\n    this.current = null;\n    this.advance();\n  }\n  advance() {\n    this._index++;\n    if (this._index < this._source.length) {\n      this.current = this._source[this._index];\n    } else {\n      this.current = null;\n    }\n  }\n}\nclass ViewZonesComputer {\n  constructor(_lineChanges, _originalForeignVZ, _modifiedForeignVZ, _originalEditor, _modifiedEditor) {\n    this._lineChanges = _lineChanges;\n    this._originalForeignVZ = _originalForeignVZ;\n    this._modifiedForeignVZ = _modifiedForeignVZ;\n    this._originalEditor = _originalEditor;\n    this._modifiedEditor = _modifiedEditor;\n  }\n  static _getViewLineCount(editor, startLineNumber, endLineNumber) {\n    const model = editor.getModel();\n    const viewModel = editor._getViewModel();\n    if (model && viewModel) {\n      const viewRange = getViewRange(model, viewModel, startLineNumber, endLineNumber);\n      return viewRange.endLineNumber - viewRange.startLineNumber + 1;\n    }\n    return endLineNumber - startLineNumber + 1;\n  }\n  getViewZones() {\n    const originalLineHeight = this._originalEditor.getOption(61 /* EditorOption.lineHeight */);\n    const modifiedLineHeight = this._modifiedEditor.getOption(61 /* EditorOption.lineHeight */);\n    const originalHasWrapping = this._originalEditor.getOption(134 /* EditorOption.wrappingInfo */).wrappingColumn !== -1;\n    const modifiedHasWrapping = this._modifiedEditor.getOption(134 /* EditorOption.wrappingInfo */).wrappingColumn !== -1;\n    const hasWrapping = originalHasWrapping || modifiedHasWrapping;\n    const originalModel = this._originalEditor.getModel();\n    const originalCoordinatesConverter = this._originalEditor._getViewModel().coordinatesConverter;\n    const modifiedCoordinatesConverter = this._modifiedEditor._getViewModel().coordinatesConverter;\n    const result = {\n      original: [],\n      modified: []\n    };\n    let lineChangeModifiedLength = 0;\n    let lineChangeOriginalLength = 0;\n    let originalEquivalentLineNumber = 0;\n    let modifiedEquivalentLineNumber = 0;\n    let originalEndEquivalentLineNumber = 0;\n    let modifiedEndEquivalentLineNumber = 0;\n    const sortMyViewZones = (a, b) => {\n      return a.afterLineNumber - b.afterLineNumber;\n    };\n    const addAndCombineIfPossible = (destination, item) => {\n      if (item.domNode === null && destination.length > 0) {\n        const lastItem = destination[destination.length - 1];\n        if (lastItem.afterLineNumber === item.afterLineNumber && lastItem.domNode === null) {\n          lastItem.heightInLines += item.heightInLines;\n          return;\n        }\n      }\n      destination.push(item);\n    };\n    const modifiedForeignVZ = new ForeignViewZonesIterator(this._modifiedForeignVZ);\n    const originalForeignVZ = new ForeignViewZonesIterator(this._originalForeignVZ);\n    let lastOriginalLineNumber = 1;\n    let lastModifiedLineNumber = 1;\n    // In order to include foreign view zones after the last line change, the for loop will iterate once more after the end of the `lineChanges` array\n    for (let i = 0, length = this._lineChanges.length; i <= length; i++) {\n      const lineChange = i < length ? this._lineChanges[i] : null;\n      if (lineChange !== null) {\n        originalEquivalentLineNumber = lineChange.originalStartLineNumber + (lineChange.originalEndLineNumber > 0 ? -1 : 0);\n        modifiedEquivalentLineNumber = lineChange.modifiedStartLineNumber + (lineChange.modifiedEndLineNumber > 0 ? -1 : 0);\n        lineChangeOriginalLength = lineChange.originalEndLineNumber > 0 ? ViewZonesComputer._getViewLineCount(this._originalEditor, lineChange.originalStartLineNumber, lineChange.originalEndLineNumber) : 0;\n        lineChangeModifiedLength = lineChange.modifiedEndLineNumber > 0 ? ViewZonesComputer._getViewLineCount(this._modifiedEditor, lineChange.modifiedStartLineNumber, lineChange.modifiedEndLineNumber) : 0;\n        originalEndEquivalentLineNumber = Math.max(lineChange.originalStartLineNumber, lineChange.originalEndLineNumber);\n        modifiedEndEquivalentLineNumber = Math.max(lineChange.modifiedStartLineNumber, lineChange.modifiedEndLineNumber);\n      } else {\n        // Increase to very large value to get the producing tests of foreign view zones running\n        originalEquivalentLineNumber += 10000000 + lineChangeOriginalLength;\n        modifiedEquivalentLineNumber += 10000000 + lineChangeModifiedLength;\n        originalEndEquivalentLineNumber = originalEquivalentLineNumber;\n        modifiedEndEquivalentLineNumber = modifiedEquivalentLineNumber;\n      }\n      // Each step produces view zones, and after producing them, we try to cancel them out, to avoid empty-empty view zone cases\n      let stepOriginal = [];\n      let stepModified = [];\n      // ---------------------------- PRODUCE VIEW ZONES\n      // [PRODUCE] View zones due to line mapping differences (equal lines but wrapped differently)\n      if (hasWrapping) {\n        let count;\n        if (lineChange) {\n          if (lineChange.originalEndLineNumber > 0) {\n            count = lineChange.originalStartLineNumber - lastOriginalLineNumber;\n          } else {\n            count = lineChange.modifiedStartLineNumber - lastModifiedLineNumber;\n          }\n        } else {\n          // `lastOriginalLineNumber` has not been looked at yet\n          count = originalModel.getLineCount() - lastOriginalLineNumber + 1;\n        }\n        for (let i = 0; i < count; i++) {\n          const originalLineNumber = lastOriginalLineNumber + i;\n          const modifiedLineNumber = lastModifiedLineNumber + i;\n          const originalViewLineCount = originalCoordinatesConverter.getModelLineViewLineCount(originalLineNumber);\n          const modifiedViewLineCount = modifiedCoordinatesConverter.getModelLineViewLineCount(modifiedLineNumber);\n          if (originalViewLineCount < modifiedViewLineCount) {\n            stepOriginal.push({\n              afterLineNumber: originalLineNumber,\n              heightInLines: modifiedViewLineCount - originalViewLineCount,\n              domNode: null,\n              marginDomNode: null\n            });\n          } else if (originalViewLineCount > modifiedViewLineCount) {\n            stepModified.push({\n              afterLineNumber: modifiedLineNumber,\n              heightInLines: originalViewLineCount - modifiedViewLineCount,\n              domNode: null,\n              marginDomNode: null\n            });\n          }\n        }\n        if (lineChange) {\n          lastOriginalLineNumber = (lineChange.originalEndLineNumber > 0 ? lineChange.originalEndLineNumber : lineChange.originalStartLineNumber) + 1;\n          lastModifiedLineNumber = (lineChange.modifiedEndLineNumber > 0 ? lineChange.modifiedEndLineNumber : lineChange.modifiedStartLineNumber) + 1;\n        }\n      }\n      // [PRODUCE] View zone(s) in original-side due to foreign view zone(s) in modified-side\n      while (modifiedForeignVZ.current && modifiedForeignVZ.current.afterLineNumber <= modifiedEndEquivalentLineNumber) {\n        let viewZoneLineNumber;\n        if (modifiedForeignVZ.current.afterLineNumber <= modifiedEquivalentLineNumber) {\n          viewZoneLineNumber = originalEquivalentLineNumber - modifiedEquivalentLineNumber + modifiedForeignVZ.current.afterLineNumber;\n        } else {\n          viewZoneLineNumber = originalEndEquivalentLineNumber;\n        }\n        let marginDomNode = null;\n        if (lineChange && lineChange.modifiedStartLineNumber <= modifiedForeignVZ.current.afterLineNumber && modifiedForeignVZ.current.afterLineNumber <= lineChange.modifiedEndLineNumber) {\n          marginDomNode = this._createOriginalMarginDomNodeForModifiedForeignViewZoneInAddedRegion();\n        }\n        stepOriginal.push({\n          afterLineNumber: viewZoneLineNumber,\n          heightInLines: modifiedForeignVZ.current.height / modifiedLineHeight,\n          domNode: null,\n          marginDomNode: marginDomNode\n        });\n        modifiedForeignVZ.advance();\n      }\n      // [PRODUCE] View zone(s) in modified-side due to foreign view zone(s) in original-side\n      while (originalForeignVZ.current && originalForeignVZ.current.afterLineNumber <= originalEndEquivalentLineNumber) {\n        let viewZoneLineNumber;\n        if (originalForeignVZ.current.afterLineNumber <= originalEquivalentLineNumber) {\n          viewZoneLineNumber = modifiedEquivalentLineNumber - originalEquivalentLineNumber + originalForeignVZ.current.afterLineNumber;\n        } else {\n          viewZoneLineNumber = modifiedEndEquivalentLineNumber;\n        }\n        stepModified.push({\n          afterLineNumber: viewZoneLineNumber,\n          heightInLines: originalForeignVZ.current.height / originalLineHeight,\n          domNode: null\n        });\n        originalForeignVZ.advance();\n      }\n      if (lineChange !== null && isChangeOrInsert(lineChange)) {\n        const r = this._produceOriginalFromDiff(lineChange, lineChangeOriginalLength, lineChangeModifiedLength);\n        if (r) {\n          stepOriginal.push(r);\n        }\n      }\n      if (lineChange !== null && isChangeOrDelete(lineChange)) {\n        const r = this._produceModifiedFromDiff(lineChange, lineChangeOriginalLength, lineChangeModifiedLength);\n        if (r) {\n          stepModified.push(r);\n        }\n      }\n      // ---------------------------- END PRODUCE VIEW ZONES\n      // ---------------------------- EMIT MINIMAL VIEW ZONES\n      // [CANCEL & EMIT] Try to cancel view zones out\n      let stepOriginalIndex = 0;\n      let stepModifiedIndex = 0;\n      stepOriginal = stepOriginal.sort(sortMyViewZones);\n      stepModified = stepModified.sort(sortMyViewZones);\n      while (stepOriginalIndex < stepOriginal.length && stepModifiedIndex < stepModified.length) {\n        const original = stepOriginal[stepOriginalIndex];\n        const modified = stepModified[stepModifiedIndex];\n        const originalDelta = original.afterLineNumber - originalEquivalentLineNumber;\n        const modifiedDelta = modified.afterLineNumber - modifiedEquivalentLineNumber;\n        if (originalDelta < modifiedDelta) {\n          addAndCombineIfPossible(result.original, original);\n          stepOriginalIndex++;\n        } else if (modifiedDelta < originalDelta) {\n          addAndCombineIfPossible(result.modified, modified);\n          stepModifiedIndex++;\n        } else if (original.shouldNotShrink) {\n          addAndCombineIfPossible(result.original, original);\n          stepOriginalIndex++;\n        } else if (modified.shouldNotShrink) {\n          addAndCombineIfPossible(result.modified, modified);\n          stepModifiedIndex++;\n        } else {\n          if (original.heightInLines >= modified.heightInLines) {\n            // modified view zone gets removed\n            original.heightInLines -= modified.heightInLines;\n            stepModifiedIndex++;\n          } else {\n            // original view zone gets removed\n            modified.heightInLines -= original.heightInLines;\n            stepOriginalIndex++;\n          }\n        }\n      }\n      // [EMIT] Remaining original view zones\n      while (stepOriginalIndex < stepOriginal.length) {\n        addAndCombineIfPossible(result.original, stepOriginal[stepOriginalIndex]);\n        stepOriginalIndex++;\n      }\n      // [EMIT] Remaining modified view zones\n      while (stepModifiedIndex < stepModified.length) {\n        addAndCombineIfPossible(result.modified, stepModified[stepModifiedIndex]);\n        stepModifiedIndex++;\n      }\n      // ---------------------------- END EMIT MINIMAL VIEW ZONES\n    }\n\n    return {\n      original: ViewZonesComputer._ensureDomNodes(result.original),\n      modified: ViewZonesComputer._ensureDomNodes(result.modified)\n    };\n  }\n  static _ensureDomNodes(zones) {\n    return zones.map(z => {\n      if (!z.domNode) {\n        z.domNode = createFakeLinesDiv();\n      }\n      return z;\n    });\n  }\n}\nfunction createDecoration(startLineNumber, startColumn, endLineNumber, endColumn, options) {\n  return {\n    range: new Range(startLineNumber, startColumn, endLineNumber, endColumn),\n    options: options\n  };\n}\nconst DECORATIONS = {\n  arrowRevertChange: ModelDecorationOptions.register({\n    description: 'diff-editor-arrow-revert-change',\n    glyphMarginClassName: 'arrow-revert-change ' + ThemeIcon.asClassName(Codicon.arrowRight)\n  }),\n  charDelete: ModelDecorationOptions.register({\n    description: 'diff-editor-char-delete',\n    className: 'char-delete'\n  }),\n  charDeleteWholeLine: ModelDecorationOptions.register({\n    description: 'diff-editor-char-delete-whole-line',\n    className: 'char-delete',\n    isWholeLine: true\n  }),\n  charInsert: ModelDecorationOptions.register({\n    description: 'diff-editor-char-insert',\n    className: 'char-insert'\n  }),\n  charInsertWholeLine: ModelDecorationOptions.register({\n    description: 'diff-editor-char-insert-whole-line',\n    className: 'char-insert',\n    isWholeLine: true\n  }),\n  lineInsert: ModelDecorationOptions.register({\n    description: 'diff-editor-line-insert',\n    className: 'line-insert',\n    marginClassName: 'gutter-insert',\n    isWholeLine: true\n  }),\n  lineInsertWithSign: ModelDecorationOptions.register({\n    description: 'diff-editor-line-insert-with-sign',\n    className: 'line-insert',\n    linesDecorationsClassName: 'insert-sign ' + ThemeIcon.asClassName(diffInsertIcon),\n    marginClassName: 'gutter-insert',\n    isWholeLine: true\n  }),\n  lineDelete: ModelDecorationOptions.register({\n    description: 'diff-editor-line-delete',\n    className: 'line-delete',\n    marginClassName: 'gutter-delete',\n    isWholeLine: true\n  }),\n  lineDeleteWithSign: ModelDecorationOptions.register({\n    description: 'diff-editor-line-delete-with-sign',\n    className: 'line-delete',\n    linesDecorationsClassName: 'delete-sign ' + ThemeIcon.asClassName(diffRemoveIcon),\n    marginClassName: 'gutter-delete',\n    isWholeLine: true\n  }),\n  lineDeleteMargin: ModelDecorationOptions.register({\n    description: 'diff-editor-line-delete-margin',\n    marginClassName: 'gutter-delete'\n  })\n};\nclass DiffEditorWidgetSideBySide extends DiffEditorWidgetStyle {\n  constructor(dataSource, enableSplitViewResizing) {\n    super(dataSource);\n    this._disableSash = enableSplitViewResizing === false;\n    this._sashRatio = null;\n    this._sashPosition = null;\n    this._startSashPosition = null;\n    this._sash = this._register(new Sash(this._dataSource.getContainerDomNode(), this, {\n      orientation: 0 /* Orientation.VERTICAL */\n    }));\n    if (this._disableSash) {\n      this._sash.state = 0 /* SashState.Disabled */;\n    }\n\n    this._sash.onDidStart(() => this._onSashDragStart());\n    this._sash.onDidChange(e => this._onSashDrag(e));\n    this._sash.onDidEnd(() => this._onSashDragEnd());\n    this._sash.onDidReset(() => this._onSashReset());\n  }\n  setEnableSplitViewResizing(enableSplitViewResizing) {\n    const newDisableSash = enableSplitViewResizing === false;\n    if (this._disableSash !== newDisableSash) {\n      this._disableSash = newDisableSash;\n      this._sash.state = this._disableSash ? 0 /* SashState.Disabled */ : 3 /* SashState.Enabled */;\n    }\n  }\n\n  layout() {\n    let sashRatio = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._sashRatio;\n    const w = this._dataSource.getWidth();\n    const contentWidth = w - (this._dataSource.getOptions().renderOverviewRuler ? DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH : 0);\n    let sashPosition = Math.floor((sashRatio || 0.5) * contentWidth);\n    const midPoint = Math.floor(0.5 * contentWidth);\n    sashPosition = this._disableSash ? midPoint : sashPosition || midPoint;\n    if (contentWidth > DiffEditorWidgetSideBySide.MINIMUM_EDITOR_WIDTH * 2) {\n      if (sashPosition < DiffEditorWidgetSideBySide.MINIMUM_EDITOR_WIDTH) {\n        sashPosition = DiffEditorWidgetSideBySide.MINIMUM_EDITOR_WIDTH;\n      }\n      if (sashPosition > contentWidth - DiffEditorWidgetSideBySide.MINIMUM_EDITOR_WIDTH) {\n        sashPosition = contentWidth - DiffEditorWidgetSideBySide.MINIMUM_EDITOR_WIDTH;\n      }\n    } else {\n      sashPosition = midPoint;\n    }\n    if (this._sashPosition !== sashPosition) {\n      this._sashPosition = sashPosition;\n    }\n    this._sash.layout();\n    return this._sashPosition;\n  }\n  _onSashDragStart() {\n    this._startSashPosition = this._sashPosition;\n  }\n  _onSashDrag(e) {\n    const w = this._dataSource.getWidth();\n    const contentWidth = w - (this._dataSource.getOptions().renderOverviewRuler ? DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH : 0);\n    const sashPosition = this.layout((this._startSashPosition + (e.currentX - e.startX)) / contentWidth);\n    this._sashRatio = sashPosition / contentWidth;\n    this._dataSource.relayoutEditors();\n  }\n  _onSashDragEnd() {\n    this._sash.layout();\n  }\n  _onSashReset() {\n    this._sashRatio = 0.5;\n    this._dataSource.relayoutEditors();\n    this._sash.layout();\n  }\n  getVerticalSashTop(sash) {\n    return 0;\n  }\n  getVerticalSashLeft(sash) {\n    return this._sashPosition;\n  }\n  getVerticalSashHeight(sash) {\n    return this._dataSource.getHeight();\n  }\n  _getViewZones(lineChanges, originalForeignVZ, modifiedForeignVZ) {\n    const originalEditor = this._dataSource.getOriginalEditor();\n    const modifiedEditor = this._dataSource.getModifiedEditor();\n    const c = new SideBySideViewZonesComputer(lineChanges, originalForeignVZ, modifiedForeignVZ, originalEditor, modifiedEditor);\n    return c.getViewZones();\n  }\n  _getOriginalEditorDecorations(zones, lineChanges, ignoreTrimWhitespace, renderIndicators) {\n    const originalEditor = this._dataSource.getOriginalEditor();\n    const overviewZoneColor = String(this._removeColor);\n    const result = {\n      decorations: [],\n      overviewZones: []\n    };\n    const originalModel = originalEditor.getModel();\n    const originalViewModel = originalEditor._getViewModel();\n    for (const lineChange of lineChanges) {\n      if (isChangeOrDelete(lineChange)) {\n        result.decorations.push({\n          range: new Range(lineChange.originalStartLineNumber, 1, lineChange.originalEndLineNumber, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */),\n          options: renderIndicators ? DECORATIONS.lineDeleteWithSign : DECORATIONS.lineDelete\n        });\n        if (!isChangeOrInsert(lineChange) || !lineChange.charChanges) {\n          result.decorations.push(createDecoration(lineChange.originalStartLineNumber, 1, lineChange.originalEndLineNumber, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */, DECORATIONS.charDeleteWholeLine));\n        }\n        const viewRange = getViewRange(originalModel, originalViewModel, lineChange.originalStartLineNumber, lineChange.originalEndLineNumber);\n        result.overviewZones.push(new OverviewRulerZone(viewRange.startLineNumber, viewRange.endLineNumber, /*use endLineNumber*/0, overviewZoneColor));\n        if (lineChange.charChanges) {\n          for (const charChange of lineChange.charChanges) {\n            if (isCharChangeOrDelete(charChange)) {\n              if (ignoreTrimWhitespace) {\n                for (let lineNumber = charChange.originalStartLineNumber; lineNumber <= charChange.originalEndLineNumber; lineNumber++) {\n                  let startColumn;\n                  let endColumn;\n                  if (lineNumber === charChange.originalStartLineNumber) {\n                    startColumn = charChange.originalStartColumn;\n                  } else {\n                    startColumn = originalModel.getLineFirstNonWhitespaceColumn(lineNumber);\n                  }\n                  if (lineNumber === charChange.originalEndLineNumber) {\n                    endColumn = charChange.originalEndColumn;\n                  } else {\n                    endColumn = originalModel.getLineLastNonWhitespaceColumn(lineNumber);\n                  }\n                  result.decorations.push(createDecoration(lineNumber, startColumn, lineNumber, endColumn, DECORATIONS.charDelete));\n                }\n              } else {\n                result.decorations.push(createDecoration(charChange.originalStartLineNumber, charChange.originalStartColumn, charChange.originalEndLineNumber, charChange.originalEndColumn, DECORATIONS.charDelete));\n              }\n            }\n          }\n        }\n      }\n    }\n    return result;\n  }\n  _getModifiedEditorDecorations(zones, lineChanges, ignoreTrimWhitespace, renderIndicators, renderMarginRevertIcon) {\n    const modifiedEditor = this._dataSource.getModifiedEditor();\n    const overviewZoneColor = String(this._insertColor);\n    const result = {\n      decorations: [],\n      overviewZones: []\n    };\n    const modifiedModel = modifiedEditor.getModel();\n    const modifiedViewModel = modifiedEditor._getViewModel();\n    for (const lineChange of lineChanges) {\n      // Arrows for reverting changes.\n      if (renderMarginRevertIcon) {\n        if (lineChange.modifiedEndLineNumber > 0) {\n          result.decorations.push({\n            range: new Range(lineChange.modifiedStartLineNumber, 1, lineChange.modifiedStartLineNumber, 1),\n            options: DECORATIONS.arrowRevertChange\n          });\n        } else {\n          const viewZone = zones.modified.find(z => z.afterLineNumber === lineChange.modifiedStartLineNumber);\n          if (viewZone) {\n            viewZone.marginDomNode = createViewZoneMarginArrow();\n          }\n        }\n      }\n      if (isChangeOrInsert(lineChange)) {\n        result.decorations.push({\n          range: new Range(lineChange.modifiedStartLineNumber, 1, lineChange.modifiedEndLineNumber, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */),\n          options: renderIndicators ? DECORATIONS.lineInsertWithSign : DECORATIONS.lineInsert\n        });\n        if (!isChangeOrDelete(lineChange) || !lineChange.charChanges) {\n          result.decorations.push(createDecoration(lineChange.modifiedStartLineNumber, 1, lineChange.modifiedEndLineNumber, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */, DECORATIONS.charInsertWholeLine));\n        }\n        const viewRange = getViewRange(modifiedModel, modifiedViewModel, lineChange.modifiedStartLineNumber, lineChange.modifiedEndLineNumber);\n        result.overviewZones.push(new OverviewRulerZone(viewRange.startLineNumber, viewRange.endLineNumber, /*use endLineNumber*/0, overviewZoneColor));\n        if (lineChange.charChanges) {\n          for (const charChange of lineChange.charChanges) {\n            if (isCharChangeOrInsert(charChange)) {\n              if (ignoreTrimWhitespace) {\n                for (let lineNumber = charChange.modifiedStartLineNumber; lineNumber <= charChange.modifiedEndLineNumber; lineNumber++) {\n                  let startColumn;\n                  let endColumn;\n                  if (lineNumber === charChange.modifiedStartLineNumber) {\n                    startColumn = charChange.modifiedStartColumn;\n                  } else {\n                    startColumn = modifiedModel.getLineFirstNonWhitespaceColumn(lineNumber);\n                  }\n                  if (lineNumber === charChange.modifiedEndLineNumber) {\n                    endColumn = charChange.modifiedEndColumn;\n                  } else {\n                    endColumn = modifiedModel.getLineLastNonWhitespaceColumn(lineNumber);\n                  }\n                  result.decorations.push(createDecoration(lineNumber, startColumn, lineNumber, endColumn, DECORATIONS.charInsert));\n                }\n              } else {\n                result.decorations.push(createDecoration(charChange.modifiedStartLineNumber, charChange.modifiedStartColumn, charChange.modifiedEndLineNumber, charChange.modifiedEndColumn, DECORATIONS.charInsert));\n              }\n            }\n          }\n        }\n      }\n    }\n    return result;\n  }\n}\nDiffEditorWidgetSideBySide.MINIMUM_EDITOR_WIDTH = 100;\nclass SideBySideViewZonesComputer extends ViewZonesComputer {\n  constructor(lineChanges, originalForeignVZ, modifiedForeignVZ, originalEditor, modifiedEditor) {\n    super(lineChanges, originalForeignVZ, modifiedForeignVZ, originalEditor, modifiedEditor);\n  }\n  _createOriginalMarginDomNodeForModifiedForeignViewZoneInAddedRegion() {\n    return null;\n  }\n  _produceOriginalFromDiff(lineChange, lineChangeOriginalLength, lineChangeModifiedLength) {\n    if (lineChangeModifiedLength > lineChangeOriginalLength) {\n      return {\n        afterLineNumber: Math.max(lineChange.originalStartLineNumber, lineChange.originalEndLineNumber),\n        heightInLines: lineChangeModifiedLength - lineChangeOriginalLength,\n        domNode: null\n      };\n    }\n    return null;\n  }\n  _produceModifiedFromDiff(lineChange, lineChangeOriginalLength, lineChangeModifiedLength) {\n    if (lineChangeOriginalLength > lineChangeModifiedLength) {\n      return {\n        afterLineNumber: Math.max(lineChange.modifiedStartLineNumber, lineChange.modifiedEndLineNumber),\n        heightInLines: lineChangeOriginalLength - lineChangeModifiedLength,\n        domNode: null\n      };\n    }\n    return null;\n  }\n}\nclass DiffEditorWidgetInline extends DiffEditorWidgetStyle {\n  constructor(dataSource, enableSplitViewResizing) {\n    super(dataSource);\n    this._decorationsLeft = dataSource.getOriginalEditor().getLayoutInfo().decorationsLeft;\n    this._register(dataSource.getOriginalEditor().onDidLayoutChange(layoutInfo => {\n      if (this._decorationsLeft !== layoutInfo.decorationsLeft) {\n        this._decorationsLeft = layoutInfo.decorationsLeft;\n        dataSource.relayoutEditors();\n      }\n    }));\n  }\n  setEnableSplitViewResizing(enableSplitViewResizing) {\n    // Nothing to do..\n  }\n  _getViewZones(lineChanges, originalForeignVZ, modifiedForeignVZ, renderIndicators) {\n    const originalEditor = this._dataSource.getOriginalEditor();\n    const modifiedEditor = this._dataSource.getModifiedEditor();\n    const computer = new InlineViewZonesComputer(lineChanges, originalForeignVZ, modifiedForeignVZ, originalEditor, modifiedEditor, renderIndicators);\n    return computer.getViewZones();\n  }\n  _getOriginalEditorDecorations(zones, lineChanges, ignoreTrimWhitespace, renderIndicators) {\n    const overviewZoneColor = String(this._removeColor);\n    const result = {\n      decorations: [],\n      overviewZones: []\n    };\n    const originalEditor = this._dataSource.getOriginalEditor();\n    const originalModel = originalEditor.getModel();\n    const originalViewModel = originalEditor._getViewModel();\n    let zoneIndex = 0;\n    for (const lineChange of lineChanges) {\n      // Add overview zones in the overview ruler\n      if (isChangeOrDelete(lineChange)) {\n        result.decorations.push({\n          range: new Range(lineChange.originalStartLineNumber, 1, lineChange.originalEndLineNumber, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */),\n          options: DECORATIONS.lineDeleteMargin\n        });\n        while (zoneIndex < zones.modified.length) {\n          const zone = zones.modified[zoneIndex];\n          if (zone.diff && zone.diff.originalStartLineNumber >= lineChange.originalStartLineNumber) {\n            break;\n          }\n          zoneIndex++;\n        }\n        let zoneHeightInLines = 0;\n        if (zoneIndex < zones.modified.length) {\n          const zone = zones.modified[zoneIndex];\n          if (zone.diff && zone.diff.originalStartLineNumber === lineChange.originalStartLineNumber && zone.diff.originalEndLineNumber === lineChange.originalEndLineNumber && zone.diff.modifiedStartLineNumber === lineChange.modifiedStartLineNumber && zone.diff.modifiedEndLineNumber === lineChange.modifiedEndLineNumber) {\n            zoneHeightInLines = zone.heightInLines;\n          }\n        }\n        const viewRange = getViewRange(originalModel, originalViewModel, lineChange.originalStartLineNumber, lineChange.originalEndLineNumber);\n        result.overviewZones.push(new OverviewRulerZone(viewRange.startLineNumber, viewRange.endLineNumber, zoneHeightInLines, overviewZoneColor));\n      }\n    }\n    return result;\n  }\n  _getModifiedEditorDecorations(zones, lineChanges, ignoreTrimWhitespace, renderIndicators, renderMarginRevertIcon) {\n    const modifiedEditor = this._dataSource.getModifiedEditor();\n    const overviewZoneColor = String(this._insertColor);\n    const result = {\n      decorations: [],\n      overviewZones: []\n    };\n    const modifiedModel = modifiedEditor.getModel();\n    const modifiedViewModel = modifiedEditor._getViewModel();\n    for (const lineChange of lineChanges) {\n      // Add decorations & overview zones\n      if (isChangeOrInsert(lineChange)) {\n        result.decorations.push({\n          range: new Range(lineChange.modifiedStartLineNumber, 1, lineChange.modifiedEndLineNumber, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */),\n          options: renderIndicators ? DECORATIONS.lineInsertWithSign : DECORATIONS.lineInsert\n        });\n        const viewRange = getViewRange(modifiedModel, modifiedViewModel, lineChange.modifiedStartLineNumber, lineChange.modifiedEndLineNumber);\n        result.overviewZones.push(new OverviewRulerZone(viewRange.startLineNumber, viewRange.endLineNumber, /*use endLineNumber*/0, overviewZoneColor));\n        if (lineChange.charChanges) {\n          for (const charChange of lineChange.charChanges) {\n            if (isCharChangeOrInsert(charChange)) {\n              if (ignoreTrimWhitespace) {\n                for (let lineNumber = charChange.modifiedStartLineNumber; lineNumber <= charChange.modifiedEndLineNumber; lineNumber++) {\n                  let startColumn;\n                  let endColumn;\n                  if (lineNumber === charChange.modifiedStartLineNumber) {\n                    startColumn = charChange.modifiedStartColumn;\n                  } else {\n                    startColumn = modifiedModel.getLineFirstNonWhitespaceColumn(lineNumber);\n                  }\n                  if (lineNumber === charChange.modifiedEndLineNumber) {\n                    endColumn = charChange.modifiedEndColumn;\n                  } else {\n                    endColumn = modifiedModel.getLineLastNonWhitespaceColumn(lineNumber);\n                  }\n                  result.decorations.push(createDecoration(lineNumber, startColumn, lineNumber, endColumn, DECORATIONS.charInsert));\n                }\n              } else {\n                result.decorations.push(createDecoration(charChange.modifiedStartLineNumber, charChange.modifiedStartColumn, charChange.modifiedEndLineNumber, charChange.modifiedEndColumn, DECORATIONS.charInsert));\n              }\n            }\n          }\n        } else {\n          result.decorations.push(createDecoration(lineChange.modifiedStartLineNumber, 1, lineChange.modifiedEndLineNumber, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */, DECORATIONS.charInsertWholeLine));\n        }\n      }\n    }\n    return result;\n  }\n  layout() {\n    // An editor should not be smaller than 5px\n    return Math.max(5, this._decorationsLeft);\n  }\n}\nclass InlineViewZonesComputer extends ViewZonesComputer {\n  constructor(lineChanges, originalForeignVZ, modifiedForeignVZ, originalEditor, modifiedEditor, renderIndicators) {\n    super(lineChanges, originalForeignVZ, modifiedForeignVZ, originalEditor, modifiedEditor);\n    this._originalModel = originalEditor.getModel();\n    this._renderIndicators = renderIndicators;\n    this._pendingLineChange = [];\n    this._pendingViewZones = [];\n    this._lineBreaksComputer = this._modifiedEditor._getViewModel().createLineBreaksComputer();\n  }\n  getViewZones() {\n    const result = super.getViewZones();\n    this._finalize(result);\n    return result;\n  }\n  _createOriginalMarginDomNodeForModifiedForeignViewZoneInAddedRegion() {\n    const result = document.createElement('div');\n    result.className = 'inline-added-margin-view-zone';\n    return result;\n  }\n  _produceOriginalFromDiff(lineChange, lineChangeOriginalLength, lineChangeModifiedLength) {\n    const marginDomNode = document.createElement('div');\n    marginDomNode.className = 'inline-added-margin-view-zone';\n    return {\n      afterLineNumber: Math.max(lineChange.originalStartLineNumber, lineChange.originalEndLineNumber),\n      heightInLines: lineChangeModifiedLength,\n      domNode: document.createElement('div'),\n      marginDomNode: marginDomNode\n    };\n  }\n  _produceModifiedFromDiff(lineChange, lineChangeOriginalLength, lineChangeModifiedLength) {\n    const domNode = document.createElement('div');\n    domNode.className = `view-lines line-delete ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}`;\n    const marginDomNode = document.createElement('div');\n    marginDomNode.className = 'inline-deleted-margin-view-zone';\n    const viewZone = {\n      shouldNotShrink: true,\n      afterLineNumber: lineChange.modifiedEndLineNumber === 0 ? lineChange.modifiedStartLineNumber : lineChange.modifiedStartLineNumber - 1,\n      heightInLines: lineChangeOriginalLength,\n      minWidthInPx: 0,\n      domNode: domNode,\n      marginDomNode: marginDomNode,\n      diff: {\n        originalStartLineNumber: lineChange.originalStartLineNumber,\n        originalEndLineNumber: lineChange.originalEndLineNumber,\n        modifiedStartLineNumber: lineChange.modifiedStartLineNumber,\n        modifiedEndLineNumber: lineChange.modifiedEndLineNumber,\n        originalModel: this._originalModel,\n        viewLineCounts: null\n      }\n    };\n    for (let lineNumber = lineChange.originalStartLineNumber; lineNumber <= lineChange.originalEndLineNumber; lineNumber++) {\n      this._lineBreaksComputer.addRequest(this._originalModel.getLineContent(lineNumber), null, null);\n    }\n    this._pendingLineChange.push(lineChange);\n    this._pendingViewZones.push(viewZone);\n    return viewZone;\n  }\n  _finalize(result) {\n    const modifiedEditorOptions = this._modifiedEditor.getOptions();\n    const tabSize = this._modifiedEditor.getModel().getOptions().tabSize;\n    const fontInfo = modifiedEditorOptions.get(46 /* EditorOption.fontInfo */);\n    const disableMonospaceOptimizations = modifiedEditorOptions.get(29 /* EditorOption.disableMonospaceOptimizations */);\n    const typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n    const scrollBeyondLastColumn = modifiedEditorOptions.get(95 /* EditorOption.scrollBeyondLastColumn */);\n    const mightContainNonBasicASCII = this._originalModel.mightContainNonBasicASCII();\n    const mightContainRTL = this._originalModel.mightContainRTL();\n    const lineHeight = modifiedEditorOptions.get(61 /* EditorOption.lineHeight */);\n    const layoutInfo = modifiedEditorOptions.get(133 /* EditorOption.layoutInfo */);\n    const lineDecorationsWidth = layoutInfo.decorationsWidth;\n    const stopRenderingLineAfter = modifiedEditorOptions.get(107 /* EditorOption.stopRenderingLineAfter */);\n    const renderWhitespace = modifiedEditorOptions.get(90 /* EditorOption.renderWhitespace */);\n    const renderControlCharacters = modifiedEditorOptions.get(85 /* EditorOption.renderControlCharacters */);\n    const fontLigatures = modifiedEditorOptions.get(47 /* EditorOption.fontLigatures */);\n    const lineBreaks = this._lineBreaksComputer.finalize();\n    let lineBreakIndex = 0;\n    for (let i = 0; i < this._pendingLineChange.length; i++) {\n      const lineChange = this._pendingLineChange[i];\n      const viewZone = this._pendingViewZones[i];\n      const domNode = viewZone.domNode;\n      applyFontInfo(domNode, fontInfo);\n      const marginDomNode = viewZone.marginDomNode;\n      applyFontInfo(marginDomNode, fontInfo);\n      const decorations = [];\n      if (lineChange.charChanges) {\n        for (const charChange of lineChange.charChanges) {\n          if (isCharChangeOrDelete(charChange)) {\n            decorations.push(new InlineDecoration(new Range(charChange.originalStartLineNumber, charChange.originalStartColumn, charChange.originalEndLineNumber, charChange.originalEndColumn), 'char-delete', 0 /* InlineDecorationType.Regular */));\n          }\n        }\n      }\n\n      const hasCharChanges = decorations.length > 0;\n      const sb = createStringBuilder(10000);\n      let maxCharsPerLine = 0;\n      let renderedLineCount = 0;\n      let viewLineCounts = null;\n      for (let lineNumber = lineChange.originalStartLineNumber; lineNumber <= lineChange.originalEndLineNumber; lineNumber++) {\n        const lineIndex = lineNumber - lineChange.originalStartLineNumber;\n        const lineTokens = this._originalModel.tokenization.getLineTokens(lineNumber);\n        const lineContent = lineTokens.getLineContent();\n        const lineBreakData = lineBreaks[lineBreakIndex++];\n        const actualDecorations = LineDecoration.filter(decorations, lineNumber, 1, lineContent.length + 1);\n        if (lineBreakData) {\n          let lastBreakOffset = 0;\n          for (const breakOffset of lineBreakData.breakOffsets) {\n            const viewLineTokens = lineTokens.sliceAndInflate(lastBreakOffset, breakOffset, 0);\n            const viewLineContent = lineContent.substring(lastBreakOffset, breakOffset);\n            maxCharsPerLine = Math.max(maxCharsPerLine, this._renderOriginalLine(renderedLineCount++, viewLineContent, viewLineTokens, LineDecoration.extractWrapped(actualDecorations, lastBreakOffset, breakOffset), hasCharChanges, mightContainNonBasicASCII, mightContainRTL, fontInfo, disableMonospaceOptimizations, lineHeight, lineDecorationsWidth, stopRenderingLineAfter, renderWhitespace, renderControlCharacters, fontLigatures, tabSize, sb, marginDomNode));\n            lastBreakOffset = breakOffset;\n          }\n          if (!viewLineCounts) {\n            viewLineCounts = [];\n          }\n          // make sure all lines before this one have an entry in `viewLineCounts`\n          while (viewLineCounts.length < lineIndex) {\n            viewLineCounts[viewLineCounts.length] = 1;\n          }\n          viewLineCounts[lineIndex] = lineBreakData.breakOffsets.length;\n          viewZone.heightInLines += lineBreakData.breakOffsets.length - 1;\n          const marginDomNode2 = document.createElement('div');\n          marginDomNode2.className = 'gutter-delete';\n          result.original.push({\n            afterLineNumber: lineNumber,\n            afterColumn: 0,\n            heightInLines: lineBreakData.breakOffsets.length - 1,\n            domNode: createFakeLinesDiv(),\n            marginDomNode: marginDomNode2\n          });\n        } else {\n          maxCharsPerLine = Math.max(maxCharsPerLine, this._renderOriginalLine(renderedLineCount++, lineContent, lineTokens, actualDecorations, hasCharChanges, mightContainNonBasicASCII, mightContainRTL, fontInfo, disableMonospaceOptimizations, lineHeight, lineDecorationsWidth, stopRenderingLineAfter, renderWhitespace, renderControlCharacters, fontLigatures, tabSize, sb, marginDomNode));\n        }\n      }\n      maxCharsPerLine += scrollBeyondLastColumn;\n      const html = sb.build();\n      const trustedhtml = ttPolicy ? ttPolicy.createHTML(html) : html;\n      domNode.innerHTML = trustedhtml;\n      viewZone.minWidthInPx = maxCharsPerLine * typicalHalfwidthCharacterWidth;\n      if (viewLineCounts) {\n        // make sure all lines have an entry in `viewLineCounts`\n        const cnt = lineChange.originalEndLineNumber - lineChange.originalStartLineNumber;\n        while (viewLineCounts.length <= cnt) {\n          viewLineCounts[viewLineCounts.length] = 1;\n        }\n      }\n      viewZone.diff.viewLineCounts = viewLineCounts;\n    }\n    result.original.sort((a, b) => {\n      return a.afterLineNumber - b.afterLineNumber;\n    });\n  }\n  _renderOriginalLine(renderedLineCount, lineContent, lineTokens, decorations, hasCharChanges, mightContainNonBasicASCII, mightContainRTL, fontInfo, disableMonospaceOptimizations, lineHeight, lineDecorationsWidth, stopRenderingLineAfter, renderWhitespace, renderControlCharacters, fontLigatures, tabSize, sb, marginDomNode) {\n    sb.appendASCIIString('<div class=\"view-line');\n    if (!hasCharChanges) {\n      // No char changes\n      sb.appendASCIIString(' char-delete');\n    }\n    sb.appendASCIIString('\" style=\"top:');\n    sb.appendASCIIString(String(renderedLineCount * lineHeight));\n    sb.appendASCIIString('px;width:1000000px;\">');\n    const isBasicASCII = ViewLineRenderingData.isBasicASCII(lineContent, mightContainNonBasicASCII);\n    const containsRTL = ViewLineRenderingData.containsRTL(lineContent, isBasicASCII, mightContainRTL);\n    const output = renderViewLine(new RenderLineInput(fontInfo.isMonospace && !disableMonospaceOptimizations, fontInfo.canUseHalfwidthRightwardsArrow, lineContent, false, isBasicASCII, containsRTL, 0, lineTokens, decorations, tabSize, 0, fontInfo.spaceWidth, fontInfo.middotWidth, fontInfo.wsmiddotWidth, stopRenderingLineAfter, renderWhitespace, renderControlCharacters, fontLigatures !== EditorFontLigatures.OFF, null // Send no selections, original line cannot be selected\n    ), sb);\n    sb.appendASCIIString('</div>');\n    if (this._renderIndicators) {\n      const marginElement = document.createElement('div');\n      marginElement.className = `delete-sign ${ThemeIcon.asClassName(diffRemoveIcon)}`;\n      marginElement.setAttribute('style', `position:absolute;top:${renderedLineCount * lineHeight}px;width:${lineDecorationsWidth}px;height:${lineHeight}px;right:0;`);\n      marginDomNode.appendChild(marginElement);\n    }\n    return output.characterMapping.getHorizontalOffset(output.characterMapping.length);\n  }\n}\nfunction validateDiffWordWrap(value, defaultValue) {\n  return validateStringSetOption(value, defaultValue, ['off', 'on', 'inherit']);\n}\nfunction isChangeOrInsert(lineChange) {\n  return lineChange.modifiedEndLineNumber > 0;\n}\nfunction isChangeOrDelete(lineChange) {\n  return lineChange.originalEndLineNumber > 0;\n}\nfunction isCharChangeOrInsert(charChange) {\n  if (charChange.modifiedStartLineNumber === charChange.modifiedEndLineNumber) {\n    return charChange.modifiedEndColumn - charChange.modifiedStartColumn > 0;\n  }\n  return charChange.modifiedEndLineNumber - charChange.modifiedStartLineNumber > 0;\n}\nfunction isCharChangeOrDelete(charChange) {\n  if (charChange.originalStartLineNumber === charChange.originalEndLineNumber) {\n    return charChange.originalEndColumn - charChange.originalStartColumn > 0;\n  }\n  return charChange.originalEndLineNumber - charChange.originalStartLineNumber > 0;\n}\nfunction createFakeLinesDiv() {\n  const r = document.createElement('div');\n  r.className = 'diagonal-fill';\n  return r;\n}\nfunction createViewZoneMarginArrow() {\n  const arrow = document.createElement('div');\n  arrow.className = 'arrow-revert-change ' + ThemeIcon.asClassName(Codicon.arrowRight);\n  return dom.$('div', {}, arrow);\n}\nfunction getViewRange(model, viewModel, startLineNumber, endLineNumber) {\n  const lineCount = model.getLineCount();\n  startLineNumber = Math.min(lineCount, Math.max(1, startLineNumber));\n  endLineNumber = Math.min(lineCount, Math.max(1, endLineNumber));\n  return viewModel.coordinatesConverter.convertModelRangeToViewRange(new Range(startLineNumber, model.getLineMinColumn(startLineNumber), endLineNumber, model.getLineMaxColumn(endLineNumber)));\n}\nfunction validateDiffEditorOptions(options, defaults) {\n  return {\n    enableSplitViewResizing: validateBooleanOption(options.enableSplitViewResizing, defaults.enableSplitViewResizing),\n    renderSideBySide: validateBooleanOption(options.renderSideBySide, defaults.renderSideBySide),\n    renderMarginRevertIcon: validateBooleanOption(options.renderMarginRevertIcon, defaults.renderMarginRevertIcon),\n    maxComputationTime: clampedInt(options.maxComputationTime, defaults.maxComputationTime, 0, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */),\n    maxFileSize: clampedInt(options.maxFileSize, defaults.maxFileSize, 0, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */),\n    ignoreTrimWhitespace: validateBooleanOption(options.ignoreTrimWhitespace, defaults.ignoreTrimWhitespace),\n    renderIndicators: validateBooleanOption(options.renderIndicators, defaults.renderIndicators),\n    originalEditable: validateBooleanOption(options.originalEditable, defaults.originalEditable),\n    diffCodeLens: validateBooleanOption(options.diffCodeLens, defaults.diffCodeLens),\n    renderOverviewRuler: validateBooleanOption(options.renderOverviewRuler, defaults.renderOverviewRuler),\n    diffWordWrap: validateDiffWordWrap(options.diffWordWrap, defaults.diffWordWrap)\n  };\n}\nfunction changedDiffEditorOptions(a, b) {\n  return {\n    enableSplitViewResizing: a.enableSplitViewResizing !== b.enableSplitViewResizing,\n    renderSideBySide: a.renderSideBySide !== b.renderSideBySide,\n    renderMarginRevertIcon: a.renderMarginRevertIcon !== b.renderMarginRevertIcon,\n    maxComputationTime: a.maxComputationTime !== b.maxComputationTime,\n    maxFileSize: a.maxFileSize !== b.maxFileSize,\n    ignoreTrimWhitespace: a.ignoreTrimWhitespace !== b.ignoreTrimWhitespace,\n    renderIndicators: a.renderIndicators !== b.renderIndicators,\n    originalEditable: a.originalEditable !== b.originalEditable,\n    diffCodeLens: a.diffCodeLens !== b.diffCodeLens,\n    renderOverviewRuler: a.renderOverviewRuler !== b.renderOverviewRuler,\n    diffWordWrap: a.diffWordWrap !== b.diffWordWrap\n  };\n}\nregisterThemingParticipant((theme, collector) => {\n  const added = theme.getColor(diffInserted);\n  if (added) {\n    collector.addRule(`.monaco-editor .char-insert, .monaco-diff-editor .char-insert { background-color: ${added}; }`);\n  }\n  const lineAdded = theme.getColor(diffInsertedLine) || added;\n  if (lineAdded) {\n    collector.addRule(`.monaco-editor .line-insert, .monaco-diff-editor .line-insert { background-color: ${lineAdded}; }`);\n  }\n  const gutterAdded = theme.getColor(diffInsertedLineGutter) || lineAdded;\n  if (gutterAdded) {\n    collector.addRule(`.monaco-editor .inline-added-margin-view-zone { background-color: ${gutterAdded}; }`);\n    collector.addRule(`.monaco-editor .gutter-insert, .monaco-diff-editor .gutter-insert { background-color: ${gutterAdded}; }`);\n  }\n  const removed = theme.getColor(diffRemoved);\n  if (removed) {\n    collector.addRule(`.monaco-editor .char-delete, .monaco-diff-editor .char-delete { background-color: ${removed}; }`);\n  }\n  const lineRemoved = theme.getColor(diffRemovedLine) || removed;\n  if (lineRemoved) {\n    collector.addRule(`.monaco-editor .line-delete, .monaco-diff-editor .line-delete { background-color: ${lineRemoved}; }`);\n  }\n  const gutterRemoved = theme.getColor(diffRemovedLineGutter) || lineRemoved;\n  if (gutterRemoved) {\n    collector.addRule(`.monaco-editor .inline-deleted-margin-view-zone { background-color: ${gutterRemoved}; }`);\n    collector.addRule(`.monaco-editor .gutter-delete, .monaco-diff-editor .gutter-delete { background-color: ${gutterRemoved}; }`);\n  }\n  const addedOutline = theme.getColor(diffInsertedOutline);\n  if (addedOutline) {\n    collector.addRule(`.monaco-editor .line-insert, .monaco-editor .char-insert { border: 1px ${isHighContrast(theme.type) ? 'dashed' : 'solid'} ${addedOutline}; }`);\n  }\n  const removedOutline = theme.getColor(diffRemovedOutline);\n  if (removedOutline) {\n    collector.addRule(`.monaco-editor .line-delete, .monaco-editor .char-delete { border: 1px ${isHighContrast(theme.type) ? 'dashed' : 'solid'} ${removedOutline}; }`);\n  }\n  const shadow = theme.getColor(scrollbarShadow);\n  if (shadow) {\n    collector.addRule(`.monaco-diff-editor.side-by-side .editor.modified { box-shadow: -6px 0 5px -5px ${shadow}; }`);\n  }\n  const border = theme.getColor(diffBorder);\n  if (border) {\n    collector.addRule(`.monaco-diff-editor.side-by-side .editor.modified { border-left: 1px solid ${border}; }`);\n  }\n  const scrollbarSliderBackgroundColor = theme.getColor(scrollbarSliderBackground);\n  if (scrollbarSliderBackgroundColor) {\n    collector.addRule(`\n\t\t\t.monaco-diff-editor .diffViewport {\n\t\t\t\tbackground: ${scrollbarSliderBackgroundColor};\n\t\t\t}\n\t\t`);\n  }\n  const scrollbarSliderHoverBackgroundColor = theme.getColor(scrollbarSliderHoverBackground);\n  if (scrollbarSliderHoverBackgroundColor) {\n    collector.addRule(`\n\t\t\t.monaco-diff-editor .diffViewport:hover {\n\t\t\t\tbackground: ${scrollbarSliderHoverBackgroundColor};\n\t\t\t}\n\t\t`);\n  }\n  const scrollbarSliderActiveBackgroundColor = theme.getColor(scrollbarSliderActiveBackground);\n  if (scrollbarSliderActiveBackgroundColor) {\n    collector.addRule(`\n\t\t\t.monaco-diff-editor .diffViewport:active {\n\t\t\t\tbackground: ${scrollbarSliderActiveBackgroundColor};\n\t\t\t}\n\t\t`);\n  }\n  const diffDiagonalFillColor = theme.getColor(diffDiagonalFill);\n  collector.addRule(`\n\t.monaco-editor .diagonal-fill {\n\t\tbackground-image: linear-gradient(\n\t\t\t-45deg,\n\t\t\t${diffDiagonalFillColor} 12.5%,\n\t\t\t#0000 12.5%, #0000 50%,\n\t\t\t${diffDiagonalFillColor} 50%, ${diffDiagonalFillColor} 62.5%,\n\t\t\t#0000 62.5%, #0000 100%\n\t\t);\n\t\tbackground-size: 8px 8px;\n\t}\n\t`);\n});","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","_a","nls","dom","assert","createFastDomNode","Sash","RunOnceScheduler","Emitter","Disposable","applyFontInfo","StableEditorScrollState","ICodeEditorService","CodeEditorWidget","DiffReview","EditorOptions","EditorFontLigatures","stringSet","validateStringSetOption","boolean","validateBooleanOption","clampedInt","Position","Range","createStringBuilder","editorCommon","ModelDecorationOptions","IEditorWorkerService","OverviewRulerZone","LineDecoration","RenderLineInput","renderViewLine","InlineDecoration","ViewLineRenderingData","IContextKeyService","IInstantiationService","ServiceCollection","INotificationService","defaultInsertColor","defaultRemoveColor","diffBorder","diffInserted","diffInsertedOutline","diffRemoved","diffRemovedOutline","scrollbarShadow","scrollbarSliderBackground","scrollbarSliderHoverBackground","scrollbarSliderActiveBackground","diffDiagonalFill","diffInsertedLineGutter","diffRemovedLineGutter","diffInsertedLine","diffRemovedLine","diffOverviewRulerInserted","diffOverviewRulerRemoved","IThemeService","getThemeTypeSelector","registerThemingParticipant","ThemeIcon","IContextMenuService","InlineDiffMargin","IClipboardService","EditorExtensionsRegistry","onUnexpectedError","IEditorProgressService","ElementSizeObserver","Codicon","MOUSE_CURSOR_TEXT_CSS_CLASS_NAME","registerIcon","isHighContrast","VisualEditorState","constructor","_contextMenuService","_clipboardService","_zones","_inlineDiffMargins","_zonesMap","_decorations","getForeignViewZones","allViewZones","filter","z","String","id","clean","editor","changeViewZones","viewChangeAccessor","zoneId","removeZone","changeDecorations","changeAccessor","deltaDecorations","apply","overviewRuler","newDecorations","restoreScrollState","scrollState","capture","inlineDiffMargin","dispose","zones","viewZone","suppressMouseDown","addZone","push","diff","marginDomNode","originalModel","getValueLength","restore","decorations","setZones","overviewZones","DIFF_EDITOR_ID","diffInsertIcon","add","localize","diffRemoveIcon","remove","ttPolicy","window","trustedTypes","createPolicy","createHTML","value","DiffEditorWidget","domElement","options","codeEditorWidgetOptions","clipboardService","editorWorkerService","contextKeyService","instantiationService","codeEditorService","themeService","notificationService","contextMenuService","_editorProgressService","_onDidDispose","_register","onDidDispose","event","_onDidUpdateDiff","onDidUpdateDiff","_onDidContentSizeChange","_lastOriginalWarning","_lastModifiedWarning","_editorWorkerService","_codeEditorService","_contextKeyService","createScoped","_instantiationService","createChild","createKey","_themeService","_notificationService","_id","_state","_updatingDiffProgress","_domElement","_options","validateDiffEditorOptions","enableSplitViewResizing","renderSideBySide","renderMarginRevertIcon","maxComputationTime","maxFileSize","ignoreTrimWhitespace","renderIndicators","originalEditable","diffCodeLens","renderOverviewRuler","diffWordWrap","isInEmbeddedEditor","_updateDecorationsRunner","_updateDecorations","_containerDomElement","document","createElement","className","_getClassName","getColorTheme","style","position","height","appendChild","_overviewViewportDomElement","setClassName","setPosition","_overviewDomElement","domNode","addStandardDisposableListener","EventType","POINTER_DOWN","e","_modifiedEditor","delegateVerticalScrollbarPointerDown","_originalDomNode","_modifiedDomNode","_beginUpdateDecorationsTimeout","_currentlyChangingViewZones","_diffComputationToken","_originalEditorState","_modifiedEditorState","_isVisible","_isHandlingScrollEvent","_elementSizeObserver","dimension","onDidChange","_onDidContainerSizeChanged","automaticLayout","startObserving","_diffComputationResult","_originalEditor","_createLeftHandSideEditor","originalEditor","_createRightHandSideEditor","modifiedEditor","_originalOverviewRuler","_modifiedOverviewRuler","_reviewPane","createInstance","shadow","actionBarContainer","_setStrategy","DiffEditorWidgetSideBySide","_createDataSource","DiffEditorWidgetInline","onDidColorThemeChange","t","_strategy","applyColors","schedule","contributions","getDiffEditorContributions","ctor","err","addDiffEditor","_setState","newState","done","show","diffReviewNext","next","diffReviewPrev","prev","theme","result","type","_disposeOverviewRulers","removeChild","getDomNode","_createOverviewRulers","ok","hasModel","createOverviewRuler","_layoutOverviewRulers","_createInnerEditor","_adjustOptionsForLeftHandSide","onDidScrollChange","scrollTopChanged","scrollLeftChanged","scrollHeightChanged","setScrollPosition","scrollLeft","scrollTop","_layoutOverviewViewport","onDidChangeViewZones","_onViewZonesChanged","onDidChangeConfiguration","getModel","hasChanged","cancel","onDidChangeHiddenAreas","onDidChangeModelContent","_beginUpdateDecorationsSoon","isInDiffLeftEditorKey","hasWidgetFocus","onDidFocusEditorWidget","set","onDidBlurEditorWidget","onDidContentSizeChange","width","getContentWidth","ONE_OVERVIEW_WIDTH","Math","max","getContentHeight","fire","contentHeight","contentWidth","contentHeightChanged","contentWidthChanged","_adjustOptionsForRightHandSide","onDidChangeModelOptions","tabSize","isInDiffRightEditorKey","onMouseDown","_b","rightButton","element","includes","lineNumber","change","changes","find","modifiedStartLineNumber","revertChange","stopPropagation","original","modified","originalRange","originalEndLineNumber","originalStartLineNumber","getLineMaxColumn","originalContent","getValueInRange","newRange","modifiedEndLineNumber","eol","getEOL","range","setStartPosition","getLineCount","setEndPosition","executeEdits","text","insertAt","fromPositions","container","editorWidgetOptions","removeDiffEditor","clearTimeout","_cleanViewZonesAndDecorations","getId","getEditorType","EditorType","IDiffEditor","getLineChanges","getOriginalEditor","getModifiedEditor","updateOptions","_newOptions","newOptions","changed","changedDiffEditorOptions","beginUpdateDecorations","beginUpdateDecorationsSoon","_beginUpdateDecorations","setEnableSplitViewResizing","setModel","model","Error","setScrollTop","getContainerDomNode","getVisibleColumnFromPosition","getPosition","source","revealLine","scrollType","revealLineInCenter","revealLineInCenterIfOutsideViewport","revealLineNearTop","revealPosition","revealPositionInCenter","revealPositionInCenterIfOutsideViewport","revealPositionNearTop","getSelection","getSelections","setSelection","something","setSelections","ranges","revealLines","startLineNumber","endLineNumber","revealLinesInCenter","revealLinesInCenterIfOutsideViewport","revealLinesNearTop","revealRange","revealVerticalInCenter","revealHorizontal","revealRangeInCenter","revealRangeInCenterIfOutsideViewport","revealRangeNearTop","revealRangeNearTopIfOutsideViewport","revealRangeAtTop","getSupportedActions","saveViewState","originalViewState","modifiedViewState","restoreViewState","s","diffEditorState","layout","observe","focus","hasTextFocus","trigger","handlerId","payload","createDecorationsCollection","callback","_doLayout","_getReviewHeight","isVisible","getHeight","reviewHeight","freeSpace","ENTIRE_DIFF_OVERVIEW_WIDTH","layoutInfo","getLayoutInfo","setLayout","top","right","setTimeout","UPDATE_DIFF_DECORATIONS_DELAY","_equals","a","b","toString","currentOriginalModel","currentModifiedModel","currentToken","diffLimit","canSyncModelForDiff","bufferTextLength","uri","warn","computeDiff","then","error","lineChanges","foreignOriginal","getWhitespaces","foreignModified","diffDecorations","getEditorsDiffDecorations","_adjustOptionsForSubEditor","clonedOptions","assign","inDiffEditor","scrollbar","vertical","folding","codeLens","fixedOverflowWidgets","minimap","enabled","wordWrapOverride1","wordWrapOverride2","originalAriaLabel","ariaLabel","readOnly","dropIntoEditor","extraEditorClassName","modifiedAriaLabel","revealHorizontalRightPadding","defaultValue","verticalHasArrows","doLayout","getWidth","splitPoint","left","setWidth","setHeight","_computeOverviewViewport","setTop","getScrollTop","scrollHeight","getScrollHeight","computedAvailableSize","computedRepresentableSize","computedRatio","computedSliderSize","floor","computedSliderPosition","getOptions","relayoutEditors","newStrategy","_getLineChangeAtOrBeforeLineNumber","startLineNumberExtractor","min","mid","midStart","midEnd","_getEquivalentLineForOriginalLineNumber","lineChange","originalEquivalentLineNumber","modifiedEquivalentLineNumber","lineChangeOriginalLength","lineChangeModifiedLength","delta","_getEquivalentLineForModifiedLineNumber","getDiffLineInformationForOriginal","equivalentLineNumber","getDiffLineInformationForModified","DiffEditorWidgetStyle","dataSource","_dataSource","_insertColor","_removeColor","newInsertColor","getColor","transparent","newRemoveColor","hasChanges","equals","originalWhitespaces","modifiedWhitespaces","sort","afterLineNumber","_getViewZones","originalDecorations","_getOriginalEditorDecorations","modifiedDecorations","_getModifiedEditorDecorations","ForeignViewZonesIterator","_source","_index","current","advance","ViewZonesComputer","_lineChanges","_originalForeignVZ","_modifiedForeignVZ","_getViewLineCount","viewModel","_getViewModel","viewRange","getViewRange","getViewZones","originalLineHeight","getOption","modifiedLineHeight","originalHasWrapping","wrappingColumn","modifiedHasWrapping","hasWrapping","originalCoordinatesConverter","coordinatesConverter","modifiedCoordinatesConverter","originalEndEquivalentLineNumber","modifiedEndEquivalentLineNumber","sortMyViewZones","addAndCombineIfPossible","destination","item","lastItem","heightInLines","modifiedForeignVZ","originalForeignVZ","lastOriginalLineNumber","lastModifiedLineNumber","stepOriginal","stepModified","count","originalLineNumber","modifiedLineNumber","originalViewLineCount","getModelLineViewLineCount","modifiedViewLineCount","viewZoneLineNumber","_createOriginalMarginDomNodeForModifiedForeignViewZoneInAddedRegion","isChangeOrInsert","_produceOriginalFromDiff","isChangeOrDelete","_produceModifiedFromDiff","stepOriginalIndex","stepModifiedIndex","originalDelta","modifiedDelta","shouldNotShrink","_ensureDomNodes","map","createFakeLinesDiv","createDecoration","startColumn","endColumn","DECORATIONS","arrowRevertChange","register","description","glyphMarginClassName","asClassName","arrowRight","charDelete","charDeleteWholeLine","isWholeLine","charInsert","charInsertWholeLine","lineInsert","marginClassName","lineInsertWithSign","linesDecorationsClassName","lineDelete","lineDeleteWithSign","lineDeleteMargin","_disableSash","_sashRatio","_sashPosition","_startSashPosition","_sash","orientation","state","onDidStart","_onSashDragStart","_onSashDrag","onDidEnd","_onSashDragEnd","onDidReset","_onSashReset","newDisableSash","sashRatio","w","sashPosition","midPoint","MINIMUM_EDITOR_WIDTH","currentX","startX","getVerticalSashTop","sash","getVerticalSashLeft","getVerticalSashHeight","SideBySideViewZonesComputer","overviewZoneColor","originalViewModel","charChanges","charChange","isCharChangeOrDelete","originalStartColumn","getLineFirstNonWhitespaceColumn","originalEndColumn","getLineLastNonWhitespaceColumn","modifiedModel","modifiedViewModel","createViewZoneMarginArrow","isCharChangeOrInsert","modifiedStartColumn","modifiedEndColumn","_decorationsLeft","decorationsLeft","onDidLayoutChange","computer","InlineViewZonesComputer","zoneIndex","zone","zoneHeightInLines","_originalModel","_renderIndicators","_pendingLineChange","_pendingViewZones","_lineBreaksComputer","createLineBreaksComputer","_finalize","minWidthInPx","viewLineCounts","addRequest","getLineContent","modifiedEditorOptions","fontInfo","get","disableMonospaceOptimizations","typicalHalfwidthCharacterWidth","scrollBeyondLastColumn","mightContainNonBasicASCII","mightContainRTL","lineHeight","lineDecorationsWidth","decorationsWidth","stopRenderingLineAfter","renderWhitespace","renderControlCharacters","fontLigatures","lineBreaks","finalize","lineBreakIndex","hasCharChanges","sb","maxCharsPerLine","renderedLineCount","lineIndex","lineTokens","tokenization","getLineTokens","lineContent","lineBreakData","actualDecorations","lastBreakOffset","breakOffset","breakOffsets","viewLineTokens","sliceAndInflate","viewLineContent","substring","_renderOriginalLine","extractWrapped","marginDomNode2","afterColumn","html","build","trustedhtml","innerHTML","cnt","appendASCIIString","isBasicASCII","containsRTL","output","isMonospace","canUseHalfwidthRightwardsArrow","spaceWidth","middotWidth","wsmiddotWidth","OFF","marginElement","setAttribute","characterMapping","getHorizontalOffset","validateDiffWordWrap","arrow","$","lineCount","convertModelRangeToViewRange","getLineMinColumn","defaults","collector","added","addRule","lineAdded","gutterAdded","removed","lineRemoved","gutterRemoved","addedOutline","removedOutline","border","scrollbarSliderBackgroundColor","scrollbarSliderHoverBackgroundColor","scrollbarSliderActiveBackgroundColor","diffDiagonalFillColor"],"sources":["/home/deathblade287/Desktop/AI-MODELS-TESTING/react-app/node_modules/monaco-editor/esm/vs/editor/browser/widget/diffEditorWidget.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar _a;\nimport './media/diffEditor.css';\nimport * as nls from '../../../nls.js';\nimport * as dom from '../../../base/browser/dom.js';\nimport * as assert from '../../../base/common/assert.js';\nimport { createFastDomNode } from '../../../base/browser/fastDomNode.js';\nimport { Sash } from '../../../base/browser/ui/sash/sash.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { applyFontInfo } from '../config/domFontInfo.js';\nimport { StableEditorScrollState } from '../stableEditorScroll.js';\nimport { ICodeEditorService } from '../services/codeEditorService.js';\nimport { CodeEditorWidget } from './codeEditorWidget.js';\nimport { DiffReview } from './diffReview.js';\nimport { EditorOptions, EditorFontLigatures, stringSet as validateStringSetOption, boolean as validateBooleanOption, clampedInt } from '../../common/config/editorOptions.js';\nimport { Position } from '../../common/core/position.js';\nimport { Range } from '../../common/core/range.js';\nimport { createStringBuilder } from '../../common/core/stringBuilder.js';\nimport * as editorCommon from '../../common/editorCommon.js';\nimport { ModelDecorationOptions } from '../../common/model/textModel.js';\nimport { IEditorWorkerService } from '../../common/services/editorWorker.js';\nimport { OverviewRulerZone } from '../../common/viewModel/overviewZoneManager.js';\nimport { LineDecoration } from '../../common/viewLayout/lineDecorations.js';\nimport { RenderLineInput, renderViewLine } from '../../common/viewLayout/viewLineRenderer.js';\nimport { InlineDecoration, ViewLineRenderingData } from '../../common/viewModel.js';\nimport { IContextKeyService } from '../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from '../../../platform/instantiation/common/instantiation.js';\nimport { ServiceCollection } from '../../../platform/instantiation/common/serviceCollection.js';\nimport { INotificationService } from '../../../platform/notification/common/notification.js';\nimport { defaultInsertColor, defaultRemoveColor, diffBorder, diffInserted, diffInsertedOutline, diffRemoved, diffRemovedOutline, scrollbarShadow, scrollbarSliderBackground, scrollbarSliderHoverBackground, scrollbarSliderActiveBackground, diffDiagonalFill, diffInsertedLineGutter, diffRemovedLineGutter, diffInsertedLine, diffRemovedLine, diffOverviewRulerInserted, diffOverviewRulerRemoved } from '../../../platform/theme/common/colorRegistry.js';\nimport { IThemeService, getThemeTypeSelector, registerThemingParticipant, ThemeIcon } from '../../../platform/theme/common/themeService.js';\nimport { IContextMenuService } from '../../../platform/contextview/browser/contextView.js';\nimport { InlineDiffMargin } from './inlineDiffMargin.js';\nimport { IClipboardService } from '../../../platform/clipboard/common/clipboardService.js';\nimport { EditorExtensionsRegistry } from '../editorExtensions.js';\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { IEditorProgressService } from '../../../platform/progress/common/progress.js';\nimport { ElementSizeObserver } from '../config/elementSizeObserver.js';\nimport { Codicon } from '../../../base/common/codicons.js';\nimport { MOUSE_CURSOR_TEXT_CSS_CLASS_NAME } from '../../../base/browser/ui/mouseCursor/mouseCursor.js';\nimport { registerIcon } from '../../../platform/theme/common/iconRegistry.js';\nimport { isHighContrast } from '../../../platform/theme/common/theme.js';\nclass VisualEditorState {\n    constructor(_contextMenuService, _clipboardService) {\n        this._contextMenuService = _contextMenuService;\n        this._clipboardService = _clipboardService;\n        this._zones = [];\n        this._inlineDiffMargins = [];\n        this._zonesMap = {};\n        this._decorations = [];\n    }\n    getForeignViewZones(allViewZones) {\n        return allViewZones.filter((z) => !this._zonesMap[String(z.id)]);\n    }\n    clean(editor) {\n        // (1) View zones\n        if (this._zones.length > 0) {\n            editor.changeViewZones((viewChangeAccessor) => {\n                for (const zoneId of this._zones) {\n                    viewChangeAccessor.removeZone(zoneId);\n                }\n            });\n        }\n        this._zones = [];\n        this._zonesMap = {};\n        // (2) Model decorations\n        editor.changeDecorations((changeAccessor) => {\n            this._decorations = changeAccessor.deltaDecorations(this._decorations, []);\n        });\n    }\n    apply(editor, overviewRuler, newDecorations, restoreScrollState) {\n        const scrollState = restoreScrollState ? StableEditorScrollState.capture(editor) : null;\n        // view zones\n        editor.changeViewZones((viewChangeAccessor) => {\n            var _a;\n            for (const zoneId of this._zones) {\n                viewChangeAccessor.removeZone(zoneId);\n            }\n            for (const inlineDiffMargin of this._inlineDiffMargins) {\n                inlineDiffMargin.dispose();\n            }\n            this._zones = [];\n            this._zonesMap = {};\n            this._inlineDiffMargins = [];\n            for (let i = 0, length = newDecorations.zones.length; i < length; i++) {\n                const viewZone = newDecorations.zones[i];\n                viewZone.suppressMouseDown = true;\n                const zoneId = viewChangeAccessor.addZone(viewZone);\n                this._zones.push(zoneId);\n                this._zonesMap[String(zoneId)] = true;\n                if (newDecorations.zones[i].diff && viewZone.marginDomNode) {\n                    viewZone.suppressMouseDown = false;\n                    if (((_a = newDecorations.zones[i].diff) === null || _a === void 0 ? void 0 : _a.originalModel.getValueLength()) !== 0) {\n                        // do not contribute diff margin actions for newly created files\n                        this._inlineDiffMargins.push(new InlineDiffMargin(zoneId, viewZone.marginDomNode, editor, newDecorations.zones[i].diff, this._contextMenuService, this._clipboardService));\n                    }\n                }\n            }\n        });\n        scrollState === null || scrollState === void 0 ? void 0 : scrollState.restore(editor);\n        // decorations\n        editor.changeDecorations((changeAccessor) => {\n            this._decorations = changeAccessor.deltaDecorations(this._decorations, newDecorations.decorations);\n        });\n        // overview ruler\n        overviewRuler === null || overviewRuler === void 0 ? void 0 : overviewRuler.setZones(newDecorations.overviewZones);\n    }\n}\nlet DIFF_EDITOR_ID = 0;\nconst diffInsertIcon = registerIcon('diff-insert', Codicon.add, nls.localize('diffInsertIcon', 'Line decoration for inserts in the diff editor.'));\nconst diffRemoveIcon = registerIcon('diff-remove', Codicon.remove, nls.localize('diffRemoveIcon', 'Line decoration for removals in the diff editor.'));\nconst ttPolicy = (_a = window.trustedTypes) === null || _a === void 0 ? void 0 : _a.createPolicy('diffEditorWidget', { createHTML: value => value });\nlet DiffEditorWidget = class DiffEditorWidget extends Disposable {\n    constructor(domElement, options, codeEditorWidgetOptions, clipboardService, editorWorkerService, contextKeyService, instantiationService, codeEditorService, themeService, notificationService, contextMenuService, _editorProgressService) {\n        super();\n        this._editorProgressService = _editorProgressService;\n        this._onDidDispose = this._register(new Emitter());\n        this.onDidDispose = this._onDidDispose.event;\n        this._onDidUpdateDiff = this._register(new Emitter());\n        this.onDidUpdateDiff = this._onDidUpdateDiff.event;\n        this._onDidContentSizeChange = this._register(new Emitter());\n        this._lastOriginalWarning = null;\n        this._lastModifiedWarning = null;\n        this._editorWorkerService = editorWorkerService;\n        this._codeEditorService = codeEditorService;\n        this._contextKeyService = this._register(contextKeyService.createScoped(domElement));\n        this._instantiationService = instantiationService.createChild(new ServiceCollection([IContextKeyService, this._contextKeyService]));\n        this._contextKeyService.createKey('isInDiffEditor', true);\n        this._themeService = themeService;\n        this._notificationService = notificationService;\n        this._id = (++DIFF_EDITOR_ID);\n        this._state = 0 /* editorBrowser.DiffEditorState.Idle */;\n        this._updatingDiffProgress = null;\n        this._domElement = domElement;\n        options = options || {};\n        this._options = validateDiffEditorOptions(options, {\n            enableSplitViewResizing: true,\n            renderSideBySide: true,\n            renderMarginRevertIcon: true,\n            maxComputationTime: 5000,\n            maxFileSize: 50,\n            ignoreTrimWhitespace: true,\n            renderIndicators: true,\n            originalEditable: false,\n            diffCodeLens: false,\n            renderOverviewRuler: true,\n            diffWordWrap: 'inherit'\n        });\n        if (typeof options.isInEmbeddedEditor !== 'undefined') {\n            this._contextKeyService.createKey('isInEmbeddedDiffEditor', options.isInEmbeddedEditor);\n        }\n        else {\n            this._contextKeyService.createKey('isInEmbeddedDiffEditor', false);\n        }\n        this._updateDecorationsRunner = this._register(new RunOnceScheduler(() => this._updateDecorations(), 0));\n        this._containerDomElement = document.createElement('div');\n        this._containerDomElement.className = DiffEditorWidget._getClassName(this._themeService.getColorTheme(), this._options.renderSideBySide);\n        this._containerDomElement.style.position = 'relative';\n        this._containerDomElement.style.height = '100%';\n        this._domElement.appendChild(this._containerDomElement);\n        this._overviewViewportDomElement = createFastDomNode(document.createElement('div'));\n        this._overviewViewportDomElement.setClassName('diffViewport');\n        this._overviewViewportDomElement.setPosition('absolute');\n        this._overviewDomElement = document.createElement('div');\n        this._overviewDomElement.className = 'diffOverview';\n        this._overviewDomElement.style.position = 'absolute';\n        this._overviewDomElement.appendChild(this._overviewViewportDomElement.domNode);\n        this._register(dom.addStandardDisposableListener(this._overviewDomElement, dom.EventType.POINTER_DOWN, (e) => {\n            this._modifiedEditor.delegateVerticalScrollbarPointerDown(e);\n        }));\n        if (this._options.renderOverviewRuler) {\n            this._containerDomElement.appendChild(this._overviewDomElement);\n        }\n        // Create left side\n        this._originalDomNode = document.createElement('div');\n        this._originalDomNode.className = 'editor original';\n        this._originalDomNode.style.position = 'absolute';\n        this._originalDomNode.style.height = '100%';\n        this._containerDomElement.appendChild(this._originalDomNode);\n        // Create right side\n        this._modifiedDomNode = document.createElement('div');\n        this._modifiedDomNode.className = 'editor modified';\n        this._modifiedDomNode.style.position = 'absolute';\n        this._modifiedDomNode.style.height = '100%';\n        this._containerDomElement.appendChild(this._modifiedDomNode);\n        this._beginUpdateDecorationsTimeout = -1;\n        this._currentlyChangingViewZones = false;\n        this._diffComputationToken = 0;\n        this._originalEditorState = new VisualEditorState(contextMenuService, clipboardService);\n        this._modifiedEditorState = new VisualEditorState(contextMenuService, clipboardService);\n        this._isVisible = true;\n        this._isHandlingScrollEvent = false;\n        this._elementSizeObserver = this._register(new ElementSizeObserver(this._containerDomElement, options.dimension));\n        this._register(this._elementSizeObserver.onDidChange(() => this._onDidContainerSizeChanged()));\n        if (options.automaticLayout) {\n            this._elementSizeObserver.startObserving();\n        }\n        this._diffComputationResult = null;\n        this._originalEditor = this._createLeftHandSideEditor(options, codeEditorWidgetOptions.originalEditor || {});\n        this._modifiedEditor = this._createRightHandSideEditor(options, codeEditorWidgetOptions.modifiedEditor || {});\n        this._originalOverviewRuler = null;\n        this._modifiedOverviewRuler = null;\n        this._reviewPane = instantiationService.createInstance(DiffReview, this);\n        this._containerDomElement.appendChild(this._reviewPane.domNode.domNode);\n        this._containerDomElement.appendChild(this._reviewPane.shadow.domNode);\n        this._containerDomElement.appendChild(this._reviewPane.actionBarContainer.domNode);\n        if (this._options.renderSideBySide) {\n            this._setStrategy(new DiffEditorWidgetSideBySide(this._createDataSource(), this._options.enableSplitViewResizing));\n        }\n        else {\n            this._setStrategy(new DiffEditorWidgetInline(this._createDataSource(), this._options.enableSplitViewResizing));\n        }\n        this._register(themeService.onDidColorThemeChange(t => {\n            if (this._strategy && this._strategy.applyColors(t)) {\n                this._updateDecorationsRunner.schedule();\n            }\n            this._containerDomElement.className = DiffEditorWidget._getClassName(this._themeService.getColorTheme(), this._options.renderSideBySide);\n        }));\n        const contributions = EditorExtensionsRegistry.getDiffEditorContributions();\n        for (const desc of contributions) {\n            try {\n                this._register(instantiationService.createInstance(desc.ctor, this));\n            }\n            catch (err) {\n                onUnexpectedError(err);\n            }\n        }\n        this._codeEditorService.addDiffEditor(this);\n    }\n    _setState(newState) {\n        if (this._state === newState) {\n            return;\n        }\n        this._state = newState;\n        if (this._updatingDiffProgress) {\n            this._updatingDiffProgress.done();\n            this._updatingDiffProgress = null;\n        }\n        if (this._state === 1 /* editorBrowser.DiffEditorState.ComputingDiff */) {\n            this._updatingDiffProgress = this._editorProgressService.show(true, 1000);\n        }\n    }\n    diffReviewNext() {\n        this._reviewPane.next();\n    }\n    diffReviewPrev() {\n        this._reviewPane.prev();\n    }\n    static _getClassName(theme, renderSideBySide) {\n        let result = 'monaco-diff-editor monaco-editor-background ';\n        if (renderSideBySide) {\n            result += 'side-by-side ';\n        }\n        result += getThemeTypeSelector(theme.type);\n        return result;\n    }\n    _disposeOverviewRulers() {\n        if (this._originalOverviewRuler) {\n            this._overviewDomElement.removeChild(this._originalOverviewRuler.getDomNode());\n            this._originalOverviewRuler.dispose();\n            this._originalOverviewRuler = null;\n        }\n        if (this._modifiedOverviewRuler) {\n            this._overviewDomElement.removeChild(this._modifiedOverviewRuler.getDomNode());\n            this._modifiedOverviewRuler.dispose();\n            this._modifiedOverviewRuler = null;\n        }\n    }\n    _createOverviewRulers() {\n        if (!this._options.renderOverviewRuler) {\n            return;\n        }\n        assert.ok(!this._originalOverviewRuler && !this._modifiedOverviewRuler);\n        if (this._originalEditor.hasModel()) {\n            this._originalOverviewRuler = this._originalEditor.createOverviewRuler('original diffOverviewRuler');\n            this._overviewDomElement.appendChild(this._originalOverviewRuler.getDomNode());\n        }\n        if (this._modifiedEditor.hasModel()) {\n            this._modifiedOverviewRuler = this._modifiedEditor.createOverviewRuler('modified diffOverviewRuler');\n            this._overviewDomElement.appendChild(this._modifiedOverviewRuler.getDomNode());\n        }\n        this._layoutOverviewRulers();\n    }\n    _createLeftHandSideEditor(options, codeEditorWidgetOptions) {\n        const editor = this._createInnerEditor(this._instantiationService, this._originalDomNode, this._adjustOptionsForLeftHandSide(options), codeEditorWidgetOptions);\n        this._register(editor.onDidScrollChange((e) => {\n            if (this._isHandlingScrollEvent) {\n                return;\n            }\n            if (!e.scrollTopChanged && !e.scrollLeftChanged && !e.scrollHeightChanged) {\n                return;\n            }\n            this._isHandlingScrollEvent = true;\n            this._modifiedEditor.setScrollPosition({\n                scrollLeft: e.scrollLeft,\n                scrollTop: e.scrollTop\n            });\n            this._isHandlingScrollEvent = false;\n            this._layoutOverviewViewport();\n        }));\n        this._register(editor.onDidChangeViewZones(() => {\n            this._onViewZonesChanged();\n        }));\n        this._register(editor.onDidChangeConfiguration((e) => {\n            if (!editor.getModel()) {\n                return;\n            }\n            if (e.hasChanged(46 /* EditorOption.fontInfo */)) {\n                this._updateDecorationsRunner.schedule();\n            }\n            if (e.hasChanged(134 /* EditorOption.wrappingInfo */)) {\n                this._updateDecorationsRunner.cancel();\n                this._updateDecorations();\n            }\n        }));\n        this._register(editor.onDidChangeHiddenAreas(() => {\n            this._updateDecorationsRunner.cancel();\n            this._updateDecorations();\n        }));\n        this._register(editor.onDidChangeModelContent(() => {\n            if (this._isVisible) {\n                this._beginUpdateDecorationsSoon();\n            }\n        }));\n        const isInDiffLeftEditorKey = this._contextKeyService.createKey('isInDiffLeftEditor', editor.hasWidgetFocus());\n        this._register(editor.onDidFocusEditorWidget(() => isInDiffLeftEditorKey.set(true)));\n        this._register(editor.onDidBlurEditorWidget(() => isInDiffLeftEditorKey.set(false)));\n        this._register(editor.onDidContentSizeChange(e => {\n            const width = this._originalEditor.getContentWidth() + this._modifiedEditor.getContentWidth() + DiffEditorWidget.ONE_OVERVIEW_WIDTH;\n            const height = Math.max(this._modifiedEditor.getContentHeight(), this._originalEditor.getContentHeight());\n            this._onDidContentSizeChange.fire({\n                contentHeight: height,\n                contentWidth: width,\n                contentHeightChanged: e.contentHeightChanged,\n                contentWidthChanged: e.contentWidthChanged\n            });\n        }));\n        return editor;\n    }\n    _createRightHandSideEditor(options, codeEditorWidgetOptions) {\n        const editor = this._createInnerEditor(this._instantiationService, this._modifiedDomNode, this._adjustOptionsForRightHandSide(options), codeEditorWidgetOptions);\n        this._register(editor.onDidScrollChange((e) => {\n            if (this._isHandlingScrollEvent) {\n                return;\n            }\n            if (!e.scrollTopChanged && !e.scrollLeftChanged && !e.scrollHeightChanged) {\n                return;\n            }\n            this._isHandlingScrollEvent = true;\n            this._originalEditor.setScrollPosition({\n                scrollLeft: e.scrollLeft,\n                scrollTop: e.scrollTop\n            });\n            this._isHandlingScrollEvent = false;\n            this._layoutOverviewViewport();\n        }));\n        this._register(editor.onDidChangeViewZones(() => {\n            this._onViewZonesChanged();\n        }));\n        this._register(editor.onDidChangeConfiguration((e) => {\n            if (!editor.getModel()) {\n                return;\n            }\n            if (e.hasChanged(46 /* EditorOption.fontInfo */)) {\n                this._updateDecorationsRunner.schedule();\n            }\n            if (e.hasChanged(134 /* EditorOption.wrappingInfo */)) {\n                this._updateDecorationsRunner.cancel();\n                this._updateDecorations();\n            }\n        }));\n        this._register(editor.onDidChangeHiddenAreas(() => {\n            this._updateDecorationsRunner.cancel();\n            this._updateDecorations();\n        }));\n        this._register(editor.onDidChangeModelContent(() => {\n            if (this._isVisible) {\n                this._beginUpdateDecorationsSoon();\n            }\n        }));\n        this._register(editor.onDidChangeModelOptions((e) => {\n            if (e.tabSize) {\n                this._updateDecorationsRunner.schedule();\n            }\n        }));\n        const isInDiffRightEditorKey = this._contextKeyService.createKey('isInDiffRightEditor', editor.hasWidgetFocus());\n        this._register(editor.onDidFocusEditorWidget(() => isInDiffRightEditorKey.set(true)));\n        this._register(editor.onDidBlurEditorWidget(() => isInDiffRightEditorKey.set(false)));\n        this._register(editor.onDidContentSizeChange(e => {\n            const width = this._originalEditor.getContentWidth() + this._modifiedEditor.getContentWidth() + DiffEditorWidget.ONE_OVERVIEW_WIDTH;\n            const height = Math.max(this._modifiedEditor.getContentHeight(), this._originalEditor.getContentHeight());\n            this._onDidContentSizeChange.fire({\n                contentHeight: height,\n                contentWidth: width,\n                contentHeightChanged: e.contentHeightChanged,\n                contentWidthChanged: e.contentWidthChanged\n            });\n        }));\n        // Revert change when an arrow is clicked.\n        this._register(editor.onMouseDown(event => {\n            var _a, _b;\n            if (!event.event.rightButton && event.target.position && ((_a = event.target.element) === null || _a === void 0 ? void 0 : _a.className.includes('arrow-revert-change'))) {\n                const lineNumber = event.target.position.lineNumber;\n                const change = (_b = this._diffComputationResult) === null || _b === void 0 ? void 0 : _b.changes.find(c => c.modifiedStartLineNumber === lineNumber - 1 || c.modifiedStartLineNumber === lineNumber);\n                if (change) {\n                    this.revertChange(change);\n                }\n                event.event.stopPropagation();\n                this._updateDecorations();\n                return;\n            }\n        }));\n        return editor;\n    }\n    /**\n     * Reverts a change in the modified editor.\n     */\n    revertChange(change) {\n        const editor = this._modifiedEditor;\n        const original = this._originalEditor.getModel();\n        const modified = this._modifiedEditor.getModel();\n        if (!original || !modified || !editor) {\n            return;\n        }\n        const originalRange = change.originalEndLineNumber > 0 ? new Range(change.originalStartLineNumber, 1, change.originalEndLineNumber, original.getLineMaxColumn(change.originalEndLineNumber)) : null;\n        const originalContent = originalRange ? original.getValueInRange(originalRange) : null;\n        const newRange = change.modifiedEndLineNumber > 0 ? new Range(change.modifiedStartLineNumber, 1, change.modifiedEndLineNumber, modified.getLineMaxColumn(change.modifiedEndLineNumber)) : null;\n        const eol = modified.getEOL();\n        if (change.originalEndLineNumber === 0 && newRange) {\n            // Insert change.\n            // To revert: delete the new content and a linebreak (if possible)\n            let range = newRange;\n            if (change.modifiedStartLineNumber > 1) {\n                // Try to include a linebreak from before.\n                range = newRange.setStartPosition(change.modifiedStartLineNumber - 1, modified.getLineMaxColumn(change.modifiedStartLineNumber - 1));\n            }\n            else if (change.modifiedEndLineNumber < modified.getLineCount()) {\n                // Try to include the linebreak from after.\n                range = newRange.setEndPosition(change.modifiedEndLineNumber + 1, 1);\n            }\n            editor.executeEdits('diffEditor', [{\n                    range,\n                    text: '',\n                }]);\n        }\n        else if (change.modifiedEndLineNumber === 0 && originalContent !== null) {\n            // Delete change.\n            // To revert: insert the old content and a linebreak.\n            const insertAt = change.modifiedStartLineNumber < modified.getLineCount() ? new Position(change.modifiedStartLineNumber + 1, 1) : new Position(change.modifiedStartLineNumber, modified.getLineMaxColumn(change.modifiedStartLineNumber));\n            editor.executeEdits('diffEditor', [{\n                    range: Range.fromPositions(insertAt, insertAt),\n                    text: change.modifiedStartLineNumber < modified.getLineCount() ? originalContent + eol : eol + originalContent,\n                }]);\n        }\n        else if (newRange && originalContent !== null) {\n            // Modified change.\n            editor.executeEdits('diffEditor', [{\n                    range: newRange,\n                    text: originalContent,\n                }]);\n        }\n    }\n    _createInnerEditor(instantiationService, container, options, editorWidgetOptions) {\n        return instantiationService.createInstance(CodeEditorWidget, container, options, editorWidgetOptions);\n    }\n    dispose() {\n        this._codeEditorService.removeDiffEditor(this);\n        if (this._beginUpdateDecorationsTimeout !== -1) {\n            window.clearTimeout(this._beginUpdateDecorationsTimeout);\n            this._beginUpdateDecorationsTimeout = -1;\n        }\n        this._cleanViewZonesAndDecorations();\n        if (this._originalOverviewRuler) {\n            this._overviewDomElement.removeChild(this._originalOverviewRuler.getDomNode());\n            this._originalOverviewRuler.dispose();\n        }\n        if (this._modifiedOverviewRuler) {\n            this._overviewDomElement.removeChild(this._modifiedOverviewRuler.getDomNode());\n            this._modifiedOverviewRuler.dispose();\n        }\n        this._overviewDomElement.removeChild(this._overviewViewportDomElement.domNode);\n        if (this._options.renderOverviewRuler) {\n            this._containerDomElement.removeChild(this._overviewDomElement);\n        }\n        this._containerDomElement.removeChild(this._originalDomNode);\n        this._originalEditor.dispose();\n        this._containerDomElement.removeChild(this._modifiedDomNode);\n        this._modifiedEditor.dispose();\n        this._strategy.dispose();\n        this._containerDomElement.removeChild(this._reviewPane.domNode.domNode);\n        this._containerDomElement.removeChild(this._reviewPane.shadow.domNode);\n        this._containerDomElement.removeChild(this._reviewPane.actionBarContainer.domNode);\n        this._reviewPane.dispose();\n        this._domElement.removeChild(this._containerDomElement);\n        this._onDidDispose.fire();\n        super.dispose();\n    }\n    //------------ begin IDiffEditor methods\n    getId() {\n        return this.getEditorType() + ':' + this._id;\n    }\n    getEditorType() {\n        return editorCommon.EditorType.IDiffEditor;\n    }\n    getLineChanges() {\n        if (!this._diffComputationResult) {\n            return null;\n        }\n        return this._diffComputationResult.changes;\n    }\n    getOriginalEditor() {\n        return this._originalEditor;\n    }\n    getModifiedEditor() {\n        return this._modifiedEditor;\n    }\n    updateOptions(_newOptions) {\n        const newOptions = validateDiffEditorOptions(_newOptions, this._options);\n        const changed = changedDiffEditorOptions(this._options, newOptions);\n        this._options = newOptions;\n        const beginUpdateDecorations = (changed.ignoreTrimWhitespace || changed.renderIndicators || changed.renderMarginRevertIcon);\n        const beginUpdateDecorationsSoon = (this._isVisible && (changed.maxComputationTime || changed.maxFileSize));\n        if (beginUpdateDecorations) {\n            this._beginUpdateDecorations();\n        }\n        else if (beginUpdateDecorationsSoon) {\n            this._beginUpdateDecorationsSoon();\n        }\n        this._modifiedEditor.updateOptions(this._adjustOptionsForRightHandSide(_newOptions));\n        this._originalEditor.updateOptions(this._adjustOptionsForLeftHandSide(_newOptions));\n        // enableSplitViewResizing\n        this._strategy.setEnableSplitViewResizing(this._options.enableSplitViewResizing);\n        // renderSideBySide\n        if (changed.renderSideBySide) {\n            if (this._options.renderSideBySide) {\n                this._setStrategy(new DiffEditorWidgetSideBySide(this._createDataSource(), this._options.enableSplitViewResizing));\n            }\n            else {\n                this._setStrategy(new DiffEditorWidgetInline(this._createDataSource(), this._options.enableSplitViewResizing));\n            }\n            // Update class name\n            this._containerDomElement.className = DiffEditorWidget._getClassName(this._themeService.getColorTheme(), this._options.renderSideBySide);\n        }\n        // renderOverviewRuler\n        if (changed.renderOverviewRuler) {\n            if (this._options.renderOverviewRuler) {\n                this._containerDomElement.appendChild(this._overviewDomElement);\n            }\n            else {\n                this._containerDomElement.removeChild(this._overviewDomElement);\n            }\n        }\n    }\n    getModel() {\n        return {\n            original: this._originalEditor.getModel(),\n            modified: this._modifiedEditor.getModel()\n        };\n    }\n    setModel(model) {\n        // Guard us against partial null model\n        if (model && (!model.original || !model.modified)) {\n            throw new Error(!model.original ? 'DiffEditorWidget.setModel: Original model is null' : 'DiffEditorWidget.setModel: Modified model is null');\n        }\n        // Remove all view zones & decorations\n        this._cleanViewZonesAndDecorations();\n        this._disposeOverviewRulers();\n        // Update code editor models\n        this._originalEditor.setModel(model ? model.original : null);\n        this._modifiedEditor.setModel(model ? model.modified : null);\n        this._updateDecorationsRunner.cancel();\n        // this.originalEditor.onDidChangeModelOptions\n        if (model) {\n            this._originalEditor.setScrollTop(0);\n            this._modifiedEditor.setScrollTop(0);\n        }\n        // Disable any diff computations that will come in\n        this._diffComputationResult = null;\n        this._diffComputationToken++;\n        this._setState(0 /* editorBrowser.DiffEditorState.Idle */);\n        if (model) {\n            this._createOverviewRulers();\n            // Begin comparing\n            this._beginUpdateDecorations();\n        }\n        this._layoutOverviewViewport();\n    }\n    getContainerDomNode() {\n        return this._domElement;\n    }\n    getVisibleColumnFromPosition(position) {\n        return this._modifiedEditor.getVisibleColumnFromPosition(position);\n    }\n    getPosition() {\n        return this._modifiedEditor.getPosition();\n    }\n    setPosition(position, source = 'api') {\n        this._modifiedEditor.setPosition(position, source);\n    }\n    revealLine(lineNumber, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n        this._modifiedEditor.revealLine(lineNumber, scrollType);\n    }\n    revealLineInCenter(lineNumber, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n        this._modifiedEditor.revealLineInCenter(lineNumber, scrollType);\n    }\n    revealLineInCenterIfOutsideViewport(lineNumber, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n        this._modifiedEditor.revealLineInCenterIfOutsideViewport(lineNumber, scrollType);\n    }\n    revealLineNearTop(lineNumber, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n        this._modifiedEditor.revealLineNearTop(lineNumber, scrollType);\n    }\n    revealPosition(position, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n        this._modifiedEditor.revealPosition(position, scrollType);\n    }\n    revealPositionInCenter(position, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n        this._modifiedEditor.revealPositionInCenter(position, scrollType);\n    }\n    revealPositionInCenterIfOutsideViewport(position, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n        this._modifiedEditor.revealPositionInCenterIfOutsideViewport(position, scrollType);\n    }\n    revealPositionNearTop(position, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n        this._modifiedEditor.revealPositionNearTop(position, scrollType);\n    }\n    getSelection() {\n        return this._modifiedEditor.getSelection();\n    }\n    getSelections() {\n        return this._modifiedEditor.getSelections();\n    }\n    setSelection(something, source = 'api') {\n        this._modifiedEditor.setSelection(something, source);\n    }\n    setSelections(ranges, source = 'api') {\n        this._modifiedEditor.setSelections(ranges, source);\n    }\n    revealLines(startLineNumber, endLineNumber, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n        this._modifiedEditor.revealLines(startLineNumber, endLineNumber, scrollType);\n    }\n    revealLinesInCenter(startLineNumber, endLineNumber, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n        this._modifiedEditor.revealLinesInCenter(startLineNumber, endLineNumber, scrollType);\n    }\n    revealLinesInCenterIfOutsideViewport(startLineNumber, endLineNumber, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n        this._modifiedEditor.revealLinesInCenterIfOutsideViewport(startLineNumber, endLineNumber, scrollType);\n    }\n    revealLinesNearTop(startLineNumber, endLineNumber, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n        this._modifiedEditor.revealLinesNearTop(startLineNumber, endLineNumber, scrollType);\n    }\n    revealRange(range, scrollType = 0 /* editorCommon.ScrollType.Smooth */, revealVerticalInCenter = false, revealHorizontal = true) {\n        this._modifiedEditor.revealRange(range, scrollType, revealVerticalInCenter, revealHorizontal);\n    }\n    revealRangeInCenter(range, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n        this._modifiedEditor.revealRangeInCenter(range, scrollType);\n    }\n    revealRangeInCenterIfOutsideViewport(range, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n        this._modifiedEditor.revealRangeInCenterIfOutsideViewport(range, scrollType);\n    }\n    revealRangeNearTop(range, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n        this._modifiedEditor.revealRangeNearTop(range, scrollType);\n    }\n    revealRangeNearTopIfOutsideViewport(range, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n        this._modifiedEditor.revealRangeNearTopIfOutsideViewport(range, scrollType);\n    }\n    revealRangeAtTop(range, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n        this._modifiedEditor.revealRangeAtTop(range, scrollType);\n    }\n    getSupportedActions() {\n        return this._modifiedEditor.getSupportedActions();\n    }\n    saveViewState() {\n        const originalViewState = this._originalEditor.saveViewState();\n        const modifiedViewState = this._modifiedEditor.saveViewState();\n        return {\n            original: originalViewState,\n            modified: modifiedViewState\n        };\n    }\n    restoreViewState(s) {\n        if (s && s.original && s.modified) {\n            const diffEditorState = s;\n            this._originalEditor.restoreViewState(diffEditorState.original);\n            this._modifiedEditor.restoreViewState(diffEditorState.modified);\n        }\n    }\n    layout(dimension) {\n        this._elementSizeObserver.observe(dimension);\n    }\n    focus() {\n        this._modifiedEditor.focus();\n    }\n    hasTextFocus() {\n        return this._originalEditor.hasTextFocus() || this._modifiedEditor.hasTextFocus();\n    }\n    trigger(source, handlerId, payload) {\n        this._modifiedEditor.trigger(source, handlerId, payload);\n    }\n    createDecorationsCollection(decorations) {\n        return this._modifiedEditor.createDecorationsCollection(decorations);\n    }\n    changeDecorations(callback) {\n        return this._modifiedEditor.changeDecorations(callback);\n    }\n    //------------ end IDiffEditor methods\n    //------------ begin layouting methods\n    _onDidContainerSizeChanged() {\n        this._doLayout();\n    }\n    _getReviewHeight() {\n        return this._reviewPane.isVisible() ? this._elementSizeObserver.getHeight() : 0;\n    }\n    _layoutOverviewRulers() {\n        if (!this._options.renderOverviewRuler) {\n            return;\n        }\n        if (!this._originalOverviewRuler || !this._modifiedOverviewRuler) {\n            return;\n        }\n        const height = this._elementSizeObserver.getHeight();\n        const reviewHeight = this._getReviewHeight();\n        const freeSpace = DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH - 2 * DiffEditorWidget.ONE_OVERVIEW_WIDTH;\n        const layoutInfo = this._modifiedEditor.getLayoutInfo();\n        if (layoutInfo) {\n            this._originalOverviewRuler.setLayout({\n                top: 0,\n                width: DiffEditorWidget.ONE_OVERVIEW_WIDTH,\n                right: freeSpace + DiffEditorWidget.ONE_OVERVIEW_WIDTH,\n                height: (height - reviewHeight)\n            });\n            this._modifiedOverviewRuler.setLayout({\n                top: 0,\n                right: 0,\n                width: DiffEditorWidget.ONE_OVERVIEW_WIDTH,\n                height: (height - reviewHeight)\n            });\n        }\n    }\n    //------------ end layouting methods\n    _onViewZonesChanged() {\n        if (this._currentlyChangingViewZones) {\n            return;\n        }\n        this._updateDecorationsRunner.schedule();\n    }\n    _beginUpdateDecorationsSoon() {\n        // Clear previous timeout if necessary\n        if (this._beginUpdateDecorationsTimeout !== -1) {\n            window.clearTimeout(this._beginUpdateDecorationsTimeout);\n            this._beginUpdateDecorationsTimeout = -1;\n        }\n        this._beginUpdateDecorationsTimeout = window.setTimeout(() => this._beginUpdateDecorations(), DiffEditorWidget.UPDATE_DIFF_DECORATIONS_DELAY);\n    }\n    static _equals(a, b) {\n        if (!a && !b) {\n            return true;\n        }\n        if (!a || !b) {\n            return false;\n        }\n        return (a.toString() === b.toString());\n    }\n    _beginUpdateDecorations() {\n        this._beginUpdateDecorationsTimeout = -1;\n        const currentOriginalModel = this._originalEditor.getModel();\n        const currentModifiedModel = this._modifiedEditor.getModel();\n        if (!currentOriginalModel || !currentModifiedModel) {\n            return;\n        }\n        // Prevent old diff requests to come if a new request has been initiated\n        // The best method would be to call cancel on the Promise, but this is not\n        // yet supported, so using tokens for now.\n        this._diffComputationToken++;\n        const currentToken = this._diffComputationToken;\n        const diffLimit = this._options.maxFileSize * 1024 * 1024; // MB\n        const canSyncModelForDiff = (model) => {\n            const bufferTextLength = model.getValueLength();\n            return (diffLimit === 0 || bufferTextLength <= diffLimit);\n        };\n        if (!canSyncModelForDiff(currentOriginalModel) || !canSyncModelForDiff(currentModifiedModel)) {\n            if (!DiffEditorWidget._equals(currentOriginalModel.uri, this._lastOriginalWarning)\n                || !DiffEditorWidget._equals(currentModifiedModel.uri, this._lastModifiedWarning)) {\n                this._lastOriginalWarning = currentOriginalModel.uri;\n                this._lastModifiedWarning = currentModifiedModel.uri;\n                this._notificationService.warn(nls.localize(\"diff.tooLarge\", \"Cannot compare files because one file is too large.\"));\n            }\n            return;\n        }\n        this._setState(1 /* editorBrowser.DiffEditorState.ComputingDiff */);\n        this._editorWorkerService.computeDiff(currentOriginalModel.uri, currentModifiedModel.uri, this._options.ignoreTrimWhitespace, this._options.maxComputationTime).then((result) => {\n            if (currentToken === this._diffComputationToken\n                && currentOriginalModel === this._originalEditor.getModel()\n                && currentModifiedModel === this._modifiedEditor.getModel()) {\n                this._setState(2 /* editorBrowser.DiffEditorState.DiffComputed */);\n                this._diffComputationResult = result;\n                this._updateDecorationsRunner.schedule();\n                this._onDidUpdateDiff.fire();\n            }\n        }, (error) => {\n            if (currentToken === this._diffComputationToken\n                && currentOriginalModel === this._originalEditor.getModel()\n                && currentModifiedModel === this._modifiedEditor.getModel()) {\n                this._setState(2 /* editorBrowser.DiffEditorState.DiffComputed */);\n                this._diffComputationResult = null;\n                this._updateDecorationsRunner.schedule();\n            }\n        });\n    }\n    _cleanViewZonesAndDecorations() {\n        this._originalEditorState.clean(this._originalEditor);\n        this._modifiedEditorState.clean(this._modifiedEditor);\n    }\n    _updateDecorations() {\n        if (!this._originalEditor.getModel() || !this._modifiedEditor.getModel()) {\n            return;\n        }\n        const lineChanges = (this._diffComputationResult ? this._diffComputationResult.changes : []);\n        const foreignOriginal = this._originalEditorState.getForeignViewZones(this._originalEditor.getWhitespaces());\n        const foreignModified = this._modifiedEditorState.getForeignViewZones(this._modifiedEditor.getWhitespaces());\n        const diffDecorations = this._strategy.getEditorsDiffDecorations(lineChanges, this._options.ignoreTrimWhitespace, this._options.renderIndicators, this._options.renderMarginRevertIcon, foreignOriginal, foreignModified);\n        try {\n            this._currentlyChangingViewZones = true;\n            this._originalEditorState.apply(this._originalEditor, this._originalOverviewRuler, diffDecorations.original, false);\n            this._modifiedEditorState.apply(this._modifiedEditor, this._modifiedOverviewRuler, diffDecorations.modified, true);\n        }\n        finally {\n            this._currentlyChangingViewZones = false;\n        }\n    }\n    _adjustOptionsForSubEditor(options) {\n        const clonedOptions = Object.assign({}, options);\n        clonedOptions.inDiffEditor = true;\n        clonedOptions.automaticLayout = false;\n        // Clone scrollbar options before changing them\n        clonedOptions.scrollbar = Object.assign({}, (clonedOptions.scrollbar || {}));\n        clonedOptions.scrollbar.vertical = 'visible';\n        clonedOptions.folding = false;\n        clonedOptions.codeLens = this._options.diffCodeLens;\n        clonedOptions.fixedOverflowWidgets = true;\n        // clonedOptions.lineDecorationsWidth = '2ch';\n        // Clone minimap options before changing them\n        clonedOptions.minimap = Object.assign({}, (clonedOptions.minimap || {}));\n        clonedOptions.minimap.enabled = false;\n        return clonedOptions;\n    }\n    _adjustOptionsForLeftHandSide(options) {\n        const result = this._adjustOptionsForSubEditor(options);\n        if (!this._options.renderSideBySide) {\n            // never wrap hidden editor\n            result.wordWrapOverride1 = 'off';\n            result.wordWrapOverride2 = 'off';\n        }\n        else {\n            result.wordWrapOverride1 = this._options.diffWordWrap;\n        }\n        if (options.originalAriaLabel) {\n            result.ariaLabel = options.originalAriaLabel;\n        }\n        result.readOnly = !this._options.originalEditable;\n        result.dropIntoEditor = { enabled: !result.readOnly };\n        result.extraEditorClassName = 'original-in-monaco-diff-editor';\n        return Object.assign(Object.assign({}, result), { dimension: {\n                height: 0,\n                width: 0\n            } });\n    }\n    _adjustOptionsForRightHandSide(options) {\n        const result = this._adjustOptionsForSubEditor(options);\n        if (options.modifiedAriaLabel) {\n            result.ariaLabel = options.modifiedAriaLabel;\n        }\n        result.wordWrapOverride1 = this._options.diffWordWrap;\n        result.revealHorizontalRightPadding = EditorOptions.revealHorizontalRightPadding.defaultValue + DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH;\n        result.scrollbar.verticalHasArrows = false;\n        result.extraEditorClassName = 'modified-in-monaco-diff-editor';\n        return Object.assign(Object.assign({}, result), { dimension: {\n                height: 0,\n                width: 0\n            } });\n    }\n    doLayout() {\n        this._elementSizeObserver.observe();\n        this._doLayout();\n    }\n    _doLayout() {\n        const width = this._elementSizeObserver.getWidth();\n        const height = this._elementSizeObserver.getHeight();\n        const reviewHeight = this._getReviewHeight();\n        const splitPoint = this._strategy.layout();\n        this._originalDomNode.style.width = splitPoint + 'px';\n        this._originalDomNode.style.left = '0px';\n        this._modifiedDomNode.style.width = (width - splitPoint) + 'px';\n        this._modifiedDomNode.style.left = splitPoint + 'px';\n        this._overviewDomElement.style.top = '0px';\n        this._overviewDomElement.style.height = (height - reviewHeight) + 'px';\n        this._overviewDomElement.style.width = DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH + 'px';\n        this._overviewDomElement.style.left = (width - DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH) + 'px';\n        this._overviewViewportDomElement.setWidth(DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH);\n        this._overviewViewportDomElement.setHeight(30);\n        this._originalEditor.layout({ width: splitPoint, height: (height - reviewHeight) });\n        this._modifiedEditor.layout({ width: width - splitPoint - (this._options.renderOverviewRuler ? DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH : 0), height: (height - reviewHeight) });\n        if (this._originalOverviewRuler || this._modifiedOverviewRuler) {\n            this._layoutOverviewRulers();\n        }\n        this._reviewPane.layout(height - reviewHeight, width, reviewHeight);\n        this._layoutOverviewViewport();\n    }\n    _layoutOverviewViewport() {\n        const layout = this._computeOverviewViewport();\n        if (!layout) {\n            this._overviewViewportDomElement.setTop(0);\n            this._overviewViewportDomElement.setHeight(0);\n        }\n        else {\n            this._overviewViewportDomElement.setTop(layout.top);\n            this._overviewViewportDomElement.setHeight(layout.height);\n        }\n    }\n    _computeOverviewViewport() {\n        const layoutInfo = this._modifiedEditor.getLayoutInfo();\n        if (!layoutInfo) {\n            return null;\n        }\n        const scrollTop = this._modifiedEditor.getScrollTop();\n        const scrollHeight = this._modifiedEditor.getScrollHeight();\n        const computedAvailableSize = Math.max(0, layoutInfo.height);\n        const computedRepresentableSize = Math.max(0, computedAvailableSize - 2 * 0);\n        const computedRatio = scrollHeight > 0 ? (computedRepresentableSize / scrollHeight) : 0;\n        const computedSliderSize = Math.max(0, Math.floor(layoutInfo.height * computedRatio));\n        const computedSliderPosition = Math.floor(scrollTop * computedRatio);\n        return {\n            height: computedSliderSize,\n            top: computedSliderPosition\n        };\n    }\n    _createDataSource() {\n        return {\n            getWidth: () => {\n                return this._elementSizeObserver.getWidth();\n            },\n            getHeight: () => {\n                return (this._elementSizeObserver.getHeight() - this._getReviewHeight());\n            },\n            getOptions: () => {\n                return {\n                    renderOverviewRuler: this._options.renderOverviewRuler\n                };\n            },\n            getContainerDomNode: () => {\n                return this._containerDomElement;\n            },\n            relayoutEditors: () => {\n                this._doLayout();\n            },\n            getOriginalEditor: () => {\n                return this._originalEditor;\n            },\n            getModifiedEditor: () => {\n                return this._modifiedEditor;\n            }\n        };\n    }\n    _setStrategy(newStrategy) {\n        if (this._strategy) {\n            this._strategy.dispose();\n        }\n        this._strategy = newStrategy;\n        newStrategy.applyColors(this._themeService.getColorTheme());\n        if (this._diffComputationResult) {\n            this._updateDecorations();\n        }\n        // Just do a layout, the strategy might need it\n        this._doLayout();\n    }\n    _getLineChangeAtOrBeforeLineNumber(lineNumber, startLineNumberExtractor) {\n        const lineChanges = (this._diffComputationResult ? this._diffComputationResult.changes : []);\n        if (lineChanges.length === 0 || lineNumber < startLineNumberExtractor(lineChanges[0])) {\n            // There are no changes or `lineNumber` is before the first change\n            return null;\n        }\n        let min = 0;\n        let max = lineChanges.length - 1;\n        while (min < max) {\n            const mid = Math.floor((min + max) / 2);\n            const midStart = startLineNumberExtractor(lineChanges[mid]);\n            const midEnd = (mid + 1 <= max ? startLineNumberExtractor(lineChanges[mid + 1]) : 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */);\n            if (lineNumber < midStart) {\n                max = mid - 1;\n            }\n            else if (lineNumber >= midEnd) {\n                min = mid + 1;\n            }\n            else {\n                // HIT!\n                min = mid;\n                max = mid;\n            }\n        }\n        return lineChanges[min];\n    }\n    _getEquivalentLineForOriginalLineNumber(lineNumber) {\n        const lineChange = this._getLineChangeAtOrBeforeLineNumber(lineNumber, (lineChange) => lineChange.originalStartLineNumber);\n        if (!lineChange) {\n            return lineNumber;\n        }\n        const originalEquivalentLineNumber = lineChange.originalStartLineNumber + (lineChange.originalEndLineNumber > 0 ? -1 : 0);\n        const modifiedEquivalentLineNumber = lineChange.modifiedStartLineNumber + (lineChange.modifiedEndLineNumber > 0 ? -1 : 0);\n        const lineChangeOriginalLength = (lineChange.originalEndLineNumber > 0 ? (lineChange.originalEndLineNumber - lineChange.originalStartLineNumber + 1) : 0);\n        const lineChangeModifiedLength = (lineChange.modifiedEndLineNumber > 0 ? (lineChange.modifiedEndLineNumber - lineChange.modifiedStartLineNumber + 1) : 0);\n        const delta = lineNumber - originalEquivalentLineNumber;\n        if (delta <= lineChangeOriginalLength) {\n            return modifiedEquivalentLineNumber + Math.min(delta, lineChangeModifiedLength);\n        }\n        return modifiedEquivalentLineNumber + lineChangeModifiedLength - lineChangeOriginalLength + delta;\n    }\n    _getEquivalentLineForModifiedLineNumber(lineNumber) {\n        const lineChange = this._getLineChangeAtOrBeforeLineNumber(lineNumber, (lineChange) => lineChange.modifiedStartLineNumber);\n        if (!lineChange) {\n            return lineNumber;\n        }\n        const originalEquivalentLineNumber = lineChange.originalStartLineNumber + (lineChange.originalEndLineNumber > 0 ? -1 : 0);\n        const modifiedEquivalentLineNumber = lineChange.modifiedStartLineNumber + (lineChange.modifiedEndLineNumber > 0 ? -1 : 0);\n        const lineChangeOriginalLength = (lineChange.originalEndLineNumber > 0 ? (lineChange.originalEndLineNumber - lineChange.originalStartLineNumber + 1) : 0);\n        const lineChangeModifiedLength = (lineChange.modifiedEndLineNumber > 0 ? (lineChange.modifiedEndLineNumber - lineChange.modifiedStartLineNumber + 1) : 0);\n        const delta = lineNumber - modifiedEquivalentLineNumber;\n        if (delta <= lineChangeModifiedLength) {\n            return originalEquivalentLineNumber + Math.min(delta, lineChangeOriginalLength);\n        }\n        return originalEquivalentLineNumber + lineChangeOriginalLength - lineChangeModifiedLength + delta;\n    }\n    getDiffLineInformationForOriginal(lineNumber) {\n        if (!this._diffComputationResult) {\n            // Cannot answer that which I don't know\n            return null;\n        }\n        return {\n            equivalentLineNumber: this._getEquivalentLineForOriginalLineNumber(lineNumber)\n        };\n    }\n    getDiffLineInformationForModified(lineNumber) {\n        if (!this._diffComputationResult) {\n            // Cannot answer that which I don't know\n            return null;\n        }\n        return {\n            equivalentLineNumber: this._getEquivalentLineForModifiedLineNumber(lineNumber)\n        };\n    }\n};\nDiffEditorWidget.ONE_OVERVIEW_WIDTH = 15;\nDiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH = 30;\nDiffEditorWidget.UPDATE_DIFF_DECORATIONS_DELAY = 200; // ms\nDiffEditorWidget = __decorate([\n    __param(3, IClipboardService),\n    __param(4, IEditorWorkerService),\n    __param(5, IContextKeyService),\n    __param(6, IInstantiationService),\n    __param(7, ICodeEditorService),\n    __param(8, IThemeService),\n    __param(9, INotificationService),\n    __param(10, IContextMenuService),\n    __param(11, IEditorProgressService)\n], DiffEditorWidget);\nexport { DiffEditorWidget };\nclass DiffEditorWidgetStyle extends Disposable {\n    constructor(dataSource) {\n        super();\n        this._dataSource = dataSource;\n        this._insertColor = null;\n        this._removeColor = null;\n    }\n    applyColors(theme) {\n        const newInsertColor = theme.getColor(diffOverviewRulerInserted) || (theme.getColor(diffInserted) || defaultInsertColor).transparent(2);\n        const newRemoveColor = theme.getColor(diffOverviewRulerRemoved) || (theme.getColor(diffRemoved) || defaultRemoveColor).transparent(2);\n        const hasChanges = !newInsertColor.equals(this._insertColor) || !newRemoveColor.equals(this._removeColor);\n        this._insertColor = newInsertColor;\n        this._removeColor = newRemoveColor;\n        return hasChanges;\n    }\n    getEditorsDiffDecorations(lineChanges, ignoreTrimWhitespace, renderIndicators, renderMarginRevertIcon, originalWhitespaces, modifiedWhitespaces) {\n        // Get view zones\n        modifiedWhitespaces = modifiedWhitespaces.sort((a, b) => {\n            return a.afterLineNumber - b.afterLineNumber;\n        });\n        originalWhitespaces = originalWhitespaces.sort((a, b) => {\n            return a.afterLineNumber - b.afterLineNumber;\n        });\n        const zones = this._getViewZones(lineChanges, originalWhitespaces, modifiedWhitespaces, renderIndicators);\n        // Get decorations & overview ruler zones\n        const originalDecorations = this._getOriginalEditorDecorations(zones, lineChanges, ignoreTrimWhitespace, renderIndicators);\n        const modifiedDecorations = this._getModifiedEditorDecorations(zones, lineChanges, ignoreTrimWhitespace, renderIndicators, renderMarginRevertIcon);\n        return {\n            original: {\n                decorations: originalDecorations.decorations,\n                overviewZones: originalDecorations.overviewZones,\n                zones: zones.original\n            },\n            modified: {\n                decorations: modifiedDecorations.decorations,\n                overviewZones: modifiedDecorations.overviewZones,\n                zones: zones.modified\n            }\n        };\n    }\n}\nclass ForeignViewZonesIterator {\n    constructor(source) {\n        this._source = source;\n        this._index = -1;\n        this.current = null;\n        this.advance();\n    }\n    advance() {\n        this._index++;\n        if (this._index < this._source.length) {\n            this.current = this._source[this._index];\n        }\n        else {\n            this.current = null;\n        }\n    }\n}\nclass ViewZonesComputer {\n    constructor(_lineChanges, _originalForeignVZ, _modifiedForeignVZ, _originalEditor, _modifiedEditor) {\n        this._lineChanges = _lineChanges;\n        this._originalForeignVZ = _originalForeignVZ;\n        this._modifiedForeignVZ = _modifiedForeignVZ;\n        this._originalEditor = _originalEditor;\n        this._modifiedEditor = _modifiedEditor;\n    }\n    static _getViewLineCount(editor, startLineNumber, endLineNumber) {\n        const model = editor.getModel();\n        const viewModel = editor._getViewModel();\n        if (model && viewModel) {\n            const viewRange = getViewRange(model, viewModel, startLineNumber, endLineNumber);\n            return (viewRange.endLineNumber - viewRange.startLineNumber + 1);\n        }\n        return (endLineNumber - startLineNumber + 1);\n    }\n    getViewZones() {\n        const originalLineHeight = this._originalEditor.getOption(61 /* EditorOption.lineHeight */);\n        const modifiedLineHeight = this._modifiedEditor.getOption(61 /* EditorOption.lineHeight */);\n        const originalHasWrapping = (this._originalEditor.getOption(134 /* EditorOption.wrappingInfo */).wrappingColumn !== -1);\n        const modifiedHasWrapping = (this._modifiedEditor.getOption(134 /* EditorOption.wrappingInfo */).wrappingColumn !== -1);\n        const hasWrapping = (originalHasWrapping || modifiedHasWrapping);\n        const originalModel = this._originalEditor.getModel();\n        const originalCoordinatesConverter = this._originalEditor._getViewModel().coordinatesConverter;\n        const modifiedCoordinatesConverter = this._modifiedEditor._getViewModel().coordinatesConverter;\n        const result = {\n            original: [],\n            modified: []\n        };\n        let lineChangeModifiedLength = 0;\n        let lineChangeOriginalLength = 0;\n        let originalEquivalentLineNumber = 0;\n        let modifiedEquivalentLineNumber = 0;\n        let originalEndEquivalentLineNumber = 0;\n        let modifiedEndEquivalentLineNumber = 0;\n        const sortMyViewZones = (a, b) => {\n            return a.afterLineNumber - b.afterLineNumber;\n        };\n        const addAndCombineIfPossible = (destination, item) => {\n            if (item.domNode === null && destination.length > 0) {\n                const lastItem = destination[destination.length - 1];\n                if (lastItem.afterLineNumber === item.afterLineNumber && lastItem.domNode === null) {\n                    lastItem.heightInLines += item.heightInLines;\n                    return;\n                }\n            }\n            destination.push(item);\n        };\n        const modifiedForeignVZ = new ForeignViewZonesIterator(this._modifiedForeignVZ);\n        const originalForeignVZ = new ForeignViewZonesIterator(this._originalForeignVZ);\n        let lastOriginalLineNumber = 1;\n        let lastModifiedLineNumber = 1;\n        // In order to include foreign view zones after the last line change, the for loop will iterate once more after the end of the `lineChanges` array\n        for (let i = 0, length = this._lineChanges.length; i <= length; i++) {\n            const lineChange = (i < length ? this._lineChanges[i] : null);\n            if (lineChange !== null) {\n                originalEquivalentLineNumber = lineChange.originalStartLineNumber + (lineChange.originalEndLineNumber > 0 ? -1 : 0);\n                modifiedEquivalentLineNumber = lineChange.modifiedStartLineNumber + (lineChange.modifiedEndLineNumber > 0 ? -1 : 0);\n                lineChangeOriginalLength = (lineChange.originalEndLineNumber > 0 ? ViewZonesComputer._getViewLineCount(this._originalEditor, lineChange.originalStartLineNumber, lineChange.originalEndLineNumber) : 0);\n                lineChangeModifiedLength = (lineChange.modifiedEndLineNumber > 0 ? ViewZonesComputer._getViewLineCount(this._modifiedEditor, lineChange.modifiedStartLineNumber, lineChange.modifiedEndLineNumber) : 0);\n                originalEndEquivalentLineNumber = Math.max(lineChange.originalStartLineNumber, lineChange.originalEndLineNumber);\n                modifiedEndEquivalentLineNumber = Math.max(lineChange.modifiedStartLineNumber, lineChange.modifiedEndLineNumber);\n            }\n            else {\n                // Increase to very large value to get the producing tests of foreign view zones running\n                originalEquivalentLineNumber += 10000000 + lineChangeOriginalLength;\n                modifiedEquivalentLineNumber += 10000000 + lineChangeModifiedLength;\n                originalEndEquivalentLineNumber = originalEquivalentLineNumber;\n                modifiedEndEquivalentLineNumber = modifiedEquivalentLineNumber;\n            }\n            // Each step produces view zones, and after producing them, we try to cancel them out, to avoid empty-empty view zone cases\n            let stepOriginal = [];\n            let stepModified = [];\n            // ---------------------------- PRODUCE VIEW ZONES\n            // [PRODUCE] View zones due to line mapping differences (equal lines but wrapped differently)\n            if (hasWrapping) {\n                let count;\n                if (lineChange) {\n                    if (lineChange.originalEndLineNumber > 0) {\n                        count = lineChange.originalStartLineNumber - lastOriginalLineNumber;\n                    }\n                    else {\n                        count = lineChange.modifiedStartLineNumber - lastModifiedLineNumber;\n                    }\n                }\n                else {\n                    // `lastOriginalLineNumber` has not been looked at yet\n                    count = originalModel.getLineCount() - lastOriginalLineNumber + 1;\n                }\n                for (let i = 0; i < count; i++) {\n                    const originalLineNumber = lastOriginalLineNumber + i;\n                    const modifiedLineNumber = lastModifiedLineNumber + i;\n                    const originalViewLineCount = originalCoordinatesConverter.getModelLineViewLineCount(originalLineNumber);\n                    const modifiedViewLineCount = modifiedCoordinatesConverter.getModelLineViewLineCount(modifiedLineNumber);\n                    if (originalViewLineCount < modifiedViewLineCount) {\n                        stepOriginal.push({\n                            afterLineNumber: originalLineNumber,\n                            heightInLines: modifiedViewLineCount - originalViewLineCount,\n                            domNode: null,\n                            marginDomNode: null\n                        });\n                    }\n                    else if (originalViewLineCount > modifiedViewLineCount) {\n                        stepModified.push({\n                            afterLineNumber: modifiedLineNumber,\n                            heightInLines: originalViewLineCount - modifiedViewLineCount,\n                            domNode: null,\n                            marginDomNode: null\n                        });\n                    }\n                }\n                if (lineChange) {\n                    lastOriginalLineNumber = (lineChange.originalEndLineNumber > 0 ? lineChange.originalEndLineNumber : lineChange.originalStartLineNumber) + 1;\n                    lastModifiedLineNumber = (lineChange.modifiedEndLineNumber > 0 ? lineChange.modifiedEndLineNumber : lineChange.modifiedStartLineNumber) + 1;\n                }\n            }\n            // [PRODUCE] View zone(s) in original-side due to foreign view zone(s) in modified-side\n            while (modifiedForeignVZ.current && modifiedForeignVZ.current.afterLineNumber <= modifiedEndEquivalentLineNumber) {\n                let viewZoneLineNumber;\n                if (modifiedForeignVZ.current.afterLineNumber <= modifiedEquivalentLineNumber) {\n                    viewZoneLineNumber = originalEquivalentLineNumber - modifiedEquivalentLineNumber + modifiedForeignVZ.current.afterLineNumber;\n                }\n                else {\n                    viewZoneLineNumber = originalEndEquivalentLineNumber;\n                }\n                let marginDomNode = null;\n                if (lineChange && lineChange.modifiedStartLineNumber <= modifiedForeignVZ.current.afterLineNumber && modifiedForeignVZ.current.afterLineNumber <= lineChange.modifiedEndLineNumber) {\n                    marginDomNode = this._createOriginalMarginDomNodeForModifiedForeignViewZoneInAddedRegion();\n                }\n                stepOriginal.push({\n                    afterLineNumber: viewZoneLineNumber,\n                    heightInLines: modifiedForeignVZ.current.height / modifiedLineHeight,\n                    domNode: null,\n                    marginDomNode: marginDomNode\n                });\n                modifiedForeignVZ.advance();\n            }\n            // [PRODUCE] View zone(s) in modified-side due to foreign view zone(s) in original-side\n            while (originalForeignVZ.current && originalForeignVZ.current.afterLineNumber <= originalEndEquivalentLineNumber) {\n                let viewZoneLineNumber;\n                if (originalForeignVZ.current.afterLineNumber <= originalEquivalentLineNumber) {\n                    viewZoneLineNumber = modifiedEquivalentLineNumber - originalEquivalentLineNumber + originalForeignVZ.current.afterLineNumber;\n                }\n                else {\n                    viewZoneLineNumber = modifiedEndEquivalentLineNumber;\n                }\n                stepModified.push({\n                    afterLineNumber: viewZoneLineNumber,\n                    heightInLines: originalForeignVZ.current.height / originalLineHeight,\n                    domNode: null\n                });\n                originalForeignVZ.advance();\n            }\n            if (lineChange !== null && isChangeOrInsert(lineChange)) {\n                const r = this._produceOriginalFromDiff(lineChange, lineChangeOriginalLength, lineChangeModifiedLength);\n                if (r) {\n                    stepOriginal.push(r);\n                }\n            }\n            if (lineChange !== null && isChangeOrDelete(lineChange)) {\n                const r = this._produceModifiedFromDiff(lineChange, lineChangeOriginalLength, lineChangeModifiedLength);\n                if (r) {\n                    stepModified.push(r);\n                }\n            }\n            // ---------------------------- END PRODUCE VIEW ZONES\n            // ---------------------------- EMIT MINIMAL VIEW ZONES\n            // [CANCEL & EMIT] Try to cancel view zones out\n            let stepOriginalIndex = 0;\n            let stepModifiedIndex = 0;\n            stepOriginal = stepOriginal.sort(sortMyViewZones);\n            stepModified = stepModified.sort(sortMyViewZones);\n            while (stepOriginalIndex < stepOriginal.length && stepModifiedIndex < stepModified.length) {\n                const original = stepOriginal[stepOriginalIndex];\n                const modified = stepModified[stepModifiedIndex];\n                const originalDelta = original.afterLineNumber - originalEquivalentLineNumber;\n                const modifiedDelta = modified.afterLineNumber - modifiedEquivalentLineNumber;\n                if (originalDelta < modifiedDelta) {\n                    addAndCombineIfPossible(result.original, original);\n                    stepOriginalIndex++;\n                }\n                else if (modifiedDelta < originalDelta) {\n                    addAndCombineIfPossible(result.modified, modified);\n                    stepModifiedIndex++;\n                }\n                else if (original.shouldNotShrink) {\n                    addAndCombineIfPossible(result.original, original);\n                    stepOriginalIndex++;\n                }\n                else if (modified.shouldNotShrink) {\n                    addAndCombineIfPossible(result.modified, modified);\n                    stepModifiedIndex++;\n                }\n                else {\n                    if (original.heightInLines >= modified.heightInLines) {\n                        // modified view zone gets removed\n                        original.heightInLines -= modified.heightInLines;\n                        stepModifiedIndex++;\n                    }\n                    else {\n                        // original view zone gets removed\n                        modified.heightInLines -= original.heightInLines;\n                        stepOriginalIndex++;\n                    }\n                }\n            }\n            // [EMIT] Remaining original view zones\n            while (stepOriginalIndex < stepOriginal.length) {\n                addAndCombineIfPossible(result.original, stepOriginal[stepOriginalIndex]);\n                stepOriginalIndex++;\n            }\n            // [EMIT] Remaining modified view zones\n            while (stepModifiedIndex < stepModified.length) {\n                addAndCombineIfPossible(result.modified, stepModified[stepModifiedIndex]);\n                stepModifiedIndex++;\n            }\n            // ---------------------------- END EMIT MINIMAL VIEW ZONES\n        }\n        return {\n            original: ViewZonesComputer._ensureDomNodes(result.original),\n            modified: ViewZonesComputer._ensureDomNodes(result.modified),\n        };\n    }\n    static _ensureDomNodes(zones) {\n        return zones.map((z) => {\n            if (!z.domNode) {\n                z.domNode = createFakeLinesDiv();\n            }\n            return z;\n        });\n    }\n}\nfunction createDecoration(startLineNumber, startColumn, endLineNumber, endColumn, options) {\n    return {\n        range: new Range(startLineNumber, startColumn, endLineNumber, endColumn),\n        options: options\n    };\n}\nconst DECORATIONS = {\n    arrowRevertChange: ModelDecorationOptions.register({\n        description: 'diff-editor-arrow-revert-change',\n        glyphMarginClassName: 'arrow-revert-change ' + ThemeIcon.asClassName(Codicon.arrowRight),\n    }),\n    charDelete: ModelDecorationOptions.register({\n        description: 'diff-editor-char-delete',\n        className: 'char-delete'\n    }),\n    charDeleteWholeLine: ModelDecorationOptions.register({\n        description: 'diff-editor-char-delete-whole-line',\n        className: 'char-delete',\n        isWholeLine: true\n    }),\n    charInsert: ModelDecorationOptions.register({\n        description: 'diff-editor-char-insert',\n        className: 'char-insert'\n    }),\n    charInsertWholeLine: ModelDecorationOptions.register({\n        description: 'diff-editor-char-insert-whole-line',\n        className: 'char-insert',\n        isWholeLine: true\n    }),\n    lineInsert: ModelDecorationOptions.register({\n        description: 'diff-editor-line-insert',\n        className: 'line-insert',\n        marginClassName: 'gutter-insert',\n        isWholeLine: true\n    }),\n    lineInsertWithSign: ModelDecorationOptions.register({\n        description: 'diff-editor-line-insert-with-sign',\n        className: 'line-insert',\n        linesDecorationsClassName: 'insert-sign ' + ThemeIcon.asClassName(diffInsertIcon),\n        marginClassName: 'gutter-insert',\n        isWholeLine: true\n    }),\n    lineDelete: ModelDecorationOptions.register({\n        description: 'diff-editor-line-delete',\n        className: 'line-delete',\n        marginClassName: 'gutter-delete',\n        isWholeLine: true\n    }),\n    lineDeleteWithSign: ModelDecorationOptions.register({\n        description: 'diff-editor-line-delete-with-sign',\n        className: 'line-delete',\n        linesDecorationsClassName: 'delete-sign ' + ThemeIcon.asClassName(diffRemoveIcon),\n        marginClassName: 'gutter-delete',\n        isWholeLine: true\n    }),\n    lineDeleteMargin: ModelDecorationOptions.register({\n        description: 'diff-editor-line-delete-margin',\n        marginClassName: 'gutter-delete',\n    })\n};\nclass DiffEditorWidgetSideBySide extends DiffEditorWidgetStyle {\n    constructor(dataSource, enableSplitViewResizing) {\n        super(dataSource);\n        this._disableSash = (enableSplitViewResizing === false);\n        this._sashRatio = null;\n        this._sashPosition = null;\n        this._startSashPosition = null;\n        this._sash = this._register(new Sash(this._dataSource.getContainerDomNode(), this, { orientation: 0 /* Orientation.VERTICAL */ }));\n        if (this._disableSash) {\n            this._sash.state = 0 /* SashState.Disabled */;\n        }\n        this._sash.onDidStart(() => this._onSashDragStart());\n        this._sash.onDidChange((e) => this._onSashDrag(e));\n        this._sash.onDidEnd(() => this._onSashDragEnd());\n        this._sash.onDidReset(() => this._onSashReset());\n    }\n    setEnableSplitViewResizing(enableSplitViewResizing) {\n        const newDisableSash = (enableSplitViewResizing === false);\n        if (this._disableSash !== newDisableSash) {\n            this._disableSash = newDisableSash;\n            this._sash.state = this._disableSash ? 0 /* SashState.Disabled */ : 3 /* SashState.Enabled */;\n        }\n    }\n    layout(sashRatio = this._sashRatio) {\n        const w = this._dataSource.getWidth();\n        const contentWidth = w - (this._dataSource.getOptions().renderOverviewRuler ? DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH : 0);\n        let sashPosition = Math.floor((sashRatio || 0.5) * contentWidth);\n        const midPoint = Math.floor(0.5 * contentWidth);\n        sashPosition = this._disableSash ? midPoint : sashPosition || midPoint;\n        if (contentWidth > DiffEditorWidgetSideBySide.MINIMUM_EDITOR_WIDTH * 2) {\n            if (sashPosition < DiffEditorWidgetSideBySide.MINIMUM_EDITOR_WIDTH) {\n                sashPosition = DiffEditorWidgetSideBySide.MINIMUM_EDITOR_WIDTH;\n            }\n            if (sashPosition > contentWidth - DiffEditorWidgetSideBySide.MINIMUM_EDITOR_WIDTH) {\n                sashPosition = contentWidth - DiffEditorWidgetSideBySide.MINIMUM_EDITOR_WIDTH;\n            }\n        }\n        else {\n            sashPosition = midPoint;\n        }\n        if (this._sashPosition !== sashPosition) {\n            this._sashPosition = sashPosition;\n        }\n        this._sash.layout();\n        return this._sashPosition;\n    }\n    _onSashDragStart() {\n        this._startSashPosition = this._sashPosition;\n    }\n    _onSashDrag(e) {\n        const w = this._dataSource.getWidth();\n        const contentWidth = w - (this._dataSource.getOptions().renderOverviewRuler ? DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH : 0);\n        const sashPosition = this.layout((this._startSashPosition + (e.currentX - e.startX)) / contentWidth);\n        this._sashRatio = sashPosition / contentWidth;\n        this._dataSource.relayoutEditors();\n    }\n    _onSashDragEnd() {\n        this._sash.layout();\n    }\n    _onSashReset() {\n        this._sashRatio = 0.5;\n        this._dataSource.relayoutEditors();\n        this._sash.layout();\n    }\n    getVerticalSashTop(sash) {\n        return 0;\n    }\n    getVerticalSashLeft(sash) {\n        return this._sashPosition;\n    }\n    getVerticalSashHeight(sash) {\n        return this._dataSource.getHeight();\n    }\n    _getViewZones(lineChanges, originalForeignVZ, modifiedForeignVZ) {\n        const originalEditor = this._dataSource.getOriginalEditor();\n        const modifiedEditor = this._dataSource.getModifiedEditor();\n        const c = new SideBySideViewZonesComputer(lineChanges, originalForeignVZ, modifiedForeignVZ, originalEditor, modifiedEditor);\n        return c.getViewZones();\n    }\n    _getOriginalEditorDecorations(zones, lineChanges, ignoreTrimWhitespace, renderIndicators) {\n        const originalEditor = this._dataSource.getOriginalEditor();\n        const overviewZoneColor = String(this._removeColor);\n        const result = {\n            decorations: [],\n            overviewZones: []\n        };\n        const originalModel = originalEditor.getModel();\n        const originalViewModel = originalEditor._getViewModel();\n        for (const lineChange of lineChanges) {\n            if (isChangeOrDelete(lineChange)) {\n                result.decorations.push({\n                    range: new Range(lineChange.originalStartLineNumber, 1, lineChange.originalEndLineNumber, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */),\n                    options: (renderIndicators ? DECORATIONS.lineDeleteWithSign : DECORATIONS.lineDelete)\n                });\n                if (!isChangeOrInsert(lineChange) || !lineChange.charChanges) {\n                    result.decorations.push(createDecoration(lineChange.originalStartLineNumber, 1, lineChange.originalEndLineNumber, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */, DECORATIONS.charDeleteWholeLine));\n                }\n                const viewRange = getViewRange(originalModel, originalViewModel, lineChange.originalStartLineNumber, lineChange.originalEndLineNumber);\n                result.overviewZones.push(new OverviewRulerZone(viewRange.startLineNumber, viewRange.endLineNumber, /*use endLineNumber*/ 0, overviewZoneColor));\n                if (lineChange.charChanges) {\n                    for (const charChange of lineChange.charChanges) {\n                        if (isCharChangeOrDelete(charChange)) {\n                            if (ignoreTrimWhitespace) {\n                                for (let lineNumber = charChange.originalStartLineNumber; lineNumber <= charChange.originalEndLineNumber; lineNumber++) {\n                                    let startColumn;\n                                    let endColumn;\n                                    if (lineNumber === charChange.originalStartLineNumber) {\n                                        startColumn = charChange.originalStartColumn;\n                                    }\n                                    else {\n                                        startColumn = originalModel.getLineFirstNonWhitespaceColumn(lineNumber);\n                                    }\n                                    if (lineNumber === charChange.originalEndLineNumber) {\n                                        endColumn = charChange.originalEndColumn;\n                                    }\n                                    else {\n                                        endColumn = originalModel.getLineLastNonWhitespaceColumn(lineNumber);\n                                    }\n                                    result.decorations.push(createDecoration(lineNumber, startColumn, lineNumber, endColumn, DECORATIONS.charDelete));\n                                }\n                            }\n                            else {\n                                result.decorations.push(createDecoration(charChange.originalStartLineNumber, charChange.originalStartColumn, charChange.originalEndLineNumber, charChange.originalEndColumn, DECORATIONS.charDelete));\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return result;\n    }\n    _getModifiedEditorDecorations(zones, lineChanges, ignoreTrimWhitespace, renderIndicators, renderMarginRevertIcon) {\n        const modifiedEditor = this._dataSource.getModifiedEditor();\n        const overviewZoneColor = String(this._insertColor);\n        const result = {\n            decorations: [],\n            overviewZones: []\n        };\n        const modifiedModel = modifiedEditor.getModel();\n        const modifiedViewModel = modifiedEditor._getViewModel();\n        for (const lineChange of lineChanges) {\n            // Arrows for reverting changes.\n            if (renderMarginRevertIcon) {\n                if (lineChange.modifiedEndLineNumber > 0) {\n                    result.decorations.push({\n                        range: new Range(lineChange.modifiedStartLineNumber, 1, lineChange.modifiedStartLineNumber, 1),\n                        options: DECORATIONS.arrowRevertChange\n                    });\n                }\n                else {\n                    const viewZone = zones.modified.find(z => z.afterLineNumber === lineChange.modifiedStartLineNumber);\n                    if (viewZone) {\n                        viewZone.marginDomNode = createViewZoneMarginArrow();\n                    }\n                }\n            }\n            if (isChangeOrInsert(lineChange)) {\n                result.decorations.push({\n                    range: new Range(lineChange.modifiedStartLineNumber, 1, lineChange.modifiedEndLineNumber, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */),\n                    options: (renderIndicators ? DECORATIONS.lineInsertWithSign : DECORATIONS.lineInsert)\n                });\n                if (!isChangeOrDelete(lineChange) || !lineChange.charChanges) {\n                    result.decorations.push(createDecoration(lineChange.modifiedStartLineNumber, 1, lineChange.modifiedEndLineNumber, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */, DECORATIONS.charInsertWholeLine));\n                }\n                const viewRange = getViewRange(modifiedModel, modifiedViewModel, lineChange.modifiedStartLineNumber, lineChange.modifiedEndLineNumber);\n                result.overviewZones.push(new OverviewRulerZone(viewRange.startLineNumber, viewRange.endLineNumber, /*use endLineNumber*/ 0, overviewZoneColor));\n                if (lineChange.charChanges) {\n                    for (const charChange of lineChange.charChanges) {\n                        if (isCharChangeOrInsert(charChange)) {\n                            if (ignoreTrimWhitespace) {\n                                for (let lineNumber = charChange.modifiedStartLineNumber; lineNumber <= charChange.modifiedEndLineNumber; lineNumber++) {\n                                    let startColumn;\n                                    let endColumn;\n                                    if (lineNumber === charChange.modifiedStartLineNumber) {\n                                        startColumn = charChange.modifiedStartColumn;\n                                    }\n                                    else {\n                                        startColumn = modifiedModel.getLineFirstNonWhitespaceColumn(lineNumber);\n                                    }\n                                    if (lineNumber === charChange.modifiedEndLineNumber) {\n                                        endColumn = charChange.modifiedEndColumn;\n                                    }\n                                    else {\n                                        endColumn = modifiedModel.getLineLastNonWhitespaceColumn(lineNumber);\n                                    }\n                                    result.decorations.push(createDecoration(lineNumber, startColumn, lineNumber, endColumn, DECORATIONS.charInsert));\n                                }\n                            }\n                            else {\n                                result.decorations.push(createDecoration(charChange.modifiedStartLineNumber, charChange.modifiedStartColumn, charChange.modifiedEndLineNumber, charChange.modifiedEndColumn, DECORATIONS.charInsert));\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}\nDiffEditorWidgetSideBySide.MINIMUM_EDITOR_WIDTH = 100;\nclass SideBySideViewZonesComputer extends ViewZonesComputer {\n    constructor(lineChanges, originalForeignVZ, modifiedForeignVZ, originalEditor, modifiedEditor) {\n        super(lineChanges, originalForeignVZ, modifiedForeignVZ, originalEditor, modifiedEditor);\n    }\n    _createOriginalMarginDomNodeForModifiedForeignViewZoneInAddedRegion() {\n        return null;\n    }\n    _produceOriginalFromDiff(lineChange, lineChangeOriginalLength, lineChangeModifiedLength) {\n        if (lineChangeModifiedLength > lineChangeOriginalLength) {\n            return {\n                afterLineNumber: Math.max(lineChange.originalStartLineNumber, lineChange.originalEndLineNumber),\n                heightInLines: (lineChangeModifiedLength - lineChangeOriginalLength),\n                domNode: null\n            };\n        }\n        return null;\n    }\n    _produceModifiedFromDiff(lineChange, lineChangeOriginalLength, lineChangeModifiedLength) {\n        if (lineChangeOriginalLength > lineChangeModifiedLength) {\n            return {\n                afterLineNumber: Math.max(lineChange.modifiedStartLineNumber, lineChange.modifiedEndLineNumber),\n                heightInLines: (lineChangeOriginalLength - lineChangeModifiedLength),\n                domNode: null\n            };\n        }\n        return null;\n    }\n}\nclass DiffEditorWidgetInline extends DiffEditorWidgetStyle {\n    constructor(dataSource, enableSplitViewResizing) {\n        super(dataSource);\n        this._decorationsLeft = dataSource.getOriginalEditor().getLayoutInfo().decorationsLeft;\n        this._register(dataSource.getOriginalEditor().onDidLayoutChange((layoutInfo) => {\n            if (this._decorationsLeft !== layoutInfo.decorationsLeft) {\n                this._decorationsLeft = layoutInfo.decorationsLeft;\n                dataSource.relayoutEditors();\n            }\n        }));\n    }\n    setEnableSplitViewResizing(enableSplitViewResizing) {\n        // Nothing to do..\n    }\n    _getViewZones(lineChanges, originalForeignVZ, modifiedForeignVZ, renderIndicators) {\n        const originalEditor = this._dataSource.getOriginalEditor();\n        const modifiedEditor = this._dataSource.getModifiedEditor();\n        const computer = new InlineViewZonesComputer(lineChanges, originalForeignVZ, modifiedForeignVZ, originalEditor, modifiedEditor, renderIndicators);\n        return computer.getViewZones();\n    }\n    _getOriginalEditorDecorations(zones, lineChanges, ignoreTrimWhitespace, renderIndicators) {\n        const overviewZoneColor = String(this._removeColor);\n        const result = {\n            decorations: [],\n            overviewZones: []\n        };\n        const originalEditor = this._dataSource.getOriginalEditor();\n        const originalModel = originalEditor.getModel();\n        const originalViewModel = originalEditor._getViewModel();\n        let zoneIndex = 0;\n        for (const lineChange of lineChanges) {\n            // Add overview zones in the overview ruler\n            if (isChangeOrDelete(lineChange)) {\n                result.decorations.push({\n                    range: new Range(lineChange.originalStartLineNumber, 1, lineChange.originalEndLineNumber, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */),\n                    options: DECORATIONS.lineDeleteMargin\n                });\n                while (zoneIndex < zones.modified.length) {\n                    const zone = zones.modified[zoneIndex];\n                    if (zone.diff && zone.diff.originalStartLineNumber >= lineChange.originalStartLineNumber) {\n                        break;\n                    }\n                    zoneIndex++;\n                }\n                let zoneHeightInLines = 0;\n                if (zoneIndex < zones.modified.length) {\n                    const zone = zones.modified[zoneIndex];\n                    if (zone.diff\n                        && zone.diff.originalStartLineNumber === lineChange.originalStartLineNumber\n                        && zone.diff.originalEndLineNumber === lineChange.originalEndLineNumber\n                        && zone.diff.modifiedStartLineNumber === lineChange.modifiedStartLineNumber\n                        && zone.diff.modifiedEndLineNumber === lineChange.modifiedEndLineNumber) {\n                        zoneHeightInLines = zone.heightInLines;\n                    }\n                }\n                const viewRange = getViewRange(originalModel, originalViewModel, lineChange.originalStartLineNumber, lineChange.originalEndLineNumber);\n                result.overviewZones.push(new OverviewRulerZone(viewRange.startLineNumber, viewRange.endLineNumber, zoneHeightInLines, overviewZoneColor));\n            }\n        }\n        return result;\n    }\n    _getModifiedEditorDecorations(zones, lineChanges, ignoreTrimWhitespace, renderIndicators, renderMarginRevertIcon) {\n        const modifiedEditor = this._dataSource.getModifiedEditor();\n        const overviewZoneColor = String(this._insertColor);\n        const result = {\n            decorations: [],\n            overviewZones: []\n        };\n        const modifiedModel = modifiedEditor.getModel();\n        const modifiedViewModel = modifiedEditor._getViewModel();\n        for (const lineChange of lineChanges) {\n            // Add decorations & overview zones\n            if (isChangeOrInsert(lineChange)) {\n                result.decorations.push({\n                    range: new Range(lineChange.modifiedStartLineNumber, 1, lineChange.modifiedEndLineNumber, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */),\n                    options: (renderIndicators ? DECORATIONS.lineInsertWithSign : DECORATIONS.lineInsert)\n                });\n                const viewRange = getViewRange(modifiedModel, modifiedViewModel, lineChange.modifiedStartLineNumber, lineChange.modifiedEndLineNumber);\n                result.overviewZones.push(new OverviewRulerZone(viewRange.startLineNumber, viewRange.endLineNumber, /*use endLineNumber*/ 0, overviewZoneColor));\n                if (lineChange.charChanges) {\n                    for (const charChange of lineChange.charChanges) {\n                        if (isCharChangeOrInsert(charChange)) {\n                            if (ignoreTrimWhitespace) {\n                                for (let lineNumber = charChange.modifiedStartLineNumber; lineNumber <= charChange.modifiedEndLineNumber; lineNumber++) {\n                                    let startColumn;\n                                    let endColumn;\n                                    if (lineNumber === charChange.modifiedStartLineNumber) {\n                                        startColumn = charChange.modifiedStartColumn;\n                                    }\n                                    else {\n                                        startColumn = modifiedModel.getLineFirstNonWhitespaceColumn(lineNumber);\n                                    }\n                                    if (lineNumber === charChange.modifiedEndLineNumber) {\n                                        endColumn = charChange.modifiedEndColumn;\n                                    }\n                                    else {\n                                        endColumn = modifiedModel.getLineLastNonWhitespaceColumn(lineNumber);\n                                    }\n                                    result.decorations.push(createDecoration(lineNumber, startColumn, lineNumber, endColumn, DECORATIONS.charInsert));\n                                }\n                            }\n                            else {\n                                result.decorations.push(createDecoration(charChange.modifiedStartLineNumber, charChange.modifiedStartColumn, charChange.modifiedEndLineNumber, charChange.modifiedEndColumn, DECORATIONS.charInsert));\n                            }\n                        }\n                    }\n                }\n                else {\n                    result.decorations.push(createDecoration(lineChange.modifiedStartLineNumber, 1, lineChange.modifiedEndLineNumber, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */, DECORATIONS.charInsertWholeLine));\n                }\n            }\n        }\n        return result;\n    }\n    layout() {\n        // An editor should not be smaller than 5px\n        return Math.max(5, this._decorationsLeft);\n    }\n}\nclass InlineViewZonesComputer extends ViewZonesComputer {\n    constructor(lineChanges, originalForeignVZ, modifiedForeignVZ, originalEditor, modifiedEditor, renderIndicators) {\n        super(lineChanges, originalForeignVZ, modifiedForeignVZ, originalEditor, modifiedEditor);\n        this._originalModel = originalEditor.getModel();\n        this._renderIndicators = renderIndicators;\n        this._pendingLineChange = [];\n        this._pendingViewZones = [];\n        this._lineBreaksComputer = this._modifiedEditor._getViewModel().createLineBreaksComputer();\n    }\n    getViewZones() {\n        const result = super.getViewZones();\n        this._finalize(result);\n        return result;\n    }\n    _createOriginalMarginDomNodeForModifiedForeignViewZoneInAddedRegion() {\n        const result = document.createElement('div');\n        result.className = 'inline-added-margin-view-zone';\n        return result;\n    }\n    _produceOriginalFromDiff(lineChange, lineChangeOriginalLength, lineChangeModifiedLength) {\n        const marginDomNode = document.createElement('div');\n        marginDomNode.className = 'inline-added-margin-view-zone';\n        return {\n            afterLineNumber: Math.max(lineChange.originalStartLineNumber, lineChange.originalEndLineNumber),\n            heightInLines: lineChangeModifiedLength,\n            domNode: document.createElement('div'),\n            marginDomNode: marginDomNode\n        };\n    }\n    _produceModifiedFromDiff(lineChange, lineChangeOriginalLength, lineChangeModifiedLength) {\n        const domNode = document.createElement('div');\n        domNode.className = `view-lines line-delete ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}`;\n        const marginDomNode = document.createElement('div');\n        marginDomNode.className = 'inline-deleted-margin-view-zone';\n        const viewZone = {\n            shouldNotShrink: true,\n            afterLineNumber: (lineChange.modifiedEndLineNumber === 0 ? lineChange.modifiedStartLineNumber : lineChange.modifiedStartLineNumber - 1),\n            heightInLines: lineChangeOriginalLength,\n            minWidthInPx: 0,\n            domNode: domNode,\n            marginDomNode: marginDomNode,\n            diff: {\n                originalStartLineNumber: lineChange.originalStartLineNumber,\n                originalEndLineNumber: lineChange.originalEndLineNumber,\n                modifiedStartLineNumber: lineChange.modifiedStartLineNumber,\n                modifiedEndLineNumber: lineChange.modifiedEndLineNumber,\n                originalModel: this._originalModel,\n                viewLineCounts: null,\n            }\n        };\n        for (let lineNumber = lineChange.originalStartLineNumber; lineNumber <= lineChange.originalEndLineNumber; lineNumber++) {\n            this._lineBreaksComputer.addRequest(this._originalModel.getLineContent(lineNumber), null, null);\n        }\n        this._pendingLineChange.push(lineChange);\n        this._pendingViewZones.push(viewZone);\n        return viewZone;\n    }\n    _finalize(result) {\n        const modifiedEditorOptions = this._modifiedEditor.getOptions();\n        const tabSize = this._modifiedEditor.getModel().getOptions().tabSize;\n        const fontInfo = modifiedEditorOptions.get(46 /* EditorOption.fontInfo */);\n        const disableMonospaceOptimizations = modifiedEditorOptions.get(29 /* EditorOption.disableMonospaceOptimizations */);\n        const typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n        const scrollBeyondLastColumn = modifiedEditorOptions.get(95 /* EditorOption.scrollBeyondLastColumn */);\n        const mightContainNonBasicASCII = this._originalModel.mightContainNonBasicASCII();\n        const mightContainRTL = this._originalModel.mightContainRTL();\n        const lineHeight = modifiedEditorOptions.get(61 /* EditorOption.lineHeight */);\n        const layoutInfo = modifiedEditorOptions.get(133 /* EditorOption.layoutInfo */);\n        const lineDecorationsWidth = layoutInfo.decorationsWidth;\n        const stopRenderingLineAfter = modifiedEditorOptions.get(107 /* EditorOption.stopRenderingLineAfter */);\n        const renderWhitespace = modifiedEditorOptions.get(90 /* EditorOption.renderWhitespace */);\n        const renderControlCharacters = modifiedEditorOptions.get(85 /* EditorOption.renderControlCharacters */);\n        const fontLigatures = modifiedEditorOptions.get(47 /* EditorOption.fontLigatures */);\n        const lineBreaks = this._lineBreaksComputer.finalize();\n        let lineBreakIndex = 0;\n        for (let i = 0; i < this._pendingLineChange.length; i++) {\n            const lineChange = this._pendingLineChange[i];\n            const viewZone = this._pendingViewZones[i];\n            const domNode = viewZone.domNode;\n            applyFontInfo(domNode, fontInfo);\n            const marginDomNode = viewZone.marginDomNode;\n            applyFontInfo(marginDomNode, fontInfo);\n            const decorations = [];\n            if (lineChange.charChanges) {\n                for (const charChange of lineChange.charChanges) {\n                    if (isCharChangeOrDelete(charChange)) {\n                        decorations.push(new InlineDecoration(new Range(charChange.originalStartLineNumber, charChange.originalStartColumn, charChange.originalEndLineNumber, charChange.originalEndColumn), 'char-delete', 0 /* InlineDecorationType.Regular */));\n                    }\n                }\n            }\n            const hasCharChanges = (decorations.length > 0);\n            const sb = createStringBuilder(10000);\n            let maxCharsPerLine = 0;\n            let renderedLineCount = 0;\n            let viewLineCounts = null;\n            for (let lineNumber = lineChange.originalStartLineNumber; lineNumber <= lineChange.originalEndLineNumber; lineNumber++) {\n                const lineIndex = lineNumber - lineChange.originalStartLineNumber;\n                const lineTokens = this._originalModel.tokenization.getLineTokens(lineNumber);\n                const lineContent = lineTokens.getLineContent();\n                const lineBreakData = lineBreaks[lineBreakIndex++];\n                const actualDecorations = LineDecoration.filter(decorations, lineNumber, 1, lineContent.length + 1);\n                if (lineBreakData) {\n                    let lastBreakOffset = 0;\n                    for (const breakOffset of lineBreakData.breakOffsets) {\n                        const viewLineTokens = lineTokens.sliceAndInflate(lastBreakOffset, breakOffset, 0);\n                        const viewLineContent = lineContent.substring(lastBreakOffset, breakOffset);\n                        maxCharsPerLine = Math.max(maxCharsPerLine, this._renderOriginalLine(renderedLineCount++, viewLineContent, viewLineTokens, LineDecoration.extractWrapped(actualDecorations, lastBreakOffset, breakOffset), hasCharChanges, mightContainNonBasicASCII, mightContainRTL, fontInfo, disableMonospaceOptimizations, lineHeight, lineDecorationsWidth, stopRenderingLineAfter, renderWhitespace, renderControlCharacters, fontLigatures, tabSize, sb, marginDomNode));\n                        lastBreakOffset = breakOffset;\n                    }\n                    if (!viewLineCounts) {\n                        viewLineCounts = [];\n                    }\n                    // make sure all lines before this one have an entry in `viewLineCounts`\n                    while (viewLineCounts.length < lineIndex) {\n                        viewLineCounts[viewLineCounts.length] = 1;\n                    }\n                    viewLineCounts[lineIndex] = lineBreakData.breakOffsets.length;\n                    viewZone.heightInLines += (lineBreakData.breakOffsets.length - 1);\n                    const marginDomNode2 = document.createElement('div');\n                    marginDomNode2.className = 'gutter-delete';\n                    result.original.push({\n                        afterLineNumber: lineNumber,\n                        afterColumn: 0,\n                        heightInLines: lineBreakData.breakOffsets.length - 1,\n                        domNode: createFakeLinesDiv(),\n                        marginDomNode: marginDomNode2\n                    });\n                }\n                else {\n                    maxCharsPerLine = Math.max(maxCharsPerLine, this._renderOriginalLine(renderedLineCount++, lineContent, lineTokens, actualDecorations, hasCharChanges, mightContainNonBasicASCII, mightContainRTL, fontInfo, disableMonospaceOptimizations, lineHeight, lineDecorationsWidth, stopRenderingLineAfter, renderWhitespace, renderControlCharacters, fontLigatures, tabSize, sb, marginDomNode));\n                }\n            }\n            maxCharsPerLine += scrollBeyondLastColumn;\n            const html = sb.build();\n            const trustedhtml = ttPolicy ? ttPolicy.createHTML(html) : html;\n            domNode.innerHTML = trustedhtml;\n            viewZone.minWidthInPx = (maxCharsPerLine * typicalHalfwidthCharacterWidth);\n            if (viewLineCounts) {\n                // make sure all lines have an entry in `viewLineCounts`\n                const cnt = lineChange.originalEndLineNumber - lineChange.originalStartLineNumber;\n                while (viewLineCounts.length <= cnt) {\n                    viewLineCounts[viewLineCounts.length] = 1;\n                }\n            }\n            viewZone.diff.viewLineCounts = viewLineCounts;\n        }\n        result.original.sort((a, b) => {\n            return a.afterLineNumber - b.afterLineNumber;\n        });\n    }\n    _renderOriginalLine(renderedLineCount, lineContent, lineTokens, decorations, hasCharChanges, mightContainNonBasicASCII, mightContainRTL, fontInfo, disableMonospaceOptimizations, lineHeight, lineDecorationsWidth, stopRenderingLineAfter, renderWhitespace, renderControlCharacters, fontLigatures, tabSize, sb, marginDomNode) {\n        sb.appendASCIIString('<div class=\"view-line');\n        if (!hasCharChanges) {\n            // No char changes\n            sb.appendASCIIString(' char-delete');\n        }\n        sb.appendASCIIString('\" style=\"top:');\n        sb.appendASCIIString(String(renderedLineCount * lineHeight));\n        sb.appendASCIIString('px;width:1000000px;\">');\n        const isBasicASCII = ViewLineRenderingData.isBasicASCII(lineContent, mightContainNonBasicASCII);\n        const containsRTL = ViewLineRenderingData.containsRTL(lineContent, isBasicASCII, mightContainRTL);\n        const output = renderViewLine(new RenderLineInput((fontInfo.isMonospace && !disableMonospaceOptimizations), fontInfo.canUseHalfwidthRightwardsArrow, lineContent, false, isBasicASCII, containsRTL, 0, lineTokens, decorations, tabSize, 0, fontInfo.spaceWidth, fontInfo.middotWidth, fontInfo.wsmiddotWidth, stopRenderingLineAfter, renderWhitespace, renderControlCharacters, fontLigatures !== EditorFontLigatures.OFF, null // Send no selections, original line cannot be selected\n        ), sb);\n        sb.appendASCIIString('</div>');\n        if (this._renderIndicators) {\n            const marginElement = document.createElement('div');\n            marginElement.className = `delete-sign ${ThemeIcon.asClassName(diffRemoveIcon)}`;\n            marginElement.setAttribute('style', `position:absolute;top:${renderedLineCount * lineHeight}px;width:${lineDecorationsWidth}px;height:${lineHeight}px;right:0;`);\n            marginDomNode.appendChild(marginElement);\n        }\n        return output.characterMapping.getHorizontalOffset(output.characterMapping.length);\n    }\n}\nfunction validateDiffWordWrap(value, defaultValue) {\n    return validateStringSetOption(value, defaultValue, ['off', 'on', 'inherit']);\n}\nfunction isChangeOrInsert(lineChange) {\n    return lineChange.modifiedEndLineNumber > 0;\n}\nfunction isChangeOrDelete(lineChange) {\n    return lineChange.originalEndLineNumber > 0;\n}\nfunction isCharChangeOrInsert(charChange) {\n    if (charChange.modifiedStartLineNumber === charChange.modifiedEndLineNumber) {\n        return charChange.modifiedEndColumn - charChange.modifiedStartColumn > 0;\n    }\n    return charChange.modifiedEndLineNumber - charChange.modifiedStartLineNumber > 0;\n}\nfunction isCharChangeOrDelete(charChange) {\n    if (charChange.originalStartLineNumber === charChange.originalEndLineNumber) {\n        return charChange.originalEndColumn - charChange.originalStartColumn > 0;\n    }\n    return charChange.originalEndLineNumber - charChange.originalStartLineNumber > 0;\n}\nfunction createFakeLinesDiv() {\n    const r = document.createElement('div');\n    r.className = 'diagonal-fill';\n    return r;\n}\nfunction createViewZoneMarginArrow() {\n    const arrow = document.createElement('div');\n    arrow.className = 'arrow-revert-change ' + ThemeIcon.asClassName(Codicon.arrowRight);\n    return dom.$('div', {}, arrow);\n}\nfunction getViewRange(model, viewModel, startLineNumber, endLineNumber) {\n    const lineCount = model.getLineCount();\n    startLineNumber = Math.min(lineCount, Math.max(1, startLineNumber));\n    endLineNumber = Math.min(lineCount, Math.max(1, endLineNumber));\n    return viewModel.coordinatesConverter.convertModelRangeToViewRange(new Range(startLineNumber, model.getLineMinColumn(startLineNumber), endLineNumber, model.getLineMaxColumn(endLineNumber)));\n}\nfunction validateDiffEditorOptions(options, defaults) {\n    return {\n        enableSplitViewResizing: validateBooleanOption(options.enableSplitViewResizing, defaults.enableSplitViewResizing),\n        renderSideBySide: validateBooleanOption(options.renderSideBySide, defaults.renderSideBySide),\n        renderMarginRevertIcon: validateBooleanOption(options.renderMarginRevertIcon, defaults.renderMarginRevertIcon),\n        maxComputationTime: clampedInt(options.maxComputationTime, defaults.maxComputationTime, 0, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */),\n        maxFileSize: clampedInt(options.maxFileSize, defaults.maxFileSize, 0, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */),\n        ignoreTrimWhitespace: validateBooleanOption(options.ignoreTrimWhitespace, defaults.ignoreTrimWhitespace),\n        renderIndicators: validateBooleanOption(options.renderIndicators, defaults.renderIndicators),\n        originalEditable: validateBooleanOption(options.originalEditable, defaults.originalEditable),\n        diffCodeLens: validateBooleanOption(options.diffCodeLens, defaults.diffCodeLens),\n        renderOverviewRuler: validateBooleanOption(options.renderOverviewRuler, defaults.renderOverviewRuler),\n        diffWordWrap: validateDiffWordWrap(options.diffWordWrap, defaults.diffWordWrap),\n    };\n}\nfunction changedDiffEditorOptions(a, b) {\n    return {\n        enableSplitViewResizing: (a.enableSplitViewResizing !== b.enableSplitViewResizing),\n        renderSideBySide: (a.renderSideBySide !== b.renderSideBySide),\n        renderMarginRevertIcon: (a.renderMarginRevertIcon !== b.renderMarginRevertIcon),\n        maxComputationTime: (a.maxComputationTime !== b.maxComputationTime),\n        maxFileSize: (a.maxFileSize !== b.maxFileSize),\n        ignoreTrimWhitespace: (a.ignoreTrimWhitespace !== b.ignoreTrimWhitespace),\n        renderIndicators: (a.renderIndicators !== b.renderIndicators),\n        originalEditable: (a.originalEditable !== b.originalEditable),\n        diffCodeLens: (a.diffCodeLens !== b.diffCodeLens),\n        renderOverviewRuler: (a.renderOverviewRuler !== b.renderOverviewRuler),\n        diffWordWrap: (a.diffWordWrap !== b.diffWordWrap),\n    };\n}\nregisterThemingParticipant((theme, collector) => {\n    const added = theme.getColor(diffInserted);\n    if (added) {\n        collector.addRule(`.monaco-editor .char-insert, .monaco-diff-editor .char-insert { background-color: ${added}; }`);\n    }\n    const lineAdded = theme.getColor(diffInsertedLine) || added;\n    if (lineAdded) {\n        collector.addRule(`.monaco-editor .line-insert, .monaco-diff-editor .line-insert { background-color: ${lineAdded}; }`);\n    }\n    const gutterAdded = theme.getColor(diffInsertedLineGutter) || lineAdded;\n    if (gutterAdded) {\n        collector.addRule(`.monaco-editor .inline-added-margin-view-zone { background-color: ${gutterAdded}; }`);\n        collector.addRule(`.monaco-editor .gutter-insert, .monaco-diff-editor .gutter-insert { background-color: ${gutterAdded}; }`);\n    }\n    const removed = theme.getColor(diffRemoved);\n    if (removed) {\n        collector.addRule(`.monaco-editor .char-delete, .monaco-diff-editor .char-delete { background-color: ${removed}; }`);\n    }\n    const lineRemoved = theme.getColor(diffRemovedLine) || removed;\n    if (lineRemoved) {\n        collector.addRule(`.monaco-editor .line-delete, .monaco-diff-editor .line-delete { background-color: ${lineRemoved}; }`);\n    }\n    const gutterRemoved = theme.getColor(diffRemovedLineGutter) || lineRemoved;\n    if (gutterRemoved) {\n        collector.addRule(`.monaco-editor .inline-deleted-margin-view-zone { background-color: ${gutterRemoved}; }`);\n        collector.addRule(`.monaco-editor .gutter-delete, .monaco-diff-editor .gutter-delete { background-color: ${gutterRemoved}; }`);\n    }\n    const addedOutline = theme.getColor(diffInsertedOutline);\n    if (addedOutline) {\n        collector.addRule(`.monaco-editor .line-insert, .monaco-editor .char-insert { border: 1px ${isHighContrast(theme.type) ? 'dashed' : 'solid'} ${addedOutline}; }`);\n    }\n    const removedOutline = theme.getColor(diffRemovedOutline);\n    if (removedOutline) {\n        collector.addRule(`.monaco-editor .line-delete, .monaco-editor .char-delete { border: 1px ${isHighContrast(theme.type) ? 'dashed' : 'solid'} ${removedOutline}; }`);\n    }\n    const shadow = theme.getColor(scrollbarShadow);\n    if (shadow) {\n        collector.addRule(`.monaco-diff-editor.side-by-side .editor.modified { box-shadow: -6px 0 5px -5px ${shadow}; }`);\n    }\n    const border = theme.getColor(diffBorder);\n    if (border) {\n        collector.addRule(`.monaco-diff-editor.side-by-side .editor.modified { border-left: 1px solid ${border}; }`);\n    }\n    const scrollbarSliderBackgroundColor = theme.getColor(scrollbarSliderBackground);\n    if (scrollbarSliderBackgroundColor) {\n        collector.addRule(`\n\t\t\t.monaco-diff-editor .diffViewport {\n\t\t\t\tbackground: ${scrollbarSliderBackgroundColor};\n\t\t\t}\n\t\t`);\n    }\n    const scrollbarSliderHoverBackgroundColor = theme.getColor(scrollbarSliderHoverBackground);\n    if (scrollbarSliderHoverBackgroundColor) {\n        collector.addRule(`\n\t\t\t.monaco-diff-editor .diffViewport:hover {\n\t\t\t\tbackground: ${scrollbarSliderHoverBackgroundColor};\n\t\t\t}\n\t\t`);\n    }\n    const scrollbarSliderActiveBackgroundColor = theme.getColor(scrollbarSliderActiveBackground);\n    if (scrollbarSliderActiveBackgroundColor) {\n        collector.addRule(`\n\t\t\t.monaco-diff-editor .diffViewport:active {\n\t\t\t\tbackground: ${scrollbarSliderActiveBackgroundColor};\n\t\t\t}\n\t\t`);\n    }\n    const diffDiagonalFillColor = theme.getColor(diffDiagonalFill);\n    collector.addRule(`\n\t.monaco-editor .diagonal-fill {\n\t\tbackground-image: linear-gradient(\n\t\t\t-45deg,\n\t\t\t${diffDiagonalFillColor} 12.5%,\n\t\t\t#0000 12.5%, #0000 50%,\n\t\t\t${diffDiagonalFillColor} 50%, ${diffDiagonalFillColor} 62.5%,\n\t\t\t#0000 62.5%, #0000 100%\n\t\t);\n\t\tbackground-size: 8px 8px;\n\t}\n\t`);\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}