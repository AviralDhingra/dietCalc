{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as platform from '../../../base/common/platform.js';\nimport { EDITOR_FONT_DEFAULTS } from './editorOptions.js';\nimport { EditorZoom } from './editorZoom.js';\n/**\n * Determined from empirical observations.\n * @internal\n */\nconst GOLDEN_LINE_HEIGHT_RATIO = platform.isMacintosh ? 1.5 : 1.35;\n/**\n * @internal\n */\nconst MINIMUM_LINE_HEIGHT = 8;\nexport class BareFontInfo {\n  /**\n   * @internal\n   */\n  constructor(opts) {\n    this._bareFontInfoBrand = undefined;\n    this.pixelRatio = opts.pixelRatio;\n    this.fontFamily = String(opts.fontFamily);\n    this.fontWeight = String(opts.fontWeight);\n    this.fontSize = opts.fontSize;\n    this.fontFeatureSettings = opts.fontFeatureSettings;\n    this.lineHeight = opts.lineHeight | 0;\n    this.letterSpacing = opts.letterSpacing;\n  }\n  /**\n   * @internal\n   */\n  static createFromValidatedSettings(options, pixelRatio, ignoreEditorZoom) {\n    const fontFamily = options.get(45 /* EditorOption.fontFamily */);\n    const fontWeight = options.get(49 /* EditorOption.fontWeight */);\n    const fontSize = options.get(48 /* EditorOption.fontSize */);\n    const fontFeatureSettings = options.get(47 /* EditorOption.fontLigatures */);\n    const lineHeight = options.get(61 /* EditorOption.lineHeight */);\n    const letterSpacing = options.get(58 /* EditorOption.letterSpacing */);\n    return BareFontInfo._create(fontFamily, fontWeight, fontSize, fontFeatureSettings, lineHeight, letterSpacing, pixelRatio, ignoreEditorZoom);\n  }\n  /**\n   * @internal\n   */\n  static _create(fontFamily, fontWeight, fontSize, fontFeatureSettings, lineHeight, letterSpacing, pixelRatio, ignoreEditorZoom) {\n    if (lineHeight === 0) {\n      lineHeight = GOLDEN_LINE_HEIGHT_RATIO * fontSize;\n    } else if (lineHeight < MINIMUM_LINE_HEIGHT) {\n      // Values too small to be line heights in pixels are in ems.\n      lineHeight = lineHeight * fontSize;\n    }\n    // Enforce integer, minimum constraints\n    lineHeight = Math.round(lineHeight);\n    if (lineHeight < MINIMUM_LINE_HEIGHT) {\n      lineHeight = MINIMUM_LINE_HEIGHT;\n    }\n    const editorZoomLevelMultiplier = 1 + (ignoreEditorZoom ? 0 : EditorZoom.getZoomLevel() * 0.1);\n    fontSize *= editorZoomLevelMultiplier;\n    lineHeight *= editorZoomLevelMultiplier;\n    return new BareFontInfo({\n      pixelRatio: pixelRatio,\n      fontFamily: fontFamily,\n      fontWeight: fontWeight,\n      fontSize: fontSize,\n      fontFeatureSettings: fontFeatureSettings,\n      lineHeight: lineHeight,\n      letterSpacing: letterSpacing\n    });\n  }\n  /**\n   * @internal\n   */\n  getId() {\n    return `${this.pixelRatio}-${this.fontFamily}-${this.fontWeight}-${this.fontSize}-${this.fontFeatureSettings}-${this.lineHeight}-${this.letterSpacing}`;\n  }\n  /**\n   * @internal\n   */\n  getMassagedFontFamily() {\n    const fallbackFontFamily = EDITOR_FONT_DEFAULTS.fontFamily;\n    const fontFamily = BareFontInfo._wrapInQuotes(this.fontFamily);\n    if (fallbackFontFamily && this.fontFamily !== fallbackFontFamily) {\n      return `${fontFamily}, ${fallbackFontFamily}`;\n    }\n    return fontFamily;\n  }\n  static _wrapInQuotes(fontFamily) {\n    if (/[,\"']/.test(fontFamily)) {\n      // Looks like the font family might be already escaped\n      return fontFamily;\n    }\n    if (/[+ ]/.test(fontFamily)) {\n      // Wrap a font family using + or <space> with quotes\n      return `\"${fontFamily}\"`;\n    }\n    return fontFamily;\n  }\n}\n// change this whenever `FontInfo` members are changed\nexport const SERIALIZED_FONT_INFO_VERSION = 1;\nexport class FontInfo extends BareFontInfo {\n  /**\n   * @internal\n   */\n  constructor(opts, isTrusted) {\n    super(opts);\n    this._editorStylingBrand = undefined;\n    this.version = SERIALIZED_FONT_INFO_VERSION;\n    this.isTrusted = isTrusted;\n    this.isMonospace = opts.isMonospace;\n    this.typicalHalfwidthCharacterWidth = opts.typicalHalfwidthCharacterWidth;\n    this.typicalFullwidthCharacterWidth = opts.typicalFullwidthCharacterWidth;\n    this.canUseHalfwidthRightwardsArrow = opts.canUseHalfwidthRightwardsArrow;\n    this.spaceWidth = opts.spaceWidth;\n    this.middotWidth = opts.middotWidth;\n    this.wsmiddotWidth = opts.wsmiddotWidth;\n    this.maxDigitWidth = opts.maxDigitWidth;\n  }\n  /**\n   * @internal\n   */\n  equals(other) {\n    return this.fontFamily === other.fontFamily && this.fontWeight === other.fontWeight && this.fontSize === other.fontSize && this.fontFeatureSettings === other.fontFeatureSettings && this.lineHeight === other.lineHeight && this.letterSpacing === other.letterSpacing && this.typicalHalfwidthCharacterWidth === other.typicalHalfwidthCharacterWidth && this.typicalFullwidthCharacterWidth === other.typicalFullwidthCharacterWidth && this.canUseHalfwidthRightwardsArrow === other.canUseHalfwidthRightwardsArrow && this.spaceWidth === other.spaceWidth && this.middotWidth === other.middotWidth && this.wsmiddotWidth === other.wsmiddotWidth && this.maxDigitWidth === other.maxDigitWidth;\n  }\n}","map":{"version":3,"names":["platform","EDITOR_FONT_DEFAULTS","EditorZoom","GOLDEN_LINE_HEIGHT_RATIO","isMacintosh","MINIMUM_LINE_HEIGHT","BareFontInfo","constructor","opts","_bareFontInfoBrand","undefined","pixelRatio","fontFamily","String","fontWeight","fontSize","fontFeatureSettings","lineHeight","letterSpacing","createFromValidatedSettings","options","ignoreEditorZoom","get","_create","Math","round","editorZoomLevelMultiplier","getZoomLevel","getId","getMassagedFontFamily","fallbackFontFamily","_wrapInQuotes","test","SERIALIZED_FONT_INFO_VERSION","FontInfo","isTrusted","_editorStylingBrand","version","isMonospace","typicalHalfwidthCharacterWidth","typicalFullwidthCharacterWidth","canUseHalfwidthRightwardsArrow","spaceWidth","middotWidth","wsmiddotWidth","maxDigitWidth","equals","other"],"sources":["/home/deathblade287/Desktop/AI-MODELS-TESTING/react-app/node_modules/monaco-editor/esm/vs/editor/common/config/fontInfo.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as platform from '../../../base/common/platform.js';\nimport { EDITOR_FONT_DEFAULTS } from './editorOptions.js';\nimport { EditorZoom } from './editorZoom.js';\n/**\n * Determined from empirical observations.\n * @internal\n */\nconst GOLDEN_LINE_HEIGHT_RATIO = platform.isMacintosh ? 1.5 : 1.35;\n/**\n * @internal\n */\nconst MINIMUM_LINE_HEIGHT = 8;\nexport class BareFontInfo {\n    /**\n     * @internal\n     */\n    constructor(opts) {\n        this._bareFontInfoBrand = undefined;\n        this.pixelRatio = opts.pixelRatio;\n        this.fontFamily = String(opts.fontFamily);\n        this.fontWeight = String(opts.fontWeight);\n        this.fontSize = opts.fontSize;\n        this.fontFeatureSettings = opts.fontFeatureSettings;\n        this.lineHeight = opts.lineHeight | 0;\n        this.letterSpacing = opts.letterSpacing;\n    }\n    /**\n     * @internal\n     */\n    static createFromValidatedSettings(options, pixelRatio, ignoreEditorZoom) {\n        const fontFamily = options.get(45 /* EditorOption.fontFamily */);\n        const fontWeight = options.get(49 /* EditorOption.fontWeight */);\n        const fontSize = options.get(48 /* EditorOption.fontSize */);\n        const fontFeatureSettings = options.get(47 /* EditorOption.fontLigatures */);\n        const lineHeight = options.get(61 /* EditorOption.lineHeight */);\n        const letterSpacing = options.get(58 /* EditorOption.letterSpacing */);\n        return BareFontInfo._create(fontFamily, fontWeight, fontSize, fontFeatureSettings, lineHeight, letterSpacing, pixelRatio, ignoreEditorZoom);\n    }\n    /**\n     * @internal\n     */\n    static _create(fontFamily, fontWeight, fontSize, fontFeatureSettings, lineHeight, letterSpacing, pixelRatio, ignoreEditorZoom) {\n        if (lineHeight === 0) {\n            lineHeight = GOLDEN_LINE_HEIGHT_RATIO * fontSize;\n        }\n        else if (lineHeight < MINIMUM_LINE_HEIGHT) {\n            // Values too small to be line heights in pixels are in ems.\n            lineHeight = lineHeight * fontSize;\n        }\n        // Enforce integer, minimum constraints\n        lineHeight = Math.round(lineHeight);\n        if (lineHeight < MINIMUM_LINE_HEIGHT) {\n            lineHeight = MINIMUM_LINE_HEIGHT;\n        }\n        const editorZoomLevelMultiplier = 1 + (ignoreEditorZoom ? 0 : EditorZoom.getZoomLevel() * 0.1);\n        fontSize *= editorZoomLevelMultiplier;\n        lineHeight *= editorZoomLevelMultiplier;\n        return new BareFontInfo({\n            pixelRatio: pixelRatio,\n            fontFamily: fontFamily,\n            fontWeight: fontWeight,\n            fontSize: fontSize,\n            fontFeatureSettings: fontFeatureSettings,\n            lineHeight: lineHeight,\n            letterSpacing: letterSpacing\n        });\n    }\n    /**\n     * @internal\n     */\n    getId() {\n        return `${this.pixelRatio}-${this.fontFamily}-${this.fontWeight}-${this.fontSize}-${this.fontFeatureSettings}-${this.lineHeight}-${this.letterSpacing}`;\n    }\n    /**\n     * @internal\n     */\n    getMassagedFontFamily() {\n        const fallbackFontFamily = EDITOR_FONT_DEFAULTS.fontFamily;\n        const fontFamily = BareFontInfo._wrapInQuotes(this.fontFamily);\n        if (fallbackFontFamily && this.fontFamily !== fallbackFontFamily) {\n            return `${fontFamily}, ${fallbackFontFamily}`;\n        }\n        return fontFamily;\n    }\n    static _wrapInQuotes(fontFamily) {\n        if (/[,\"']/.test(fontFamily)) {\n            // Looks like the font family might be already escaped\n            return fontFamily;\n        }\n        if (/[+ ]/.test(fontFamily)) {\n            // Wrap a font family using + or <space> with quotes\n            return `\"${fontFamily}\"`;\n        }\n        return fontFamily;\n    }\n}\n// change this whenever `FontInfo` members are changed\nexport const SERIALIZED_FONT_INFO_VERSION = 1;\nexport class FontInfo extends BareFontInfo {\n    /**\n     * @internal\n     */\n    constructor(opts, isTrusted) {\n        super(opts);\n        this._editorStylingBrand = undefined;\n        this.version = SERIALIZED_FONT_INFO_VERSION;\n        this.isTrusted = isTrusted;\n        this.isMonospace = opts.isMonospace;\n        this.typicalHalfwidthCharacterWidth = opts.typicalHalfwidthCharacterWidth;\n        this.typicalFullwidthCharacterWidth = opts.typicalFullwidthCharacterWidth;\n        this.canUseHalfwidthRightwardsArrow = opts.canUseHalfwidthRightwardsArrow;\n        this.spaceWidth = opts.spaceWidth;\n        this.middotWidth = opts.middotWidth;\n        this.wsmiddotWidth = opts.wsmiddotWidth;\n        this.maxDigitWidth = opts.maxDigitWidth;\n    }\n    /**\n     * @internal\n     */\n    equals(other) {\n        return (this.fontFamily === other.fontFamily\n            && this.fontWeight === other.fontWeight\n            && this.fontSize === other.fontSize\n            && this.fontFeatureSettings === other.fontFeatureSettings\n            && this.lineHeight === other.lineHeight\n            && this.letterSpacing === other.letterSpacing\n            && this.typicalHalfwidthCharacterWidth === other.typicalHalfwidthCharacterWidth\n            && this.typicalFullwidthCharacterWidth === other.typicalFullwidthCharacterWidth\n            && this.canUseHalfwidthRightwardsArrow === other.canUseHalfwidthRightwardsArrow\n            && this.spaceWidth === other.spaceWidth\n            && this.middotWidth === other.middotWidth\n            && this.wsmiddotWidth === other.wsmiddotWidth\n            && this.maxDigitWidth === other.maxDigitWidth);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}