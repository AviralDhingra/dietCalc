{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ObjectTreeModel } from './objectTreeModel.js';\nimport { TreeError, WeakMapper } from './tree.js';\nimport { Event } from '../../../common/event.js';\nimport { Iterable } from '../../../common/iterator.js';\nfunction noCompress(element) {\n  const elements = [element.element];\n  const incompressible = element.incompressible || false;\n  return {\n    element: {\n      elements,\n      incompressible\n    },\n    children: Iterable.map(Iterable.from(element.children), noCompress),\n    collapsible: element.collapsible,\n    collapsed: element.collapsed\n  };\n}\n// Exported only for test reasons, do not use directly\nexport function compress(element) {\n  const elements = [element.element];\n  const incompressible = element.incompressible || false;\n  let childrenIterator;\n  let children;\n  while (true) {\n    [children, childrenIterator] = Iterable.consume(Iterable.from(element.children), 2);\n    if (children.length !== 1) {\n      break;\n    }\n    if (children[0].incompressible) {\n      break;\n    }\n    element = children[0];\n    elements.push(element.element);\n  }\n  return {\n    element: {\n      elements,\n      incompressible\n    },\n    children: Iterable.map(Iterable.concat(children, childrenIterator), compress),\n    collapsible: element.collapsible,\n    collapsed: element.collapsed\n  };\n}\nfunction _decompress(element) {\n  let index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let children;\n  if (index < element.element.elements.length - 1) {\n    children = [_decompress(element, index + 1)];\n  } else {\n    children = Iterable.map(Iterable.from(element.children), el => _decompress(el, 0));\n  }\n  if (index === 0 && element.element.incompressible) {\n    return {\n      element: element.element.elements[index],\n      children,\n      incompressible: true,\n      collapsible: element.collapsible,\n      collapsed: element.collapsed\n    };\n  }\n  return {\n    element: element.element.elements[index],\n    children,\n    collapsible: element.collapsible,\n    collapsed: element.collapsed\n  };\n}\n// Exported only for test reasons, do not use directly\nexport function decompress(element) {\n  return _decompress(element, 0);\n}\nfunction splice(treeElement, element, children) {\n  if (treeElement.element === element) {\n    return Object.assign(Object.assign({}, treeElement), {\n      children\n    });\n  }\n  return Object.assign(Object.assign({}, treeElement), {\n    children: Iterable.map(Iterable.from(treeElement.children), e => splice(e, element, children))\n  });\n}\nconst wrapIdentityProvider = base => ({\n  getId(node) {\n    return node.elements.map(e => base.getId(e).toString()).join('\\0');\n  }\n});\n// Exported only for test reasons, do not use directly\nexport class CompressedObjectTreeModel {\n  constructor(user, list) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    this.user = user;\n    this.rootRef = null;\n    this.nodes = new Map();\n    this.model = new ObjectTreeModel(user, list, options);\n    this.enabled = typeof options.compressionEnabled === 'undefined' ? true : options.compressionEnabled;\n    this.identityProvider = options.identityProvider;\n  }\n  get onDidSplice() {\n    return this.model.onDidSplice;\n  }\n  get onDidChangeCollapseState() {\n    return this.model.onDidChangeCollapseState;\n  }\n  get onDidChangeRenderNodeCount() {\n    return this.model.onDidChangeRenderNodeCount;\n  }\n  setChildren(element) {\n    let children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Iterable.empty();\n    let options = arguments.length > 2 ? arguments[2] : undefined;\n    // Diffs must be deem, since the compression can affect nested elements.\n    // @see https://github.com/microsoft/vscode/pull/114237#issuecomment-759425034\n    const diffIdentityProvider = options.diffIdentityProvider && wrapIdentityProvider(options.diffIdentityProvider);\n    if (element === null) {\n      const compressedChildren = Iterable.map(children, this.enabled ? compress : noCompress);\n      this._setChildren(null, compressedChildren, {\n        diffIdentityProvider,\n        diffDepth: Infinity\n      });\n      return;\n    }\n    const compressedNode = this.nodes.get(element);\n    if (!compressedNode) {\n      throw new Error('Unknown compressed tree node');\n    }\n    const node = this.model.getNode(compressedNode);\n    const compressedParentNode = this.model.getParentNodeLocation(compressedNode);\n    const parent = this.model.getNode(compressedParentNode);\n    const decompressedElement = decompress(node);\n    const splicedElement = splice(decompressedElement, element, children);\n    const recompressedElement = (this.enabled ? compress : noCompress)(splicedElement);\n    const parentChildren = parent.children.map(child => child === node ? recompressedElement : child);\n    this._setChildren(parent.element, parentChildren, {\n      diffIdentityProvider,\n      diffDepth: node.depth - parent.depth\n    });\n  }\n  setCompressionEnabled(enabled) {\n    if (enabled === this.enabled) {\n      return;\n    }\n    this.enabled = enabled;\n    const root = this.model.getNode();\n    const rootChildren = root.children;\n    const decompressedRootChildren = Iterable.map(rootChildren, decompress);\n    const recompressedRootChildren = Iterable.map(decompressedRootChildren, enabled ? compress : noCompress);\n    // it should be safe to always use deep diff mode here if an identity\n    // provider is available, since we know the raw nodes are unchanged.\n    this._setChildren(null, recompressedRootChildren, {\n      diffIdentityProvider: this.identityProvider,\n      diffDepth: Infinity\n    });\n  }\n  _setChildren(node, children, options) {\n    const insertedElements = new Set();\n    const onDidCreateNode = node => {\n      for (const element of node.element.elements) {\n        insertedElements.add(element);\n        this.nodes.set(element, node.element);\n      }\n    };\n    const onDidDeleteNode = node => {\n      for (const element of node.element.elements) {\n        if (!insertedElements.has(element)) {\n          this.nodes.delete(element);\n        }\n      }\n    };\n    this.model.setChildren(node, children, Object.assign(Object.assign({}, options), {\n      onDidCreateNode,\n      onDidDeleteNode\n    }));\n  }\n  has(element) {\n    return this.nodes.has(element);\n  }\n  getListIndex(location) {\n    const node = this.getCompressedNode(location);\n    return this.model.getListIndex(node);\n  }\n  getListRenderCount(location) {\n    const node = this.getCompressedNode(location);\n    return this.model.getListRenderCount(node);\n  }\n  getNode(location) {\n    if (typeof location === 'undefined') {\n      return this.model.getNode();\n    }\n    const node = this.getCompressedNode(location);\n    return this.model.getNode(node);\n  }\n  // TODO: review this\n  getNodeLocation(node) {\n    const compressedNode = this.model.getNodeLocation(node);\n    if (compressedNode === null) {\n      return null;\n    }\n    return compressedNode.elements[compressedNode.elements.length - 1];\n  }\n  // TODO: review this\n  getParentNodeLocation(location) {\n    const compressedNode = this.getCompressedNode(location);\n    const parentNode = this.model.getParentNodeLocation(compressedNode);\n    if (parentNode === null) {\n      return null;\n    }\n    return parentNode.elements[parentNode.elements.length - 1];\n  }\n  getFirstElementChild(location) {\n    const compressedNode = this.getCompressedNode(location);\n    return this.model.getFirstElementChild(compressedNode);\n  }\n  isCollapsible(location) {\n    const compressedNode = this.getCompressedNode(location);\n    return this.model.isCollapsible(compressedNode);\n  }\n  setCollapsible(location, collapsible) {\n    const compressedNode = this.getCompressedNode(location);\n    return this.model.setCollapsible(compressedNode, collapsible);\n  }\n  isCollapsed(location) {\n    const compressedNode = this.getCompressedNode(location);\n    return this.model.isCollapsed(compressedNode);\n  }\n  setCollapsed(location, collapsed, recursive) {\n    const compressedNode = this.getCompressedNode(location);\n    return this.model.setCollapsed(compressedNode, collapsed, recursive);\n  }\n  expandTo(location) {\n    const compressedNode = this.getCompressedNode(location);\n    this.model.expandTo(compressedNode);\n  }\n  rerender(location) {\n    const compressedNode = this.getCompressedNode(location);\n    this.model.rerender(compressedNode);\n  }\n  refilter() {\n    this.model.refilter();\n  }\n  getCompressedNode(element) {\n    if (element === null) {\n      return null;\n    }\n    const node = this.nodes.get(element);\n    if (!node) {\n      throw new TreeError(this.user, `Tree element not found: ${element}`);\n    }\n    return node;\n  }\n}\nexport const DefaultElementMapper = elements => elements[elements.length - 1];\nclass CompressedTreeNodeWrapper {\n  constructor(unwrapper, node) {\n    this.unwrapper = unwrapper;\n    this.node = node;\n  }\n  get element() {\n    return this.node.element === null ? null : this.unwrapper(this.node.element);\n  }\n  get children() {\n    return this.node.children.map(node => new CompressedTreeNodeWrapper(this.unwrapper, node));\n  }\n  get depth() {\n    return this.node.depth;\n  }\n  get visibleChildrenCount() {\n    return this.node.visibleChildrenCount;\n  }\n  get visibleChildIndex() {\n    return this.node.visibleChildIndex;\n  }\n  get collapsible() {\n    return this.node.collapsible;\n  }\n  get collapsed() {\n    return this.node.collapsed;\n  }\n  get visible() {\n    return this.node.visible;\n  }\n  get filterData() {\n    return this.node.filterData;\n  }\n}\nfunction mapList(nodeMapper, list) {\n  return {\n    splice(start, deleteCount, toInsert) {\n      list.splice(start, deleteCount, toInsert.map(node => nodeMapper.map(node)));\n    },\n    updateElementHeight(index, height) {\n      list.updateElementHeight(index, height);\n    }\n  };\n}\nfunction mapOptions(compressedNodeUnwrapper, options) {\n  return Object.assign(Object.assign({}, options), {\n    identityProvider: options.identityProvider && {\n      getId(node) {\n        return options.identityProvider.getId(compressedNodeUnwrapper(node));\n      }\n    },\n    sorter: options.sorter && {\n      compare(node, otherNode) {\n        return options.sorter.compare(node.elements[0], otherNode.elements[0]);\n      }\n    },\n    filter: options.filter && {\n      filter(node, parentVisibility) {\n        return options.filter.filter(compressedNodeUnwrapper(node), parentVisibility);\n      }\n    }\n  });\n}\nexport class CompressibleObjectTreeModel {\n  constructor(user, list) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    this.rootRef = null;\n    this.elementMapper = options.elementMapper || DefaultElementMapper;\n    const compressedNodeUnwrapper = node => this.elementMapper(node.elements);\n    this.nodeMapper = new WeakMapper(node => new CompressedTreeNodeWrapper(compressedNodeUnwrapper, node));\n    this.model = new CompressedObjectTreeModel(user, mapList(this.nodeMapper, list), mapOptions(compressedNodeUnwrapper, options));\n  }\n  get onDidSplice() {\n    return Event.map(this.model.onDidSplice, _ref => {\n      let {\n        insertedNodes,\n        deletedNodes\n      } = _ref;\n      return {\n        insertedNodes: insertedNodes.map(node => this.nodeMapper.map(node)),\n        deletedNodes: deletedNodes.map(node => this.nodeMapper.map(node))\n      };\n    });\n  }\n  get onDidChangeCollapseState() {\n    return Event.map(this.model.onDidChangeCollapseState, _ref2 => {\n      let {\n        node,\n        deep\n      } = _ref2;\n      return {\n        node: this.nodeMapper.map(node),\n        deep\n      };\n    });\n  }\n  get onDidChangeRenderNodeCount() {\n    return Event.map(this.model.onDidChangeRenderNodeCount, node => this.nodeMapper.map(node));\n  }\n  setChildren(element) {\n    let children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Iterable.empty();\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    this.model.setChildren(element, children, options);\n  }\n  setCompressionEnabled(enabled) {\n    this.model.setCompressionEnabled(enabled);\n  }\n  has(location) {\n    return this.model.has(location);\n  }\n  getListIndex(location) {\n    return this.model.getListIndex(location);\n  }\n  getListRenderCount(location) {\n    return this.model.getListRenderCount(location);\n  }\n  getNode(location) {\n    return this.nodeMapper.map(this.model.getNode(location));\n  }\n  getNodeLocation(node) {\n    return node.element;\n  }\n  getParentNodeLocation(location) {\n    return this.model.getParentNodeLocation(location);\n  }\n  getFirstElementChild(location) {\n    const result = this.model.getFirstElementChild(location);\n    if (result === null || typeof result === 'undefined') {\n      return result;\n    }\n    return this.elementMapper(result.elements);\n  }\n  isCollapsible(location) {\n    return this.model.isCollapsible(location);\n  }\n  setCollapsible(location, collapsed) {\n    return this.model.setCollapsible(location, collapsed);\n  }\n  isCollapsed(location) {\n    return this.model.isCollapsed(location);\n  }\n  setCollapsed(location, collapsed, recursive) {\n    return this.model.setCollapsed(location, collapsed, recursive);\n  }\n  expandTo(location) {\n    return this.model.expandTo(location);\n  }\n  rerender(location) {\n    return this.model.rerender(location);\n  }\n  refilter() {\n    return this.model.refilter();\n  }\n  getCompressedTreeNode() {\n    let location = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    return this.model.getNode(location);\n  }\n}","map":{"version":3,"names":["ObjectTreeModel","TreeError","WeakMapper","Event","Iterable","noCompress","element","elements","incompressible","children","map","from","collapsible","collapsed","compress","childrenIterator","consume","length","push","concat","_decompress","index","el","decompress","splice","treeElement","Object","assign","e","wrapIdentityProvider","base","getId","node","toString","join","CompressedObjectTreeModel","constructor","user","list","options","rootRef","nodes","Map","model","enabled","compressionEnabled","identityProvider","onDidSplice","onDidChangeCollapseState","onDidChangeRenderNodeCount","setChildren","empty","diffIdentityProvider","compressedChildren","_setChildren","diffDepth","Infinity","compressedNode","get","Error","getNode","compressedParentNode","getParentNodeLocation","parent","decompressedElement","splicedElement","recompressedElement","parentChildren","child","depth","setCompressionEnabled","root","rootChildren","decompressedRootChildren","recompressedRootChildren","insertedElements","Set","onDidCreateNode","add","set","onDidDeleteNode","has","delete","getListIndex","location","getCompressedNode","getListRenderCount","getNodeLocation","parentNode","getFirstElementChild","isCollapsible","setCollapsible","isCollapsed","setCollapsed","recursive","expandTo","rerender","refilter","DefaultElementMapper","CompressedTreeNodeWrapper","unwrapper","visibleChildrenCount","visibleChildIndex","visible","filterData","mapList","nodeMapper","start","deleteCount","toInsert","updateElementHeight","height","mapOptions","compressedNodeUnwrapper","sorter","compare","otherNode","filter","parentVisibility","CompressibleObjectTreeModel","elementMapper","insertedNodes","deletedNodes","deep","result","getCompressedTreeNode"],"sources":["/home/deathblade287/Desktop/AI-MODELS-TESTING/react-app/node_modules/monaco-editor/esm/vs/base/browser/ui/tree/compressedObjectTreeModel.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ObjectTreeModel } from './objectTreeModel.js';\nimport { TreeError, WeakMapper } from './tree.js';\nimport { Event } from '../../../common/event.js';\nimport { Iterable } from '../../../common/iterator.js';\nfunction noCompress(element) {\n    const elements = [element.element];\n    const incompressible = element.incompressible || false;\n    return {\n        element: { elements, incompressible },\n        children: Iterable.map(Iterable.from(element.children), noCompress),\n        collapsible: element.collapsible,\n        collapsed: element.collapsed\n    };\n}\n// Exported only for test reasons, do not use directly\nexport function compress(element) {\n    const elements = [element.element];\n    const incompressible = element.incompressible || false;\n    let childrenIterator;\n    let children;\n    while (true) {\n        [children, childrenIterator] = Iterable.consume(Iterable.from(element.children), 2);\n        if (children.length !== 1) {\n            break;\n        }\n        if (children[0].incompressible) {\n            break;\n        }\n        element = children[0];\n        elements.push(element.element);\n    }\n    return {\n        element: { elements, incompressible },\n        children: Iterable.map(Iterable.concat(children, childrenIterator), compress),\n        collapsible: element.collapsible,\n        collapsed: element.collapsed\n    };\n}\nfunction _decompress(element, index = 0) {\n    let children;\n    if (index < element.element.elements.length - 1) {\n        children = [_decompress(element, index + 1)];\n    }\n    else {\n        children = Iterable.map(Iterable.from(element.children), el => _decompress(el, 0));\n    }\n    if (index === 0 && element.element.incompressible) {\n        return {\n            element: element.element.elements[index],\n            children,\n            incompressible: true,\n            collapsible: element.collapsible,\n            collapsed: element.collapsed\n        };\n    }\n    return {\n        element: element.element.elements[index],\n        children,\n        collapsible: element.collapsible,\n        collapsed: element.collapsed\n    };\n}\n// Exported only for test reasons, do not use directly\nexport function decompress(element) {\n    return _decompress(element, 0);\n}\nfunction splice(treeElement, element, children) {\n    if (treeElement.element === element) {\n        return Object.assign(Object.assign({}, treeElement), { children });\n    }\n    return Object.assign(Object.assign({}, treeElement), { children: Iterable.map(Iterable.from(treeElement.children), e => splice(e, element, children)) });\n}\nconst wrapIdentityProvider = (base) => ({\n    getId(node) {\n        return node.elements.map(e => base.getId(e).toString()).join('\\0');\n    }\n});\n// Exported only for test reasons, do not use directly\nexport class CompressedObjectTreeModel {\n    constructor(user, list, options = {}) {\n        this.user = user;\n        this.rootRef = null;\n        this.nodes = new Map();\n        this.model = new ObjectTreeModel(user, list, options);\n        this.enabled = typeof options.compressionEnabled === 'undefined' ? true : options.compressionEnabled;\n        this.identityProvider = options.identityProvider;\n    }\n    get onDidSplice() { return this.model.onDidSplice; }\n    get onDidChangeCollapseState() { return this.model.onDidChangeCollapseState; }\n    get onDidChangeRenderNodeCount() { return this.model.onDidChangeRenderNodeCount; }\n    setChildren(element, children = Iterable.empty(), options) {\n        // Diffs must be deem, since the compression can affect nested elements.\n        // @see https://github.com/microsoft/vscode/pull/114237#issuecomment-759425034\n        const diffIdentityProvider = options.diffIdentityProvider && wrapIdentityProvider(options.diffIdentityProvider);\n        if (element === null) {\n            const compressedChildren = Iterable.map(children, this.enabled ? compress : noCompress);\n            this._setChildren(null, compressedChildren, { diffIdentityProvider, diffDepth: Infinity });\n            return;\n        }\n        const compressedNode = this.nodes.get(element);\n        if (!compressedNode) {\n            throw new Error('Unknown compressed tree node');\n        }\n        const node = this.model.getNode(compressedNode);\n        const compressedParentNode = this.model.getParentNodeLocation(compressedNode);\n        const parent = this.model.getNode(compressedParentNode);\n        const decompressedElement = decompress(node);\n        const splicedElement = splice(decompressedElement, element, children);\n        const recompressedElement = (this.enabled ? compress : noCompress)(splicedElement);\n        const parentChildren = parent.children\n            .map(child => child === node ? recompressedElement : child);\n        this._setChildren(parent.element, parentChildren, {\n            diffIdentityProvider,\n            diffDepth: node.depth - parent.depth,\n        });\n    }\n    setCompressionEnabled(enabled) {\n        if (enabled === this.enabled) {\n            return;\n        }\n        this.enabled = enabled;\n        const root = this.model.getNode();\n        const rootChildren = root.children;\n        const decompressedRootChildren = Iterable.map(rootChildren, decompress);\n        const recompressedRootChildren = Iterable.map(decompressedRootChildren, enabled ? compress : noCompress);\n        // it should be safe to always use deep diff mode here if an identity\n        // provider is available, since we know the raw nodes are unchanged.\n        this._setChildren(null, recompressedRootChildren, {\n            diffIdentityProvider: this.identityProvider,\n            diffDepth: Infinity,\n        });\n    }\n    _setChildren(node, children, options) {\n        const insertedElements = new Set();\n        const onDidCreateNode = (node) => {\n            for (const element of node.element.elements) {\n                insertedElements.add(element);\n                this.nodes.set(element, node.element);\n            }\n        };\n        const onDidDeleteNode = (node) => {\n            for (const element of node.element.elements) {\n                if (!insertedElements.has(element)) {\n                    this.nodes.delete(element);\n                }\n            }\n        };\n        this.model.setChildren(node, children, Object.assign(Object.assign({}, options), { onDidCreateNode, onDidDeleteNode }));\n    }\n    has(element) {\n        return this.nodes.has(element);\n    }\n    getListIndex(location) {\n        const node = this.getCompressedNode(location);\n        return this.model.getListIndex(node);\n    }\n    getListRenderCount(location) {\n        const node = this.getCompressedNode(location);\n        return this.model.getListRenderCount(node);\n    }\n    getNode(location) {\n        if (typeof location === 'undefined') {\n            return this.model.getNode();\n        }\n        const node = this.getCompressedNode(location);\n        return this.model.getNode(node);\n    }\n    // TODO: review this\n    getNodeLocation(node) {\n        const compressedNode = this.model.getNodeLocation(node);\n        if (compressedNode === null) {\n            return null;\n        }\n        return compressedNode.elements[compressedNode.elements.length - 1];\n    }\n    // TODO: review this\n    getParentNodeLocation(location) {\n        const compressedNode = this.getCompressedNode(location);\n        const parentNode = this.model.getParentNodeLocation(compressedNode);\n        if (parentNode === null) {\n            return null;\n        }\n        return parentNode.elements[parentNode.elements.length - 1];\n    }\n    getFirstElementChild(location) {\n        const compressedNode = this.getCompressedNode(location);\n        return this.model.getFirstElementChild(compressedNode);\n    }\n    isCollapsible(location) {\n        const compressedNode = this.getCompressedNode(location);\n        return this.model.isCollapsible(compressedNode);\n    }\n    setCollapsible(location, collapsible) {\n        const compressedNode = this.getCompressedNode(location);\n        return this.model.setCollapsible(compressedNode, collapsible);\n    }\n    isCollapsed(location) {\n        const compressedNode = this.getCompressedNode(location);\n        return this.model.isCollapsed(compressedNode);\n    }\n    setCollapsed(location, collapsed, recursive) {\n        const compressedNode = this.getCompressedNode(location);\n        return this.model.setCollapsed(compressedNode, collapsed, recursive);\n    }\n    expandTo(location) {\n        const compressedNode = this.getCompressedNode(location);\n        this.model.expandTo(compressedNode);\n    }\n    rerender(location) {\n        const compressedNode = this.getCompressedNode(location);\n        this.model.rerender(compressedNode);\n    }\n    refilter() {\n        this.model.refilter();\n    }\n    getCompressedNode(element) {\n        if (element === null) {\n            return null;\n        }\n        const node = this.nodes.get(element);\n        if (!node) {\n            throw new TreeError(this.user, `Tree element not found: ${element}`);\n        }\n        return node;\n    }\n}\nexport const DefaultElementMapper = elements => elements[elements.length - 1];\nclass CompressedTreeNodeWrapper {\n    constructor(unwrapper, node) {\n        this.unwrapper = unwrapper;\n        this.node = node;\n    }\n    get element() { return this.node.element === null ? null : this.unwrapper(this.node.element); }\n    get children() { return this.node.children.map(node => new CompressedTreeNodeWrapper(this.unwrapper, node)); }\n    get depth() { return this.node.depth; }\n    get visibleChildrenCount() { return this.node.visibleChildrenCount; }\n    get visibleChildIndex() { return this.node.visibleChildIndex; }\n    get collapsible() { return this.node.collapsible; }\n    get collapsed() { return this.node.collapsed; }\n    get visible() { return this.node.visible; }\n    get filterData() { return this.node.filterData; }\n}\nfunction mapList(nodeMapper, list) {\n    return {\n        splice(start, deleteCount, toInsert) {\n            list.splice(start, deleteCount, toInsert.map(node => nodeMapper.map(node)));\n        },\n        updateElementHeight(index, height) {\n            list.updateElementHeight(index, height);\n        }\n    };\n}\nfunction mapOptions(compressedNodeUnwrapper, options) {\n    return Object.assign(Object.assign({}, options), { identityProvider: options.identityProvider && {\n            getId(node) {\n                return options.identityProvider.getId(compressedNodeUnwrapper(node));\n            }\n        }, sorter: options.sorter && {\n            compare(node, otherNode) {\n                return options.sorter.compare(node.elements[0], otherNode.elements[0]);\n            }\n        }, filter: options.filter && {\n            filter(node, parentVisibility) {\n                return options.filter.filter(compressedNodeUnwrapper(node), parentVisibility);\n            }\n        } });\n}\nexport class CompressibleObjectTreeModel {\n    constructor(user, list, options = {}) {\n        this.rootRef = null;\n        this.elementMapper = options.elementMapper || DefaultElementMapper;\n        const compressedNodeUnwrapper = node => this.elementMapper(node.elements);\n        this.nodeMapper = new WeakMapper(node => new CompressedTreeNodeWrapper(compressedNodeUnwrapper, node));\n        this.model = new CompressedObjectTreeModel(user, mapList(this.nodeMapper, list), mapOptions(compressedNodeUnwrapper, options));\n    }\n    get onDidSplice() {\n        return Event.map(this.model.onDidSplice, ({ insertedNodes, deletedNodes }) => ({\n            insertedNodes: insertedNodes.map(node => this.nodeMapper.map(node)),\n            deletedNodes: deletedNodes.map(node => this.nodeMapper.map(node)),\n        }));\n    }\n    get onDidChangeCollapseState() {\n        return Event.map(this.model.onDidChangeCollapseState, ({ node, deep }) => ({\n            node: this.nodeMapper.map(node),\n            deep\n        }));\n    }\n    get onDidChangeRenderNodeCount() {\n        return Event.map(this.model.onDidChangeRenderNodeCount, node => this.nodeMapper.map(node));\n    }\n    setChildren(element, children = Iterable.empty(), options = {}) {\n        this.model.setChildren(element, children, options);\n    }\n    setCompressionEnabled(enabled) {\n        this.model.setCompressionEnabled(enabled);\n    }\n    has(location) {\n        return this.model.has(location);\n    }\n    getListIndex(location) {\n        return this.model.getListIndex(location);\n    }\n    getListRenderCount(location) {\n        return this.model.getListRenderCount(location);\n    }\n    getNode(location) {\n        return this.nodeMapper.map(this.model.getNode(location));\n    }\n    getNodeLocation(node) {\n        return node.element;\n    }\n    getParentNodeLocation(location) {\n        return this.model.getParentNodeLocation(location);\n    }\n    getFirstElementChild(location) {\n        const result = this.model.getFirstElementChild(location);\n        if (result === null || typeof result === 'undefined') {\n            return result;\n        }\n        return this.elementMapper(result.elements);\n    }\n    isCollapsible(location) {\n        return this.model.isCollapsible(location);\n    }\n    setCollapsible(location, collapsed) {\n        return this.model.setCollapsible(location, collapsed);\n    }\n    isCollapsed(location) {\n        return this.model.isCollapsed(location);\n    }\n    setCollapsed(location, collapsed, recursive) {\n        return this.model.setCollapsed(location, collapsed, recursive);\n    }\n    expandTo(location) {\n        return this.model.expandTo(location);\n    }\n    rerender(location) {\n        return this.model.rerender(location);\n    }\n    refilter() {\n        return this.model.refilter();\n    }\n    getCompressedTreeNode(location = null) {\n        return this.model.getNode(location);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}