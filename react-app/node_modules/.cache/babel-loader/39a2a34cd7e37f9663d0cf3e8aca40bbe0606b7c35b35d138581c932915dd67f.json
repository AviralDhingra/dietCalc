{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { illegalArgument } from '../../../base/common/errors.js';\nimport { AriaLabelProvider, ElectronAcceleratorLabelProvider, UILabelProvider } from '../../../base/common/keybindingLabels.js';\nimport { ResolvedKeybinding, ResolvedKeybindingPart } from '../../../base/common/keybindings.js';\nexport class BaseResolvedKeybinding extends ResolvedKeybinding {\n  constructor(os, parts) {\n    super();\n    if (parts.length === 0) {\n      throw illegalArgument(`parts`);\n    }\n    this._os = os;\n    this._parts = parts;\n  }\n  getLabel() {\n    return UILabelProvider.toLabel(this._os, this._parts, keybinding => this._getLabel(keybinding));\n  }\n  getAriaLabel() {\n    return AriaLabelProvider.toLabel(this._os, this._parts, keybinding => this._getAriaLabel(keybinding));\n  }\n  getElectronAccelerator() {\n    if (this._parts.length > 1) {\n      // [Electron Accelerators] Electron cannot handle chords\n      return null;\n    }\n    if (this._parts[0].isDuplicateModifierCase()) {\n      // [Electron Accelerators] Electron cannot handle modifier only keybindings\n      // e.g. \"shift shift\"\n      return null;\n    }\n    return ElectronAcceleratorLabelProvider.toLabel(this._os, this._parts, keybinding => this._getElectronAccelerator(keybinding));\n  }\n  isChord() {\n    return this._parts.length > 1;\n  }\n  getParts() {\n    return this._parts.map(keybinding => this._getPart(keybinding));\n  }\n  _getPart(keybinding) {\n    return new ResolvedKeybindingPart(keybinding.ctrlKey, keybinding.shiftKey, keybinding.altKey, keybinding.metaKey, this._getLabel(keybinding), this._getAriaLabel(keybinding));\n  }\n  getDispatchParts() {\n    return this._parts.map(keybinding => this._getDispatchPart(keybinding));\n  }\n  getSingleModifierDispatchParts() {\n    return this._parts.map(keybinding => this._getSingleModifierDispatchPart(keybinding));\n  }\n}","map":{"version":3,"names":["illegalArgument","AriaLabelProvider","ElectronAcceleratorLabelProvider","UILabelProvider","ResolvedKeybinding","ResolvedKeybindingPart","BaseResolvedKeybinding","constructor","os","parts","length","_os","_parts","getLabel","toLabel","keybinding","_getLabel","getAriaLabel","_getAriaLabel","getElectronAccelerator","isDuplicateModifierCase","_getElectronAccelerator","isChord","getParts","map","_getPart","ctrlKey","shiftKey","altKey","metaKey","getDispatchParts","_getDispatchPart","getSingleModifierDispatchParts","_getSingleModifierDispatchPart"],"sources":["/home/deathblade287/Desktop/AI-MODELS-TESTING/react-app/node_modules/monaco-editor/esm/vs/platform/keybinding/common/baseResolvedKeybinding.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { illegalArgument } from '../../../base/common/errors.js';\nimport { AriaLabelProvider, ElectronAcceleratorLabelProvider, UILabelProvider } from '../../../base/common/keybindingLabels.js';\nimport { ResolvedKeybinding, ResolvedKeybindingPart } from '../../../base/common/keybindings.js';\nexport class BaseResolvedKeybinding extends ResolvedKeybinding {\n    constructor(os, parts) {\n        super();\n        if (parts.length === 0) {\n            throw illegalArgument(`parts`);\n        }\n        this._os = os;\n        this._parts = parts;\n    }\n    getLabel() {\n        return UILabelProvider.toLabel(this._os, this._parts, (keybinding) => this._getLabel(keybinding));\n    }\n    getAriaLabel() {\n        return AriaLabelProvider.toLabel(this._os, this._parts, (keybinding) => this._getAriaLabel(keybinding));\n    }\n    getElectronAccelerator() {\n        if (this._parts.length > 1) {\n            // [Electron Accelerators] Electron cannot handle chords\n            return null;\n        }\n        if (this._parts[0].isDuplicateModifierCase()) {\n            // [Electron Accelerators] Electron cannot handle modifier only keybindings\n            // e.g. \"shift shift\"\n            return null;\n        }\n        return ElectronAcceleratorLabelProvider.toLabel(this._os, this._parts, (keybinding) => this._getElectronAccelerator(keybinding));\n    }\n    isChord() {\n        return (this._parts.length > 1);\n    }\n    getParts() {\n        return this._parts.map((keybinding) => this._getPart(keybinding));\n    }\n    _getPart(keybinding) {\n        return new ResolvedKeybindingPart(keybinding.ctrlKey, keybinding.shiftKey, keybinding.altKey, keybinding.metaKey, this._getLabel(keybinding), this._getAriaLabel(keybinding));\n    }\n    getDispatchParts() {\n        return this._parts.map((keybinding) => this._getDispatchPart(keybinding));\n    }\n    getSingleModifierDispatchParts() {\n        return this._parts.map((keybinding) => this._getSingleModifierDispatchPart(keybinding));\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,eAAe,QAAQ,gCAAgC;AAChE,SAASC,iBAAiB,EAAEC,gCAAgC,EAAEC,eAAe,QAAQ,0CAA0C;AAC/H,SAASC,kBAAkB,EAAEC,sBAAsB,QAAQ,qCAAqC;AAChG,OAAO,MAAMC,sBAAsB,SAASF,kBAAkB,CAAC;EAC3DG,WAAW,CAACC,EAAE,EAAEC,KAAK,EAAE;IACnB,KAAK,EAAE;IACP,IAAIA,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;MACpB,MAAMV,eAAe,CAAE,OAAM,CAAC;IAClC;IACA,IAAI,CAACW,GAAG,GAAGH,EAAE;IACb,IAAI,CAACI,MAAM,GAAGH,KAAK;EACvB;EACAI,QAAQ,GAAG;IACP,OAAOV,eAAe,CAACW,OAAO,CAAC,IAAI,CAACH,GAAG,EAAE,IAAI,CAACC,MAAM,EAAGG,UAAU,IAAK,IAAI,CAACC,SAAS,CAACD,UAAU,CAAC,CAAC;EACrG;EACAE,YAAY,GAAG;IACX,OAAOhB,iBAAiB,CAACa,OAAO,CAAC,IAAI,CAACH,GAAG,EAAE,IAAI,CAACC,MAAM,EAAGG,UAAU,IAAK,IAAI,CAACG,aAAa,CAACH,UAAU,CAAC,CAAC;EAC3G;EACAI,sBAAsB,GAAG;IACrB,IAAI,IAAI,CAACP,MAAM,CAACF,MAAM,GAAG,CAAC,EAAE;MACxB;MACA,OAAO,IAAI;IACf;IACA,IAAI,IAAI,CAACE,MAAM,CAAC,CAAC,CAAC,CAACQ,uBAAuB,EAAE,EAAE;MAC1C;MACA;MACA,OAAO,IAAI;IACf;IACA,OAAOlB,gCAAgC,CAACY,OAAO,CAAC,IAAI,CAACH,GAAG,EAAE,IAAI,CAACC,MAAM,EAAGG,UAAU,IAAK,IAAI,CAACM,uBAAuB,CAACN,UAAU,CAAC,CAAC;EACpI;EACAO,OAAO,GAAG;IACN,OAAQ,IAAI,CAACV,MAAM,CAACF,MAAM,GAAG,CAAC;EAClC;EACAa,QAAQ,GAAG;IACP,OAAO,IAAI,CAACX,MAAM,CAACY,GAAG,CAAET,UAAU,IAAK,IAAI,CAACU,QAAQ,CAACV,UAAU,CAAC,CAAC;EACrE;EACAU,QAAQ,CAACV,UAAU,EAAE;IACjB,OAAO,IAAIV,sBAAsB,CAACU,UAAU,CAACW,OAAO,EAAEX,UAAU,CAACY,QAAQ,EAAEZ,UAAU,CAACa,MAAM,EAAEb,UAAU,CAACc,OAAO,EAAE,IAAI,CAACb,SAAS,CAACD,UAAU,CAAC,EAAE,IAAI,CAACG,aAAa,CAACH,UAAU,CAAC,CAAC;EACjL;EACAe,gBAAgB,GAAG;IACf,OAAO,IAAI,CAAClB,MAAM,CAACY,GAAG,CAAET,UAAU,IAAK,IAAI,CAACgB,gBAAgB,CAAChB,UAAU,CAAC,CAAC;EAC7E;EACAiB,8BAA8B,GAAG;IAC7B,OAAO,IAAI,CAACpB,MAAM,CAACY,GAAG,CAAET,UAAU,IAAK,IAAI,CAACkB,8BAA8B,CAAClB,UAAU,CAAC,CAAC;EAC3F;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}