{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CoreNavigationCommands } from '../coreCommands.js';\nimport { Position } from '../../common/core/position.js';\nimport * as platform from '../../../base/common/platform.js';\nexport class ViewController {\n  constructor(configuration, viewModel, userInputEvents, commandDelegate) {\n    this.configuration = configuration;\n    this.viewModel = viewModel;\n    this.userInputEvents = userInputEvents;\n    this.commandDelegate = commandDelegate;\n  }\n  paste(text, pasteOnNewLine, multicursorText, mode) {\n    this.commandDelegate.paste(text, pasteOnNewLine, multicursorText, mode);\n  }\n  type(text) {\n    this.commandDelegate.type(text);\n  }\n  compositionType(text, replacePrevCharCnt, replaceNextCharCnt, positionDelta) {\n    this.commandDelegate.compositionType(text, replacePrevCharCnt, replaceNextCharCnt, positionDelta);\n  }\n  compositionStart() {\n    this.commandDelegate.startComposition();\n  }\n  compositionEnd() {\n    this.commandDelegate.endComposition();\n  }\n  cut() {\n    this.commandDelegate.cut();\n  }\n  setSelection(modelSelection) {\n    CoreNavigationCommands.SetSelection.runCoreEditorCommand(this.viewModel, {\n      source: 'keyboard',\n      selection: modelSelection\n    });\n  }\n  _validateViewColumn(viewPosition) {\n    const minColumn = this.viewModel.getLineMinColumn(viewPosition.lineNumber);\n    if (viewPosition.column < minColumn) {\n      return new Position(viewPosition.lineNumber, minColumn);\n    }\n    return viewPosition;\n  }\n  _hasMulticursorModifier(data) {\n    switch (this.configuration.options.get(72 /* EditorOption.multiCursorModifier */)) {\n      case 'altKey':\n        return data.altKey;\n      case 'ctrlKey':\n        return data.ctrlKey;\n      case 'metaKey':\n        return data.metaKey;\n      default:\n        return false;\n    }\n  }\n  _hasNonMulticursorModifier(data) {\n    switch (this.configuration.options.get(72 /* EditorOption.multiCursorModifier */)) {\n      case 'altKey':\n        return data.ctrlKey || data.metaKey;\n      case 'ctrlKey':\n        return data.altKey || data.metaKey;\n      case 'metaKey':\n        return data.ctrlKey || data.altKey;\n      default:\n        return false;\n    }\n  }\n  dispatchMouse(data) {\n    const options = this.configuration.options;\n    const selectionClipboardIsOn = platform.isLinux && options.get(98 /* EditorOption.selectionClipboard */);\n    const columnSelection = options.get(18 /* EditorOption.columnSelection */);\n    if (data.middleButton && !selectionClipboardIsOn) {\n      this._columnSelect(data.position, data.mouseColumn, data.inSelectionMode);\n    } else if (data.startedOnLineNumbers) {\n      // If the dragging started on the gutter, then have operations work on the entire line\n      if (this._hasMulticursorModifier(data)) {\n        if (data.inSelectionMode) {\n          this._lastCursorLineSelect(data.position);\n        } else {\n          this._createCursor(data.position, true);\n        }\n      } else {\n        if (data.inSelectionMode) {\n          this._lineSelectDrag(data.position);\n        } else {\n          this._lineSelect(data.position);\n        }\n      }\n    } else if (data.mouseDownCount >= 4) {\n      this._selectAll();\n    } else if (data.mouseDownCount === 3) {\n      if (this._hasMulticursorModifier(data)) {\n        if (data.inSelectionMode) {\n          this._lastCursorLineSelectDrag(data.position);\n        } else {\n          this._lastCursorLineSelect(data.position);\n        }\n      } else {\n        if (data.inSelectionMode) {\n          this._lineSelectDrag(data.position);\n        } else {\n          this._lineSelect(data.position);\n        }\n      }\n    } else if (data.mouseDownCount === 2) {\n      if (!data.onInjectedText) {\n        if (this._hasMulticursorModifier(data)) {\n          this._lastCursorWordSelect(data.position);\n        } else {\n          if (data.inSelectionMode) {\n            this._wordSelectDrag(data.position);\n          } else {\n            this._wordSelect(data.position);\n          }\n        }\n      }\n    } else {\n      if (this._hasMulticursorModifier(data)) {\n        if (!this._hasNonMulticursorModifier(data)) {\n          if (data.shiftKey) {\n            this._columnSelect(data.position, data.mouseColumn, true);\n          } else {\n            // Do multi-cursor operations only when purely alt is pressed\n            if (data.inSelectionMode) {\n              this._lastCursorMoveToSelect(data.position);\n            } else {\n              this._createCursor(data.position, false);\n            }\n          }\n        }\n      } else {\n        if (data.inSelectionMode) {\n          if (data.altKey) {\n            this._columnSelect(data.position, data.mouseColumn, true);\n          } else {\n            if (columnSelection) {\n              this._columnSelect(data.position, data.mouseColumn, true);\n            } else {\n              this._moveToSelect(data.position);\n            }\n          }\n        } else {\n          this.moveTo(data.position);\n        }\n      }\n    }\n  }\n  _usualArgs(viewPosition) {\n    viewPosition = this._validateViewColumn(viewPosition);\n    return {\n      source: 'mouse',\n      position: this._convertViewToModelPosition(viewPosition),\n      viewPosition: viewPosition\n    };\n  }\n  moveTo(viewPosition) {\n    CoreNavigationCommands.MoveTo.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n  }\n  _moveToSelect(viewPosition) {\n    CoreNavigationCommands.MoveToSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n  }\n  _columnSelect(viewPosition, mouseColumn, doColumnSelect) {\n    viewPosition = this._validateViewColumn(viewPosition);\n    CoreNavigationCommands.ColumnSelect.runCoreEditorCommand(this.viewModel, {\n      source: 'mouse',\n      position: this._convertViewToModelPosition(viewPosition),\n      viewPosition: viewPosition,\n      mouseColumn: mouseColumn,\n      doColumnSelect: doColumnSelect\n    });\n  }\n  _createCursor(viewPosition, wholeLine) {\n    viewPosition = this._validateViewColumn(viewPosition);\n    CoreNavigationCommands.CreateCursor.runCoreEditorCommand(this.viewModel, {\n      source: 'mouse',\n      position: this._convertViewToModelPosition(viewPosition),\n      viewPosition: viewPosition,\n      wholeLine: wholeLine\n    });\n  }\n  _lastCursorMoveToSelect(viewPosition) {\n    CoreNavigationCommands.LastCursorMoveToSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n  }\n  _wordSelect(viewPosition) {\n    CoreNavigationCommands.WordSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n  }\n  _wordSelectDrag(viewPosition) {\n    CoreNavigationCommands.WordSelectDrag.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n  }\n  _lastCursorWordSelect(viewPosition) {\n    CoreNavigationCommands.LastCursorWordSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n  }\n  _lineSelect(viewPosition) {\n    CoreNavigationCommands.LineSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n  }\n  _lineSelectDrag(viewPosition) {\n    CoreNavigationCommands.LineSelectDrag.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n  }\n  _lastCursorLineSelect(viewPosition) {\n    CoreNavigationCommands.LastCursorLineSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n  }\n  _lastCursorLineSelectDrag(viewPosition) {\n    CoreNavigationCommands.LastCursorLineSelectDrag.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n  }\n  _selectAll() {\n    CoreNavigationCommands.SelectAll.runCoreEditorCommand(this.viewModel, {\n      source: 'mouse'\n    });\n  }\n  // ----------------------\n  _convertViewToModelPosition(viewPosition) {\n    return this.viewModel.coordinatesConverter.convertViewPositionToModelPosition(viewPosition);\n  }\n  emitKeyDown(e) {\n    this.userInputEvents.emitKeyDown(e);\n  }\n  emitKeyUp(e) {\n    this.userInputEvents.emitKeyUp(e);\n  }\n  emitContextMenu(e) {\n    this.userInputEvents.emitContextMenu(e);\n  }\n  emitMouseMove(e) {\n    this.userInputEvents.emitMouseMove(e);\n  }\n  emitMouseLeave(e) {\n    this.userInputEvents.emitMouseLeave(e);\n  }\n  emitMouseUp(e) {\n    this.userInputEvents.emitMouseUp(e);\n  }\n  emitMouseDown(e) {\n    this.userInputEvents.emitMouseDown(e);\n  }\n  emitMouseDrag(e) {\n    this.userInputEvents.emitMouseDrag(e);\n  }\n  emitMouseDrop(e) {\n    this.userInputEvents.emitMouseDrop(e);\n  }\n  emitMouseDropCanceled() {\n    this.userInputEvents.emitMouseDropCanceled();\n  }\n  emitMouseWheel(e) {\n    this.userInputEvents.emitMouseWheel(e);\n  }\n}","map":{"version":3,"names":["CoreNavigationCommands","Position","platform","ViewController","constructor","configuration","viewModel","userInputEvents","commandDelegate","paste","text","pasteOnNewLine","multicursorText","mode","type","compositionType","replacePrevCharCnt","replaceNextCharCnt","positionDelta","compositionStart","startComposition","compositionEnd","endComposition","cut","setSelection","modelSelection","SetSelection","runCoreEditorCommand","source","selection","_validateViewColumn","viewPosition","minColumn","getLineMinColumn","lineNumber","column","_hasMulticursorModifier","data","options","get","altKey","ctrlKey","metaKey","_hasNonMulticursorModifier","dispatchMouse","selectionClipboardIsOn","isLinux","columnSelection","middleButton","_columnSelect","position","mouseColumn","inSelectionMode","startedOnLineNumbers","_lastCursorLineSelect","_createCursor","_lineSelectDrag","_lineSelect","mouseDownCount","_selectAll","_lastCursorLineSelectDrag","onInjectedText","_lastCursorWordSelect","_wordSelectDrag","_wordSelect","shiftKey","_lastCursorMoveToSelect","_moveToSelect","moveTo","_usualArgs","_convertViewToModelPosition","MoveTo","MoveToSelect","doColumnSelect","ColumnSelect","wholeLine","CreateCursor","LastCursorMoveToSelect","WordSelect","WordSelectDrag","LastCursorWordSelect","LineSelect","LineSelectDrag","LastCursorLineSelect","LastCursorLineSelectDrag","SelectAll","coordinatesConverter","convertViewPositionToModelPosition","emitKeyDown","e","emitKeyUp","emitContextMenu","emitMouseMove","emitMouseLeave","emitMouseUp","emitMouseDown","emitMouseDrag","emitMouseDrop","emitMouseDropCanceled","emitMouseWheel"],"sources":["/home/deathblade287/Desktop/AI-MODELS-TESTING/react-app/node_modules/monaco-editor/esm/vs/editor/browser/view/viewController.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CoreNavigationCommands } from '../coreCommands.js';\nimport { Position } from '../../common/core/position.js';\nimport * as platform from '../../../base/common/platform.js';\nexport class ViewController {\n    constructor(configuration, viewModel, userInputEvents, commandDelegate) {\n        this.configuration = configuration;\n        this.viewModel = viewModel;\n        this.userInputEvents = userInputEvents;\n        this.commandDelegate = commandDelegate;\n    }\n    paste(text, pasteOnNewLine, multicursorText, mode) {\n        this.commandDelegate.paste(text, pasteOnNewLine, multicursorText, mode);\n    }\n    type(text) {\n        this.commandDelegate.type(text);\n    }\n    compositionType(text, replacePrevCharCnt, replaceNextCharCnt, positionDelta) {\n        this.commandDelegate.compositionType(text, replacePrevCharCnt, replaceNextCharCnt, positionDelta);\n    }\n    compositionStart() {\n        this.commandDelegate.startComposition();\n    }\n    compositionEnd() {\n        this.commandDelegate.endComposition();\n    }\n    cut() {\n        this.commandDelegate.cut();\n    }\n    setSelection(modelSelection) {\n        CoreNavigationCommands.SetSelection.runCoreEditorCommand(this.viewModel, {\n            source: 'keyboard',\n            selection: modelSelection\n        });\n    }\n    _validateViewColumn(viewPosition) {\n        const minColumn = this.viewModel.getLineMinColumn(viewPosition.lineNumber);\n        if (viewPosition.column < minColumn) {\n            return new Position(viewPosition.lineNumber, minColumn);\n        }\n        return viewPosition;\n    }\n    _hasMulticursorModifier(data) {\n        switch (this.configuration.options.get(72 /* EditorOption.multiCursorModifier */)) {\n            case 'altKey':\n                return data.altKey;\n            case 'ctrlKey':\n                return data.ctrlKey;\n            case 'metaKey':\n                return data.metaKey;\n            default:\n                return false;\n        }\n    }\n    _hasNonMulticursorModifier(data) {\n        switch (this.configuration.options.get(72 /* EditorOption.multiCursorModifier */)) {\n            case 'altKey':\n                return data.ctrlKey || data.metaKey;\n            case 'ctrlKey':\n                return data.altKey || data.metaKey;\n            case 'metaKey':\n                return data.ctrlKey || data.altKey;\n            default:\n                return false;\n        }\n    }\n    dispatchMouse(data) {\n        const options = this.configuration.options;\n        const selectionClipboardIsOn = (platform.isLinux && options.get(98 /* EditorOption.selectionClipboard */));\n        const columnSelection = options.get(18 /* EditorOption.columnSelection */);\n        if (data.middleButton && !selectionClipboardIsOn) {\n            this._columnSelect(data.position, data.mouseColumn, data.inSelectionMode);\n        }\n        else if (data.startedOnLineNumbers) {\n            // If the dragging started on the gutter, then have operations work on the entire line\n            if (this._hasMulticursorModifier(data)) {\n                if (data.inSelectionMode) {\n                    this._lastCursorLineSelect(data.position);\n                }\n                else {\n                    this._createCursor(data.position, true);\n                }\n            }\n            else {\n                if (data.inSelectionMode) {\n                    this._lineSelectDrag(data.position);\n                }\n                else {\n                    this._lineSelect(data.position);\n                }\n            }\n        }\n        else if (data.mouseDownCount >= 4) {\n            this._selectAll();\n        }\n        else if (data.mouseDownCount === 3) {\n            if (this._hasMulticursorModifier(data)) {\n                if (data.inSelectionMode) {\n                    this._lastCursorLineSelectDrag(data.position);\n                }\n                else {\n                    this._lastCursorLineSelect(data.position);\n                }\n            }\n            else {\n                if (data.inSelectionMode) {\n                    this._lineSelectDrag(data.position);\n                }\n                else {\n                    this._lineSelect(data.position);\n                }\n            }\n        }\n        else if (data.mouseDownCount === 2) {\n            if (!data.onInjectedText) {\n                if (this._hasMulticursorModifier(data)) {\n                    this._lastCursorWordSelect(data.position);\n                }\n                else {\n                    if (data.inSelectionMode) {\n                        this._wordSelectDrag(data.position);\n                    }\n                    else {\n                        this._wordSelect(data.position);\n                    }\n                }\n            }\n        }\n        else {\n            if (this._hasMulticursorModifier(data)) {\n                if (!this._hasNonMulticursorModifier(data)) {\n                    if (data.shiftKey) {\n                        this._columnSelect(data.position, data.mouseColumn, true);\n                    }\n                    else {\n                        // Do multi-cursor operations only when purely alt is pressed\n                        if (data.inSelectionMode) {\n                            this._lastCursorMoveToSelect(data.position);\n                        }\n                        else {\n                            this._createCursor(data.position, false);\n                        }\n                    }\n                }\n            }\n            else {\n                if (data.inSelectionMode) {\n                    if (data.altKey) {\n                        this._columnSelect(data.position, data.mouseColumn, true);\n                    }\n                    else {\n                        if (columnSelection) {\n                            this._columnSelect(data.position, data.mouseColumn, true);\n                        }\n                        else {\n                            this._moveToSelect(data.position);\n                        }\n                    }\n                }\n                else {\n                    this.moveTo(data.position);\n                }\n            }\n        }\n    }\n    _usualArgs(viewPosition) {\n        viewPosition = this._validateViewColumn(viewPosition);\n        return {\n            source: 'mouse',\n            position: this._convertViewToModelPosition(viewPosition),\n            viewPosition: viewPosition\n        };\n    }\n    moveTo(viewPosition) {\n        CoreNavigationCommands.MoveTo.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n    }\n    _moveToSelect(viewPosition) {\n        CoreNavigationCommands.MoveToSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n    }\n    _columnSelect(viewPosition, mouseColumn, doColumnSelect) {\n        viewPosition = this._validateViewColumn(viewPosition);\n        CoreNavigationCommands.ColumnSelect.runCoreEditorCommand(this.viewModel, {\n            source: 'mouse',\n            position: this._convertViewToModelPosition(viewPosition),\n            viewPosition: viewPosition,\n            mouseColumn: mouseColumn,\n            doColumnSelect: doColumnSelect\n        });\n    }\n    _createCursor(viewPosition, wholeLine) {\n        viewPosition = this._validateViewColumn(viewPosition);\n        CoreNavigationCommands.CreateCursor.runCoreEditorCommand(this.viewModel, {\n            source: 'mouse',\n            position: this._convertViewToModelPosition(viewPosition),\n            viewPosition: viewPosition,\n            wholeLine: wholeLine\n        });\n    }\n    _lastCursorMoveToSelect(viewPosition) {\n        CoreNavigationCommands.LastCursorMoveToSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n    }\n    _wordSelect(viewPosition) {\n        CoreNavigationCommands.WordSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n    }\n    _wordSelectDrag(viewPosition) {\n        CoreNavigationCommands.WordSelectDrag.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n    }\n    _lastCursorWordSelect(viewPosition) {\n        CoreNavigationCommands.LastCursorWordSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n    }\n    _lineSelect(viewPosition) {\n        CoreNavigationCommands.LineSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n    }\n    _lineSelectDrag(viewPosition) {\n        CoreNavigationCommands.LineSelectDrag.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n    }\n    _lastCursorLineSelect(viewPosition) {\n        CoreNavigationCommands.LastCursorLineSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n    }\n    _lastCursorLineSelectDrag(viewPosition) {\n        CoreNavigationCommands.LastCursorLineSelectDrag.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n    }\n    _selectAll() {\n        CoreNavigationCommands.SelectAll.runCoreEditorCommand(this.viewModel, { source: 'mouse' });\n    }\n    // ----------------------\n    _convertViewToModelPosition(viewPosition) {\n        return this.viewModel.coordinatesConverter.convertViewPositionToModelPosition(viewPosition);\n    }\n    emitKeyDown(e) {\n        this.userInputEvents.emitKeyDown(e);\n    }\n    emitKeyUp(e) {\n        this.userInputEvents.emitKeyUp(e);\n    }\n    emitContextMenu(e) {\n        this.userInputEvents.emitContextMenu(e);\n    }\n    emitMouseMove(e) {\n        this.userInputEvents.emitMouseMove(e);\n    }\n    emitMouseLeave(e) {\n        this.userInputEvents.emitMouseLeave(e);\n    }\n    emitMouseUp(e) {\n        this.userInputEvents.emitMouseUp(e);\n    }\n    emitMouseDown(e) {\n        this.userInputEvents.emitMouseDown(e);\n    }\n    emitMouseDrag(e) {\n        this.userInputEvents.emitMouseDrag(e);\n    }\n    emitMouseDrop(e) {\n        this.userInputEvents.emitMouseDrop(e);\n    }\n    emitMouseDropCanceled() {\n        this.userInputEvents.emitMouseDropCanceled();\n    }\n    emitMouseWheel(e) {\n        this.userInputEvents.emitMouseWheel(e);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}