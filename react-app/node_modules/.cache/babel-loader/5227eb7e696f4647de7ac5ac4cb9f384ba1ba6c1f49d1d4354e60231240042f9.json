{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { ElementsDragAndDropData } from '../list/listView.js';\nimport { ComposedTreeDelegate } from './abstractTree.js';\nimport { getVisibleState, isFilterResult } from './indexTreeModel.js';\nimport { CompressibleObjectTree, ObjectTree } from './objectTree.js';\nimport { TreeError, WeakMapper } from './tree.js';\nimport { createCancelablePromise, Promises, timeout } from '../../../common/async.js';\nimport { Codicon } from '../../../common/codicons.js';\nimport { isCancellationError, onUnexpectedError } from '../../../common/errors.js';\nimport { Emitter, Event } from '../../../common/event.js';\nimport { Iterable } from '../../../common/iterator.js';\nimport { DisposableStore, dispose } from '../../../common/lifecycle.js';\nimport { isIterable } from '../../../common/types.js';\nfunction createAsyncDataTreeNode(props) {\n  return Object.assign(Object.assign({}, props), {\n    children: [],\n    refreshPromise: undefined,\n    stale: true,\n    slow: false,\n    collapsedByDefault: undefined\n  });\n}\nfunction isAncestor(ancestor, descendant) {\n  if (!descendant.parent) {\n    return false;\n  } else if (descendant.parent === ancestor) {\n    return true;\n  } else {\n    return isAncestor(ancestor, descendant.parent);\n  }\n}\nfunction intersects(node, other) {\n  return node === other || isAncestor(node, other) || isAncestor(other, node);\n}\nclass AsyncDataTreeNodeWrapper {\n  constructor(node) {\n    this.node = node;\n  }\n  get element() {\n    return this.node.element.element;\n  }\n  get children() {\n    return this.node.children.map(node => new AsyncDataTreeNodeWrapper(node));\n  }\n  get depth() {\n    return this.node.depth;\n  }\n  get visibleChildrenCount() {\n    return this.node.visibleChildrenCount;\n  }\n  get visibleChildIndex() {\n    return this.node.visibleChildIndex;\n  }\n  get collapsible() {\n    return this.node.collapsible;\n  }\n  get collapsed() {\n    return this.node.collapsed;\n  }\n  get visible() {\n    return this.node.visible;\n  }\n  get filterData() {\n    return this.node.filterData;\n  }\n}\nclass AsyncDataTreeRenderer {\n  constructor(renderer, nodeMapper, onDidChangeTwistieState) {\n    this.renderer = renderer;\n    this.nodeMapper = nodeMapper;\n    this.onDidChangeTwistieState = onDidChangeTwistieState;\n    this.renderedNodes = new Map();\n    this.templateId = renderer.templateId;\n  }\n  renderTemplate(container) {\n    const templateData = this.renderer.renderTemplate(container);\n    return {\n      templateData\n    };\n  }\n  renderElement(node, index, templateData, height) {\n    this.renderer.renderElement(this.nodeMapper.map(node), index, templateData.templateData, height);\n  }\n  renderTwistie(element, twistieElement) {\n    if (element.slow) {\n      twistieElement.classList.add(...Codicon.treeItemLoading.classNamesArray);\n      return true;\n    } else {\n      twistieElement.classList.remove(...Codicon.treeItemLoading.classNamesArray);\n      return false;\n    }\n  }\n  disposeElement(node, index, templateData, height) {\n    var _a, _b;\n    (_b = (_a = this.renderer).disposeElement) === null || _b === void 0 ? void 0 : _b.call(_a, this.nodeMapper.map(node), index, templateData.templateData, height);\n  }\n  disposeTemplate(templateData) {\n    this.renderer.disposeTemplate(templateData.templateData);\n  }\n  dispose() {\n    this.renderedNodes.clear();\n  }\n}\nfunction asTreeEvent(e) {\n  return {\n    browserEvent: e.browserEvent,\n    elements: e.elements.map(e => e.element)\n  };\n}\nfunction asTreeMouseEvent(e) {\n  return {\n    browserEvent: e.browserEvent,\n    element: e.element && e.element.element,\n    target: e.target\n  };\n}\nclass AsyncDataTreeElementsDragAndDropData extends ElementsDragAndDropData {\n  constructor(data) {\n    super(data.elements.map(node => node.element));\n    this.data = data;\n  }\n}\nfunction asAsyncDataTreeDragAndDropData(data) {\n  if (data instanceof ElementsDragAndDropData) {\n    return new AsyncDataTreeElementsDragAndDropData(data);\n  }\n  return data;\n}\nclass AsyncDataTreeNodeListDragAndDrop {\n  constructor(dnd) {\n    this.dnd = dnd;\n  }\n  getDragURI(node) {\n    return this.dnd.getDragURI(node.element);\n  }\n  getDragLabel(nodes, originalEvent) {\n    if (this.dnd.getDragLabel) {\n      return this.dnd.getDragLabel(nodes.map(node => node.element), originalEvent);\n    }\n    return undefined;\n  }\n  onDragStart(data, originalEvent) {\n    var _a, _b;\n    (_b = (_a = this.dnd).onDragStart) === null || _b === void 0 ? void 0 : _b.call(_a, asAsyncDataTreeDragAndDropData(data), originalEvent);\n  }\n  onDragOver(data, targetNode, targetIndex, originalEvent) {\n    let raw = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n    return this.dnd.onDragOver(asAsyncDataTreeDragAndDropData(data), targetNode && targetNode.element, targetIndex, originalEvent);\n  }\n  drop(data, targetNode, targetIndex, originalEvent) {\n    this.dnd.drop(asAsyncDataTreeDragAndDropData(data), targetNode && targetNode.element, targetIndex, originalEvent);\n  }\n  onDragEnd(originalEvent) {\n    var _a, _b;\n    (_b = (_a = this.dnd).onDragEnd) === null || _b === void 0 ? void 0 : _b.call(_a, originalEvent);\n  }\n}\nfunction asObjectTreeOptions(options) {\n  return options && Object.assign(Object.assign({}, options), {\n    collapseByDefault: true,\n    identityProvider: options.identityProvider && {\n      getId(el) {\n        return options.identityProvider.getId(el.element);\n      }\n    },\n    dnd: options.dnd && new AsyncDataTreeNodeListDragAndDrop(options.dnd),\n    multipleSelectionController: options.multipleSelectionController && {\n      isSelectionSingleChangeEvent(e) {\n        return options.multipleSelectionController.isSelectionSingleChangeEvent(Object.assign(Object.assign({}, e), {\n          element: e.element\n        }));\n      },\n      isSelectionRangeChangeEvent(e) {\n        return options.multipleSelectionController.isSelectionRangeChangeEvent(Object.assign(Object.assign({}, e), {\n          element: e.element\n        }));\n      }\n    },\n    accessibilityProvider: options.accessibilityProvider && Object.assign(Object.assign({}, options.accessibilityProvider), {\n      getPosInSet: undefined,\n      getSetSize: undefined,\n      getRole: options.accessibilityProvider.getRole ? el => {\n        return options.accessibilityProvider.getRole(el.element);\n      } : () => 'treeitem',\n      isChecked: options.accessibilityProvider.isChecked ? e => {\n        var _a;\n        return !!((_a = options.accessibilityProvider) === null || _a === void 0 ? void 0 : _a.isChecked(e.element));\n      } : undefined,\n      getAriaLabel(e) {\n        return options.accessibilityProvider.getAriaLabel(e.element);\n      },\n      getWidgetAriaLabel() {\n        return options.accessibilityProvider.getWidgetAriaLabel();\n      },\n      getWidgetRole: options.accessibilityProvider.getWidgetRole ? () => options.accessibilityProvider.getWidgetRole() : () => 'tree',\n      getAriaLevel: options.accessibilityProvider.getAriaLevel && (node => {\n        return options.accessibilityProvider.getAriaLevel(node.element);\n      }),\n      getActiveDescendantId: options.accessibilityProvider.getActiveDescendantId && (node => {\n        return options.accessibilityProvider.getActiveDescendantId(node.element);\n      })\n    }),\n    filter: options.filter && {\n      filter(e, parentVisibility) {\n        return options.filter.filter(e.element, parentVisibility);\n      }\n    },\n    keyboardNavigationLabelProvider: options.keyboardNavigationLabelProvider && Object.assign(Object.assign({}, options.keyboardNavigationLabelProvider), {\n      getKeyboardNavigationLabel(e) {\n        return options.keyboardNavigationLabelProvider.getKeyboardNavigationLabel(e.element);\n      }\n    }),\n    sorter: undefined,\n    expandOnlyOnTwistieClick: typeof options.expandOnlyOnTwistieClick === 'undefined' ? undefined : typeof options.expandOnlyOnTwistieClick !== 'function' ? options.expandOnlyOnTwistieClick : e => options.expandOnlyOnTwistieClick(e.element),\n    additionalScrollHeight: options.additionalScrollHeight\n  });\n}\nfunction dfs(node, fn) {\n  fn(node);\n  node.children.forEach(child => dfs(child, fn));\n}\nexport class AsyncDataTree {\n  constructor(user, container, delegate, renderers, dataSource) {\n    let options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n    this.user = user;\n    this.dataSource = dataSource;\n    this.nodes = new Map();\n    this.subTreeRefreshPromises = new Map();\n    this.refreshPromises = new Map();\n    this._onDidRender = new Emitter();\n    this._onDidChangeNodeSlowState = new Emitter();\n    this.nodeMapper = new WeakMapper(node => new AsyncDataTreeNodeWrapper(node));\n    this.disposables = new DisposableStore();\n    this.identityProvider = options.identityProvider;\n    this.autoExpandSingleChildren = typeof options.autoExpandSingleChildren === 'undefined' ? false : options.autoExpandSingleChildren;\n    this.sorter = options.sorter;\n    this.collapseByDefault = options.collapseByDefault;\n    this.tree = this.createTree(user, container, delegate, renderers, options);\n    this.onDidChangeFindMode = this.tree.onDidChangeFindMode;\n    this.root = createAsyncDataTreeNode({\n      element: undefined,\n      parent: null,\n      hasChildren: true\n    });\n    if (this.identityProvider) {\n      this.root = Object.assign(Object.assign({}, this.root), {\n        id: null\n      });\n    }\n    this.nodes.set(null, this.root);\n    this.tree.onDidChangeCollapseState(this._onDidChangeCollapseState, this, this.disposables);\n  }\n  get onDidChangeFocus() {\n    return Event.map(this.tree.onDidChangeFocus, asTreeEvent);\n  }\n  get onDidChangeSelection() {\n    return Event.map(this.tree.onDidChangeSelection, asTreeEvent);\n  }\n  get onMouseDblClick() {\n    return Event.map(this.tree.onMouseDblClick, asTreeMouseEvent);\n  }\n  get onPointer() {\n    return Event.map(this.tree.onPointer, asTreeMouseEvent);\n  }\n  get onDidFocus() {\n    return this.tree.onDidFocus;\n  }\n  get onDidChangeModel() {\n    return this.tree.onDidChangeModel;\n  }\n  get onDidChangeCollapseState() {\n    return this.tree.onDidChangeCollapseState;\n  }\n  get onDidChangeFindOpenState() {\n    return this.tree.onDidChangeFindOpenState;\n  }\n  get onDidDispose() {\n    return this.tree.onDidDispose;\n  }\n  createTree(user, container, delegate, renderers, options) {\n    const objectTreeDelegate = new ComposedTreeDelegate(delegate);\n    const objectTreeRenderers = renderers.map(r => new AsyncDataTreeRenderer(r, this.nodeMapper, this._onDidChangeNodeSlowState.event));\n    const objectTreeOptions = asObjectTreeOptions(options) || {};\n    return new ObjectTree(user, container, objectTreeDelegate, objectTreeRenderers, objectTreeOptions);\n  }\n  updateOptions() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.tree.updateOptions(options);\n  }\n  // Widget\n  getHTMLElement() {\n    return this.tree.getHTMLElement();\n  }\n  get scrollTop() {\n    return this.tree.scrollTop;\n  }\n  set scrollTop(scrollTop) {\n    this.tree.scrollTop = scrollTop;\n  }\n  domFocus() {\n    this.tree.domFocus();\n  }\n  layout(height, width) {\n    this.tree.layout(height, width);\n  }\n  style(styles) {\n    this.tree.style(styles);\n  }\n  // Model\n  getInput() {\n    return this.root.element;\n  }\n  setInput(input, viewState) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.refreshPromises.forEach(promise => promise.cancel());\n      this.refreshPromises.clear();\n      this.root.element = input;\n      const viewStateContext = viewState && {\n        viewState,\n        focus: [],\n        selection: []\n      };\n      yield this._updateChildren(input, true, false, viewStateContext);\n      if (viewStateContext) {\n        this.tree.setFocus(viewStateContext.focus);\n        this.tree.setSelection(viewStateContext.selection);\n      }\n      if (viewState && typeof viewState.scrollTop === 'number') {\n        this.scrollTop = viewState.scrollTop;\n      }\n    });\n  }\n  _updateChildren() {\n    let element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.root.element;\n    let recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let rerender = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let viewStateContext = arguments.length > 3 ? arguments[3] : undefined;\n    let options = arguments.length > 4 ? arguments[4] : undefined;\n    return __awaiter(this, void 0, void 0, function* () {\n      if (typeof this.root.element === 'undefined') {\n        throw new TreeError(this.user, 'Tree input not set');\n      }\n      if (this.root.refreshPromise) {\n        yield this.root.refreshPromise;\n        yield Event.toPromise(this._onDidRender.event);\n      }\n      const node = this.getDataNode(element);\n      yield this.refreshAndRenderNode(node, recursive, viewStateContext, options);\n      if (rerender) {\n        try {\n          this.tree.rerender(node);\n        } catch (_a) {\n          // missing nodes are fine, this could've resulted from\n          // parallel refresh calls, removing `node` altogether\n        }\n      }\n    });\n  }\n  // View\n  rerender(element) {\n    if (element === undefined || element === this.root.element) {\n      this.tree.rerender();\n      return;\n    }\n    const node = this.getDataNode(element);\n    this.tree.rerender(node);\n  }\n  // Tree\n  getNode() {\n    let element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.root.element;\n    const dataNode = this.getDataNode(element);\n    const node = this.tree.getNode(dataNode === this.root ? null : dataNode);\n    return this.nodeMapper.map(node);\n  }\n  collapse(element) {\n    let recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const node = this.getDataNode(element);\n    return this.tree.collapse(node === this.root ? null : node, recursive);\n  }\n  expand(element) {\n    let recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return __awaiter(this, void 0, void 0, function* () {\n      if (typeof this.root.element === 'undefined') {\n        throw new TreeError(this.user, 'Tree input not set');\n      }\n      if (this.root.refreshPromise) {\n        yield this.root.refreshPromise;\n        yield Event.toPromise(this._onDidRender.event);\n      }\n      const node = this.getDataNode(element);\n      if (this.tree.hasElement(node) && !this.tree.isCollapsible(node)) {\n        return false;\n      }\n      if (node.refreshPromise) {\n        yield this.root.refreshPromise;\n        yield Event.toPromise(this._onDidRender.event);\n      }\n      if (node !== this.root && !node.refreshPromise && !this.tree.isCollapsed(node)) {\n        return false;\n      }\n      const result = this.tree.expand(node === this.root ? null : node, recursive);\n      if (node.refreshPromise) {\n        yield this.root.refreshPromise;\n        yield Event.toPromise(this._onDidRender.event);\n      }\n      return result;\n    });\n  }\n  setSelection(elements, browserEvent) {\n    const nodes = elements.map(e => this.getDataNode(e));\n    this.tree.setSelection(nodes, browserEvent);\n  }\n  getSelection() {\n    const nodes = this.tree.getSelection();\n    return nodes.map(n => n.element);\n  }\n  setFocus(elements, browserEvent) {\n    const nodes = elements.map(e => this.getDataNode(e));\n    this.tree.setFocus(nodes, browserEvent);\n  }\n  getFocus() {\n    const nodes = this.tree.getFocus();\n    return nodes.map(n => n.element);\n  }\n  reveal(element, relativeTop) {\n    this.tree.reveal(this.getDataNode(element), relativeTop);\n  }\n  // Tree navigation\n  getParentElement(element) {\n    const node = this.tree.getParentElement(this.getDataNode(element));\n    return node && node.element;\n  }\n  getFirstElementChild() {\n    let element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.root.element;\n    const dataNode = this.getDataNode(element);\n    const node = this.tree.getFirstElementChild(dataNode === this.root ? null : dataNode);\n    return node && node.element;\n  }\n  // Implementation\n  getDataNode(element) {\n    const node = this.nodes.get(element === this.root.element ? null : element);\n    if (!node) {\n      throw new TreeError(this.user, `Data tree node not found: ${element}`);\n    }\n    return node;\n  }\n  refreshAndRenderNode(node, recursive, viewStateContext, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.refreshNode(node, recursive, viewStateContext);\n      this.render(node, viewStateContext, options);\n    });\n  }\n  refreshNode(node, recursive, viewStateContext) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let result;\n      this.subTreeRefreshPromises.forEach((refreshPromise, refreshNode) => {\n        if (!result && intersects(refreshNode, node)) {\n          result = refreshPromise.then(() => this.refreshNode(node, recursive, viewStateContext));\n        }\n      });\n      if (result) {\n        return result;\n      }\n      if (node !== this.root) {\n        const treeNode = this.tree.getNode(node);\n        if (treeNode.collapsed) {\n          node.hasChildren = !!this.dataSource.hasChildren(node.element);\n          node.stale = true;\n          return;\n        }\n      }\n      return this.doRefreshSubTree(node, recursive, viewStateContext);\n    });\n  }\n  doRefreshSubTree(node, recursive, viewStateContext) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let done;\n      node.refreshPromise = new Promise(c => done = c);\n      this.subTreeRefreshPromises.set(node, node.refreshPromise);\n      node.refreshPromise.finally(() => {\n        node.refreshPromise = undefined;\n        this.subTreeRefreshPromises.delete(node);\n      });\n      try {\n        const childrenToRefresh = yield this.doRefreshNode(node, recursive, viewStateContext);\n        node.stale = false;\n        yield Promises.settled(childrenToRefresh.map(child => this.doRefreshSubTree(child, recursive, viewStateContext)));\n      } finally {\n        done();\n      }\n    });\n  }\n  doRefreshNode(node, recursive, viewStateContext) {\n    return __awaiter(this, void 0, void 0, function* () {\n      node.hasChildren = !!this.dataSource.hasChildren(node.element);\n      let childrenPromise;\n      if (!node.hasChildren) {\n        childrenPromise = Promise.resolve(Iterable.empty());\n      } else {\n        const children = this.doGetChildren(node);\n        if (isIterable(children)) {\n          childrenPromise = Promise.resolve(children);\n        } else {\n          const slowTimeout = timeout(800);\n          slowTimeout.then(() => {\n            node.slow = true;\n            this._onDidChangeNodeSlowState.fire(node);\n          }, _ => null);\n          childrenPromise = children.finally(() => slowTimeout.cancel());\n        }\n      }\n      try {\n        const children = yield childrenPromise;\n        return this.setChildren(node, children, recursive, viewStateContext);\n      } catch (err) {\n        if (node !== this.root && this.tree.hasElement(node)) {\n          this.tree.collapse(node);\n        }\n        if (isCancellationError(err)) {\n          return [];\n        }\n        throw err;\n      } finally {\n        if (node.slow) {\n          node.slow = false;\n          this._onDidChangeNodeSlowState.fire(node);\n        }\n      }\n    });\n  }\n  doGetChildren(node) {\n    let result = this.refreshPromises.get(node);\n    if (result) {\n      return result;\n    }\n    const children = this.dataSource.getChildren(node.element);\n    if (isIterable(children)) {\n      return this.processChildren(children);\n    } else {\n      result = createCancelablePromise(() => __awaiter(this, void 0, void 0, function* () {\n        return this.processChildren(yield children);\n      }));\n      this.refreshPromises.set(node, result);\n      return result.finally(() => {\n        this.refreshPromises.delete(node);\n      });\n    }\n  }\n  _onDidChangeCollapseState(_ref) {\n    let {\n      node,\n      deep\n    } = _ref;\n    if (node.element === null) {\n      return;\n    }\n    if (!node.collapsed && node.element.stale) {\n      if (deep) {\n        this.collapse(node.element.element);\n      } else {\n        this.refreshAndRenderNode(node.element, false).catch(onUnexpectedError);\n      }\n    }\n  }\n  setChildren(node, childrenElementsIterable, recursive, viewStateContext) {\n    const childrenElements = [...childrenElementsIterable];\n    // perf: if the node was and still is a leaf, avoid all this hassle\n    if (node.children.length === 0 && childrenElements.length === 0) {\n      return [];\n    }\n    const nodesToForget = new Map();\n    const childrenTreeNodesById = new Map();\n    for (const child of node.children) {\n      nodesToForget.set(child.element, child);\n      if (this.identityProvider) {\n        const collapsed = this.tree.isCollapsed(child);\n        childrenTreeNodesById.set(child.id, {\n          node: child,\n          collapsed\n        });\n      }\n    }\n    const childrenToRefresh = [];\n    const children = childrenElements.map(element => {\n      const hasChildren = !!this.dataSource.hasChildren(element);\n      if (!this.identityProvider) {\n        const asyncDataTreeNode = createAsyncDataTreeNode({\n          element,\n          parent: node,\n          hasChildren\n        });\n        if (hasChildren && this.collapseByDefault && !this.collapseByDefault(element)) {\n          asyncDataTreeNode.collapsedByDefault = false;\n          childrenToRefresh.push(asyncDataTreeNode);\n        }\n        return asyncDataTreeNode;\n      }\n      const id = this.identityProvider.getId(element).toString();\n      const result = childrenTreeNodesById.get(id);\n      if (result) {\n        const asyncDataTreeNode = result.node;\n        nodesToForget.delete(asyncDataTreeNode.element);\n        this.nodes.delete(asyncDataTreeNode.element);\n        this.nodes.set(element, asyncDataTreeNode);\n        asyncDataTreeNode.element = element;\n        asyncDataTreeNode.hasChildren = hasChildren;\n        if (recursive) {\n          if (result.collapsed) {\n            asyncDataTreeNode.children.forEach(node => dfs(node, node => this.nodes.delete(node.element)));\n            asyncDataTreeNode.children.splice(0, asyncDataTreeNode.children.length);\n            asyncDataTreeNode.stale = true;\n          } else {\n            childrenToRefresh.push(asyncDataTreeNode);\n          }\n        } else if (hasChildren && this.collapseByDefault && !this.collapseByDefault(element)) {\n          asyncDataTreeNode.collapsedByDefault = false;\n          childrenToRefresh.push(asyncDataTreeNode);\n        }\n        return asyncDataTreeNode;\n      }\n      const childAsyncDataTreeNode = createAsyncDataTreeNode({\n        element,\n        parent: node,\n        id,\n        hasChildren\n      });\n      if (viewStateContext && viewStateContext.viewState.focus && viewStateContext.viewState.focus.indexOf(id) > -1) {\n        viewStateContext.focus.push(childAsyncDataTreeNode);\n      }\n      if (viewStateContext && viewStateContext.viewState.selection && viewStateContext.viewState.selection.indexOf(id) > -1) {\n        viewStateContext.selection.push(childAsyncDataTreeNode);\n      }\n      if (viewStateContext && viewStateContext.viewState.expanded && viewStateContext.viewState.expanded.indexOf(id) > -1) {\n        childrenToRefresh.push(childAsyncDataTreeNode);\n      } else if (hasChildren && this.collapseByDefault && !this.collapseByDefault(element)) {\n        childAsyncDataTreeNode.collapsedByDefault = false;\n        childrenToRefresh.push(childAsyncDataTreeNode);\n      }\n      return childAsyncDataTreeNode;\n    });\n    for (const node of nodesToForget.values()) {\n      dfs(node, node => this.nodes.delete(node.element));\n    }\n    for (const child of children) {\n      this.nodes.set(child.element, child);\n    }\n    node.children.splice(0, node.children.length, ...children);\n    // TODO@joao this doesn't take filter into account\n    if (node !== this.root && this.autoExpandSingleChildren && children.length === 1 && childrenToRefresh.length === 0) {\n      children[0].collapsedByDefault = false;\n      childrenToRefresh.push(children[0]);\n    }\n    return childrenToRefresh;\n  }\n  render(node, viewStateContext, options) {\n    const children = node.children.map(node => this.asTreeElement(node, viewStateContext));\n    const objectTreeOptions = options && Object.assign(Object.assign({}, options), {\n      diffIdentityProvider: options.diffIdentityProvider && {\n        getId(node) {\n          return options.diffIdentityProvider.getId(node.element);\n        }\n      }\n    });\n    this.tree.setChildren(node === this.root ? null : node, children, objectTreeOptions);\n    if (node !== this.root) {\n      this.tree.setCollapsible(node, node.hasChildren);\n    }\n    this._onDidRender.fire();\n  }\n  asTreeElement(node, viewStateContext) {\n    if (node.stale) {\n      return {\n        element: node,\n        collapsible: node.hasChildren,\n        collapsed: true\n      };\n    }\n    let collapsed;\n    if (viewStateContext && viewStateContext.viewState.expanded && node.id && viewStateContext.viewState.expanded.indexOf(node.id) > -1) {\n      collapsed = false;\n    } else {\n      collapsed = node.collapsedByDefault;\n    }\n    node.collapsedByDefault = undefined;\n    return {\n      element: node,\n      children: node.hasChildren ? Iterable.map(node.children, child => this.asTreeElement(child, viewStateContext)) : [],\n      collapsible: node.hasChildren,\n      collapsed\n    };\n  }\n  processChildren(children) {\n    if (this.sorter) {\n      children = [...children].sort(this.sorter.compare.bind(this.sorter));\n    }\n    return children;\n  }\n  dispose() {\n    this.disposables.dispose();\n  }\n}\nclass CompressibleAsyncDataTreeNodeWrapper {\n  constructor(node) {\n    this.node = node;\n  }\n  get element() {\n    return {\n      elements: this.node.element.elements.map(e => e.element),\n      incompressible: this.node.element.incompressible\n    };\n  }\n  get children() {\n    return this.node.children.map(node => new CompressibleAsyncDataTreeNodeWrapper(node));\n  }\n  get depth() {\n    return this.node.depth;\n  }\n  get visibleChildrenCount() {\n    return this.node.visibleChildrenCount;\n  }\n  get visibleChildIndex() {\n    return this.node.visibleChildIndex;\n  }\n  get collapsible() {\n    return this.node.collapsible;\n  }\n  get collapsed() {\n    return this.node.collapsed;\n  }\n  get visible() {\n    return this.node.visible;\n  }\n  get filterData() {\n    return this.node.filterData;\n  }\n}\nclass CompressibleAsyncDataTreeRenderer {\n  constructor(renderer, nodeMapper, compressibleNodeMapperProvider, onDidChangeTwistieState) {\n    this.renderer = renderer;\n    this.nodeMapper = nodeMapper;\n    this.compressibleNodeMapperProvider = compressibleNodeMapperProvider;\n    this.onDidChangeTwistieState = onDidChangeTwistieState;\n    this.renderedNodes = new Map();\n    this.disposables = [];\n    this.templateId = renderer.templateId;\n  }\n  renderTemplate(container) {\n    const templateData = this.renderer.renderTemplate(container);\n    return {\n      templateData\n    };\n  }\n  renderElement(node, index, templateData, height) {\n    this.renderer.renderElement(this.nodeMapper.map(node), index, templateData.templateData, height);\n  }\n  renderCompressedElements(node, index, templateData, height) {\n    this.renderer.renderCompressedElements(this.compressibleNodeMapperProvider().map(node), index, templateData.templateData, height);\n  }\n  renderTwistie(element, twistieElement) {\n    if (element.slow) {\n      twistieElement.classList.add(...Codicon.treeItemLoading.classNamesArray);\n      return true;\n    } else {\n      twistieElement.classList.remove(...Codicon.treeItemLoading.classNamesArray);\n      return false;\n    }\n  }\n  disposeElement(node, index, templateData, height) {\n    var _a, _b;\n    (_b = (_a = this.renderer).disposeElement) === null || _b === void 0 ? void 0 : _b.call(_a, this.nodeMapper.map(node), index, templateData.templateData, height);\n  }\n  disposeCompressedElements(node, index, templateData, height) {\n    var _a, _b;\n    (_b = (_a = this.renderer).disposeCompressedElements) === null || _b === void 0 ? void 0 : _b.call(_a, this.compressibleNodeMapperProvider().map(node), index, templateData.templateData, height);\n  }\n  disposeTemplate(templateData) {\n    this.renderer.disposeTemplate(templateData.templateData);\n  }\n  dispose() {\n    this.renderedNodes.clear();\n    this.disposables = dispose(this.disposables);\n  }\n}\nfunction asCompressibleObjectTreeOptions(options) {\n  const objectTreeOptions = options && asObjectTreeOptions(options);\n  return objectTreeOptions && Object.assign(Object.assign({}, objectTreeOptions), {\n    keyboardNavigationLabelProvider: objectTreeOptions.keyboardNavigationLabelProvider && Object.assign(Object.assign({}, objectTreeOptions.keyboardNavigationLabelProvider), {\n      getCompressedNodeKeyboardNavigationLabel(els) {\n        return options.keyboardNavigationLabelProvider.getCompressedNodeKeyboardNavigationLabel(els.map(e => e.element));\n      }\n    })\n  });\n}\nexport class CompressibleAsyncDataTree extends AsyncDataTree {\n  constructor(user, container, virtualDelegate, compressionDelegate, renderers, dataSource) {\n    let options = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : {};\n    super(user, container, virtualDelegate, renderers, dataSource, options);\n    this.compressionDelegate = compressionDelegate;\n    this.compressibleNodeMapper = new WeakMapper(node => new CompressibleAsyncDataTreeNodeWrapper(node));\n    this.filter = options.filter;\n  }\n  createTree(user, container, delegate, renderers, options) {\n    const objectTreeDelegate = new ComposedTreeDelegate(delegate);\n    const objectTreeRenderers = renderers.map(r => new CompressibleAsyncDataTreeRenderer(r, this.nodeMapper, () => this.compressibleNodeMapper, this._onDidChangeNodeSlowState.event));\n    const objectTreeOptions = asCompressibleObjectTreeOptions(options) || {};\n    return new CompressibleObjectTree(user, container, objectTreeDelegate, objectTreeRenderers, objectTreeOptions);\n  }\n  asTreeElement(node, viewStateContext) {\n    return Object.assign({\n      incompressible: this.compressionDelegate.isIncompressible(node.element)\n    }, super.asTreeElement(node, viewStateContext));\n  }\n  updateOptions() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.tree.updateOptions(options);\n  }\n  render(node, viewStateContext) {\n    if (!this.identityProvider) {\n      return super.render(node, viewStateContext);\n    }\n    // Preserve traits across compressions. Hacky but does the trick.\n    // This is hard to fix properly since it requires rewriting the traits\n    // across trees and lists. Let's just keep it this way for now.\n    const getId = element => this.identityProvider.getId(element).toString();\n    const getUncompressedIds = nodes => {\n      const result = new Set();\n      for (const node of nodes) {\n        const compressedNode = this.tree.getCompressedTreeNode(node === this.root ? null : node);\n        if (!compressedNode.element) {\n          continue;\n        }\n        for (const node of compressedNode.element.elements) {\n          result.add(getId(node.element));\n        }\n      }\n      return result;\n    };\n    const oldSelection = getUncompressedIds(this.tree.getSelection());\n    const oldFocus = getUncompressedIds(this.tree.getFocus());\n    super.render(node, viewStateContext);\n    const selection = this.getSelection();\n    let didChangeSelection = false;\n    const focus = this.getFocus();\n    let didChangeFocus = false;\n    const visit = node => {\n      const compressedNode = node.element;\n      if (compressedNode) {\n        for (let i = 0; i < compressedNode.elements.length; i++) {\n          const id = getId(compressedNode.elements[i].element);\n          const element = compressedNode.elements[compressedNode.elements.length - 1].element;\n          // github.com/microsoft/vscode/issues/85938\n          if (oldSelection.has(id) && selection.indexOf(element) === -1) {\n            selection.push(element);\n            didChangeSelection = true;\n          }\n          if (oldFocus.has(id) && focus.indexOf(element) === -1) {\n            focus.push(element);\n            didChangeFocus = true;\n          }\n        }\n      }\n      node.children.forEach(visit);\n    };\n    visit(this.tree.getCompressedTreeNode(node === this.root ? null : node));\n    if (didChangeSelection) {\n      this.setSelection(selection);\n    }\n    if (didChangeFocus) {\n      this.setFocus(focus);\n    }\n  }\n  // For compressed async data trees, `TreeVisibility.Recurse` doesn't currently work\n  // and we have to filter everything beforehand\n  // Related to #85193 and #85835\n  processChildren(children) {\n    if (this.filter) {\n      children = Iterable.filter(children, e => {\n        const result = this.filter.filter(e, 1 /* TreeVisibility.Visible */);\n        const visibility = getVisibility(result);\n        if (visibility === 2 /* TreeVisibility.Recurse */) {\n          throw new Error('Recursive tree visibility not supported in async data compressed trees');\n        }\n        return visibility === 1 /* TreeVisibility.Visible */;\n      });\n    }\n\n    return super.processChildren(children);\n  }\n}\nfunction getVisibility(filterResult) {\n  if (typeof filterResult === 'boolean') {\n    return filterResult ? 1 /* TreeVisibility.Visible */ : 0 /* TreeVisibility.Hidden */;\n  } else if (isFilterResult(filterResult)) {\n    return getVisibleState(filterResult.visibility);\n  } else {\n    return getVisibleState(filterResult);\n  }\n}","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","ElementsDragAndDropData","ComposedTreeDelegate","getVisibleState","isFilterResult","CompressibleObjectTree","ObjectTree","TreeError","WeakMapper","createCancelablePromise","Promises","timeout","Codicon","isCancellationError","onUnexpectedError","Emitter","Event","Iterable","DisposableStore","dispose","isIterable","createAsyncDataTreeNode","props","Object","assign","children","refreshPromise","undefined","stale","slow","collapsedByDefault","isAncestor","ancestor","descendant","parent","intersects","node","other","AsyncDataTreeNodeWrapper","constructor","element","map","depth","visibleChildrenCount","visibleChildIndex","collapsible","collapsed","visible","filterData","AsyncDataTreeRenderer","renderer","nodeMapper","onDidChangeTwistieState","renderedNodes","Map","templateId","renderTemplate","container","templateData","renderElement","index","height","renderTwistie","twistieElement","classList","add","treeItemLoading","classNamesArray","remove","disposeElement","_a","_b","call","disposeTemplate","clear","asTreeEvent","browserEvent","elements","asTreeMouseEvent","target","AsyncDataTreeElementsDragAndDropData","data","asAsyncDataTreeDragAndDropData","AsyncDataTreeNodeListDragAndDrop","dnd","getDragURI","getDragLabel","nodes","originalEvent","onDragStart","onDragOver","targetNode","targetIndex","raw","drop","onDragEnd","asObjectTreeOptions","options","collapseByDefault","identityProvider","getId","el","multipleSelectionController","isSelectionSingleChangeEvent","isSelectionRangeChangeEvent","accessibilityProvider","getPosInSet","getSetSize","getRole","isChecked","getAriaLabel","getWidgetAriaLabel","getWidgetRole","getAriaLevel","getActiveDescendantId","filter","parentVisibility","keyboardNavigationLabelProvider","getKeyboardNavigationLabel","sorter","expandOnlyOnTwistieClick","additionalScrollHeight","dfs","fn","forEach","child","AsyncDataTree","user","delegate","renderers","dataSource","subTreeRefreshPromises","refreshPromises","_onDidRender","_onDidChangeNodeSlowState","disposables","autoExpandSingleChildren","tree","createTree","onDidChangeFindMode","root","hasChildren","id","set","onDidChangeCollapseState","_onDidChangeCollapseState","onDidChangeFocus","onDidChangeSelection","onMouseDblClick","onPointer","onDidFocus","onDidChangeModel","onDidChangeFindOpenState","onDidDispose","objectTreeDelegate","objectTreeRenderers","r","event","objectTreeOptions","updateOptions","getHTMLElement","scrollTop","domFocus","layout","width","style","styles","getInput","setInput","input","viewState","promise","cancel","viewStateContext","focus","selection","_updateChildren","setFocus","setSelection","recursive","rerender","toPromise","getDataNode","refreshAndRenderNode","getNode","dataNode","collapse","expand","hasElement","isCollapsible","isCollapsed","getSelection","n","getFocus","reveal","relativeTop","getParentElement","getFirstElementChild","get","refreshNode","render","treeNode","doRefreshSubTree","c","finally","delete","childrenToRefresh","doRefreshNode","settled","childrenPromise","empty","doGetChildren","slowTimeout","fire","_","setChildren","err","getChildren","processChildren","deep","catch","childrenElementsIterable","childrenElements","length","nodesToForget","childrenTreeNodesById","asyncDataTreeNode","push","toString","splice","childAsyncDataTreeNode","indexOf","expanded","values","asTreeElement","diffIdentityProvider","setCollapsible","sort","compare","bind","CompressibleAsyncDataTreeNodeWrapper","incompressible","CompressibleAsyncDataTreeRenderer","compressibleNodeMapperProvider","renderCompressedElements","disposeCompressedElements","asCompressibleObjectTreeOptions","getCompressedNodeKeyboardNavigationLabel","els","CompressibleAsyncDataTree","virtualDelegate","compressionDelegate","compressibleNodeMapper","isIncompressible","getUncompressedIds","Set","compressedNode","getCompressedTreeNode","oldSelection","oldFocus","didChangeSelection","didChangeFocus","visit","i","has","visibility","getVisibility","Error","filterResult"],"sources":["/home/deathblade287/Desktop/AI-MODELS-TESTING/react-app/node_modules/monaco-editor/esm/vs/base/browser/ui/tree/asyncDataTree.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ElementsDragAndDropData } from '../list/listView.js';\nimport { ComposedTreeDelegate } from './abstractTree.js';\nimport { getVisibleState, isFilterResult } from './indexTreeModel.js';\nimport { CompressibleObjectTree, ObjectTree } from './objectTree.js';\nimport { TreeError, WeakMapper } from './tree.js';\nimport { createCancelablePromise, Promises, timeout } from '../../../common/async.js';\nimport { Codicon } from '../../../common/codicons.js';\nimport { isCancellationError, onUnexpectedError } from '../../../common/errors.js';\nimport { Emitter, Event } from '../../../common/event.js';\nimport { Iterable } from '../../../common/iterator.js';\nimport { DisposableStore, dispose } from '../../../common/lifecycle.js';\nimport { isIterable } from '../../../common/types.js';\nfunction createAsyncDataTreeNode(props) {\n    return Object.assign(Object.assign({}, props), { children: [], refreshPromise: undefined, stale: true, slow: false, collapsedByDefault: undefined });\n}\nfunction isAncestor(ancestor, descendant) {\n    if (!descendant.parent) {\n        return false;\n    }\n    else if (descendant.parent === ancestor) {\n        return true;\n    }\n    else {\n        return isAncestor(ancestor, descendant.parent);\n    }\n}\nfunction intersects(node, other) {\n    return node === other || isAncestor(node, other) || isAncestor(other, node);\n}\nclass AsyncDataTreeNodeWrapper {\n    constructor(node) {\n        this.node = node;\n    }\n    get element() { return this.node.element.element; }\n    get children() { return this.node.children.map(node => new AsyncDataTreeNodeWrapper(node)); }\n    get depth() { return this.node.depth; }\n    get visibleChildrenCount() { return this.node.visibleChildrenCount; }\n    get visibleChildIndex() { return this.node.visibleChildIndex; }\n    get collapsible() { return this.node.collapsible; }\n    get collapsed() { return this.node.collapsed; }\n    get visible() { return this.node.visible; }\n    get filterData() { return this.node.filterData; }\n}\nclass AsyncDataTreeRenderer {\n    constructor(renderer, nodeMapper, onDidChangeTwistieState) {\n        this.renderer = renderer;\n        this.nodeMapper = nodeMapper;\n        this.onDidChangeTwistieState = onDidChangeTwistieState;\n        this.renderedNodes = new Map();\n        this.templateId = renderer.templateId;\n    }\n    renderTemplate(container) {\n        const templateData = this.renderer.renderTemplate(container);\n        return { templateData };\n    }\n    renderElement(node, index, templateData, height) {\n        this.renderer.renderElement(this.nodeMapper.map(node), index, templateData.templateData, height);\n    }\n    renderTwistie(element, twistieElement) {\n        if (element.slow) {\n            twistieElement.classList.add(...Codicon.treeItemLoading.classNamesArray);\n            return true;\n        }\n        else {\n            twistieElement.classList.remove(...Codicon.treeItemLoading.classNamesArray);\n            return false;\n        }\n    }\n    disposeElement(node, index, templateData, height) {\n        var _a, _b;\n        (_b = (_a = this.renderer).disposeElement) === null || _b === void 0 ? void 0 : _b.call(_a, this.nodeMapper.map(node), index, templateData.templateData, height);\n    }\n    disposeTemplate(templateData) {\n        this.renderer.disposeTemplate(templateData.templateData);\n    }\n    dispose() {\n        this.renderedNodes.clear();\n    }\n}\nfunction asTreeEvent(e) {\n    return {\n        browserEvent: e.browserEvent,\n        elements: e.elements.map(e => e.element)\n    };\n}\nfunction asTreeMouseEvent(e) {\n    return {\n        browserEvent: e.browserEvent,\n        element: e.element && e.element.element,\n        target: e.target\n    };\n}\nclass AsyncDataTreeElementsDragAndDropData extends ElementsDragAndDropData {\n    constructor(data) {\n        super(data.elements.map(node => node.element));\n        this.data = data;\n    }\n}\nfunction asAsyncDataTreeDragAndDropData(data) {\n    if (data instanceof ElementsDragAndDropData) {\n        return new AsyncDataTreeElementsDragAndDropData(data);\n    }\n    return data;\n}\nclass AsyncDataTreeNodeListDragAndDrop {\n    constructor(dnd) {\n        this.dnd = dnd;\n    }\n    getDragURI(node) {\n        return this.dnd.getDragURI(node.element);\n    }\n    getDragLabel(nodes, originalEvent) {\n        if (this.dnd.getDragLabel) {\n            return this.dnd.getDragLabel(nodes.map(node => node.element), originalEvent);\n        }\n        return undefined;\n    }\n    onDragStart(data, originalEvent) {\n        var _a, _b;\n        (_b = (_a = this.dnd).onDragStart) === null || _b === void 0 ? void 0 : _b.call(_a, asAsyncDataTreeDragAndDropData(data), originalEvent);\n    }\n    onDragOver(data, targetNode, targetIndex, originalEvent, raw = true) {\n        return this.dnd.onDragOver(asAsyncDataTreeDragAndDropData(data), targetNode && targetNode.element, targetIndex, originalEvent);\n    }\n    drop(data, targetNode, targetIndex, originalEvent) {\n        this.dnd.drop(asAsyncDataTreeDragAndDropData(data), targetNode && targetNode.element, targetIndex, originalEvent);\n    }\n    onDragEnd(originalEvent) {\n        var _a, _b;\n        (_b = (_a = this.dnd).onDragEnd) === null || _b === void 0 ? void 0 : _b.call(_a, originalEvent);\n    }\n}\nfunction asObjectTreeOptions(options) {\n    return options && Object.assign(Object.assign({}, options), { collapseByDefault: true, identityProvider: options.identityProvider && {\n            getId(el) {\n                return options.identityProvider.getId(el.element);\n            }\n        }, dnd: options.dnd && new AsyncDataTreeNodeListDragAndDrop(options.dnd), multipleSelectionController: options.multipleSelectionController && {\n            isSelectionSingleChangeEvent(e) {\n                return options.multipleSelectionController.isSelectionSingleChangeEvent(Object.assign(Object.assign({}, e), { element: e.element }));\n            },\n            isSelectionRangeChangeEvent(e) {\n                return options.multipleSelectionController.isSelectionRangeChangeEvent(Object.assign(Object.assign({}, e), { element: e.element }));\n            }\n        }, accessibilityProvider: options.accessibilityProvider && Object.assign(Object.assign({}, options.accessibilityProvider), { getPosInSet: undefined, getSetSize: undefined, getRole: options.accessibilityProvider.getRole ? (el) => {\n                return options.accessibilityProvider.getRole(el.element);\n            } : () => 'treeitem', isChecked: options.accessibilityProvider.isChecked ? (e) => {\n                var _a;\n                return !!((_a = options.accessibilityProvider) === null || _a === void 0 ? void 0 : _a.isChecked(e.element));\n            } : undefined, getAriaLabel(e) {\n                return options.accessibilityProvider.getAriaLabel(e.element);\n            },\n            getWidgetAriaLabel() {\n                return options.accessibilityProvider.getWidgetAriaLabel();\n            }, getWidgetRole: options.accessibilityProvider.getWidgetRole ? () => options.accessibilityProvider.getWidgetRole() : () => 'tree', getAriaLevel: options.accessibilityProvider.getAriaLevel && (node => {\n                return options.accessibilityProvider.getAriaLevel(node.element);\n            }), getActiveDescendantId: options.accessibilityProvider.getActiveDescendantId && (node => {\n                return options.accessibilityProvider.getActiveDescendantId(node.element);\n            }) }), filter: options.filter && {\n            filter(e, parentVisibility) {\n                return options.filter.filter(e.element, parentVisibility);\n            }\n        }, keyboardNavigationLabelProvider: options.keyboardNavigationLabelProvider && Object.assign(Object.assign({}, options.keyboardNavigationLabelProvider), { getKeyboardNavigationLabel(e) {\n                return options.keyboardNavigationLabelProvider.getKeyboardNavigationLabel(e.element);\n            } }), sorter: undefined, expandOnlyOnTwistieClick: typeof options.expandOnlyOnTwistieClick === 'undefined' ? undefined : (typeof options.expandOnlyOnTwistieClick !== 'function' ? options.expandOnlyOnTwistieClick : (e => options.expandOnlyOnTwistieClick(e.element))), additionalScrollHeight: options.additionalScrollHeight });\n}\nfunction dfs(node, fn) {\n    fn(node);\n    node.children.forEach(child => dfs(child, fn));\n}\nexport class AsyncDataTree {\n    constructor(user, container, delegate, renderers, dataSource, options = {}) {\n        this.user = user;\n        this.dataSource = dataSource;\n        this.nodes = new Map();\n        this.subTreeRefreshPromises = new Map();\n        this.refreshPromises = new Map();\n        this._onDidRender = new Emitter();\n        this._onDidChangeNodeSlowState = new Emitter();\n        this.nodeMapper = new WeakMapper(node => new AsyncDataTreeNodeWrapper(node));\n        this.disposables = new DisposableStore();\n        this.identityProvider = options.identityProvider;\n        this.autoExpandSingleChildren = typeof options.autoExpandSingleChildren === 'undefined' ? false : options.autoExpandSingleChildren;\n        this.sorter = options.sorter;\n        this.collapseByDefault = options.collapseByDefault;\n        this.tree = this.createTree(user, container, delegate, renderers, options);\n        this.onDidChangeFindMode = this.tree.onDidChangeFindMode;\n        this.root = createAsyncDataTreeNode({\n            element: undefined,\n            parent: null,\n            hasChildren: true\n        });\n        if (this.identityProvider) {\n            this.root = Object.assign(Object.assign({}, this.root), { id: null });\n        }\n        this.nodes.set(null, this.root);\n        this.tree.onDidChangeCollapseState(this._onDidChangeCollapseState, this, this.disposables);\n    }\n    get onDidChangeFocus() { return Event.map(this.tree.onDidChangeFocus, asTreeEvent); }\n    get onDidChangeSelection() { return Event.map(this.tree.onDidChangeSelection, asTreeEvent); }\n    get onMouseDblClick() { return Event.map(this.tree.onMouseDblClick, asTreeMouseEvent); }\n    get onPointer() { return Event.map(this.tree.onPointer, asTreeMouseEvent); }\n    get onDidFocus() { return this.tree.onDidFocus; }\n    get onDidChangeModel() { return this.tree.onDidChangeModel; }\n    get onDidChangeCollapseState() { return this.tree.onDidChangeCollapseState; }\n    get onDidChangeFindOpenState() { return this.tree.onDidChangeFindOpenState; }\n    get onDidDispose() { return this.tree.onDidDispose; }\n    createTree(user, container, delegate, renderers, options) {\n        const objectTreeDelegate = new ComposedTreeDelegate(delegate);\n        const objectTreeRenderers = renderers.map(r => new AsyncDataTreeRenderer(r, this.nodeMapper, this._onDidChangeNodeSlowState.event));\n        const objectTreeOptions = asObjectTreeOptions(options) || {};\n        return new ObjectTree(user, container, objectTreeDelegate, objectTreeRenderers, objectTreeOptions);\n    }\n    updateOptions(options = {}) {\n        this.tree.updateOptions(options);\n    }\n    // Widget\n    getHTMLElement() {\n        return this.tree.getHTMLElement();\n    }\n    get scrollTop() {\n        return this.tree.scrollTop;\n    }\n    set scrollTop(scrollTop) {\n        this.tree.scrollTop = scrollTop;\n    }\n    domFocus() {\n        this.tree.domFocus();\n    }\n    layout(height, width) {\n        this.tree.layout(height, width);\n    }\n    style(styles) {\n        this.tree.style(styles);\n    }\n    // Model\n    getInput() {\n        return this.root.element;\n    }\n    setInput(input, viewState) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.refreshPromises.forEach(promise => promise.cancel());\n            this.refreshPromises.clear();\n            this.root.element = input;\n            const viewStateContext = viewState && { viewState, focus: [], selection: [] };\n            yield this._updateChildren(input, true, false, viewStateContext);\n            if (viewStateContext) {\n                this.tree.setFocus(viewStateContext.focus);\n                this.tree.setSelection(viewStateContext.selection);\n            }\n            if (viewState && typeof viewState.scrollTop === 'number') {\n                this.scrollTop = viewState.scrollTop;\n            }\n        });\n    }\n    _updateChildren(element = this.root.element, recursive = true, rerender = false, viewStateContext, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (typeof this.root.element === 'undefined') {\n                throw new TreeError(this.user, 'Tree input not set');\n            }\n            if (this.root.refreshPromise) {\n                yield this.root.refreshPromise;\n                yield Event.toPromise(this._onDidRender.event);\n            }\n            const node = this.getDataNode(element);\n            yield this.refreshAndRenderNode(node, recursive, viewStateContext, options);\n            if (rerender) {\n                try {\n                    this.tree.rerender(node);\n                }\n                catch (_a) {\n                    // missing nodes are fine, this could've resulted from\n                    // parallel refresh calls, removing `node` altogether\n                }\n            }\n        });\n    }\n    // View\n    rerender(element) {\n        if (element === undefined || element === this.root.element) {\n            this.tree.rerender();\n            return;\n        }\n        const node = this.getDataNode(element);\n        this.tree.rerender(node);\n    }\n    // Tree\n    getNode(element = this.root.element) {\n        const dataNode = this.getDataNode(element);\n        const node = this.tree.getNode(dataNode === this.root ? null : dataNode);\n        return this.nodeMapper.map(node);\n    }\n    collapse(element, recursive = false) {\n        const node = this.getDataNode(element);\n        return this.tree.collapse(node === this.root ? null : node, recursive);\n    }\n    expand(element, recursive = false) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (typeof this.root.element === 'undefined') {\n                throw new TreeError(this.user, 'Tree input not set');\n            }\n            if (this.root.refreshPromise) {\n                yield this.root.refreshPromise;\n                yield Event.toPromise(this._onDidRender.event);\n            }\n            const node = this.getDataNode(element);\n            if (this.tree.hasElement(node) && !this.tree.isCollapsible(node)) {\n                return false;\n            }\n            if (node.refreshPromise) {\n                yield this.root.refreshPromise;\n                yield Event.toPromise(this._onDidRender.event);\n            }\n            if (node !== this.root && !node.refreshPromise && !this.tree.isCollapsed(node)) {\n                return false;\n            }\n            const result = this.tree.expand(node === this.root ? null : node, recursive);\n            if (node.refreshPromise) {\n                yield this.root.refreshPromise;\n                yield Event.toPromise(this._onDidRender.event);\n            }\n            return result;\n        });\n    }\n    setSelection(elements, browserEvent) {\n        const nodes = elements.map(e => this.getDataNode(e));\n        this.tree.setSelection(nodes, browserEvent);\n    }\n    getSelection() {\n        const nodes = this.tree.getSelection();\n        return nodes.map(n => n.element);\n    }\n    setFocus(elements, browserEvent) {\n        const nodes = elements.map(e => this.getDataNode(e));\n        this.tree.setFocus(nodes, browserEvent);\n    }\n    getFocus() {\n        const nodes = this.tree.getFocus();\n        return nodes.map(n => n.element);\n    }\n    reveal(element, relativeTop) {\n        this.tree.reveal(this.getDataNode(element), relativeTop);\n    }\n    // Tree navigation\n    getParentElement(element) {\n        const node = this.tree.getParentElement(this.getDataNode(element));\n        return (node && node.element);\n    }\n    getFirstElementChild(element = this.root.element) {\n        const dataNode = this.getDataNode(element);\n        const node = this.tree.getFirstElementChild(dataNode === this.root ? null : dataNode);\n        return (node && node.element);\n    }\n    // Implementation\n    getDataNode(element) {\n        const node = this.nodes.get((element === this.root.element ? null : element));\n        if (!node) {\n            throw new TreeError(this.user, `Data tree node not found: ${element}`);\n        }\n        return node;\n    }\n    refreshAndRenderNode(node, recursive, viewStateContext, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.refreshNode(node, recursive, viewStateContext);\n            this.render(node, viewStateContext, options);\n        });\n    }\n    refreshNode(node, recursive, viewStateContext) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let result;\n            this.subTreeRefreshPromises.forEach((refreshPromise, refreshNode) => {\n                if (!result && intersects(refreshNode, node)) {\n                    result = refreshPromise.then(() => this.refreshNode(node, recursive, viewStateContext));\n                }\n            });\n            if (result) {\n                return result;\n            }\n            if (node !== this.root) {\n                const treeNode = this.tree.getNode(node);\n                if (treeNode.collapsed) {\n                    node.hasChildren = !!this.dataSource.hasChildren(node.element);\n                    node.stale = true;\n                    return;\n                }\n            }\n            return this.doRefreshSubTree(node, recursive, viewStateContext);\n        });\n    }\n    doRefreshSubTree(node, recursive, viewStateContext) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let done;\n            node.refreshPromise = new Promise(c => done = c);\n            this.subTreeRefreshPromises.set(node, node.refreshPromise);\n            node.refreshPromise.finally(() => {\n                node.refreshPromise = undefined;\n                this.subTreeRefreshPromises.delete(node);\n            });\n            try {\n                const childrenToRefresh = yield this.doRefreshNode(node, recursive, viewStateContext);\n                node.stale = false;\n                yield Promises.settled(childrenToRefresh.map(child => this.doRefreshSubTree(child, recursive, viewStateContext)));\n            }\n            finally {\n                done();\n            }\n        });\n    }\n    doRefreshNode(node, recursive, viewStateContext) {\n        return __awaiter(this, void 0, void 0, function* () {\n            node.hasChildren = !!this.dataSource.hasChildren(node.element);\n            let childrenPromise;\n            if (!node.hasChildren) {\n                childrenPromise = Promise.resolve(Iterable.empty());\n            }\n            else {\n                const children = this.doGetChildren(node);\n                if (isIterable(children)) {\n                    childrenPromise = Promise.resolve(children);\n                }\n                else {\n                    const slowTimeout = timeout(800);\n                    slowTimeout.then(() => {\n                        node.slow = true;\n                        this._onDidChangeNodeSlowState.fire(node);\n                    }, _ => null);\n                    childrenPromise = children.finally(() => slowTimeout.cancel());\n                }\n            }\n            try {\n                const children = yield childrenPromise;\n                return this.setChildren(node, children, recursive, viewStateContext);\n            }\n            catch (err) {\n                if (node !== this.root && this.tree.hasElement(node)) {\n                    this.tree.collapse(node);\n                }\n                if (isCancellationError(err)) {\n                    return [];\n                }\n                throw err;\n            }\n            finally {\n                if (node.slow) {\n                    node.slow = false;\n                    this._onDidChangeNodeSlowState.fire(node);\n                }\n            }\n        });\n    }\n    doGetChildren(node) {\n        let result = this.refreshPromises.get(node);\n        if (result) {\n            return result;\n        }\n        const children = this.dataSource.getChildren(node.element);\n        if (isIterable(children)) {\n            return this.processChildren(children);\n        }\n        else {\n            result = createCancelablePromise(() => __awaiter(this, void 0, void 0, function* () { return this.processChildren(yield children); }));\n            this.refreshPromises.set(node, result);\n            return result.finally(() => { this.refreshPromises.delete(node); });\n        }\n    }\n    _onDidChangeCollapseState({ node, deep }) {\n        if (node.element === null) {\n            return;\n        }\n        if (!node.collapsed && node.element.stale) {\n            if (deep) {\n                this.collapse(node.element.element);\n            }\n            else {\n                this.refreshAndRenderNode(node.element, false)\n                    .catch(onUnexpectedError);\n            }\n        }\n    }\n    setChildren(node, childrenElementsIterable, recursive, viewStateContext) {\n        const childrenElements = [...childrenElementsIterable];\n        // perf: if the node was and still is a leaf, avoid all this hassle\n        if (node.children.length === 0 && childrenElements.length === 0) {\n            return [];\n        }\n        const nodesToForget = new Map();\n        const childrenTreeNodesById = new Map();\n        for (const child of node.children) {\n            nodesToForget.set(child.element, child);\n            if (this.identityProvider) {\n                const collapsed = this.tree.isCollapsed(child);\n                childrenTreeNodesById.set(child.id, { node: child, collapsed });\n            }\n        }\n        const childrenToRefresh = [];\n        const children = childrenElements.map(element => {\n            const hasChildren = !!this.dataSource.hasChildren(element);\n            if (!this.identityProvider) {\n                const asyncDataTreeNode = createAsyncDataTreeNode({ element, parent: node, hasChildren });\n                if (hasChildren && this.collapseByDefault && !this.collapseByDefault(element)) {\n                    asyncDataTreeNode.collapsedByDefault = false;\n                    childrenToRefresh.push(asyncDataTreeNode);\n                }\n                return asyncDataTreeNode;\n            }\n            const id = this.identityProvider.getId(element).toString();\n            const result = childrenTreeNodesById.get(id);\n            if (result) {\n                const asyncDataTreeNode = result.node;\n                nodesToForget.delete(asyncDataTreeNode.element);\n                this.nodes.delete(asyncDataTreeNode.element);\n                this.nodes.set(element, asyncDataTreeNode);\n                asyncDataTreeNode.element = element;\n                asyncDataTreeNode.hasChildren = hasChildren;\n                if (recursive) {\n                    if (result.collapsed) {\n                        asyncDataTreeNode.children.forEach(node => dfs(node, node => this.nodes.delete(node.element)));\n                        asyncDataTreeNode.children.splice(0, asyncDataTreeNode.children.length);\n                        asyncDataTreeNode.stale = true;\n                    }\n                    else {\n                        childrenToRefresh.push(asyncDataTreeNode);\n                    }\n                }\n                else if (hasChildren && this.collapseByDefault && !this.collapseByDefault(element)) {\n                    asyncDataTreeNode.collapsedByDefault = false;\n                    childrenToRefresh.push(asyncDataTreeNode);\n                }\n                return asyncDataTreeNode;\n            }\n            const childAsyncDataTreeNode = createAsyncDataTreeNode({ element, parent: node, id, hasChildren });\n            if (viewStateContext && viewStateContext.viewState.focus && viewStateContext.viewState.focus.indexOf(id) > -1) {\n                viewStateContext.focus.push(childAsyncDataTreeNode);\n            }\n            if (viewStateContext && viewStateContext.viewState.selection && viewStateContext.viewState.selection.indexOf(id) > -1) {\n                viewStateContext.selection.push(childAsyncDataTreeNode);\n            }\n            if (viewStateContext && viewStateContext.viewState.expanded && viewStateContext.viewState.expanded.indexOf(id) > -1) {\n                childrenToRefresh.push(childAsyncDataTreeNode);\n            }\n            else if (hasChildren && this.collapseByDefault && !this.collapseByDefault(element)) {\n                childAsyncDataTreeNode.collapsedByDefault = false;\n                childrenToRefresh.push(childAsyncDataTreeNode);\n            }\n            return childAsyncDataTreeNode;\n        });\n        for (const node of nodesToForget.values()) {\n            dfs(node, node => this.nodes.delete(node.element));\n        }\n        for (const child of children) {\n            this.nodes.set(child.element, child);\n        }\n        node.children.splice(0, node.children.length, ...children);\n        // TODO@joao this doesn't take filter into account\n        if (node !== this.root && this.autoExpandSingleChildren && children.length === 1 && childrenToRefresh.length === 0) {\n            children[0].collapsedByDefault = false;\n            childrenToRefresh.push(children[0]);\n        }\n        return childrenToRefresh;\n    }\n    render(node, viewStateContext, options) {\n        const children = node.children.map(node => this.asTreeElement(node, viewStateContext));\n        const objectTreeOptions = options && Object.assign(Object.assign({}, options), { diffIdentityProvider: options.diffIdentityProvider && {\n                getId(node) {\n                    return options.diffIdentityProvider.getId(node.element);\n                }\n            } });\n        this.tree.setChildren(node === this.root ? null : node, children, objectTreeOptions);\n        if (node !== this.root) {\n            this.tree.setCollapsible(node, node.hasChildren);\n        }\n        this._onDidRender.fire();\n    }\n    asTreeElement(node, viewStateContext) {\n        if (node.stale) {\n            return {\n                element: node,\n                collapsible: node.hasChildren,\n                collapsed: true\n            };\n        }\n        let collapsed;\n        if (viewStateContext && viewStateContext.viewState.expanded && node.id && viewStateContext.viewState.expanded.indexOf(node.id) > -1) {\n            collapsed = false;\n        }\n        else {\n            collapsed = node.collapsedByDefault;\n        }\n        node.collapsedByDefault = undefined;\n        return {\n            element: node,\n            children: node.hasChildren ? Iterable.map(node.children, child => this.asTreeElement(child, viewStateContext)) : [],\n            collapsible: node.hasChildren,\n            collapsed\n        };\n    }\n    processChildren(children) {\n        if (this.sorter) {\n            children = [...children].sort(this.sorter.compare.bind(this.sorter));\n        }\n        return children;\n    }\n    dispose() {\n        this.disposables.dispose();\n    }\n}\nclass CompressibleAsyncDataTreeNodeWrapper {\n    constructor(node) {\n        this.node = node;\n    }\n    get element() {\n        return {\n            elements: this.node.element.elements.map(e => e.element),\n            incompressible: this.node.element.incompressible\n        };\n    }\n    get children() { return this.node.children.map(node => new CompressibleAsyncDataTreeNodeWrapper(node)); }\n    get depth() { return this.node.depth; }\n    get visibleChildrenCount() { return this.node.visibleChildrenCount; }\n    get visibleChildIndex() { return this.node.visibleChildIndex; }\n    get collapsible() { return this.node.collapsible; }\n    get collapsed() { return this.node.collapsed; }\n    get visible() { return this.node.visible; }\n    get filterData() { return this.node.filterData; }\n}\nclass CompressibleAsyncDataTreeRenderer {\n    constructor(renderer, nodeMapper, compressibleNodeMapperProvider, onDidChangeTwistieState) {\n        this.renderer = renderer;\n        this.nodeMapper = nodeMapper;\n        this.compressibleNodeMapperProvider = compressibleNodeMapperProvider;\n        this.onDidChangeTwistieState = onDidChangeTwistieState;\n        this.renderedNodes = new Map();\n        this.disposables = [];\n        this.templateId = renderer.templateId;\n    }\n    renderTemplate(container) {\n        const templateData = this.renderer.renderTemplate(container);\n        return { templateData };\n    }\n    renderElement(node, index, templateData, height) {\n        this.renderer.renderElement(this.nodeMapper.map(node), index, templateData.templateData, height);\n    }\n    renderCompressedElements(node, index, templateData, height) {\n        this.renderer.renderCompressedElements(this.compressibleNodeMapperProvider().map(node), index, templateData.templateData, height);\n    }\n    renderTwistie(element, twistieElement) {\n        if (element.slow) {\n            twistieElement.classList.add(...Codicon.treeItemLoading.classNamesArray);\n            return true;\n        }\n        else {\n            twistieElement.classList.remove(...Codicon.treeItemLoading.classNamesArray);\n            return false;\n        }\n    }\n    disposeElement(node, index, templateData, height) {\n        var _a, _b;\n        (_b = (_a = this.renderer).disposeElement) === null || _b === void 0 ? void 0 : _b.call(_a, this.nodeMapper.map(node), index, templateData.templateData, height);\n    }\n    disposeCompressedElements(node, index, templateData, height) {\n        var _a, _b;\n        (_b = (_a = this.renderer).disposeCompressedElements) === null || _b === void 0 ? void 0 : _b.call(_a, this.compressibleNodeMapperProvider().map(node), index, templateData.templateData, height);\n    }\n    disposeTemplate(templateData) {\n        this.renderer.disposeTemplate(templateData.templateData);\n    }\n    dispose() {\n        this.renderedNodes.clear();\n        this.disposables = dispose(this.disposables);\n    }\n}\nfunction asCompressibleObjectTreeOptions(options) {\n    const objectTreeOptions = options && asObjectTreeOptions(options);\n    return objectTreeOptions && Object.assign(Object.assign({}, objectTreeOptions), { keyboardNavigationLabelProvider: objectTreeOptions.keyboardNavigationLabelProvider && Object.assign(Object.assign({}, objectTreeOptions.keyboardNavigationLabelProvider), { getCompressedNodeKeyboardNavigationLabel(els) {\n                return options.keyboardNavigationLabelProvider.getCompressedNodeKeyboardNavigationLabel(els.map(e => e.element));\n            } }) });\n}\nexport class CompressibleAsyncDataTree extends AsyncDataTree {\n    constructor(user, container, virtualDelegate, compressionDelegate, renderers, dataSource, options = {}) {\n        super(user, container, virtualDelegate, renderers, dataSource, options);\n        this.compressionDelegate = compressionDelegate;\n        this.compressibleNodeMapper = new WeakMapper(node => new CompressibleAsyncDataTreeNodeWrapper(node));\n        this.filter = options.filter;\n    }\n    createTree(user, container, delegate, renderers, options) {\n        const objectTreeDelegate = new ComposedTreeDelegate(delegate);\n        const objectTreeRenderers = renderers.map(r => new CompressibleAsyncDataTreeRenderer(r, this.nodeMapper, () => this.compressibleNodeMapper, this._onDidChangeNodeSlowState.event));\n        const objectTreeOptions = asCompressibleObjectTreeOptions(options) || {};\n        return new CompressibleObjectTree(user, container, objectTreeDelegate, objectTreeRenderers, objectTreeOptions);\n    }\n    asTreeElement(node, viewStateContext) {\n        return Object.assign({ incompressible: this.compressionDelegate.isIncompressible(node.element) }, super.asTreeElement(node, viewStateContext));\n    }\n    updateOptions(options = {}) {\n        this.tree.updateOptions(options);\n    }\n    render(node, viewStateContext) {\n        if (!this.identityProvider) {\n            return super.render(node, viewStateContext);\n        }\n        // Preserve traits across compressions. Hacky but does the trick.\n        // This is hard to fix properly since it requires rewriting the traits\n        // across trees and lists. Let's just keep it this way for now.\n        const getId = (element) => this.identityProvider.getId(element).toString();\n        const getUncompressedIds = (nodes) => {\n            const result = new Set();\n            for (const node of nodes) {\n                const compressedNode = this.tree.getCompressedTreeNode(node === this.root ? null : node);\n                if (!compressedNode.element) {\n                    continue;\n                }\n                for (const node of compressedNode.element.elements) {\n                    result.add(getId(node.element));\n                }\n            }\n            return result;\n        };\n        const oldSelection = getUncompressedIds(this.tree.getSelection());\n        const oldFocus = getUncompressedIds(this.tree.getFocus());\n        super.render(node, viewStateContext);\n        const selection = this.getSelection();\n        let didChangeSelection = false;\n        const focus = this.getFocus();\n        let didChangeFocus = false;\n        const visit = (node) => {\n            const compressedNode = node.element;\n            if (compressedNode) {\n                for (let i = 0; i < compressedNode.elements.length; i++) {\n                    const id = getId(compressedNode.elements[i].element);\n                    const element = compressedNode.elements[compressedNode.elements.length - 1].element;\n                    // github.com/microsoft/vscode/issues/85938\n                    if (oldSelection.has(id) && selection.indexOf(element) === -1) {\n                        selection.push(element);\n                        didChangeSelection = true;\n                    }\n                    if (oldFocus.has(id) && focus.indexOf(element) === -1) {\n                        focus.push(element);\n                        didChangeFocus = true;\n                    }\n                }\n            }\n            node.children.forEach(visit);\n        };\n        visit(this.tree.getCompressedTreeNode(node === this.root ? null : node));\n        if (didChangeSelection) {\n            this.setSelection(selection);\n        }\n        if (didChangeFocus) {\n            this.setFocus(focus);\n        }\n    }\n    // For compressed async data trees, `TreeVisibility.Recurse` doesn't currently work\n    // and we have to filter everything beforehand\n    // Related to #85193 and #85835\n    processChildren(children) {\n        if (this.filter) {\n            children = Iterable.filter(children, e => {\n                const result = this.filter.filter(e, 1 /* TreeVisibility.Visible */);\n                const visibility = getVisibility(result);\n                if (visibility === 2 /* TreeVisibility.Recurse */) {\n                    throw new Error('Recursive tree visibility not supported in async data compressed trees');\n                }\n                return visibility === 1 /* TreeVisibility.Visible */;\n            });\n        }\n        return super.processChildren(children);\n    }\n}\nfunction getVisibility(filterResult) {\n    if (typeof filterResult === 'boolean') {\n        return filterResult ? 1 /* TreeVisibility.Visible */ : 0 /* TreeVisibility.Hidden */;\n    }\n    else if (isFilterResult(filterResult)) {\n        return getVisibleState(filterResult.visibility);\n    }\n    else {\n        return getVisibleState(filterResult);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}