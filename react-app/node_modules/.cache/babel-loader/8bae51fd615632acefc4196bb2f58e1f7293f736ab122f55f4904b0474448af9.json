{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport { CharacterClassifier } from '../core/characterClassifier.js';\nimport { LineInjectedText } from '../textModelEvents.js';\nimport { ModelLineProjectionData } from '../modelLineProjectionData.js';\nexport class MonospaceLineBreaksComputerFactory {\n  constructor(breakBeforeChars, breakAfterChars) {\n    this.classifier = new WrappingCharacterClassifier(breakBeforeChars, breakAfterChars);\n  }\n  static create(options) {\n    return new MonospaceLineBreaksComputerFactory(options.get(122 /* EditorOption.wordWrapBreakBeforeCharacters */), options.get(121 /* EditorOption.wordWrapBreakAfterCharacters */));\n  }\n\n  createLineBreaksComputer(fontInfo, tabSize, wrappingColumn, wrappingIndent) {\n    const requests = [];\n    const injectedTexts = [];\n    const previousBreakingData = [];\n    return {\n      addRequest: (lineText, injectedText, previousLineBreakData) => {\n        requests.push(lineText);\n        injectedTexts.push(injectedText);\n        previousBreakingData.push(previousLineBreakData);\n      },\n      finalize: () => {\n        const columnsForFullWidthChar = fontInfo.typicalFullwidthCharacterWidth / fontInfo.typicalHalfwidthCharacterWidth;\n        const result = [];\n        for (let i = 0, len = requests.length; i < len; i++) {\n          const injectedText = injectedTexts[i];\n          const previousLineBreakData = previousBreakingData[i];\n          if (previousLineBreakData && !previousLineBreakData.injectionOptions && !injectedText) {\n            result[i] = createLineBreaksFromPreviousLineBreaks(this.classifier, previousLineBreakData, requests[i], tabSize, wrappingColumn, columnsForFullWidthChar, wrappingIndent);\n          } else {\n            result[i] = createLineBreaks(this.classifier, requests[i], injectedText, tabSize, wrappingColumn, columnsForFullWidthChar, wrappingIndent);\n          }\n        }\n        arrPool1.length = 0;\n        arrPool2.length = 0;\n        return result;\n      }\n    };\n  }\n}\nclass WrappingCharacterClassifier extends CharacterClassifier {\n  constructor(BREAK_BEFORE, BREAK_AFTER) {\n    super(0 /* CharacterClass.NONE */);\n    for (let i = 0; i < BREAK_BEFORE.length; i++) {\n      this.set(BREAK_BEFORE.charCodeAt(i), 1 /* CharacterClass.BREAK_BEFORE */);\n    }\n\n    for (let i = 0; i < BREAK_AFTER.length; i++) {\n      this.set(BREAK_AFTER.charCodeAt(i), 2 /* CharacterClass.BREAK_AFTER */);\n    }\n  }\n\n  get(charCode) {\n    if (charCode >= 0 && charCode < 256) {\n      return this._asciiMap[charCode];\n    } else {\n      // Initialize CharacterClass.BREAK_IDEOGRAPHIC for these Unicode ranges:\n      // 1. CJK Unified Ideographs (0x4E00 -- 0x9FFF)\n      // 2. CJK Unified Ideographs Extension A (0x3400 -- 0x4DBF)\n      // 3. Hiragana and Katakana (0x3040 -- 0x30FF)\n      if (charCode >= 0x3040 && charCode <= 0x30FF || charCode >= 0x3400 && charCode <= 0x4DBF || charCode >= 0x4E00 && charCode <= 0x9FFF) {\n        return 3 /* CharacterClass.BREAK_IDEOGRAPHIC */;\n      }\n\n      return this._map.get(charCode) || this._defaultValue;\n    }\n  }\n}\nlet arrPool1 = [];\nlet arrPool2 = [];\nfunction createLineBreaksFromPreviousLineBreaks(classifier, previousBreakingData, lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent) {\n  if (firstLineBreakColumn === -1) {\n    return null;\n  }\n  const len = lineText.length;\n  if (len <= 1) {\n    return null;\n  }\n  const prevBreakingOffsets = previousBreakingData.breakOffsets;\n  const prevBreakingOffsetsVisibleColumn = previousBreakingData.breakOffsetsVisibleColumn;\n  const wrappedTextIndentLength = computeWrappedTextIndentLength(lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent);\n  const wrappedLineBreakColumn = firstLineBreakColumn - wrappedTextIndentLength;\n  const breakingOffsets = arrPool1;\n  const breakingOffsetsVisibleColumn = arrPool2;\n  let breakingOffsetsCount = 0;\n  let lastBreakingOffset = 0;\n  let lastBreakingOffsetVisibleColumn = 0;\n  let breakingColumn = firstLineBreakColumn;\n  const prevLen = prevBreakingOffsets.length;\n  let prevIndex = 0;\n  if (prevIndex >= 0) {\n    let bestDistance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex] - breakingColumn);\n    while (prevIndex + 1 < prevLen) {\n      const distance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex + 1] - breakingColumn);\n      if (distance >= bestDistance) {\n        break;\n      }\n      bestDistance = distance;\n      prevIndex++;\n    }\n  }\n  while (prevIndex < prevLen) {\n    // Allow for prevIndex to be -1 (for the case where we hit a tab when walking backwards from the first break)\n    let prevBreakOffset = prevIndex < 0 ? 0 : prevBreakingOffsets[prevIndex];\n    let prevBreakOffsetVisibleColumn = prevIndex < 0 ? 0 : prevBreakingOffsetsVisibleColumn[prevIndex];\n    if (lastBreakingOffset > prevBreakOffset) {\n      prevBreakOffset = lastBreakingOffset;\n      prevBreakOffsetVisibleColumn = lastBreakingOffsetVisibleColumn;\n    }\n    let breakOffset = 0;\n    let breakOffsetVisibleColumn = 0;\n    let forcedBreakOffset = 0;\n    let forcedBreakOffsetVisibleColumn = 0;\n    // initially, we search as much as possible to the right (if it fits)\n    if (prevBreakOffsetVisibleColumn <= breakingColumn) {\n      let visibleColumn = prevBreakOffsetVisibleColumn;\n      let prevCharCode = prevBreakOffset === 0 ? 0 /* CharCode.Null */ : lineText.charCodeAt(prevBreakOffset - 1);\n      let prevCharCodeClass = prevBreakOffset === 0 ? 0 /* CharacterClass.NONE */ : classifier.get(prevCharCode);\n      let entireLineFits = true;\n      for (let i = prevBreakOffset; i < len; i++) {\n        const charStartOffset = i;\n        const charCode = lineText.charCodeAt(i);\n        let charCodeClass;\n        let charWidth;\n        if (strings.isHighSurrogate(charCode)) {\n          // A surrogate pair must always be considered as a single unit, so it is never to be broken\n          i++;\n          charCodeClass = 0 /* CharacterClass.NONE */;\n          charWidth = 2;\n        } else {\n          charCodeClass = classifier.get(charCode);\n          charWidth = computeCharWidth(charCode, visibleColumn, tabSize, columnsForFullWidthChar);\n        }\n        if (charStartOffset > lastBreakingOffset && canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass)) {\n          breakOffset = charStartOffset;\n          breakOffsetVisibleColumn = visibleColumn;\n        }\n        visibleColumn += charWidth;\n        // check if adding character at `i` will go over the breaking column\n        if (visibleColumn > breakingColumn) {\n          // We need to break at least before character at `i`:\n          if (charStartOffset > lastBreakingOffset) {\n            forcedBreakOffset = charStartOffset;\n            forcedBreakOffsetVisibleColumn = visibleColumn - charWidth;\n          } else {\n            // we need to advance at least by one character\n            forcedBreakOffset = i + 1;\n            forcedBreakOffsetVisibleColumn = visibleColumn;\n          }\n          if (visibleColumn - breakOffsetVisibleColumn > wrappedLineBreakColumn) {\n            // Cannot break at `breakOffset` => reset it if it was set\n            breakOffset = 0;\n          }\n          entireLineFits = false;\n          break;\n        }\n        prevCharCode = charCode;\n        prevCharCodeClass = charCodeClass;\n      }\n      if (entireLineFits) {\n        // there is no more need to break => stop the outer loop!\n        if (breakingOffsetsCount > 0) {\n          // Add last segment, no need to assign to `lastBreakingOffset` and `lastBreakingOffsetVisibleColumn`\n          breakingOffsets[breakingOffsetsCount] = prevBreakingOffsets[prevBreakingOffsets.length - 1];\n          breakingOffsetsVisibleColumn[breakingOffsetsCount] = prevBreakingOffsetsVisibleColumn[prevBreakingOffsets.length - 1];\n          breakingOffsetsCount++;\n        }\n        break;\n      }\n    }\n    if (breakOffset === 0) {\n      // must search left\n      let visibleColumn = prevBreakOffsetVisibleColumn;\n      let charCode = lineText.charCodeAt(prevBreakOffset);\n      let charCodeClass = classifier.get(charCode);\n      let hitATabCharacter = false;\n      for (let i = prevBreakOffset - 1; i >= lastBreakingOffset; i--) {\n        const charStartOffset = i + 1;\n        const prevCharCode = lineText.charCodeAt(i);\n        if (prevCharCode === 9 /* CharCode.Tab */) {\n          // cannot determine the width of a tab when going backwards, so we must go forwards\n          hitATabCharacter = true;\n          break;\n        }\n        let prevCharCodeClass;\n        let prevCharWidth;\n        if (strings.isLowSurrogate(prevCharCode)) {\n          // A surrogate pair must always be considered as a single unit, so it is never to be broken\n          i--;\n          prevCharCodeClass = 0 /* CharacterClass.NONE */;\n          prevCharWidth = 2;\n        } else {\n          prevCharCodeClass = classifier.get(prevCharCode);\n          prevCharWidth = strings.isFullWidthCharacter(prevCharCode) ? columnsForFullWidthChar : 1;\n        }\n        if (visibleColumn <= breakingColumn) {\n          if (forcedBreakOffset === 0) {\n            forcedBreakOffset = charStartOffset;\n            forcedBreakOffsetVisibleColumn = visibleColumn;\n          }\n          if (visibleColumn <= breakingColumn - wrappedLineBreakColumn) {\n            // went too far!\n            break;\n          }\n          if (canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass)) {\n            breakOffset = charStartOffset;\n            breakOffsetVisibleColumn = visibleColumn;\n            break;\n          }\n        }\n        visibleColumn -= prevCharWidth;\n        charCode = prevCharCode;\n        charCodeClass = prevCharCodeClass;\n      }\n      if (breakOffset !== 0) {\n        const remainingWidthOfNextLine = wrappedLineBreakColumn - (forcedBreakOffsetVisibleColumn - breakOffsetVisibleColumn);\n        if (remainingWidthOfNextLine <= tabSize) {\n          const charCodeAtForcedBreakOffset = lineText.charCodeAt(forcedBreakOffset);\n          let charWidth;\n          if (strings.isHighSurrogate(charCodeAtForcedBreakOffset)) {\n            // A surrogate pair must always be considered as a single unit, so it is never to be broken\n            charWidth = 2;\n          } else {\n            charWidth = computeCharWidth(charCodeAtForcedBreakOffset, forcedBreakOffsetVisibleColumn, tabSize, columnsForFullWidthChar);\n          }\n          if (remainingWidthOfNextLine - charWidth < 0) {\n            // it is not worth it to break at breakOffset, it just introduces an extra needless line!\n            breakOffset = 0;\n          }\n        }\n      }\n      if (hitATabCharacter) {\n        // cannot determine the width of a tab when going backwards, so we must go forwards from the previous break\n        prevIndex--;\n        continue;\n      }\n    }\n    if (breakOffset === 0) {\n      // Could not find a good breaking point\n      breakOffset = forcedBreakOffset;\n      breakOffsetVisibleColumn = forcedBreakOffsetVisibleColumn;\n    }\n    if (breakOffset <= lastBreakingOffset) {\n      // Make sure that we are advancing (at least one character)\n      const charCode = lineText.charCodeAt(lastBreakingOffset);\n      if (strings.isHighSurrogate(charCode)) {\n        // A surrogate pair must always be considered as a single unit, so it is never to be broken\n        breakOffset = lastBreakingOffset + 2;\n        breakOffsetVisibleColumn = lastBreakingOffsetVisibleColumn + 2;\n      } else {\n        breakOffset = lastBreakingOffset + 1;\n        breakOffsetVisibleColumn = lastBreakingOffsetVisibleColumn + computeCharWidth(charCode, lastBreakingOffsetVisibleColumn, tabSize, columnsForFullWidthChar);\n      }\n    }\n    lastBreakingOffset = breakOffset;\n    breakingOffsets[breakingOffsetsCount] = breakOffset;\n    lastBreakingOffsetVisibleColumn = breakOffsetVisibleColumn;\n    breakingOffsetsVisibleColumn[breakingOffsetsCount] = breakOffsetVisibleColumn;\n    breakingOffsetsCount++;\n    breakingColumn = breakOffsetVisibleColumn + wrappedLineBreakColumn;\n    while (prevIndex < 0 || prevIndex < prevLen && prevBreakingOffsetsVisibleColumn[prevIndex] < breakOffsetVisibleColumn) {\n      prevIndex++;\n    }\n    let bestDistance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex] - breakingColumn);\n    while (prevIndex + 1 < prevLen) {\n      const distance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex + 1] - breakingColumn);\n      if (distance >= bestDistance) {\n        break;\n      }\n      bestDistance = distance;\n      prevIndex++;\n    }\n  }\n  if (breakingOffsetsCount === 0) {\n    return null;\n  }\n  // Doing here some object reuse which ends up helping a huge deal with GC pauses!\n  breakingOffsets.length = breakingOffsetsCount;\n  breakingOffsetsVisibleColumn.length = breakingOffsetsCount;\n  arrPool1 = previousBreakingData.breakOffsets;\n  arrPool2 = previousBreakingData.breakOffsetsVisibleColumn;\n  previousBreakingData.breakOffsets = breakingOffsets;\n  previousBreakingData.breakOffsetsVisibleColumn = breakingOffsetsVisibleColumn;\n  previousBreakingData.wrappedTextIndentLength = wrappedTextIndentLength;\n  return previousBreakingData;\n}\nfunction createLineBreaks(classifier, _lineText, injectedTexts, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent) {\n  const lineText = LineInjectedText.applyInjectedText(_lineText, injectedTexts);\n  let injectionOptions;\n  let injectionOffsets;\n  if (injectedTexts && injectedTexts.length > 0) {\n    injectionOptions = injectedTexts.map(t => t.options);\n    injectionOffsets = injectedTexts.map(text => text.column - 1);\n  } else {\n    injectionOptions = null;\n    injectionOffsets = null;\n  }\n  if (firstLineBreakColumn === -1) {\n    if (!injectionOptions) {\n      return null;\n    }\n    // creating a `LineBreakData` with an invalid `breakOffsetsVisibleColumn` is OK\n    // because `breakOffsetsVisibleColumn` will never be used because it contains injected text\n    return new ModelLineProjectionData(injectionOffsets, injectionOptions, [lineText.length], [], 0);\n  }\n  const len = lineText.length;\n  if (len <= 1) {\n    if (!injectionOptions) {\n      return null;\n    }\n    // creating a `LineBreakData` with an invalid `breakOffsetsVisibleColumn` is OK\n    // because `breakOffsetsVisibleColumn` will never be used because it contains injected text\n    return new ModelLineProjectionData(injectionOffsets, injectionOptions, [lineText.length], [], 0);\n  }\n  const wrappedTextIndentLength = computeWrappedTextIndentLength(lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent);\n  const wrappedLineBreakColumn = firstLineBreakColumn - wrappedTextIndentLength;\n  const breakingOffsets = [];\n  const breakingOffsetsVisibleColumn = [];\n  let breakingOffsetsCount = 0;\n  let breakOffset = 0;\n  let breakOffsetVisibleColumn = 0;\n  let breakingColumn = firstLineBreakColumn;\n  let prevCharCode = lineText.charCodeAt(0);\n  let prevCharCodeClass = classifier.get(prevCharCode);\n  let visibleColumn = computeCharWidth(prevCharCode, 0, tabSize, columnsForFullWidthChar);\n  let startOffset = 1;\n  if (strings.isHighSurrogate(prevCharCode)) {\n    // A surrogate pair must always be considered as a single unit, so it is never to be broken\n    visibleColumn += 1;\n    prevCharCode = lineText.charCodeAt(1);\n    prevCharCodeClass = classifier.get(prevCharCode);\n    startOffset++;\n  }\n  for (let i = startOffset; i < len; i++) {\n    const charStartOffset = i;\n    const charCode = lineText.charCodeAt(i);\n    let charCodeClass;\n    let charWidth;\n    if (strings.isHighSurrogate(charCode)) {\n      // A surrogate pair must always be considered as a single unit, so it is never to be broken\n      i++;\n      charCodeClass = 0 /* CharacterClass.NONE */;\n      charWidth = 2;\n    } else {\n      charCodeClass = classifier.get(charCode);\n      charWidth = computeCharWidth(charCode, visibleColumn, tabSize, columnsForFullWidthChar);\n    }\n    if (canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass)) {\n      breakOffset = charStartOffset;\n      breakOffsetVisibleColumn = visibleColumn;\n    }\n    visibleColumn += charWidth;\n    // check if adding character at `i` will go over the breaking column\n    if (visibleColumn > breakingColumn) {\n      // We need to break at least before character at `i`:\n      if (breakOffset === 0 || visibleColumn - breakOffsetVisibleColumn > wrappedLineBreakColumn) {\n        // Cannot break at `breakOffset`, must break at `i`\n        breakOffset = charStartOffset;\n        breakOffsetVisibleColumn = visibleColumn - charWidth;\n      }\n      breakingOffsets[breakingOffsetsCount] = breakOffset;\n      breakingOffsetsVisibleColumn[breakingOffsetsCount] = breakOffsetVisibleColumn;\n      breakingOffsetsCount++;\n      breakingColumn = breakOffsetVisibleColumn + wrappedLineBreakColumn;\n      breakOffset = 0;\n    }\n    prevCharCode = charCode;\n    prevCharCodeClass = charCodeClass;\n  }\n  if (breakingOffsetsCount === 0 && (!injectedTexts || injectedTexts.length === 0)) {\n    return null;\n  }\n  // Add last segment\n  breakingOffsets[breakingOffsetsCount] = len;\n  breakingOffsetsVisibleColumn[breakingOffsetsCount] = visibleColumn;\n  return new ModelLineProjectionData(injectionOffsets, injectionOptions, breakingOffsets, breakingOffsetsVisibleColumn, wrappedTextIndentLength);\n}\nfunction computeCharWidth(charCode, visibleColumn, tabSize, columnsForFullWidthChar) {\n  if (charCode === 9 /* CharCode.Tab */) {\n    return tabSize - visibleColumn % tabSize;\n  }\n  if (strings.isFullWidthCharacter(charCode)) {\n    return columnsForFullWidthChar;\n  }\n  if (charCode < 32) {\n    // when using `editor.renderControlCharacters`, the substitutions are often wide\n    return columnsForFullWidthChar;\n  }\n  return 1;\n}\nfunction tabCharacterWidth(visibleColumn, tabSize) {\n  return tabSize - visibleColumn % tabSize;\n}\n/**\n * Kinsoku Shori : Don't break after a leading character, like an open bracket\n * Kinsoku Shori : Don't break before a trailing character, like a period\n */\nfunction canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass) {\n  return charCode !== 32 /* CharCode.Space */ && (prevCharCodeClass === 2 /* CharacterClass.BREAK_AFTER */ && charCodeClass !== 2 /* CharacterClass.BREAK_AFTER */ // break at the end of multiple BREAK_AFTER\n  || prevCharCodeClass !== 1 /* CharacterClass.BREAK_BEFORE */ && charCodeClass === 1 /* CharacterClass.BREAK_BEFORE */ // break at the start of multiple BREAK_BEFORE\n  || prevCharCodeClass === 3 /* CharacterClass.BREAK_IDEOGRAPHIC */ && charCodeClass !== 2 /* CharacterClass.BREAK_AFTER */ || charCodeClass === 3 /* CharacterClass.BREAK_IDEOGRAPHIC */ && prevCharCodeClass !== 1 /* CharacterClass.BREAK_BEFORE */);\n}\n\nfunction computeWrappedTextIndentLength(lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent) {\n  let wrappedTextIndentLength = 0;\n  if (wrappingIndent !== 0 /* WrappingIndent.None */) {\n    const firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineText);\n    if (firstNonWhitespaceIndex !== -1) {\n      // Track existing indent\n      for (let i = 0; i < firstNonWhitespaceIndex; i++) {\n        const charWidth = lineText.charCodeAt(i) === 9 /* CharCode.Tab */ ? tabCharacterWidth(wrappedTextIndentLength, tabSize) : 1;\n        wrappedTextIndentLength += charWidth;\n      }\n      // Increase indent of continuation lines, if desired\n      const numberOfAdditionalTabs = wrappingIndent === 3 /* WrappingIndent.DeepIndent */ ? 2 : wrappingIndent === 2 /* WrappingIndent.Indent */ ? 1 : 0;\n      for (let i = 0; i < numberOfAdditionalTabs; i++) {\n        const charWidth = tabCharacterWidth(wrappedTextIndentLength, tabSize);\n        wrappedTextIndentLength += charWidth;\n      }\n      // Force sticking to beginning of line if no character would fit except for the indentation\n      if (wrappedTextIndentLength + columnsForFullWidthChar > firstLineBreakColumn) {\n        wrappedTextIndentLength = 0;\n      }\n    }\n  }\n  return wrappedTextIndentLength;\n}","map":{"version":3,"names":["strings","CharacterClassifier","LineInjectedText","ModelLineProjectionData","MonospaceLineBreaksComputerFactory","constructor","breakBeforeChars","breakAfterChars","classifier","WrappingCharacterClassifier","create","options","get","createLineBreaksComputer","fontInfo","tabSize","wrappingColumn","wrappingIndent","requests","injectedTexts","previousBreakingData","addRequest","lineText","injectedText","previousLineBreakData","push","finalize","columnsForFullWidthChar","typicalFullwidthCharacterWidth","typicalHalfwidthCharacterWidth","result","i","len","length","injectionOptions","createLineBreaksFromPreviousLineBreaks","createLineBreaks","arrPool1","arrPool2","BREAK_BEFORE","BREAK_AFTER","set","charCodeAt","charCode","_asciiMap","_map","_defaultValue","firstLineBreakColumn","prevBreakingOffsets","breakOffsets","prevBreakingOffsetsVisibleColumn","breakOffsetsVisibleColumn","wrappedTextIndentLength","computeWrappedTextIndentLength","wrappedLineBreakColumn","breakingOffsets","breakingOffsetsVisibleColumn","breakingOffsetsCount","lastBreakingOffset","lastBreakingOffsetVisibleColumn","breakingColumn","prevLen","prevIndex","bestDistance","Math","abs","distance","prevBreakOffset","prevBreakOffsetVisibleColumn","breakOffset","breakOffsetVisibleColumn","forcedBreakOffset","forcedBreakOffsetVisibleColumn","visibleColumn","prevCharCode","prevCharCodeClass","entireLineFits","charStartOffset","charCodeClass","charWidth","isHighSurrogate","computeCharWidth","canBreak","hitATabCharacter","prevCharWidth","isLowSurrogate","isFullWidthCharacter","remainingWidthOfNextLine","charCodeAtForcedBreakOffset","_lineText","applyInjectedText","injectionOffsets","map","t","text","column","startOffset","tabCharacterWidth","firstNonWhitespaceIndex","numberOfAdditionalTabs"],"sources":["/home/deathblade287/Desktop/AI-MODELS-TESTING/react-app/node_modules/monaco-editor/esm/vs/editor/common/viewModel/monospaceLineBreaksComputer.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport { CharacterClassifier } from '../core/characterClassifier.js';\nimport { LineInjectedText } from '../textModelEvents.js';\nimport { ModelLineProjectionData } from '../modelLineProjectionData.js';\nexport class MonospaceLineBreaksComputerFactory {\n    constructor(breakBeforeChars, breakAfterChars) {\n        this.classifier = new WrappingCharacterClassifier(breakBeforeChars, breakAfterChars);\n    }\n    static create(options) {\n        return new MonospaceLineBreaksComputerFactory(options.get(122 /* EditorOption.wordWrapBreakBeforeCharacters */), options.get(121 /* EditorOption.wordWrapBreakAfterCharacters */));\n    }\n    createLineBreaksComputer(fontInfo, tabSize, wrappingColumn, wrappingIndent) {\n        const requests = [];\n        const injectedTexts = [];\n        const previousBreakingData = [];\n        return {\n            addRequest: (lineText, injectedText, previousLineBreakData) => {\n                requests.push(lineText);\n                injectedTexts.push(injectedText);\n                previousBreakingData.push(previousLineBreakData);\n            },\n            finalize: () => {\n                const columnsForFullWidthChar = fontInfo.typicalFullwidthCharacterWidth / fontInfo.typicalHalfwidthCharacterWidth;\n                const result = [];\n                for (let i = 0, len = requests.length; i < len; i++) {\n                    const injectedText = injectedTexts[i];\n                    const previousLineBreakData = previousBreakingData[i];\n                    if (previousLineBreakData && !previousLineBreakData.injectionOptions && !injectedText) {\n                        result[i] = createLineBreaksFromPreviousLineBreaks(this.classifier, previousLineBreakData, requests[i], tabSize, wrappingColumn, columnsForFullWidthChar, wrappingIndent);\n                    }\n                    else {\n                        result[i] = createLineBreaks(this.classifier, requests[i], injectedText, tabSize, wrappingColumn, columnsForFullWidthChar, wrappingIndent);\n                    }\n                }\n                arrPool1.length = 0;\n                arrPool2.length = 0;\n                return result;\n            }\n        };\n    }\n}\nclass WrappingCharacterClassifier extends CharacterClassifier {\n    constructor(BREAK_BEFORE, BREAK_AFTER) {\n        super(0 /* CharacterClass.NONE */);\n        for (let i = 0; i < BREAK_BEFORE.length; i++) {\n            this.set(BREAK_BEFORE.charCodeAt(i), 1 /* CharacterClass.BREAK_BEFORE */);\n        }\n        for (let i = 0; i < BREAK_AFTER.length; i++) {\n            this.set(BREAK_AFTER.charCodeAt(i), 2 /* CharacterClass.BREAK_AFTER */);\n        }\n    }\n    get(charCode) {\n        if (charCode >= 0 && charCode < 256) {\n            return this._asciiMap[charCode];\n        }\n        else {\n            // Initialize CharacterClass.BREAK_IDEOGRAPHIC for these Unicode ranges:\n            // 1. CJK Unified Ideographs (0x4E00 -- 0x9FFF)\n            // 2. CJK Unified Ideographs Extension A (0x3400 -- 0x4DBF)\n            // 3. Hiragana and Katakana (0x3040 -- 0x30FF)\n            if ((charCode >= 0x3040 && charCode <= 0x30FF)\n                || (charCode >= 0x3400 && charCode <= 0x4DBF)\n                || (charCode >= 0x4E00 && charCode <= 0x9FFF)) {\n                return 3 /* CharacterClass.BREAK_IDEOGRAPHIC */;\n            }\n            return (this._map.get(charCode) || this._defaultValue);\n        }\n    }\n}\nlet arrPool1 = [];\nlet arrPool2 = [];\nfunction createLineBreaksFromPreviousLineBreaks(classifier, previousBreakingData, lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent) {\n    if (firstLineBreakColumn === -1) {\n        return null;\n    }\n    const len = lineText.length;\n    if (len <= 1) {\n        return null;\n    }\n    const prevBreakingOffsets = previousBreakingData.breakOffsets;\n    const prevBreakingOffsetsVisibleColumn = previousBreakingData.breakOffsetsVisibleColumn;\n    const wrappedTextIndentLength = computeWrappedTextIndentLength(lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent);\n    const wrappedLineBreakColumn = firstLineBreakColumn - wrappedTextIndentLength;\n    const breakingOffsets = arrPool1;\n    const breakingOffsetsVisibleColumn = arrPool2;\n    let breakingOffsetsCount = 0;\n    let lastBreakingOffset = 0;\n    let lastBreakingOffsetVisibleColumn = 0;\n    let breakingColumn = firstLineBreakColumn;\n    const prevLen = prevBreakingOffsets.length;\n    let prevIndex = 0;\n    if (prevIndex >= 0) {\n        let bestDistance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex] - breakingColumn);\n        while (prevIndex + 1 < prevLen) {\n            const distance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex + 1] - breakingColumn);\n            if (distance >= bestDistance) {\n                break;\n            }\n            bestDistance = distance;\n            prevIndex++;\n        }\n    }\n    while (prevIndex < prevLen) {\n        // Allow for prevIndex to be -1 (for the case where we hit a tab when walking backwards from the first break)\n        let prevBreakOffset = prevIndex < 0 ? 0 : prevBreakingOffsets[prevIndex];\n        let prevBreakOffsetVisibleColumn = prevIndex < 0 ? 0 : prevBreakingOffsetsVisibleColumn[prevIndex];\n        if (lastBreakingOffset > prevBreakOffset) {\n            prevBreakOffset = lastBreakingOffset;\n            prevBreakOffsetVisibleColumn = lastBreakingOffsetVisibleColumn;\n        }\n        let breakOffset = 0;\n        let breakOffsetVisibleColumn = 0;\n        let forcedBreakOffset = 0;\n        let forcedBreakOffsetVisibleColumn = 0;\n        // initially, we search as much as possible to the right (if it fits)\n        if (prevBreakOffsetVisibleColumn <= breakingColumn) {\n            let visibleColumn = prevBreakOffsetVisibleColumn;\n            let prevCharCode = prevBreakOffset === 0 ? 0 /* CharCode.Null */ : lineText.charCodeAt(prevBreakOffset - 1);\n            let prevCharCodeClass = prevBreakOffset === 0 ? 0 /* CharacterClass.NONE */ : classifier.get(prevCharCode);\n            let entireLineFits = true;\n            for (let i = prevBreakOffset; i < len; i++) {\n                const charStartOffset = i;\n                const charCode = lineText.charCodeAt(i);\n                let charCodeClass;\n                let charWidth;\n                if (strings.isHighSurrogate(charCode)) {\n                    // A surrogate pair must always be considered as a single unit, so it is never to be broken\n                    i++;\n                    charCodeClass = 0 /* CharacterClass.NONE */;\n                    charWidth = 2;\n                }\n                else {\n                    charCodeClass = classifier.get(charCode);\n                    charWidth = computeCharWidth(charCode, visibleColumn, tabSize, columnsForFullWidthChar);\n                }\n                if (charStartOffset > lastBreakingOffset && canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass)) {\n                    breakOffset = charStartOffset;\n                    breakOffsetVisibleColumn = visibleColumn;\n                }\n                visibleColumn += charWidth;\n                // check if adding character at `i` will go over the breaking column\n                if (visibleColumn > breakingColumn) {\n                    // We need to break at least before character at `i`:\n                    if (charStartOffset > lastBreakingOffset) {\n                        forcedBreakOffset = charStartOffset;\n                        forcedBreakOffsetVisibleColumn = visibleColumn - charWidth;\n                    }\n                    else {\n                        // we need to advance at least by one character\n                        forcedBreakOffset = i + 1;\n                        forcedBreakOffsetVisibleColumn = visibleColumn;\n                    }\n                    if (visibleColumn - breakOffsetVisibleColumn > wrappedLineBreakColumn) {\n                        // Cannot break at `breakOffset` => reset it if it was set\n                        breakOffset = 0;\n                    }\n                    entireLineFits = false;\n                    break;\n                }\n                prevCharCode = charCode;\n                prevCharCodeClass = charCodeClass;\n            }\n            if (entireLineFits) {\n                // there is no more need to break => stop the outer loop!\n                if (breakingOffsetsCount > 0) {\n                    // Add last segment, no need to assign to `lastBreakingOffset` and `lastBreakingOffsetVisibleColumn`\n                    breakingOffsets[breakingOffsetsCount] = prevBreakingOffsets[prevBreakingOffsets.length - 1];\n                    breakingOffsetsVisibleColumn[breakingOffsetsCount] = prevBreakingOffsetsVisibleColumn[prevBreakingOffsets.length - 1];\n                    breakingOffsetsCount++;\n                }\n                break;\n            }\n        }\n        if (breakOffset === 0) {\n            // must search left\n            let visibleColumn = prevBreakOffsetVisibleColumn;\n            let charCode = lineText.charCodeAt(prevBreakOffset);\n            let charCodeClass = classifier.get(charCode);\n            let hitATabCharacter = false;\n            for (let i = prevBreakOffset - 1; i >= lastBreakingOffset; i--) {\n                const charStartOffset = i + 1;\n                const prevCharCode = lineText.charCodeAt(i);\n                if (prevCharCode === 9 /* CharCode.Tab */) {\n                    // cannot determine the width of a tab when going backwards, so we must go forwards\n                    hitATabCharacter = true;\n                    break;\n                }\n                let prevCharCodeClass;\n                let prevCharWidth;\n                if (strings.isLowSurrogate(prevCharCode)) {\n                    // A surrogate pair must always be considered as a single unit, so it is never to be broken\n                    i--;\n                    prevCharCodeClass = 0 /* CharacterClass.NONE */;\n                    prevCharWidth = 2;\n                }\n                else {\n                    prevCharCodeClass = classifier.get(prevCharCode);\n                    prevCharWidth = (strings.isFullWidthCharacter(prevCharCode) ? columnsForFullWidthChar : 1);\n                }\n                if (visibleColumn <= breakingColumn) {\n                    if (forcedBreakOffset === 0) {\n                        forcedBreakOffset = charStartOffset;\n                        forcedBreakOffsetVisibleColumn = visibleColumn;\n                    }\n                    if (visibleColumn <= breakingColumn - wrappedLineBreakColumn) {\n                        // went too far!\n                        break;\n                    }\n                    if (canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass)) {\n                        breakOffset = charStartOffset;\n                        breakOffsetVisibleColumn = visibleColumn;\n                        break;\n                    }\n                }\n                visibleColumn -= prevCharWidth;\n                charCode = prevCharCode;\n                charCodeClass = prevCharCodeClass;\n            }\n            if (breakOffset !== 0) {\n                const remainingWidthOfNextLine = wrappedLineBreakColumn - (forcedBreakOffsetVisibleColumn - breakOffsetVisibleColumn);\n                if (remainingWidthOfNextLine <= tabSize) {\n                    const charCodeAtForcedBreakOffset = lineText.charCodeAt(forcedBreakOffset);\n                    let charWidth;\n                    if (strings.isHighSurrogate(charCodeAtForcedBreakOffset)) {\n                        // A surrogate pair must always be considered as a single unit, so it is never to be broken\n                        charWidth = 2;\n                    }\n                    else {\n                        charWidth = computeCharWidth(charCodeAtForcedBreakOffset, forcedBreakOffsetVisibleColumn, tabSize, columnsForFullWidthChar);\n                    }\n                    if (remainingWidthOfNextLine - charWidth < 0) {\n                        // it is not worth it to break at breakOffset, it just introduces an extra needless line!\n                        breakOffset = 0;\n                    }\n                }\n            }\n            if (hitATabCharacter) {\n                // cannot determine the width of a tab when going backwards, so we must go forwards from the previous break\n                prevIndex--;\n                continue;\n            }\n        }\n        if (breakOffset === 0) {\n            // Could not find a good breaking point\n            breakOffset = forcedBreakOffset;\n            breakOffsetVisibleColumn = forcedBreakOffsetVisibleColumn;\n        }\n        if (breakOffset <= lastBreakingOffset) {\n            // Make sure that we are advancing (at least one character)\n            const charCode = lineText.charCodeAt(lastBreakingOffset);\n            if (strings.isHighSurrogate(charCode)) {\n                // A surrogate pair must always be considered as a single unit, so it is never to be broken\n                breakOffset = lastBreakingOffset + 2;\n                breakOffsetVisibleColumn = lastBreakingOffsetVisibleColumn + 2;\n            }\n            else {\n                breakOffset = lastBreakingOffset + 1;\n                breakOffsetVisibleColumn = lastBreakingOffsetVisibleColumn + computeCharWidth(charCode, lastBreakingOffsetVisibleColumn, tabSize, columnsForFullWidthChar);\n            }\n        }\n        lastBreakingOffset = breakOffset;\n        breakingOffsets[breakingOffsetsCount] = breakOffset;\n        lastBreakingOffsetVisibleColumn = breakOffsetVisibleColumn;\n        breakingOffsetsVisibleColumn[breakingOffsetsCount] = breakOffsetVisibleColumn;\n        breakingOffsetsCount++;\n        breakingColumn = breakOffsetVisibleColumn + wrappedLineBreakColumn;\n        while (prevIndex < 0 || (prevIndex < prevLen && prevBreakingOffsetsVisibleColumn[prevIndex] < breakOffsetVisibleColumn)) {\n            prevIndex++;\n        }\n        let bestDistance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex] - breakingColumn);\n        while (prevIndex + 1 < prevLen) {\n            const distance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex + 1] - breakingColumn);\n            if (distance >= bestDistance) {\n                break;\n            }\n            bestDistance = distance;\n            prevIndex++;\n        }\n    }\n    if (breakingOffsetsCount === 0) {\n        return null;\n    }\n    // Doing here some object reuse which ends up helping a huge deal with GC pauses!\n    breakingOffsets.length = breakingOffsetsCount;\n    breakingOffsetsVisibleColumn.length = breakingOffsetsCount;\n    arrPool1 = previousBreakingData.breakOffsets;\n    arrPool2 = previousBreakingData.breakOffsetsVisibleColumn;\n    previousBreakingData.breakOffsets = breakingOffsets;\n    previousBreakingData.breakOffsetsVisibleColumn = breakingOffsetsVisibleColumn;\n    previousBreakingData.wrappedTextIndentLength = wrappedTextIndentLength;\n    return previousBreakingData;\n}\nfunction createLineBreaks(classifier, _lineText, injectedTexts, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent) {\n    const lineText = LineInjectedText.applyInjectedText(_lineText, injectedTexts);\n    let injectionOptions;\n    let injectionOffsets;\n    if (injectedTexts && injectedTexts.length > 0) {\n        injectionOptions = injectedTexts.map(t => t.options);\n        injectionOffsets = injectedTexts.map(text => text.column - 1);\n    }\n    else {\n        injectionOptions = null;\n        injectionOffsets = null;\n    }\n    if (firstLineBreakColumn === -1) {\n        if (!injectionOptions) {\n            return null;\n        }\n        // creating a `LineBreakData` with an invalid `breakOffsetsVisibleColumn` is OK\n        // because `breakOffsetsVisibleColumn` will never be used because it contains injected text\n        return new ModelLineProjectionData(injectionOffsets, injectionOptions, [lineText.length], [], 0);\n    }\n    const len = lineText.length;\n    if (len <= 1) {\n        if (!injectionOptions) {\n            return null;\n        }\n        // creating a `LineBreakData` with an invalid `breakOffsetsVisibleColumn` is OK\n        // because `breakOffsetsVisibleColumn` will never be used because it contains injected text\n        return new ModelLineProjectionData(injectionOffsets, injectionOptions, [lineText.length], [], 0);\n    }\n    const wrappedTextIndentLength = computeWrappedTextIndentLength(lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent);\n    const wrappedLineBreakColumn = firstLineBreakColumn - wrappedTextIndentLength;\n    const breakingOffsets = [];\n    const breakingOffsetsVisibleColumn = [];\n    let breakingOffsetsCount = 0;\n    let breakOffset = 0;\n    let breakOffsetVisibleColumn = 0;\n    let breakingColumn = firstLineBreakColumn;\n    let prevCharCode = lineText.charCodeAt(0);\n    let prevCharCodeClass = classifier.get(prevCharCode);\n    let visibleColumn = computeCharWidth(prevCharCode, 0, tabSize, columnsForFullWidthChar);\n    let startOffset = 1;\n    if (strings.isHighSurrogate(prevCharCode)) {\n        // A surrogate pair must always be considered as a single unit, so it is never to be broken\n        visibleColumn += 1;\n        prevCharCode = lineText.charCodeAt(1);\n        prevCharCodeClass = classifier.get(prevCharCode);\n        startOffset++;\n    }\n    for (let i = startOffset; i < len; i++) {\n        const charStartOffset = i;\n        const charCode = lineText.charCodeAt(i);\n        let charCodeClass;\n        let charWidth;\n        if (strings.isHighSurrogate(charCode)) {\n            // A surrogate pair must always be considered as a single unit, so it is never to be broken\n            i++;\n            charCodeClass = 0 /* CharacterClass.NONE */;\n            charWidth = 2;\n        }\n        else {\n            charCodeClass = classifier.get(charCode);\n            charWidth = computeCharWidth(charCode, visibleColumn, tabSize, columnsForFullWidthChar);\n        }\n        if (canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass)) {\n            breakOffset = charStartOffset;\n            breakOffsetVisibleColumn = visibleColumn;\n        }\n        visibleColumn += charWidth;\n        // check if adding character at `i` will go over the breaking column\n        if (visibleColumn > breakingColumn) {\n            // We need to break at least before character at `i`:\n            if (breakOffset === 0 || visibleColumn - breakOffsetVisibleColumn > wrappedLineBreakColumn) {\n                // Cannot break at `breakOffset`, must break at `i`\n                breakOffset = charStartOffset;\n                breakOffsetVisibleColumn = visibleColumn - charWidth;\n            }\n            breakingOffsets[breakingOffsetsCount] = breakOffset;\n            breakingOffsetsVisibleColumn[breakingOffsetsCount] = breakOffsetVisibleColumn;\n            breakingOffsetsCount++;\n            breakingColumn = breakOffsetVisibleColumn + wrappedLineBreakColumn;\n            breakOffset = 0;\n        }\n        prevCharCode = charCode;\n        prevCharCodeClass = charCodeClass;\n    }\n    if (breakingOffsetsCount === 0 && (!injectedTexts || injectedTexts.length === 0)) {\n        return null;\n    }\n    // Add last segment\n    breakingOffsets[breakingOffsetsCount] = len;\n    breakingOffsetsVisibleColumn[breakingOffsetsCount] = visibleColumn;\n    return new ModelLineProjectionData(injectionOffsets, injectionOptions, breakingOffsets, breakingOffsetsVisibleColumn, wrappedTextIndentLength);\n}\nfunction computeCharWidth(charCode, visibleColumn, tabSize, columnsForFullWidthChar) {\n    if (charCode === 9 /* CharCode.Tab */) {\n        return (tabSize - (visibleColumn % tabSize));\n    }\n    if (strings.isFullWidthCharacter(charCode)) {\n        return columnsForFullWidthChar;\n    }\n    if (charCode < 32) {\n        // when using `editor.renderControlCharacters`, the substitutions are often wide\n        return columnsForFullWidthChar;\n    }\n    return 1;\n}\nfunction tabCharacterWidth(visibleColumn, tabSize) {\n    return (tabSize - (visibleColumn % tabSize));\n}\n/**\n * Kinsoku Shori : Don't break after a leading character, like an open bracket\n * Kinsoku Shori : Don't break before a trailing character, like a period\n */\nfunction canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass) {\n    return (charCode !== 32 /* CharCode.Space */\n        && ((prevCharCodeClass === 2 /* CharacterClass.BREAK_AFTER */ && charCodeClass !== 2 /* CharacterClass.BREAK_AFTER */) // break at the end of multiple BREAK_AFTER\n            || (prevCharCodeClass !== 1 /* CharacterClass.BREAK_BEFORE */ && charCodeClass === 1 /* CharacterClass.BREAK_BEFORE */) // break at the start of multiple BREAK_BEFORE\n            || (prevCharCodeClass === 3 /* CharacterClass.BREAK_IDEOGRAPHIC */ && charCodeClass !== 2 /* CharacterClass.BREAK_AFTER */)\n            || (charCodeClass === 3 /* CharacterClass.BREAK_IDEOGRAPHIC */ && prevCharCodeClass !== 1 /* CharacterClass.BREAK_BEFORE */)));\n}\nfunction computeWrappedTextIndentLength(lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent) {\n    let wrappedTextIndentLength = 0;\n    if (wrappingIndent !== 0 /* WrappingIndent.None */) {\n        const firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineText);\n        if (firstNonWhitespaceIndex !== -1) {\n            // Track existing indent\n            for (let i = 0; i < firstNonWhitespaceIndex; i++) {\n                const charWidth = (lineText.charCodeAt(i) === 9 /* CharCode.Tab */ ? tabCharacterWidth(wrappedTextIndentLength, tabSize) : 1);\n                wrappedTextIndentLength += charWidth;\n            }\n            // Increase indent of continuation lines, if desired\n            const numberOfAdditionalTabs = (wrappingIndent === 3 /* WrappingIndent.DeepIndent */ ? 2 : wrappingIndent === 2 /* WrappingIndent.Indent */ ? 1 : 0);\n            for (let i = 0; i < numberOfAdditionalTabs; i++) {\n                const charWidth = tabCharacterWidth(wrappedTextIndentLength, tabSize);\n                wrappedTextIndentLength += charWidth;\n            }\n            // Force sticking to beginning of line if no character would fit except for the indentation\n            if (wrappedTextIndentLength + columnsForFullWidthChar > firstLineBreakColumn) {\n                wrappedTextIndentLength = 0;\n            }\n        }\n    }\n    return wrappedTextIndentLength;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,KAAKA,OAAO,MAAM,iCAAiC;AAC1D,SAASC,mBAAmB,QAAQ,gCAAgC;AACpE,SAASC,gBAAgB,QAAQ,uBAAuB;AACxD,SAASC,uBAAuB,QAAQ,+BAA+B;AACvE,OAAO,MAAMC,kCAAkC,CAAC;EAC5CC,WAAW,CAACC,gBAAgB,EAAEC,eAAe,EAAE;IAC3C,IAAI,CAACC,UAAU,GAAG,IAAIC,2BAA2B,CAACH,gBAAgB,EAAEC,eAAe,CAAC;EACxF;EACA,OAAOG,MAAM,CAACC,OAAO,EAAE;IACnB,OAAO,IAAIP,kCAAkC,CAACO,OAAO,CAACC,GAAG,CAAC,GAAG,CAAC,iDAAiD,EAAED,OAAO,CAACC,GAAG,CAAC,GAAG,CAAC,gDAAgD,CAAC;EACtL;;EACAC,wBAAwB,CAACC,QAAQ,EAAEC,OAAO,EAAEC,cAAc,EAAEC,cAAc,EAAE;IACxE,MAAMC,QAAQ,GAAG,EAAE;IACnB,MAAMC,aAAa,GAAG,EAAE;IACxB,MAAMC,oBAAoB,GAAG,EAAE;IAC/B,OAAO;MACHC,UAAU,EAAE,CAACC,QAAQ,EAAEC,YAAY,EAAEC,qBAAqB,KAAK;QAC3DN,QAAQ,CAACO,IAAI,CAACH,QAAQ,CAAC;QACvBH,aAAa,CAACM,IAAI,CAACF,YAAY,CAAC;QAChCH,oBAAoB,CAACK,IAAI,CAACD,qBAAqB,CAAC;MACpD,CAAC;MACDE,QAAQ,EAAE,MAAM;QACZ,MAAMC,uBAAuB,GAAGb,QAAQ,CAACc,8BAA8B,GAAGd,QAAQ,CAACe,8BAA8B;QACjH,MAAMC,MAAM,GAAG,EAAE;QACjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGd,QAAQ,CAACe,MAAM,EAAEF,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;UACjD,MAAMR,YAAY,GAAGJ,aAAa,CAACY,CAAC,CAAC;UACrC,MAAMP,qBAAqB,GAAGJ,oBAAoB,CAACW,CAAC,CAAC;UACrD,IAAIP,qBAAqB,IAAI,CAACA,qBAAqB,CAACU,gBAAgB,IAAI,CAACX,YAAY,EAAE;YACnFO,MAAM,CAACC,CAAC,CAAC,GAAGI,sCAAsC,CAAC,IAAI,CAAC3B,UAAU,EAAEgB,qBAAqB,EAAEN,QAAQ,CAACa,CAAC,CAAC,EAAEhB,OAAO,EAAEC,cAAc,EAAEW,uBAAuB,EAAEV,cAAc,CAAC;UAC7K,CAAC,MACI;YACDa,MAAM,CAACC,CAAC,CAAC,GAAGK,gBAAgB,CAAC,IAAI,CAAC5B,UAAU,EAAEU,QAAQ,CAACa,CAAC,CAAC,EAAER,YAAY,EAAER,OAAO,EAAEC,cAAc,EAAEW,uBAAuB,EAAEV,cAAc,CAAC;UAC9I;QACJ;QACAoB,QAAQ,CAACJ,MAAM,GAAG,CAAC;QACnBK,QAAQ,CAACL,MAAM,GAAG,CAAC;QACnB,OAAOH,MAAM;MACjB;IACJ,CAAC;EACL;AACJ;AACA,MAAMrB,2BAA2B,SAASR,mBAAmB,CAAC;EAC1DI,WAAW,CAACkC,YAAY,EAAEC,WAAW,EAAE;IACnC,KAAK,CAAC,CAAC,CAAC,0BAA0B;IAClC,KAAK,IAAIT,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGQ,YAAY,CAACN,MAAM,EAAEF,CAAC,EAAE,EAAE;MAC1C,IAAI,CAACU,GAAG,CAACF,YAAY,CAACG,UAAU,CAACX,CAAC,CAAC,EAAE,CAAC,CAAC,kCAAkC;IAC7E;;IACA,KAAK,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,WAAW,CAACP,MAAM,EAAEF,CAAC,EAAE,EAAE;MACzC,IAAI,CAACU,GAAG,CAACD,WAAW,CAACE,UAAU,CAACX,CAAC,CAAC,EAAE,CAAC,CAAC,iCAAiC;IAC3E;EACJ;;EACAnB,GAAG,CAAC+B,QAAQ,EAAE;IACV,IAAIA,QAAQ,IAAI,CAAC,IAAIA,QAAQ,GAAG,GAAG,EAAE;MACjC,OAAO,IAAI,CAACC,SAAS,CAACD,QAAQ,CAAC;IACnC,CAAC,MACI;MACD;MACA;MACA;MACA;MACA,IAAKA,QAAQ,IAAI,MAAM,IAAIA,QAAQ,IAAI,MAAM,IACrCA,QAAQ,IAAI,MAAM,IAAIA,QAAQ,IAAI,MAAO,IACzCA,QAAQ,IAAI,MAAM,IAAIA,QAAQ,IAAI,MAAO,EAAE;QAC/C,OAAO,CAAC,CAAC;MACb;;MACA,OAAQ,IAAI,CAACE,IAAI,CAACjC,GAAG,CAAC+B,QAAQ,CAAC,IAAI,IAAI,CAACG,aAAa;IACzD;EACJ;AACJ;AACA,IAAIT,QAAQ,GAAG,EAAE;AACjB,IAAIC,QAAQ,GAAG,EAAE;AACjB,SAASH,sCAAsC,CAAC3B,UAAU,EAAEY,oBAAoB,EAAEE,QAAQ,EAAEP,OAAO,EAAEgC,oBAAoB,EAAEpB,uBAAuB,EAAEV,cAAc,EAAE;EAChK,IAAI8B,oBAAoB,KAAK,CAAC,CAAC,EAAE;IAC7B,OAAO,IAAI;EACf;EACA,MAAMf,GAAG,GAAGV,QAAQ,CAACW,MAAM;EAC3B,IAAID,GAAG,IAAI,CAAC,EAAE;IACV,OAAO,IAAI;EACf;EACA,MAAMgB,mBAAmB,GAAG5B,oBAAoB,CAAC6B,YAAY;EAC7D,MAAMC,gCAAgC,GAAG9B,oBAAoB,CAAC+B,yBAAyB;EACvF,MAAMC,uBAAuB,GAAGC,8BAA8B,CAAC/B,QAAQ,EAAEP,OAAO,EAAEgC,oBAAoB,EAAEpB,uBAAuB,EAAEV,cAAc,CAAC;EAChJ,MAAMqC,sBAAsB,GAAGP,oBAAoB,GAAGK,uBAAuB;EAC7E,MAAMG,eAAe,GAAGlB,QAAQ;EAChC,MAAMmB,4BAA4B,GAAGlB,QAAQ;EAC7C,IAAImB,oBAAoB,GAAG,CAAC;EAC5B,IAAIC,kBAAkB,GAAG,CAAC;EAC1B,IAAIC,+BAA+B,GAAG,CAAC;EACvC,IAAIC,cAAc,GAAGb,oBAAoB;EACzC,MAAMc,OAAO,GAAGb,mBAAmB,CAACf,MAAM;EAC1C,IAAI6B,SAAS,GAAG,CAAC;EACjB,IAAIA,SAAS,IAAI,CAAC,EAAE;IAChB,IAAIC,YAAY,GAAGC,IAAI,CAACC,GAAG,CAACf,gCAAgC,CAACY,SAAS,CAAC,GAAGF,cAAc,CAAC;IACzF,OAAOE,SAAS,GAAG,CAAC,GAAGD,OAAO,EAAE;MAC5B,MAAMK,QAAQ,GAAGF,IAAI,CAACC,GAAG,CAACf,gCAAgC,CAACY,SAAS,GAAG,CAAC,CAAC,GAAGF,cAAc,CAAC;MAC3F,IAAIM,QAAQ,IAAIH,YAAY,EAAE;QAC1B;MACJ;MACAA,YAAY,GAAGG,QAAQ;MACvBJ,SAAS,EAAE;IACf;EACJ;EACA,OAAOA,SAAS,GAAGD,OAAO,EAAE;IACxB;IACA,IAAIM,eAAe,GAAGL,SAAS,GAAG,CAAC,GAAG,CAAC,GAAGd,mBAAmB,CAACc,SAAS,CAAC;IACxE,IAAIM,4BAA4B,GAAGN,SAAS,GAAG,CAAC,GAAG,CAAC,GAAGZ,gCAAgC,CAACY,SAAS,CAAC;IAClG,IAAIJ,kBAAkB,GAAGS,eAAe,EAAE;MACtCA,eAAe,GAAGT,kBAAkB;MACpCU,4BAA4B,GAAGT,+BAA+B;IAClE;IACA,IAAIU,WAAW,GAAG,CAAC;IACnB,IAAIC,wBAAwB,GAAG,CAAC;IAChC,IAAIC,iBAAiB,GAAG,CAAC;IACzB,IAAIC,8BAA8B,GAAG,CAAC;IACtC;IACA,IAAIJ,4BAA4B,IAAIR,cAAc,EAAE;MAChD,IAAIa,aAAa,GAAGL,4BAA4B;MAChD,IAAIM,YAAY,GAAGP,eAAe,KAAK,CAAC,GAAG,CAAC,CAAC,sBAAsB7C,QAAQ,CAACoB,UAAU,CAACyB,eAAe,GAAG,CAAC,CAAC;MAC3G,IAAIQ,iBAAiB,GAAGR,eAAe,KAAK,CAAC,GAAG,CAAC,CAAC,4BAA4B3D,UAAU,CAACI,GAAG,CAAC8D,YAAY,CAAC;MAC1G,IAAIE,cAAc,GAAG,IAAI;MACzB,KAAK,IAAI7C,CAAC,GAAGoC,eAAe,EAAEpC,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;QACxC,MAAM8C,eAAe,GAAG9C,CAAC;QACzB,MAAMY,QAAQ,GAAGrB,QAAQ,CAACoB,UAAU,CAACX,CAAC,CAAC;QACvC,IAAI+C,aAAa;QACjB,IAAIC,SAAS;QACb,IAAI/E,OAAO,CAACgF,eAAe,CAACrC,QAAQ,CAAC,EAAE;UACnC;UACAZ,CAAC,EAAE;UACH+C,aAAa,GAAG,CAAC,CAAC;UAClBC,SAAS,GAAG,CAAC;QACjB,CAAC,MACI;UACDD,aAAa,GAAGtE,UAAU,CAACI,GAAG,CAAC+B,QAAQ,CAAC;UACxCoC,SAAS,GAAGE,gBAAgB,CAACtC,QAAQ,EAAE8B,aAAa,EAAE1D,OAAO,EAAEY,uBAAuB,CAAC;QAC3F;QACA,IAAIkD,eAAe,GAAGnB,kBAAkB,IAAIwB,QAAQ,CAACR,YAAY,EAAEC,iBAAiB,EAAEhC,QAAQ,EAAEmC,aAAa,CAAC,EAAE;UAC5GT,WAAW,GAAGQ,eAAe;UAC7BP,wBAAwB,GAAGG,aAAa;QAC5C;QACAA,aAAa,IAAIM,SAAS;QAC1B;QACA,IAAIN,aAAa,GAAGb,cAAc,EAAE;UAChC;UACA,IAAIiB,eAAe,GAAGnB,kBAAkB,EAAE;YACtCa,iBAAiB,GAAGM,eAAe;YACnCL,8BAA8B,GAAGC,aAAa,GAAGM,SAAS;UAC9D,CAAC,MACI;YACD;YACAR,iBAAiB,GAAGxC,CAAC,GAAG,CAAC;YACzByC,8BAA8B,GAAGC,aAAa;UAClD;UACA,IAAIA,aAAa,GAAGH,wBAAwB,GAAGhB,sBAAsB,EAAE;YACnE;YACAe,WAAW,GAAG,CAAC;UACnB;UACAO,cAAc,GAAG,KAAK;UACtB;QACJ;QACAF,YAAY,GAAG/B,QAAQ;QACvBgC,iBAAiB,GAAGG,aAAa;MACrC;MACA,IAAIF,cAAc,EAAE;QAChB;QACA,IAAInB,oBAAoB,GAAG,CAAC,EAAE;UAC1B;UACAF,eAAe,CAACE,oBAAoB,CAAC,GAAGT,mBAAmB,CAACA,mBAAmB,CAACf,MAAM,GAAG,CAAC,CAAC;UAC3FuB,4BAA4B,CAACC,oBAAoB,CAAC,GAAGP,gCAAgC,CAACF,mBAAmB,CAACf,MAAM,GAAG,CAAC,CAAC;UACrHwB,oBAAoB,EAAE;QAC1B;QACA;MACJ;IACJ;IACA,IAAIY,WAAW,KAAK,CAAC,EAAE;MACnB;MACA,IAAII,aAAa,GAAGL,4BAA4B;MAChD,IAAIzB,QAAQ,GAAGrB,QAAQ,CAACoB,UAAU,CAACyB,eAAe,CAAC;MACnD,IAAIW,aAAa,GAAGtE,UAAU,CAACI,GAAG,CAAC+B,QAAQ,CAAC;MAC5C,IAAIwC,gBAAgB,GAAG,KAAK;MAC5B,KAAK,IAAIpD,CAAC,GAAGoC,eAAe,GAAG,CAAC,EAAEpC,CAAC,IAAI2B,kBAAkB,EAAE3B,CAAC,EAAE,EAAE;QAC5D,MAAM8C,eAAe,GAAG9C,CAAC,GAAG,CAAC;QAC7B,MAAM2C,YAAY,GAAGpD,QAAQ,CAACoB,UAAU,CAACX,CAAC,CAAC;QAC3C,IAAI2C,YAAY,KAAK,CAAC,CAAC,oBAAoB;UACvC;UACAS,gBAAgB,GAAG,IAAI;UACvB;QACJ;QACA,IAAIR,iBAAiB;QACrB,IAAIS,aAAa;QACjB,IAAIpF,OAAO,CAACqF,cAAc,CAACX,YAAY,CAAC,EAAE;UACtC;UACA3C,CAAC,EAAE;UACH4C,iBAAiB,GAAG,CAAC,CAAC;UACtBS,aAAa,GAAG,CAAC;QACrB,CAAC,MACI;UACDT,iBAAiB,GAAGnE,UAAU,CAACI,GAAG,CAAC8D,YAAY,CAAC;UAChDU,aAAa,GAAIpF,OAAO,CAACsF,oBAAoB,CAACZ,YAAY,CAAC,GAAG/C,uBAAuB,GAAG,CAAE;QAC9F;QACA,IAAI8C,aAAa,IAAIb,cAAc,EAAE;UACjC,IAAIW,iBAAiB,KAAK,CAAC,EAAE;YACzBA,iBAAiB,GAAGM,eAAe;YACnCL,8BAA8B,GAAGC,aAAa;UAClD;UACA,IAAIA,aAAa,IAAIb,cAAc,GAAGN,sBAAsB,EAAE;YAC1D;YACA;UACJ;UACA,IAAI4B,QAAQ,CAACR,YAAY,EAAEC,iBAAiB,EAAEhC,QAAQ,EAAEmC,aAAa,CAAC,EAAE;YACpET,WAAW,GAAGQ,eAAe;YAC7BP,wBAAwB,GAAGG,aAAa;YACxC;UACJ;QACJ;QACAA,aAAa,IAAIW,aAAa;QAC9BzC,QAAQ,GAAG+B,YAAY;QACvBI,aAAa,GAAGH,iBAAiB;MACrC;MACA,IAAIN,WAAW,KAAK,CAAC,EAAE;QACnB,MAAMkB,wBAAwB,GAAGjC,sBAAsB,IAAIkB,8BAA8B,GAAGF,wBAAwB,CAAC;QACrH,IAAIiB,wBAAwB,IAAIxE,OAAO,EAAE;UACrC,MAAMyE,2BAA2B,GAAGlE,QAAQ,CAACoB,UAAU,CAAC6B,iBAAiB,CAAC;UAC1E,IAAIQ,SAAS;UACb,IAAI/E,OAAO,CAACgF,eAAe,CAACQ,2BAA2B,CAAC,EAAE;YACtD;YACAT,SAAS,GAAG,CAAC;UACjB,CAAC,MACI;YACDA,SAAS,GAAGE,gBAAgB,CAACO,2BAA2B,EAAEhB,8BAA8B,EAAEzD,OAAO,EAAEY,uBAAuB,CAAC;UAC/H;UACA,IAAI4D,wBAAwB,GAAGR,SAAS,GAAG,CAAC,EAAE;YAC1C;YACAV,WAAW,GAAG,CAAC;UACnB;QACJ;MACJ;MACA,IAAIc,gBAAgB,EAAE;QAClB;QACArB,SAAS,EAAE;QACX;MACJ;IACJ;IACA,IAAIO,WAAW,KAAK,CAAC,EAAE;MACnB;MACAA,WAAW,GAAGE,iBAAiB;MAC/BD,wBAAwB,GAAGE,8BAA8B;IAC7D;IACA,IAAIH,WAAW,IAAIX,kBAAkB,EAAE;MACnC;MACA,MAAMf,QAAQ,GAAGrB,QAAQ,CAACoB,UAAU,CAACgB,kBAAkB,CAAC;MACxD,IAAI1D,OAAO,CAACgF,eAAe,CAACrC,QAAQ,CAAC,EAAE;QACnC;QACA0B,WAAW,GAAGX,kBAAkB,GAAG,CAAC;QACpCY,wBAAwB,GAAGX,+BAA+B,GAAG,CAAC;MAClE,CAAC,MACI;QACDU,WAAW,GAAGX,kBAAkB,GAAG,CAAC;QACpCY,wBAAwB,GAAGX,+BAA+B,GAAGsB,gBAAgB,CAACtC,QAAQ,EAAEgB,+BAA+B,EAAE5C,OAAO,EAAEY,uBAAuB,CAAC;MAC9J;IACJ;IACA+B,kBAAkB,GAAGW,WAAW;IAChCd,eAAe,CAACE,oBAAoB,CAAC,GAAGY,WAAW;IACnDV,+BAA+B,GAAGW,wBAAwB;IAC1Dd,4BAA4B,CAACC,oBAAoB,CAAC,GAAGa,wBAAwB;IAC7Eb,oBAAoB,EAAE;IACtBG,cAAc,GAAGU,wBAAwB,GAAGhB,sBAAsB;IAClE,OAAOQ,SAAS,GAAG,CAAC,IAAKA,SAAS,GAAGD,OAAO,IAAIX,gCAAgC,CAACY,SAAS,CAAC,GAAGQ,wBAAyB,EAAE;MACrHR,SAAS,EAAE;IACf;IACA,IAAIC,YAAY,GAAGC,IAAI,CAACC,GAAG,CAACf,gCAAgC,CAACY,SAAS,CAAC,GAAGF,cAAc,CAAC;IACzF,OAAOE,SAAS,GAAG,CAAC,GAAGD,OAAO,EAAE;MAC5B,MAAMK,QAAQ,GAAGF,IAAI,CAACC,GAAG,CAACf,gCAAgC,CAACY,SAAS,GAAG,CAAC,CAAC,GAAGF,cAAc,CAAC;MAC3F,IAAIM,QAAQ,IAAIH,YAAY,EAAE;QAC1B;MACJ;MACAA,YAAY,GAAGG,QAAQ;MACvBJ,SAAS,EAAE;IACf;EACJ;EACA,IAAIL,oBAAoB,KAAK,CAAC,EAAE;IAC5B,OAAO,IAAI;EACf;EACA;EACAF,eAAe,CAACtB,MAAM,GAAGwB,oBAAoB;EAC7CD,4BAA4B,CAACvB,MAAM,GAAGwB,oBAAoB;EAC1DpB,QAAQ,GAAGjB,oBAAoB,CAAC6B,YAAY;EAC5CX,QAAQ,GAAGlB,oBAAoB,CAAC+B,yBAAyB;EACzD/B,oBAAoB,CAAC6B,YAAY,GAAGM,eAAe;EACnDnC,oBAAoB,CAAC+B,yBAAyB,GAAGK,4BAA4B;EAC7EpC,oBAAoB,CAACgC,uBAAuB,GAAGA,uBAAuB;EACtE,OAAOhC,oBAAoB;AAC/B;AACA,SAASgB,gBAAgB,CAAC5B,UAAU,EAAEiF,SAAS,EAAEtE,aAAa,EAAEJ,OAAO,EAAEgC,oBAAoB,EAAEpB,uBAAuB,EAAEV,cAAc,EAAE;EACpI,MAAMK,QAAQ,GAAGpB,gBAAgB,CAACwF,iBAAiB,CAACD,SAAS,EAAEtE,aAAa,CAAC;EAC7E,IAAIe,gBAAgB;EACpB,IAAIyD,gBAAgB;EACpB,IAAIxE,aAAa,IAAIA,aAAa,CAACc,MAAM,GAAG,CAAC,EAAE;IAC3CC,gBAAgB,GAAGf,aAAa,CAACyE,GAAG,CAACC,CAAC,IAAIA,CAAC,CAAClF,OAAO,CAAC;IACpDgF,gBAAgB,GAAGxE,aAAa,CAACyE,GAAG,CAACE,IAAI,IAAIA,IAAI,CAACC,MAAM,GAAG,CAAC,CAAC;EACjE,CAAC,MACI;IACD7D,gBAAgB,GAAG,IAAI;IACvByD,gBAAgB,GAAG,IAAI;EAC3B;EACA,IAAI5C,oBAAoB,KAAK,CAAC,CAAC,EAAE;IAC7B,IAAI,CAACb,gBAAgB,EAAE;MACnB,OAAO,IAAI;IACf;IACA;IACA;IACA,OAAO,IAAI/B,uBAAuB,CAACwF,gBAAgB,EAAEzD,gBAAgB,EAAE,CAACZ,QAAQ,CAACW,MAAM,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;EACpG;EACA,MAAMD,GAAG,GAAGV,QAAQ,CAACW,MAAM;EAC3B,IAAID,GAAG,IAAI,CAAC,EAAE;IACV,IAAI,CAACE,gBAAgB,EAAE;MACnB,OAAO,IAAI;IACf;IACA;IACA;IACA,OAAO,IAAI/B,uBAAuB,CAACwF,gBAAgB,EAAEzD,gBAAgB,EAAE,CAACZ,QAAQ,CAACW,MAAM,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;EACpG;EACA,MAAMmB,uBAAuB,GAAGC,8BAA8B,CAAC/B,QAAQ,EAAEP,OAAO,EAAEgC,oBAAoB,EAAEpB,uBAAuB,EAAEV,cAAc,CAAC;EAChJ,MAAMqC,sBAAsB,GAAGP,oBAAoB,GAAGK,uBAAuB;EAC7E,MAAMG,eAAe,GAAG,EAAE;EAC1B,MAAMC,4BAA4B,GAAG,EAAE;EACvC,IAAIC,oBAAoB,GAAG,CAAC;EAC5B,IAAIY,WAAW,GAAG,CAAC;EACnB,IAAIC,wBAAwB,GAAG,CAAC;EAChC,IAAIV,cAAc,GAAGb,oBAAoB;EACzC,IAAI2B,YAAY,GAAGpD,QAAQ,CAACoB,UAAU,CAAC,CAAC,CAAC;EACzC,IAAIiC,iBAAiB,GAAGnE,UAAU,CAACI,GAAG,CAAC8D,YAAY,CAAC;EACpD,IAAID,aAAa,GAAGQ,gBAAgB,CAACP,YAAY,EAAE,CAAC,EAAE3D,OAAO,EAAEY,uBAAuB,CAAC;EACvF,IAAIqE,WAAW,GAAG,CAAC;EACnB,IAAIhG,OAAO,CAACgF,eAAe,CAACN,YAAY,CAAC,EAAE;IACvC;IACAD,aAAa,IAAI,CAAC;IAClBC,YAAY,GAAGpD,QAAQ,CAACoB,UAAU,CAAC,CAAC,CAAC;IACrCiC,iBAAiB,GAAGnE,UAAU,CAACI,GAAG,CAAC8D,YAAY,CAAC;IAChDsB,WAAW,EAAE;EACjB;EACA,KAAK,IAAIjE,CAAC,GAAGiE,WAAW,EAAEjE,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;IACpC,MAAM8C,eAAe,GAAG9C,CAAC;IACzB,MAAMY,QAAQ,GAAGrB,QAAQ,CAACoB,UAAU,CAACX,CAAC,CAAC;IACvC,IAAI+C,aAAa;IACjB,IAAIC,SAAS;IACb,IAAI/E,OAAO,CAACgF,eAAe,CAACrC,QAAQ,CAAC,EAAE;MACnC;MACAZ,CAAC,EAAE;MACH+C,aAAa,GAAG,CAAC,CAAC;MAClBC,SAAS,GAAG,CAAC;IACjB,CAAC,MACI;MACDD,aAAa,GAAGtE,UAAU,CAACI,GAAG,CAAC+B,QAAQ,CAAC;MACxCoC,SAAS,GAAGE,gBAAgB,CAACtC,QAAQ,EAAE8B,aAAa,EAAE1D,OAAO,EAAEY,uBAAuB,CAAC;IAC3F;IACA,IAAIuD,QAAQ,CAACR,YAAY,EAAEC,iBAAiB,EAAEhC,QAAQ,EAAEmC,aAAa,CAAC,EAAE;MACpET,WAAW,GAAGQ,eAAe;MAC7BP,wBAAwB,GAAGG,aAAa;IAC5C;IACAA,aAAa,IAAIM,SAAS;IAC1B;IACA,IAAIN,aAAa,GAAGb,cAAc,EAAE;MAChC;MACA,IAAIS,WAAW,KAAK,CAAC,IAAII,aAAa,GAAGH,wBAAwB,GAAGhB,sBAAsB,EAAE;QACxF;QACAe,WAAW,GAAGQ,eAAe;QAC7BP,wBAAwB,GAAGG,aAAa,GAAGM,SAAS;MACxD;MACAxB,eAAe,CAACE,oBAAoB,CAAC,GAAGY,WAAW;MACnDb,4BAA4B,CAACC,oBAAoB,CAAC,GAAGa,wBAAwB;MAC7Eb,oBAAoB,EAAE;MACtBG,cAAc,GAAGU,wBAAwB,GAAGhB,sBAAsB;MAClEe,WAAW,GAAG,CAAC;IACnB;IACAK,YAAY,GAAG/B,QAAQ;IACvBgC,iBAAiB,GAAGG,aAAa;EACrC;EACA,IAAIrB,oBAAoB,KAAK,CAAC,KAAK,CAACtC,aAAa,IAAIA,aAAa,CAACc,MAAM,KAAK,CAAC,CAAC,EAAE;IAC9E,OAAO,IAAI;EACf;EACA;EACAsB,eAAe,CAACE,oBAAoB,CAAC,GAAGzB,GAAG;EAC3CwB,4BAA4B,CAACC,oBAAoB,CAAC,GAAGgB,aAAa;EAClE,OAAO,IAAItE,uBAAuB,CAACwF,gBAAgB,EAAEzD,gBAAgB,EAAEqB,eAAe,EAAEC,4BAA4B,EAAEJ,uBAAuB,CAAC;AAClJ;AACA,SAAS6B,gBAAgB,CAACtC,QAAQ,EAAE8B,aAAa,EAAE1D,OAAO,EAAEY,uBAAuB,EAAE;EACjF,IAAIgB,QAAQ,KAAK,CAAC,CAAC,oBAAoB;IACnC,OAAQ5B,OAAO,GAAI0D,aAAa,GAAG1D,OAAQ;EAC/C;EACA,IAAIf,OAAO,CAACsF,oBAAoB,CAAC3C,QAAQ,CAAC,EAAE;IACxC,OAAOhB,uBAAuB;EAClC;EACA,IAAIgB,QAAQ,GAAG,EAAE,EAAE;IACf;IACA,OAAOhB,uBAAuB;EAClC;EACA,OAAO,CAAC;AACZ;AACA,SAASsE,iBAAiB,CAACxB,aAAa,EAAE1D,OAAO,EAAE;EAC/C,OAAQA,OAAO,GAAI0D,aAAa,GAAG1D,OAAQ;AAC/C;AACA;AACA;AACA;AACA;AACA,SAASmE,QAAQ,CAACR,YAAY,EAAEC,iBAAiB,EAAEhC,QAAQ,EAAEmC,aAAa,EAAE;EACxE,OAAQnC,QAAQ,KAAK,EAAE,CAAC,yBACfgC,iBAAiB,KAAK,CAAC,CAAC,oCAAoCG,aAAa,KAAK,CAAC,CAAC,iCAAkC;EAAA,GAC/GH,iBAAiB,KAAK,CAAC,CAAC,qCAAqCG,aAAa,KAAK,CAAC,CAAC,iCAAkC,CAAC;EAAA,GACpHH,iBAAiB,KAAK,CAAC,CAAC,0CAA0CG,aAAa,KAAK,CAAC,CAAC,gCAAiC,IACvHA,aAAa,KAAK,CAAC,CAAC,0CAA0CH,iBAAiB,KAAK,CAAC,CAAC,iCAAkC,CAAC;AACzI;;AACA,SAAStB,8BAA8B,CAAC/B,QAAQ,EAAEP,OAAO,EAAEgC,oBAAoB,EAAEpB,uBAAuB,EAAEV,cAAc,EAAE;EACtH,IAAImC,uBAAuB,GAAG,CAAC;EAC/B,IAAInC,cAAc,KAAK,CAAC,CAAC,2BAA2B;IAChD,MAAMiF,uBAAuB,GAAGlG,OAAO,CAACkG,uBAAuB,CAAC5E,QAAQ,CAAC;IACzE,IAAI4E,uBAAuB,KAAK,CAAC,CAAC,EAAE;MAChC;MACA,KAAK,IAAInE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGmE,uBAAuB,EAAEnE,CAAC,EAAE,EAAE;QAC9C,MAAMgD,SAAS,GAAIzD,QAAQ,CAACoB,UAAU,CAACX,CAAC,CAAC,KAAK,CAAC,CAAC,qBAAqBkE,iBAAiB,CAAC7C,uBAAuB,EAAErC,OAAO,CAAC,GAAG,CAAE;QAC7HqC,uBAAuB,IAAI2B,SAAS;MACxC;MACA;MACA,MAAMoB,sBAAsB,GAAIlF,cAAc,KAAK,CAAC,CAAC,kCAAkC,CAAC,GAAGA,cAAc,KAAK,CAAC,CAAC,8BAA8B,CAAC,GAAG,CAAE;MACpJ,KAAK,IAAIc,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGoE,sBAAsB,EAAEpE,CAAC,EAAE,EAAE;QAC7C,MAAMgD,SAAS,GAAGkB,iBAAiB,CAAC7C,uBAAuB,EAAErC,OAAO,CAAC;QACrEqC,uBAAuB,IAAI2B,SAAS;MACxC;MACA;MACA,IAAI3B,uBAAuB,GAAGzB,uBAAuB,GAAGoB,oBAAoB,EAAE;QAC1EK,uBAAuB,GAAG,CAAC;MAC/B;IACJ;EACJ;EACA,OAAOA,uBAAuB;AAClC"},"metadata":{},"sourceType":"module","externalDependencies":[]}