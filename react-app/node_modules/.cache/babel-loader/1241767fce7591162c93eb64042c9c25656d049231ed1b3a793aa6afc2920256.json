{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createKeybinding } from '../../../base/common/keybindings.js';\nimport { OS } from '../../../base/common/platform.js';\nimport { CommandsRegistry } from '../../commands/common/commands.js';\nimport { Registry } from '../../registry/common/platform.js';\nclass KeybindingsRegistryImpl {\n  constructor() {\n    this._coreKeybindings = [];\n    this._extensionKeybindings = [];\n    this._cachedMergedKeybindings = null;\n  }\n  /**\n   * Take current platform into account and reduce to primary & secondary.\n   */\n  static bindToCurrentPlatform(kb) {\n    if (OS === 1 /* OperatingSystem.Windows */) {\n      if (kb && kb.win) {\n        return kb.win;\n      }\n    } else if (OS === 2 /* OperatingSystem.Macintosh */) {\n      if (kb && kb.mac) {\n        return kb.mac;\n      }\n    } else {\n      if (kb && kb.linux) {\n        return kb.linux;\n      }\n    }\n    return kb;\n  }\n  registerKeybindingRule(rule) {\n    const actualKb = KeybindingsRegistryImpl.bindToCurrentPlatform(rule);\n    if (actualKb && actualKb.primary) {\n      const kk = createKeybinding(actualKb.primary, OS);\n      if (kk) {\n        this._registerDefaultKeybinding(kk, rule.id, rule.args, rule.weight, 0, rule.when);\n      }\n    }\n    if (actualKb && Array.isArray(actualKb.secondary)) {\n      for (let i = 0, len = actualKb.secondary.length; i < len; i++) {\n        const k = actualKb.secondary[i];\n        const kk = createKeybinding(k, OS);\n        if (kk) {\n          this._registerDefaultKeybinding(kk, rule.id, rule.args, rule.weight, -i - 1, rule.when);\n        }\n      }\n    }\n  }\n  registerCommandAndKeybindingRule(desc) {\n    this.registerKeybindingRule(desc);\n    CommandsRegistry.registerCommand(desc);\n  }\n  static _mightProduceChar(keyCode) {\n    if (keyCode >= 21 /* KeyCode.Digit0 */ && keyCode <= 30 /* KeyCode.Digit9 */) {\n      return true;\n    }\n    if (keyCode >= 31 /* KeyCode.KeyA */ && keyCode <= 56 /* KeyCode.KeyZ */) {\n      return true;\n    }\n    return keyCode === 80 /* KeyCode.Semicolon */ || keyCode === 81 /* KeyCode.Equal */ || keyCode === 82 /* KeyCode.Comma */ || keyCode === 83 /* KeyCode.Minus */ || keyCode === 84 /* KeyCode.Period */ || keyCode === 85 /* KeyCode.Slash */ || keyCode === 86 /* KeyCode.Backquote */ || keyCode === 110 /* KeyCode.ABNT_C1 */ || keyCode === 111 /* KeyCode.ABNT_C2 */ || keyCode === 87 /* KeyCode.BracketLeft */ || keyCode === 88 /* KeyCode.Backslash */ || keyCode === 89 /* KeyCode.BracketRight */ || keyCode === 90 /* KeyCode.Quote */ || keyCode === 91 /* KeyCode.OEM_8 */ || keyCode === 92 /* KeyCode.IntlBackslash */;\n  }\n\n  _assertNoCtrlAlt(keybinding, commandId) {\n    if (keybinding.ctrlKey && keybinding.altKey && !keybinding.metaKey) {\n      if (KeybindingsRegistryImpl._mightProduceChar(keybinding.keyCode)) {\n        console.warn('Ctrl+Alt+ keybindings should not be used by default under Windows. Offender: ', keybinding, ' for ', commandId);\n      }\n    }\n  }\n  _registerDefaultKeybinding(keybinding, commandId, commandArgs, weight1, weight2, when) {\n    if (OS === 1 /* OperatingSystem.Windows */) {\n      this._assertNoCtrlAlt(keybinding.parts[0], commandId);\n    }\n    this._coreKeybindings.push({\n      keybinding: keybinding.parts,\n      command: commandId,\n      commandArgs: commandArgs,\n      when: when,\n      weight1: weight1,\n      weight2: weight2,\n      extensionId: null,\n      isBuiltinExtension: false\n    });\n    this._cachedMergedKeybindings = null;\n  }\n  getDefaultKeybindings() {\n    if (!this._cachedMergedKeybindings) {\n      this._cachedMergedKeybindings = [].concat(this._coreKeybindings).concat(this._extensionKeybindings);\n      this._cachedMergedKeybindings.sort(sorter);\n    }\n    return this._cachedMergedKeybindings.slice(0);\n  }\n}\nexport const KeybindingsRegistry = new KeybindingsRegistryImpl();\n// Define extension point ids\nexport const Extensions = {\n  EditorModes: 'platform.keybindingsRegistry'\n};\nRegistry.add(Extensions.EditorModes, KeybindingsRegistry);\nfunction sorter(a, b) {\n  if (a.weight1 !== b.weight1) {\n    return a.weight1 - b.weight1;\n  }\n  if (a.command && b.command) {\n    if (a.command < b.command) {\n      return -1;\n    }\n    if (a.command > b.command) {\n      return 1;\n    }\n  }\n  return a.weight2 - b.weight2;\n}","map":{"version":3,"names":["createKeybinding","OS","CommandsRegistry","Registry","KeybindingsRegistryImpl","constructor","_coreKeybindings","_extensionKeybindings","_cachedMergedKeybindings","bindToCurrentPlatform","kb","win","mac","linux","registerKeybindingRule","rule","actualKb","primary","kk","_registerDefaultKeybinding","id","args","weight","when","Array","isArray","secondary","i","len","length","k","registerCommandAndKeybindingRule","desc","registerCommand","_mightProduceChar","keyCode","_assertNoCtrlAlt","keybinding","commandId","ctrlKey","altKey","metaKey","console","warn","commandArgs","weight1","weight2","parts","push","command","extensionId","isBuiltinExtension","getDefaultKeybindings","concat","sort","sorter","slice","KeybindingsRegistry","Extensions","EditorModes","add","a","b"],"sources":["/home/deathblade287/Desktop/AI-MODELS-TESTING/react-app/node_modules/monaco-editor/esm/vs/platform/keybinding/common/keybindingsRegistry.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createKeybinding } from '../../../base/common/keybindings.js';\nimport { OS } from '../../../base/common/platform.js';\nimport { CommandsRegistry } from '../../commands/common/commands.js';\nimport { Registry } from '../../registry/common/platform.js';\nclass KeybindingsRegistryImpl {\n    constructor() {\n        this._coreKeybindings = [];\n        this._extensionKeybindings = [];\n        this._cachedMergedKeybindings = null;\n    }\n    /**\n     * Take current platform into account and reduce to primary & secondary.\n     */\n    static bindToCurrentPlatform(kb) {\n        if (OS === 1 /* OperatingSystem.Windows */) {\n            if (kb && kb.win) {\n                return kb.win;\n            }\n        }\n        else if (OS === 2 /* OperatingSystem.Macintosh */) {\n            if (kb && kb.mac) {\n                return kb.mac;\n            }\n        }\n        else {\n            if (kb && kb.linux) {\n                return kb.linux;\n            }\n        }\n        return kb;\n    }\n    registerKeybindingRule(rule) {\n        const actualKb = KeybindingsRegistryImpl.bindToCurrentPlatform(rule);\n        if (actualKb && actualKb.primary) {\n            const kk = createKeybinding(actualKb.primary, OS);\n            if (kk) {\n                this._registerDefaultKeybinding(kk, rule.id, rule.args, rule.weight, 0, rule.when);\n            }\n        }\n        if (actualKb && Array.isArray(actualKb.secondary)) {\n            for (let i = 0, len = actualKb.secondary.length; i < len; i++) {\n                const k = actualKb.secondary[i];\n                const kk = createKeybinding(k, OS);\n                if (kk) {\n                    this._registerDefaultKeybinding(kk, rule.id, rule.args, rule.weight, -i - 1, rule.when);\n                }\n            }\n        }\n    }\n    registerCommandAndKeybindingRule(desc) {\n        this.registerKeybindingRule(desc);\n        CommandsRegistry.registerCommand(desc);\n    }\n    static _mightProduceChar(keyCode) {\n        if (keyCode >= 21 /* KeyCode.Digit0 */ && keyCode <= 30 /* KeyCode.Digit9 */) {\n            return true;\n        }\n        if (keyCode >= 31 /* KeyCode.KeyA */ && keyCode <= 56 /* KeyCode.KeyZ */) {\n            return true;\n        }\n        return (keyCode === 80 /* KeyCode.Semicolon */\n            || keyCode === 81 /* KeyCode.Equal */\n            || keyCode === 82 /* KeyCode.Comma */\n            || keyCode === 83 /* KeyCode.Minus */\n            || keyCode === 84 /* KeyCode.Period */\n            || keyCode === 85 /* KeyCode.Slash */\n            || keyCode === 86 /* KeyCode.Backquote */\n            || keyCode === 110 /* KeyCode.ABNT_C1 */\n            || keyCode === 111 /* KeyCode.ABNT_C2 */\n            || keyCode === 87 /* KeyCode.BracketLeft */\n            || keyCode === 88 /* KeyCode.Backslash */\n            || keyCode === 89 /* KeyCode.BracketRight */\n            || keyCode === 90 /* KeyCode.Quote */\n            || keyCode === 91 /* KeyCode.OEM_8 */\n            || keyCode === 92 /* KeyCode.IntlBackslash */);\n    }\n    _assertNoCtrlAlt(keybinding, commandId) {\n        if (keybinding.ctrlKey && keybinding.altKey && !keybinding.metaKey) {\n            if (KeybindingsRegistryImpl._mightProduceChar(keybinding.keyCode)) {\n                console.warn('Ctrl+Alt+ keybindings should not be used by default under Windows. Offender: ', keybinding, ' for ', commandId);\n            }\n        }\n    }\n    _registerDefaultKeybinding(keybinding, commandId, commandArgs, weight1, weight2, when) {\n        if (OS === 1 /* OperatingSystem.Windows */) {\n            this._assertNoCtrlAlt(keybinding.parts[0], commandId);\n        }\n        this._coreKeybindings.push({\n            keybinding: keybinding.parts,\n            command: commandId,\n            commandArgs: commandArgs,\n            when: when,\n            weight1: weight1,\n            weight2: weight2,\n            extensionId: null,\n            isBuiltinExtension: false\n        });\n        this._cachedMergedKeybindings = null;\n    }\n    getDefaultKeybindings() {\n        if (!this._cachedMergedKeybindings) {\n            this._cachedMergedKeybindings = [].concat(this._coreKeybindings).concat(this._extensionKeybindings);\n            this._cachedMergedKeybindings.sort(sorter);\n        }\n        return this._cachedMergedKeybindings.slice(0);\n    }\n}\nexport const KeybindingsRegistry = new KeybindingsRegistryImpl();\n// Define extension point ids\nexport const Extensions = {\n    EditorModes: 'platform.keybindingsRegistry'\n};\nRegistry.add(Extensions.EditorModes, KeybindingsRegistry);\nfunction sorter(a, b) {\n    if (a.weight1 !== b.weight1) {\n        return a.weight1 - b.weight1;\n    }\n    if (a.command && b.command) {\n        if (a.command < b.command) {\n            return -1;\n        }\n        if (a.command > b.command) {\n            return 1;\n        }\n    }\n    return a.weight2 - b.weight2;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}