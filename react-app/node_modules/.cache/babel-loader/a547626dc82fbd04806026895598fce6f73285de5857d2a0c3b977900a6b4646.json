{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { stringDiff } from '../../../base/common/diff/diff.js';\nimport { globals } from '../../../base/common/platform.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { DiffComputer } from '../diff/diffComputer.js';\nimport { MirrorTextModel as BaseMirrorModel } from '../model/mirrorTextModel.js';\nimport { ensureValidWordDefinition, getWordAtText } from '../core/wordHelper.js';\nimport { computeLinks } from '../languages/linkComputer.js';\nimport { BasicInplaceReplace } from '../languages/supports/inplaceReplaceSupport.js';\nimport { createMonacoBaseAPI } from './editorBaseApi.js';\nimport * as types from '../../../base/common/types.js';\nimport { StopWatch } from '../../../base/common/stopwatch.js';\nimport { UnicodeTextModelHighlighter } from './unicodeTextModelHighlighter.js';\n/**\n * @internal\n */\nexport class MirrorModel extends BaseMirrorModel {\n  get uri() {\n    return this._uri;\n  }\n  get eol() {\n    return this._eol;\n  }\n  getValue() {\n    return this.getText();\n  }\n  getLinesContent() {\n    return this._lines.slice(0);\n  }\n  getLineCount() {\n    return this._lines.length;\n  }\n  getLineContent(lineNumber) {\n    return this._lines[lineNumber - 1];\n  }\n  getWordAtPosition(position, wordDefinition) {\n    const wordAtText = getWordAtText(position.column, ensureValidWordDefinition(wordDefinition), this._lines[position.lineNumber - 1], 0);\n    if (wordAtText) {\n      return new Range(position.lineNumber, wordAtText.startColumn, position.lineNumber, wordAtText.endColumn);\n    }\n    return null;\n  }\n  words(wordDefinition) {\n    const lines = this._lines;\n    const wordenize = this._wordenize.bind(this);\n    let lineNumber = 0;\n    let lineText = '';\n    let wordRangesIdx = 0;\n    let wordRanges = [];\n    return {\n      *[Symbol.iterator]() {\n        while (true) {\n          if (wordRangesIdx < wordRanges.length) {\n            const value = lineText.substring(wordRanges[wordRangesIdx].start, wordRanges[wordRangesIdx].end);\n            wordRangesIdx += 1;\n            yield value;\n          } else {\n            if (lineNumber < lines.length) {\n              lineText = lines[lineNumber];\n              wordRanges = wordenize(lineText, wordDefinition);\n              wordRangesIdx = 0;\n              lineNumber += 1;\n            } else {\n              break;\n            }\n          }\n        }\n      }\n    };\n  }\n  getLineWords(lineNumber, wordDefinition) {\n    const content = this._lines[lineNumber - 1];\n    const ranges = this._wordenize(content, wordDefinition);\n    const words = [];\n    for (const range of ranges) {\n      words.push({\n        word: content.substring(range.start, range.end),\n        startColumn: range.start + 1,\n        endColumn: range.end + 1\n      });\n    }\n    return words;\n  }\n  _wordenize(content, wordDefinition) {\n    const result = [];\n    let match;\n    wordDefinition.lastIndex = 0; // reset lastIndex just to be sure\n    while (match = wordDefinition.exec(content)) {\n      if (match[0].length === 0) {\n        // it did match the empty string\n        break;\n      }\n      result.push({\n        start: match.index,\n        end: match.index + match[0].length\n      });\n    }\n    return result;\n  }\n  getValueInRange(range) {\n    range = this._validateRange(range);\n    if (range.startLineNumber === range.endLineNumber) {\n      return this._lines[range.startLineNumber - 1].substring(range.startColumn - 1, range.endColumn - 1);\n    }\n    const lineEnding = this._eol;\n    const startLineIndex = range.startLineNumber - 1;\n    const endLineIndex = range.endLineNumber - 1;\n    const resultLines = [];\n    resultLines.push(this._lines[startLineIndex].substring(range.startColumn - 1));\n    for (let i = startLineIndex + 1; i < endLineIndex; i++) {\n      resultLines.push(this._lines[i]);\n    }\n    resultLines.push(this._lines[endLineIndex].substring(0, range.endColumn - 1));\n    return resultLines.join(lineEnding);\n  }\n  offsetAt(position) {\n    position = this._validatePosition(position);\n    this._ensureLineStarts();\n    return this._lineStarts.getPrefixSum(position.lineNumber - 2) + (position.column - 1);\n  }\n  positionAt(offset) {\n    offset = Math.floor(offset);\n    offset = Math.max(0, offset);\n    this._ensureLineStarts();\n    const out = this._lineStarts.getIndexOf(offset);\n    const lineLength = this._lines[out.index].length;\n    // Ensure we return a valid position\n    return {\n      lineNumber: 1 + out.index,\n      column: 1 + Math.min(out.remainder, lineLength)\n    };\n  }\n  _validateRange(range) {\n    const start = this._validatePosition({\n      lineNumber: range.startLineNumber,\n      column: range.startColumn\n    });\n    const end = this._validatePosition({\n      lineNumber: range.endLineNumber,\n      column: range.endColumn\n    });\n    if (start.lineNumber !== range.startLineNumber || start.column !== range.startColumn || end.lineNumber !== range.endLineNumber || end.column !== range.endColumn) {\n      return {\n        startLineNumber: start.lineNumber,\n        startColumn: start.column,\n        endLineNumber: end.lineNumber,\n        endColumn: end.column\n      };\n    }\n    return range;\n  }\n  _validatePosition(position) {\n    if (!Position.isIPosition(position)) {\n      throw new Error('bad position');\n    }\n    let {\n      lineNumber,\n      column\n    } = position;\n    let hasChanged = false;\n    if (lineNumber < 1) {\n      lineNumber = 1;\n      column = 1;\n      hasChanged = true;\n    } else if (lineNumber > this._lines.length) {\n      lineNumber = this._lines.length;\n      column = this._lines[lineNumber - 1].length + 1;\n      hasChanged = true;\n    } else {\n      const maxCharacter = this._lines[lineNumber - 1].length + 1;\n      if (column < 1) {\n        column = 1;\n        hasChanged = true;\n      } else if (column > maxCharacter) {\n        column = maxCharacter;\n        hasChanged = true;\n      }\n    }\n    if (!hasChanged) {\n      return position;\n    } else {\n      return {\n        lineNumber,\n        column\n      };\n    }\n  }\n}\n/**\n * @internal\n */\nexport class EditorSimpleWorker {\n  constructor(host, foreignModuleFactory) {\n    this._host = host;\n    this._models = Object.create(null);\n    this._foreignModuleFactory = foreignModuleFactory;\n    this._foreignModule = null;\n  }\n  dispose() {\n    this._models = Object.create(null);\n  }\n  _getModel(uri) {\n    return this._models[uri];\n  }\n  _getModels() {\n    const all = [];\n    Object.keys(this._models).forEach(key => all.push(this._models[key]));\n    return all;\n  }\n  acceptNewModel(data) {\n    this._models[data.url] = new MirrorModel(URI.parse(data.url), data.lines, data.EOL, data.versionId);\n  }\n  acceptModelChanged(strURL, e) {\n    if (!this._models[strURL]) {\n      return;\n    }\n    const model = this._models[strURL];\n    model.onEvents(e);\n  }\n  acceptRemovedModel(strURL) {\n    if (!this._models[strURL]) {\n      return;\n    }\n    delete this._models[strURL];\n  }\n  computeUnicodeHighlights(url, options, range) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const model = this._getModel(url);\n      if (!model) {\n        return {\n          ranges: [],\n          hasMore: false,\n          ambiguousCharacterCount: 0,\n          invisibleCharacterCount: 0,\n          nonBasicAsciiCharacterCount: 0\n        };\n      }\n      return UnicodeTextModelHighlighter.computeUnicodeHighlights(model, options, range);\n    });\n  }\n  // ---- BEGIN diff --------------------------------------------------------------------------\n  computeDiff(originalUrl, modifiedUrl, ignoreTrimWhitespace, maxComputationTime) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const original = this._getModel(originalUrl);\n      const modified = this._getModel(modifiedUrl);\n      if (!original || !modified) {\n        return null;\n      }\n      return EditorSimpleWorker.computeDiff(original, modified, ignoreTrimWhitespace, maxComputationTime);\n    });\n  }\n  static computeDiff(originalTextModel, modifiedTextModel, ignoreTrimWhitespace, maxComputationTime) {\n    const originalLines = originalTextModel.getLinesContent();\n    const modifiedLines = modifiedTextModel.getLinesContent();\n    const diffComputer = new DiffComputer(originalLines, modifiedLines, {\n      shouldComputeCharChanges: true,\n      shouldPostProcessCharChanges: true,\n      shouldIgnoreTrimWhitespace: ignoreTrimWhitespace,\n      shouldMakePrettyDiff: true,\n      maxComputationTime: maxComputationTime\n    });\n    const diffResult = diffComputer.computeDiff();\n    const identical = diffResult.changes.length > 0 ? false : this._modelsAreIdentical(originalTextModel, modifiedTextModel);\n    return {\n      quitEarly: diffResult.quitEarly,\n      identical: identical,\n      changes: diffResult.changes\n    };\n  }\n  static _modelsAreIdentical(original, modified) {\n    const originalLineCount = original.getLineCount();\n    const modifiedLineCount = modified.getLineCount();\n    if (originalLineCount !== modifiedLineCount) {\n      return false;\n    }\n    for (let line = 1; line <= originalLineCount; line++) {\n      const originalLine = original.getLineContent(line);\n      const modifiedLine = modified.getLineContent(line);\n      if (originalLine !== modifiedLine) {\n        return false;\n      }\n    }\n    return true;\n  }\n  computeMoreMinimalEdits(modelUrl, edits) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const model = this._getModel(modelUrl);\n      if (!model) {\n        return edits;\n      }\n      const result = [];\n      let lastEol = undefined;\n      edits = edits.slice(0).sort((a, b) => {\n        if (a.range && b.range) {\n          return Range.compareRangesUsingStarts(a.range, b.range);\n        }\n        // eol only changes should go to the end\n        const aRng = a.range ? 0 : 1;\n        const bRng = b.range ? 0 : 1;\n        return aRng - bRng;\n      });\n      for (let {\n        range,\n        text,\n        eol\n      } of edits) {\n        if (typeof eol === 'number') {\n          lastEol = eol;\n        }\n        if (Range.isEmpty(range) && !text) {\n          // empty change\n          continue;\n        }\n        const original = model.getValueInRange(range);\n        text = text.replace(/\\r\\n|\\n|\\r/g, model.eol);\n        if (original === text) {\n          // noop\n          continue;\n        }\n        // make sure diff won't take too long\n        if (Math.max(text.length, original.length) > EditorSimpleWorker._diffLimit) {\n          result.push({\n            range,\n            text\n          });\n          continue;\n        }\n        // compute diff between original and edit.text\n        const changes = stringDiff(original, text, false);\n        const editOffset = model.offsetAt(Range.lift(range).getStartPosition());\n        for (const change of changes) {\n          const start = model.positionAt(editOffset + change.originalStart);\n          const end = model.positionAt(editOffset + change.originalStart + change.originalLength);\n          const newEdit = {\n            text: text.substr(change.modifiedStart, change.modifiedLength),\n            range: {\n              startLineNumber: start.lineNumber,\n              startColumn: start.column,\n              endLineNumber: end.lineNumber,\n              endColumn: end.column\n            }\n          };\n          if (model.getValueInRange(newEdit.range) !== newEdit.text) {\n            result.push(newEdit);\n          }\n        }\n      }\n      if (typeof lastEol === 'number') {\n        result.push({\n          eol: lastEol,\n          text: '',\n          range: {\n            startLineNumber: 0,\n            startColumn: 0,\n            endLineNumber: 0,\n            endColumn: 0\n          }\n        });\n      }\n      return result;\n    });\n  }\n  // ---- END minimal edits ---------------------------------------------------------------\n  computeLinks(modelUrl) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const model = this._getModel(modelUrl);\n      if (!model) {\n        return null;\n      }\n      return computeLinks(model);\n    });\n  }\n  textualSuggest(modelUrls, leadingWord, wordDef, wordDefFlags) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const sw = new StopWatch(true);\n      const wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n      const seen = new Set();\n      outer: for (const url of modelUrls) {\n        const model = this._getModel(url);\n        if (!model) {\n          continue;\n        }\n        for (const word of model.words(wordDefRegExp)) {\n          if (word === leadingWord || !isNaN(Number(word))) {\n            continue;\n          }\n          seen.add(word);\n          if (seen.size > EditorSimpleWorker._suggestionsLimit) {\n            break outer;\n          }\n        }\n      }\n      return {\n        words: Array.from(seen),\n        duration: sw.elapsed()\n      };\n    });\n  }\n  // ---- END suggest --------------------------------------------------------------------------\n  //#region -- word ranges --\n  computeWordRanges(modelUrl, range, wordDef, wordDefFlags) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const model = this._getModel(modelUrl);\n      if (!model) {\n        return Object.create(null);\n      }\n      const wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n      const result = Object.create(null);\n      for (let line = range.startLineNumber; line < range.endLineNumber; line++) {\n        const words = model.getLineWords(line, wordDefRegExp);\n        for (const word of words) {\n          if (!isNaN(Number(word.word))) {\n            continue;\n          }\n          let array = result[word.word];\n          if (!array) {\n            array = [];\n            result[word.word] = array;\n          }\n          array.push({\n            startLineNumber: line,\n            startColumn: word.startColumn,\n            endLineNumber: line,\n            endColumn: word.endColumn\n          });\n        }\n      }\n      return result;\n    });\n  }\n  //#endregion\n  navigateValueSet(modelUrl, range, up, wordDef, wordDefFlags) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const model = this._getModel(modelUrl);\n      if (!model) {\n        return null;\n      }\n      const wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n      if (range.startColumn === range.endColumn) {\n        range = {\n          startLineNumber: range.startLineNumber,\n          startColumn: range.startColumn,\n          endLineNumber: range.endLineNumber,\n          endColumn: range.endColumn + 1\n        };\n      }\n      const selectionText = model.getValueInRange(range);\n      const wordRange = model.getWordAtPosition({\n        lineNumber: range.startLineNumber,\n        column: range.startColumn\n      }, wordDefRegExp);\n      if (!wordRange) {\n        return null;\n      }\n      const word = model.getValueInRange(wordRange);\n      const result = BasicInplaceReplace.INSTANCE.navigateValueSet(range, selectionText, wordRange, word, up);\n      return result;\n    });\n  }\n  // ---- BEGIN foreign module support --------------------------------------------------------------------------\n  loadForeignModule(moduleId, createData, foreignHostMethods) {\n    const proxyMethodRequest = (method, args) => {\n      return this._host.fhr(method, args);\n    };\n    const foreignHost = types.createProxyObject(foreignHostMethods, proxyMethodRequest);\n    const ctx = {\n      host: foreignHost,\n      getMirrorModels: () => {\n        return this._getModels();\n      }\n    };\n    if (this._foreignModuleFactory) {\n      this._foreignModule = this._foreignModuleFactory(ctx, createData);\n      // static foreing module\n      return Promise.resolve(types.getAllMethodNames(this._foreignModule));\n    }\n    // ESM-comment-begin\n    // \t\treturn new Promise<any>((resolve, reject) => {\n    // \t\t\trequire([moduleId], (foreignModule: { create: IForeignModuleFactory }) => {\n    // \t\t\t\tthis._foreignModule = foreignModule.create(ctx, createData);\n    // \n    // \t\t\t\tresolve(types.getAllMethodNames(this._foreignModule));\n    // \n    // \t\t\t}, reject);\n    // \t\t});\n    // ESM-comment-end\n    // ESM-uncomment-begin\n    return Promise.reject(new Error(`Unexpected usage`));\n    // ESM-uncomment-end\n  }\n  // foreign method request\n  fmr(method, args) {\n    if (!this._foreignModule || typeof this._foreignModule[method] !== 'function') {\n      return Promise.reject(new Error('Missing requestHandler or method: ' + method));\n    }\n    try {\n      return Promise.resolve(this._foreignModule[method].apply(this._foreignModule, args));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n}\n// ---- END diff --------------------------------------------------------------------------\n// ---- BEGIN minimal edits ---------------------------------------------------------------\nEditorSimpleWorker._diffLimit = 100000;\n// ---- BEGIN suggest --------------------------------------------------------------------------\nEditorSimpleWorker._suggestionsLimit = 10000;\n/**\n * Called on the worker side\n * @internal\n */\nexport function create(host) {\n  return new EditorSimpleWorker(host, null);\n}\nif (typeof importScripts === 'function') {\n  // Running in a web worker\n  globals.monaco = createMonacoBaseAPI();\n}","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","stringDiff","globals","URI","Position","Range","DiffComputer","MirrorTextModel","BaseMirrorModel","ensureValidWordDefinition","getWordAtText","computeLinks","BasicInplaceReplace","createMonacoBaseAPI","types","StopWatch","UnicodeTextModelHighlighter","MirrorModel","uri","_uri","eol","_eol","getValue","getText","getLinesContent","_lines","slice","getLineCount","length","getLineContent","lineNumber","getWordAtPosition","position","wordDefinition","wordAtText","column","startColumn","endColumn","words","lines","wordenize","_wordenize","bind","lineText","wordRangesIdx","wordRanges","Symbol","iterator","substring","start","end","getLineWords","content","ranges","range","push","word","match","lastIndex","exec","index","getValueInRange","_validateRange","startLineNumber","endLineNumber","lineEnding","startLineIndex","endLineIndex","resultLines","i","join","offsetAt","_validatePosition","_ensureLineStarts","_lineStarts","getPrefixSum","positionAt","offset","Math","floor","max","out","getIndexOf","lineLength","min","remainder","isIPosition","Error","hasChanged","maxCharacter","EditorSimpleWorker","constructor","host","foreignModuleFactory","_host","_models","Object","create","_foreignModuleFactory","_foreignModule","dispose","_getModel","_getModels","all","keys","forEach","key","acceptNewModel","data","url","parse","EOL","versionId","acceptModelChanged","strURL","model","onEvents","acceptRemovedModel","computeUnicodeHighlights","options","hasMore","ambiguousCharacterCount","invisibleCharacterCount","nonBasicAsciiCharacterCount","computeDiff","originalUrl","modifiedUrl","ignoreTrimWhitespace","maxComputationTime","original","modified","originalTextModel","modifiedTextModel","originalLines","modifiedLines","diffComputer","shouldComputeCharChanges","shouldPostProcessCharChanges","shouldIgnoreTrimWhitespace","shouldMakePrettyDiff","diffResult","identical","changes","_modelsAreIdentical","quitEarly","originalLineCount","modifiedLineCount","line","originalLine","modifiedLine","computeMoreMinimalEdits","modelUrl","edits","lastEol","undefined","sort","a","b","compareRangesUsingStarts","aRng","bRng","text","isEmpty","replace","_diffLimit","editOffset","lift","getStartPosition","change","originalStart","originalLength","newEdit","substr","modifiedStart","modifiedLength","textualSuggest","modelUrls","leadingWord","wordDef","wordDefFlags","sw","wordDefRegExp","RegExp","seen","Set","outer","isNaN","Number","add","size","_suggestionsLimit","Array","from","duration","elapsed","computeWordRanges","array","navigateValueSet","up","selectionText","wordRange","INSTANCE","loadForeignModule","moduleId","createData","foreignHostMethods","proxyMethodRequest","method","args","fhr","foreignHost","createProxyObject","ctx","getMirrorModels","getAllMethodNames","fmr","importScripts","monaco"],"sources":["/home/deathblade287/Desktop/AI-MODELS-TESTING/react-app/node_modules/monaco-editor/esm/vs/editor/common/services/editorSimpleWorker.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { stringDiff } from '../../../base/common/diff/diff.js';\nimport { globals } from '../../../base/common/platform.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { DiffComputer } from '../diff/diffComputer.js';\nimport { MirrorTextModel as BaseMirrorModel } from '../model/mirrorTextModel.js';\nimport { ensureValidWordDefinition, getWordAtText } from '../core/wordHelper.js';\nimport { computeLinks } from '../languages/linkComputer.js';\nimport { BasicInplaceReplace } from '../languages/supports/inplaceReplaceSupport.js';\nimport { createMonacoBaseAPI } from './editorBaseApi.js';\nimport * as types from '../../../base/common/types.js';\nimport { StopWatch } from '../../../base/common/stopwatch.js';\nimport { UnicodeTextModelHighlighter } from './unicodeTextModelHighlighter.js';\n/**\n * @internal\n */\nexport class MirrorModel extends BaseMirrorModel {\n    get uri() {\n        return this._uri;\n    }\n    get eol() {\n        return this._eol;\n    }\n    getValue() {\n        return this.getText();\n    }\n    getLinesContent() {\n        return this._lines.slice(0);\n    }\n    getLineCount() {\n        return this._lines.length;\n    }\n    getLineContent(lineNumber) {\n        return this._lines[lineNumber - 1];\n    }\n    getWordAtPosition(position, wordDefinition) {\n        const wordAtText = getWordAtText(position.column, ensureValidWordDefinition(wordDefinition), this._lines[position.lineNumber - 1], 0);\n        if (wordAtText) {\n            return new Range(position.lineNumber, wordAtText.startColumn, position.lineNumber, wordAtText.endColumn);\n        }\n        return null;\n    }\n    words(wordDefinition) {\n        const lines = this._lines;\n        const wordenize = this._wordenize.bind(this);\n        let lineNumber = 0;\n        let lineText = '';\n        let wordRangesIdx = 0;\n        let wordRanges = [];\n        return {\n            *[Symbol.iterator]() {\n                while (true) {\n                    if (wordRangesIdx < wordRanges.length) {\n                        const value = lineText.substring(wordRanges[wordRangesIdx].start, wordRanges[wordRangesIdx].end);\n                        wordRangesIdx += 1;\n                        yield value;\n                    }\n                    else {\n                        if (lineNumber < lines.length) {\n                            lineText = lines[lineNumber];\n                            wordRanges = wordenize(lineText, wordDefinition);\n                            wordRangesIdx = 0;\n                            lineNumber += 1;\n                        }\n                        else {\n                            break;\n                        }\n                    }\n                }\n            }\n        };\n    }\n    getLineWords(lineNumber, wordDefinition) {\n        const content = this._lines[lineNumber - 1];\n        const ranges = this._wordenize(content, wordDefinition);\n        const words = [];\n        for (const range of ranges) {\n            words.push({\n                word: content.substring(range.start, range.end),\n                startColumn: range.start + 1,\n                endColumn: range.end + 1\n            });\n        }\n        return words;\n    }\n    _wordenize(content, wordDefinition) {\n        const result = [];\n        let match;\n        wordDefinition.lastIndex = 0; // reset lastIndex just to be sure\n        while (match = wordDefinition.exec(content)) {\n            if (match[0].length === 0) {\n                // it did match the empty string\n                break;\n            }\n            result.push({ start: match.index, end: match.index + match[0].length });\n        }\n        return result;\n    }\n    getValueInRange(range) {\n        range = this._validateRange(range);\n        if (range.startLineNumber === range.endLineNumber) {\n            return this._lines[range.startLineNumber - 1].substring(range.startColumn - 1, range.endColumn - 1);\n        }\n        const lineEnding = this._eol;\n        const startLineIndex = range.startLineNumber - 1;\n        const endLineIndex = range.endLineNumber - 1;\n        const resultLines = [];\n        resultLines.push(this._lines[startLineIndex].substring(range.startColumn - 1));\n        for (let i = startLineIndex + 1; i < endLineIndex; i++) {\n            resultLines.push(this._lines[i]);\n        }\n        resultLines.push(this._lines[endLineIndex].substring(0, range.endColumn - 1));\n        return resultLines.join(lineEnding);\n    }\n    offsetAt(position) {\n        position = this._validatePosition(position);\n        this._ensureLineStarts();\n        return this._lineStarts.getPrefixSum(position.lineNumber - 2) + (position.column - 1);\n    }\n    positionAt(offset) {\n        offset = Math.floor(offset);\n        offset = Math.max(0, offset);\n        this._ensureLineStarts();\n        const out = this._lineStarts.getIndexOf(offset);\n        const lineLength = this._lines[out.index].length;\n        // Ensure we return a valid position\n        return {\n            lineNumber: 1 + out.index,\n            column: 1 + Math.min(out.remainder, lineLength)\n        };\n    }\n    _validateRange(range) {\n        const start = this._validatePosition({ lineNumber: range.startLineNumber, column: range.startColumn });\n        const end = this._validatePosition({ lineNumber: range.endLineNumber, column: range.endColumn });\n        if (start.lineNumber !== range.startLineNumber\n            || start.column !== range.startColumn\n            || end.lineNumber !== range.endLineNumber\n            || end.column !== range.endColumn) {\n            return {\n                startLineNumber: start.lineNumber,\n                startColumn: start.column,\n                endLineNumber: end.lineNumber,\n                endColumn: end.column\n            };\n        }\n        return range;\n    }\n    _validatePosition(position) {\n        if (!Position.isIPosition(position)) {\n            throw new Error('bad position');\n        }\n        let { lineNumber, column } = position;\n        let hasChanged = false;\n        if (lineNumber < 1) {\n            lineNumber = 1;\n            column = 1;\n            hasChanged = true;\n        }\n        else if (lineNumber > this._lines.length) {\n            lineNumber = this._lines.length;\n            column = this._lines[lineNumber - 1].length + 1;\n            hasChanged = true;\n        }\n        else {\n            const maxCharacter = this._lines[lineNumber - 1].length + 1;\n            if (column < 1) {\n                column = 1;\n                hasChanged = true;\n            }\n            else if (column > maxCharacter) {\n                column = maxCharacter;\n                hasChanged = true;\n            }\n        }\n        if (!hasChanged) {\n            return position;\n        }\n        else {\n            return { lineNumber, column };\n        }\n    }\n}\n/**\n * @internal\n */\nexport class EditorSimpleWorker {\n    constructor(host, foreignModuleFactory) {\n        this._host = host;\n        this._models = Object.create(null);\n        this._foreignModuleFactory = foreignModuleFactory;\n        this._foreignModule = null;\n    }\n    dispose() {\n        this._models = Object.create(null);\n    }\n    _getModel(uri) {\n        return this._models[uri];\n    }\n    _getModels() {\n        const all = [];\n        Object.keys(this._models).forEach((key) => all.push(this._models[key]));\n        return all;\n    }\n    acceptNewModel(data) {\n        this._models[data.url] = new MirrorModel(URI.parse(data.url), data.lines, data.EOL, data.versionId);\n    }\n    acceptModelChanged(strURL, e) {\n        if (!this._models[strURL]) {\n            return;\n        }\n        const model = this._models[strURL];\n        model.onEvents(e);\n    }\n    acceptRemovedModel(strURL) {\n        if (!this._models[strURL]) {\n            return;\n        }\n        delete this._models[strURL];\n    }\n    computeUnicodeHighlights(url, options, range) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const model = this._getModel(url);\n            if (!model) {\n                return { ranges: [], hasMore: false, ambiguousCharacterCount: 0, invisibleCharacterCount: 0, nonBasicAsciiCharacterCount: 0 };\n            }\n            return UnicodeTextModelHighlighter.computeUnicodeHighlights(model, options, range);\n        });\n    }\n    // ---- BEGIN diff --------------------------------------------------------------------------\n    computeDiff(originalUrl, modifiedUrl, ignoreTrimWhitespace, maxComputationTime) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const original = this._getModel(originalUrl);\n            const modified = this._getModel(modifiedUrl);\n            if (!original || !modified) {\n                return null;\n            }\n            return EditorSimpleWorker.computeDiff(original, modified, ignoreTrimWhitespace, maxComputationTime);\n        });\n    }\n    static computeDiff(originalTextModel, modifiedTextModel, ignoreTrimWhitespace, maxComputationTime) {\n        const originalLines = originalTextModel.getLinesContent();\n        const modifiedLines = modifiedTextModel.getLinesContent();\n        const diffComputer = new DiffComputer(originalLines, modifiedLines, {\n            shouldComputeCharChanges: true,\n            shouldPostProcessCharChanges: true,\n            shouldIgnoreTrimWhitespace: ignoreTrimWhitespace,\n            shouldMakePrettyDiff: true,\n            maxComputationTime: maxComputationTime\n        });\n        const diffResult = diffComputer.computeDiff();\n        const identical = (diffResult.changes.length > 0 ? false : this._modelsAreIdentical(originalTextModel, modifiedTextModel));\n        return {\n            quitEarly: diffResult.quitEarly,\n            identical: identical,\n            changes: diffResult.changes\n        };\n    }\n    static _modelsAreIdentical(original, modified) {\n        const originalLineCount = original.getLineCount();\n        const modifiedLineCount = modified.getLineCount();\n        if (originalLineCount !== modifiedLineCount) {\n            return false;\n        }\n        for (let line = 1; line <= originalLineCount; line++) {\n            const originalLine = original.getLineContent(line);\n            const modifiedLine = modified.getLineContent(line);\n            if (originalLine !== modifiedLine) {\n                return false;\n            }\n        }\n        return true;\n    }\n    computeMoreMinimalEdits(modelUrl, edits) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const model = this._getModel(modelUrl);\n            if (!model) {\n                return edits;\n            }\n            const result = [];\n            let lastEol = undefined;\n            edits = edits.slice(0).sort((a, b) => {\n                if (a.range && b.range) {\n                    return Range.compareRangesUsingStarts(a.range, b.range);\n                }\n                // eol only changes should go to the end\n                const aRng = a.range ? 0 : 1;\n                const bRng = b.range ? 0 : 1;\n                return aRng - bRng;\n            });\n            for (let { range, text, eol } of edits) {\n                if (typeof eol === 'number') {\n                    lastEol = eol;\n                }\n                if (Range.isEmpty(range) && !text) {\n                    // empty change\n                    continue;\n                }\n                const original = model.getValueInRange(range);\n                text = text.replace(/\\r\\n|\\n|\\r/g, model.eol);\n                if (original === text) {\n                    // noop\n                    continue;\n                }\n                // make sure diff won't take too long\n                if (Math.max(text.length, original.length) > EditorSimpleWorker._diffLimit) {\n                    result.push({ range, text });\n                    continue;\n                }\n                // compute diff between original and edit.text\n                const changes = stringDiff(original, text, false);\n                const editOffset = model.offsetAt(Range.lift(range).getStartPosition());\n                for (const change of changes) {\n                    const start = model.positionAt(editOffset + change.originalStart);\n                    const end = model.positionAt(editOffset + change.originalStart + change.originalLength);\n                    const newEdit = {\n                        text: text.substr(change.modifiedStart, change.modifiedLength),\n                        range: { startLineNumber: start.lineNumber, startColumn: start.column, endLineNumber: end.lineNumber, endColumn: end.column }\n                    };\n                    if (model.getValueInRange(newEdit.range) !== newEdit.text) {\n                        result.push(newEdit);\n                    }\n                }\n            }\n            if (typeof lastEol === 'number') {\n                result.push({ eol: lastEol, text: '', range: { startLineNumber: 0, startColumn: 0, endLineNumber: 0, endColumn: 0 } });\n            }\n            return result;\n        });\n    }\n    // ---- END minimal edits ---------------------------------------------------------------\n    computeLinks(modelUrl) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const model = this._getModel(modelUrl);\n            if (!model) {\n                return null;\n            }\n            return computeLinks(model);\n        });\n    }\n    textualSuggest(modelUrls, leadingWord, wordDef, wordDefFlags) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const sw = new StopWatch(true);\n            const wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n            const seen = new Set();\n            outer: for (const url of modelUrls) {\n                const model = this._getModel(url);\n                if (!model) {\n                    continue;\n                }\n                for (const word of model.words(wordDefRegExp)) {\n                    if (word === leadingWord || !isNaN(Number(word))) {\n                        continue;\n                    }\n                    seen.add(word);\n                    if (seen.size > EditorSimpleWorker._suggestionsLimit) {\n                        break outer;\n                    }\n                }\n            }\n            return { words: Array.from(seen), duration: sw.elapsed() };\n        });\n    }\n    // ---- END suggest --------------------------------------------------------------------------\n    //#region -- word ranges --\n    computeWordRanges(modelUrl, range, wordDef, wordDefFlags) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const model = this._getModel(modelUrl);\n            if (!model) {\n                return Object.create(null);\n            }\n            const wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n            const result = Object.create(null);\n            for (let line = range.startLineNumber; line < range.endLineNumber; line++) {\n                const words = model.getLineWords(line, wordDefRegExp);\n                for (const word of words) {\n                    if (!isNaN(Number(word.word))) {\n                        continue;\n                    }\n                    let array = result[word.word];\n                    if (!array) {\n                        array = [];\n                        result[word.word] = array;\n                    }\n                    array.push({\n                        startLineNumber: line,\n                        startColumn: word.startColumn,\n                        endLineNumber: line,\n                        endColumn: word.endColumn\n                    });\n                }\n            }\n            return result;\n        });\n    }\n    //#endregion\n    navigateValueSet(modelUrl, range, up, wordDef, wordDefFlags) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const model = this._getModel(modelUrl);\n            if (!model) {\n                return null;\n            }\n            const wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n            if (range.startColumn === range.endColumn) {\n                range = {\n                    startLineNumber: range.startLineNumber,\n                    startColumn: range.startColumn,\n                    endLineNumber: range.endLineNumber,\n                    endColumn: range.endColumn + 1\n                };\n            }\n            const selectionText = model.getValueInRange(range);\n            const wordRange = model.getWordAtPosition({ lineNumber: range.startLineNumber, column: range.startColumn }, wordDefRegExp);\n            if (!wordRange) {\n                return null;\n            }\n            const word = model.getValueInRange(wordRange);\n            const result = BasicInplaceReplace.INSTANCE.navigateValueSet(range, selectionText, wordRange, word, up);\n            return result;\n        });\n    }\n    // ---- BEGIN foreign module support --------------------------------------------------------------------------\n    loadForeignModule(moduleId, createData, foreignHostMethods) {\n        const proxyMethodRequest = (method, args) => {\n            return this._host.fhr(method, args);\n        };\n        const foreignHost = types.createProxyObject(foreignHostMethods, proxyMethodRequest);\n        const ctx = {\n            host: foreignHost,\n            getMirrorModels: () => {\n                return this._getModels();\n            }\n        };\n        if (this._foreignModuleFactory) {\n            this._foreignModule = this._foreignModuleFactory(ctx, createData);\n            // static foreing module\n            return Promise.resolve(types.getAllMethodNames(this._foreignModule));\n        }\n        // ESM-comment-begin\n        // \t\treturn new Promise<any>((resolve, reject) => {\n        // \t\t\trequire([moduleId], (foreignModule: { create: IForeignModuleFactory }) => {\n        // \t\t\t\tthis._foreignModule = foreignModule.create(ctx, createData);\n        // \n        // \t\t\t\tresolve(types.getAllMethodNames(this._foreignModule));\n        // \n        // \t\t\t}, reject);\n        // \t\t});\n        // ESM-comment-end\n        // ESM-uncomment-begin\n        return Promise.reject(new Error(`Unexpected usage`));\n        // ESM-uncomment-end\n    }\n    // foreign method request\n    fmr(method, args) {\n        if (!this._foreignModule || typeof this._foreignModule[method] !== 'function') {\n            return Promise.reject(new Error('Missing requestHandler or method: ' + method));\n        }\n        try {\n            return Promise.resolve(this._foreignModule[method].apply(this._foreignModule, args));\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n    }\n}\n// ---- END diff --------------------------------------------------------------------------\n// ---- BEGIN minimal edits ---------------------------------------------------------------\nEditorSimpleWorker._diffLimit = 100000;\n// ---- BEGIN suggest --------------------------------------------------------------------------\nEditorSimpleWorker._suggestionsLimit = 10000;\n/**\n * Called on the worker side\n * @internal\n */\nexport function create(host) {\n    return new EditorSimpleWorker(host, null);\n}\nif (typeof importScripts === 'function') {\n    // Running in a web worker\n    globals.monaco = createMonacoBaseAPI();\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}