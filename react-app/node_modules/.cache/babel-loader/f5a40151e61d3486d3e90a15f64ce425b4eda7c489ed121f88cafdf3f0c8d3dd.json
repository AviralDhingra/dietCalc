{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar _a;\nimport { createStringBuilder } from '../../common/core/stringBuilder.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { applyFontInfo } from '../config/domFontInfo.js';\nimport { LineInjectedText } from '../../common/textModelEvents.js';\nimport { ModelLineProjectionData } from '../../common/modelLineProjectionData.js';\nconst ttPolicy = (_a = window.trustedTypes) === null || _a === void 0 ? void 0 : _a.createPolicy('domLineBreaksComputer', {\n  createHTML: value => value\n});\nexport class DOMLineBreaksComputerFactory {\n  static create() {\n    return new DOMLineBreaksComputerFactory();\n  }\n  constructor() {}\n  createLineBreaksComputer(fontInfo, tabSize, wrappingColumn, wrappingIndent) {\n    const requests = [];\n    const injectedTexts = [];\n    return {\n      addRequest: (lineText, injectedText, previousLineBreakData) => {\n        requests.push(lineText);\n        injectedTexts.push(injectedText);\n      },\n      finalize: () => {\n        return createLineBreaks(requests, fontInfo, tabSize, wrappingColumn, wrappingIndent, injectedTexts);\n      }\n    };\n  }\n}\nfunction createLineBreaks(requests, fontInfo, tabSize, firstLineBreakColumn, wrappingIndent, injectedTextsPerLine) {\n  var _a;\n  function createEmptyLineBreakWithPossiblyInjectedText(requestIdx) {\n    const injectedTexts = injectedTextsPerLine[requestIdx];\n    if (injectedTexts) {\n      const lineText = LineInjectedText.applyInjectedText(requests[requestIdx], injectedTexts);\n      const injectionOptions = injectedTexts.map(t => t.options);\n      const injectionOffsets = injectedTexts.map(text => text.column - 1);\n      // creating a `LineBreakData` with an invalid `breakOffsetsVisibleColumn` is OK\n      // because `breakOffsetsVisibleColumn` will never be used because it contains injected text\n      return new ModelLineProjectionData(injectionOffsets, injectionOptions, [lineText.length], [], 0);\n    } else {\n      return null;\n    }\n  }\n  if (firstLineBreakColumn === -1) {\n    const result = [];\n    for (let i = 0, len = requests.length; i < len; i++) {\n      result[i] = createEmptyLineBreakWithPossiblyInjectedText(i);\n    }\n    return result;\n  }\n  const overallWidth = Math.round(firstLineBreakColumn * fontInfo.typicalHalfwidthCharacterWidth);\n  const additionalIndent = wrappingIndent === 3 /* WrappingIndent.DeepIndent */ ? 2 : wrappingIndent === 2 /* WrappingIndent.Indent */ ? 1 : 0;\n  const additionalIndentSize = Math.round(tabSize * additionalIndent);\n  const additionalIndentLength = Math.ceil(fontInfo.spaceWidth * additionalIndentSize);\n  const containerDomNode = document.createElement('div');\n  applyFontInfo(containerDomNode, fontInfo);\n  const sb = createStringBuilder(10000);\n  const firstNonWhitespaceIndices = [];\n  const wrappedTextIndentLengths = [];\n  const renderLineContents = [];\n  const allCharOffsets = [];\n  const allVisibleColumns = [];\n  for (let i = 0; i < requests.length; i++) {\n    const lineContent = LineInjectedText.applyInjectedText(requests[i], injectedTextsPerLine[i]);\n    let firstNonWhitespaceIndex = 0;\n    let wrappedTextIndentLength = 0;\n    let width = overallWidth;\n    if (wrappingIndent !== 0 /* WrappingIndent.None */) {\n      firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineContent);\n      if (firstNonWhitespaceIndex === -1) {\n        // all whitespace line\n        firstNonWhitespaceIndex = 0;\n      } else {\n        // Track existing indent\n        for (let i = 0; i < firstNonWhitespaceIndex; i++) {\n          const charWidth = lineContent.charCodeAt(i) === 9 /* CharCode.Tab */ ? tabSize - wrappedTextIndentLength % tabSize : 1;\n          wrappedTextIndentLength += charWidth;\n        }\n        const indentWidth = Math.ceil(fontInfo.spaceWidth * wrappedTextIndentLength);\n        // Force sticking to beginning of line if no character would fit except for the indentation\n        if (indentWidth + fontInfo.typicalFullwidthCharacterWidth > overallWidth) {\n          firstNonWhitespaceIndex = 0;\n          wrappedTextIndentLength = 0;\n        } else {\n          width = overallWidth - indentWidth;\n        }\n      }\n    }\n    const renderLineContent = lineContent.substr(firstNonWhitespaceIndex);\n    const tmp = renderLine(renderLineContent, wrappedTextIndentLength, tabSize, width, sb, additionalIndentLength);\n    firstNonWhitespaceIndices[i] = firstNonWhitespaceIndex;\n    wrappedTextIndentLengths[i] = wrappedTextIndentLength;\n    renderLineContents[i] = renderLineContent;\n    allCharOffsets[i] = tmp[0];\n    allVisibleColumns[i] = tmp[1];\n  }\n  const html = sb.build();\n  const trustedhtml = (_a = ttPolicy === null || ttPolicy === void 0 ? void 0 : ttPolicy.createHTML(html)) !== null && _a !== void 0 ? _a : html;\n  containerDomNode.innerHTML = trustedhtml;\n  containerDomNode.style.position = 'absolute';\n  containerDomNode.style.top = '10000';\n  containerDomNode.style.wordWrap = 'break-word';\n  document.body.appendChild(containerDomNode);\n  const range = document.createRange();\n  const lineDomNodes = Array.prototype.slice.call(containerDomNode.children, 0);\n  const result = [];\n  for (let i = 0; i < requests.length; i++) {\n    const lineDomNode = lineDomNodes[i];\n    const breakOffsets = readLineBreaks(range, lineDomNode, renderLineContents[i], allCharOffsets[i]);\n    if (breakOffsets === null) {\n      result[i] = createEmptyLineBreakWithPossiblyInjectedText(i);\n      continue;\n    }\n    const firstNonWhitespaceIndex = firstNonWhitespaceIndices[i];\n    const wrappedTextIndentLength = wrappedTextIndentLengths[i] + additionalIndentSize;\n    const visibleColumns = allVisibleColumns[i];\n    const breakOffsetsVisibleColumn = [];\n    for (let j = 0, len = breakOffsets.length; j < len; j++) {\n      breakOffsetsVisibleColumn[j] = visibleColumns[breakOffsets[j]];\n    }\n    if (firstNonWhitespaceIndex !== 0) {\n      // All break offsets are relative to the renderLineContent, make them absolute again\n      for (let j = 0, len = breakOffsets.length; j < len; j++) {\n        breakOffsets[j] += firstNonWhitespaceIndex;\n      }\n    }\n    let injectionOptions;\n    let injectionOffsets;\n    const curInjectedTexts = injectedTextsPerLine[i];\n    if (curInjectedTexts) {\n      injectionOptions = curInjectedTexts.map(t => t.options);\n      injectionOffsets = curInjectedTexts.map(text => text.column - 1);\n    } else {\n      injectionOptions = null;\n      injectionOffsets = null;\n    }\n    result[i] = new ModelLineProjectionData(injectionOffsets, injectionOptions, breakOffsets, breakOffsetsVisibleColumn, wrappedTextIndentLength);\n  }\n  document.body.removeChild(containerDomNode);\n  return result;\n}\nfunction renderLine(lineContent, initialVisibleColumn, tabSize, width, sb, wrappingIndentLength) {\n  if (wrappingIndentLength !== 0) {\n    const hangingOffset = String(wrappingIndentLength);\n    sb.appendASCIIString('<div style=\"text-indent: -');\n    sb.appendASCIIString(hangingOffset);\n    sb.appendASCIIString('px; padding-left: ');\n    sb.appendASCIIString(hangingOffset);\n    sb.appendASCIIString('px; box-sizing: border-box; width:');\n  } else {\n    sb.appendASCIIString('<div style=\"width:');\n  }\n  sb.appendASCIIString(String(width));\n  sb.appendASCIIString('px;\">');\n  // if (containsRTL) {\n  // \tsb.appendASCIIString('\" dir=\"ltr');\n  // }\n  const len = lineContent.length;\n  let visibleColumn = initialVisibleColumn;\n  let charOffset = 0;\n  const charOffsets = [];\n  const visibleColumns = [];\n  let nextCharCode = 0 < len ? lineContent.charCodeAt(0) : 0 /* CharCode.Null */;\n  sb.appendASCIIString('<span>');\n  for (let charIndex = 0; charIndex < len; charIndex++) {\n    if (charIndex !== 0 && charIndex % 16384 /* Constants.SPAN_MODULO_LIMIT */ === 0) {\n      sb.appendASCIIString('</span><span>');\n    }\n    charOffsets[charIndex] = charOffset;\n    visibleColumns[charIndex] = visibleColumn;\n    const charCode = nextCharCode;\n    nextCharCode = charIndex + 1 < len ? lineContent.charCodeAt(charIndex + 1) : 0 /* CharCode.Null */;\n    let producedCharacters = 1;\n    let charWidth = 1;\n    switch (charCode) {\n      case 9 /* CharCode.Tab */:\n        producedCharacters = tabSize - visibleColumn % tabSize;\n        charWidth = producedCharacters;\n        for (let space = 1; space <= producedCharacters; space++) {\n          if (space < producedCharacters) {\n            sb.write1(0xA0); // &nbsp;\n          } else {\n            sb.appendASCII(32 /* CharCode.Space */);\n          }\n        }\n\n        break;\n      case 32 /* CharCode.Space */:\n        if (nextCharCode === 32 /* CharCode.Space */) {\n          sb.write1(0xA0); // &nbsp;\n        } else {\n          sb.appendASCII(32 /* CharCode.Space */);\n        }\n\n        break;\n      case 60 /* CharCode.LessThan */:\n        sb.appendASCIIString('&lt;');\n        break;\n      case 62 /* CharCode.GreaterThan */:\n        sb.appendASCIIString('&gt;');\n        break;\n      case 38 /* CharCode.Ampersand */:\n        sb.appendASCIIString('&amp;');\n        break;\n      case 0 /* CharCode.Null */:\n        sb.appendASCIIString('&#00;');\n        break;\n      case 65279 /* CharCode.UTF8_BOM */:\n      case 8232 /* CharCode.LINE_SEPARATOR */:\n      case 8233 /* CharCode.PARAGRAPH_SEPARATOR */:\n      case 133 /* CharCode.NEXT_LINE */:\n        sb.write1(0xFFFD);\n        break;\n      default:\n        if (strings.isFullWidthCharacter(charCode)) {\n          charWidth++;\n        }\n        if (charCode < 32) {\n          sb.write1(9216 + charCode);\n        } else {\n          sb.write1(charCode);\n        }\n    }\n    charOffset += producedCharacters;\n    visibleColumn += charWidth;\n  }\n  sb.appendASCIIString('</span>');\n  charOffsets[lineContent.length] = charOffset;\n  visibleColumns[lineContent.length] = visibleColumn;\n  sb.appendASCIIString('</div>');\n  return [charOffsets, visibleColumns];\n}\nfunction readLineBreaks(range, lineDomNode, lineContent, charOffsets) {\n  if (lineContent.length <= 1) {\n    return null;\n  }\n  const spans = Array.prototype.slice.call(lineDomNode.children, 0);\n  const breakOffsets = [];\n  try {\n    discoverBreaks(range, spans, charOffsets, 0, null, lineContent.length - 1, null, breakOffsets);\n  } catch (err) {\n    console.log(err);\n    return null;\n  }\n  if (breakOffsets.length === 0) {\n    return null;\n  }\n  breakOffsets.push(lineContent.length);\n  return breakOffsets;\n}\nfunction discoverBreaks(range, spans, charOffsets, low, lowRects, high, highRects, result) {\n  if (low === high) {\n    return;\n  }\n  lowRects = lowRects || readClientRect(range, spans, charOffsets[low], charOffsets[low + 1]);\n  highRects = highRects || readClientRect(range, spans, charOffsets[high], charOffsets[high + 1]);\n  if (Math.abs(lowRects[0].top - highRects[0].top) <= 0.1) {\n    // same line\n    return;\n  }\n  // there is at least one line break between these two offsets\n  if (low + 1 === high) {\n    // the two characters are adjacent, so the line break must be exactly between them\n    result.push(high);\n    return;\n  }\n  const mid = low + (high - low) / 2 | 0;\n  const midRects = readClientRect(range, spans, charOffsets[mid], charOffsets[mid + 1]);\n  discoverBreaks(range, spans, charOffsets, low, lowRects, mid, midRects, result);\n  discoverBreaks(range, spans, charOffsets, mid, midRects, high, highRects, result);\n}\nfunction readClientRect(range, spans, startOffset, endOffset) {\n  range.setStart(spans[startOffset / 16384 /* Constants.SPAN_MODULO_LIMIT */ | 0].firstChild, startOffset % 16384 /* Constants.SPAN_MODULO_LIMIT */);\n  range.setEnd(spans[endOffset / 16384 /* Constants.SPAN_MODULO_LIMIT */ | 0].firstChild, endOffset % 16384 /* Constants.SPAN_MODULO_LIMIT */);\n  return range.getClientRects();\n}","map":{"version":3,"names":["_a","createStringBuilder","strings","applyFontInfo","LineInjectedText","ModelLineProjectionData","ttPolicy","window","trustedTypes","createPolicy","createHTML","value","DOMLineBreaksComputerFactory","create","constructor","createLineBreaksComputer","fontInfo","tabSize","wrappingColumn","wrappingIndent","requests","injectedTexts","addRequest","lineText","injectedText","previousLineBreakData","push","finalize","createLineBreaks","firstLineBreakColumn","injectedTextsPerLine","createEmptyLineBreakWithPossiblyInjectedText","requestIdx","applyInjectedText","injectionOptions","map","t","options","injectionOffsets","text","column","length","result","i","len","overallWidth","Math","round","typicalHalfwidthCharacterWidth","additionalIndent","additionalIndentSize","additionalIndentLength","ceil","spaceWidth","containerDomNode","document","createElement","sb","firstNonWhitespaceIndices","wrappedTextIndentLengths","renderLineContents","allCharOffsets","allVisibleColumns","lineContent","firstNonWhitespaceIndex","wrappedTextIndentLength","width","charWidth","charCodeAt","indentWidth","typicalFullwidthCharacterWidth","renderLineContent","substr","tmp","renderLine","html","build","trustedhtml","innerHTML","style","position","top","wordWrap","body","appendChild","range","createRange","lineDomNodes","Array","prototype","slice","call","children","lineDomNode","breakOffsets","readLineBreaks","visibleColumns","breakOffsetsVisibleColumn","j","curInjectedTexts","removeChild","initialVisibleColumn","wrappingIndentLength","hangingOffset","String","appendASCIIString","visibleColumn","charOffset","charOffsets","nextCharCode","charIndex","charCode","producedCharacters","space","write1","appendASCII","isFullWidthCharacter","spans","discoverBreaks","err","console","log","low","lowRects","high","highRects","readClientRect","abs","mid","midRects","startOffset","endOffset","setStart","firstChild","setEnd","getClientRects"],"sources":["/home/deathblade287/Desktop/AI-MODELS-TESTING/react-app/node_modules/monaco-editor/esm/vs/editor/browser/view/domLineBreaksComputer.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar _a;\nimport { createStringBuilder } from '../../common/core/stringBuilder.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { applyFontInfo } from '../config/domFontInfo.js';\nimport { LineInjectedText } from '../../common/textModelEvents.js';\nimport { ModelLineProjectionData } from '../../common/modelLineProjectionData.js';\nconst ttPolicy = (_a = window.trustedTypes) === null || _a === void 0 ? void 0 : _a.createPolicy('domLineBreaksComputer', { createHTML: value => value });\nexport class DOMLineBreaksComputerFactory {\n    static create() {\n        return new DOMLineBreaksComputerFactory();\n    }\n    constructor() {\n    }\n    createLineBreaksComputer(fontInfo, tabSize, wrappingColumn, wrappingIndent) {\n        const requests = [];\n        const injectedTexts = [];\n        return {\n            addRequest: (lineText, injectedText, previousLineBreakData) => {\n                requests.push(lineText);\n                injectedTexts.push(injectedText);\n            },\n            finalize: () => {\n                return createLineBreaks(requests, fontInfo, tabSize, wrappingColumn, wrappingIndent, injectedTexts);\n            }\n        };\n    }\n}\nfunction createLineBreaks(requests, fontInfo, tabSize, firstLineBreakColumn, wrappingIndent, injectedTextsPerLine) {\n    var _a;\n    function createEmptyLineBreakWithPossiblyInjectedText(requestIdx) {\n        const injectedTexts = injectedTextsPerLine[requestIdx];\n        if (injectedTexts) {\n            const lineText = LineInjectedText.applyInjectedText(requests[requestIdx], injectedTexts);\n            const injectionOptions = injectedTexts.map(t => t.options);\n            const injectionOffsets = injectedTexts.map(text => text.column - 1);\n            // creating a `LineBreakData` with an invalid `breakOffsetsVisibleColumn` is OK\n            // because `breakOffsetsVisibleColumn` will never be used because it contains injected text\n            return new ModelLineProjectionData(injectionOffsets, injectionOptions, [lineText.length], [], 0);\n        }\n        else {\n            return null;\n        }\n    }\n    if (firstLineBreakColumn === -1) {\n        const result = [];\n        for (let i = 0, len = requests.length; i < len; i++) {\n            result[i] = createEmptyLineBreakWithPossiblyInjectedText(i);\n        }\n        return result;\n    }\n    const overallWidth = Math.round(firstLineBreakColumn * fontInfo.typicalHalfwidthCharacterWidth);\n    const additionalIndent = (wrappingIndent === 3 /* WrappingIndent.DeepIndent */ ? 2 : wrappingIndent === 2 /* WrappingIndent.Indent */ ? 1 : 0);\n    const additionalIndentSize = Math.round(tabSize * additionalIndent);\n    const additionalIndentLength = Math.ceil(fontInfo.spaceWidth * additionalIndentSize);\n    const containerDomNode = document.createElement('div');\n    applyFontInfo(containerDomNode, fontInfo);\n    const sb = createStringBuilder(10000);\n    const firstNonWhitespaceIndices = [];\n    const wrappedTextIndentLengths = [];\n    const renderLineContents = [];\n    const allCharOffsets = [];\n    const allVisibleColumns = [];\n    for (let i = 0; i < requests.length; i++) {\n        const lineContent = LineInjectedText.applyInjectedText(requests[i], injectedTextsPerLine[i]);\n        let firstNonWhitespaceIndex = 0;\n        let wrappedTextIndentLength = 0;\n        let width = overallWidth;\n        if (wrappingIndent !== 0 /* WrappingIndent.None */) {\n            firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineContent);\n            if (firstNonWhitespaceIndex === -1) {\n                // all whitespace line\n                firstNonWhitespaceIndex = 0;\n            }\n            else {\n                // Track existing indent\n                for (let i = 0; i < firstNonWhitespaceIndex; i++) {\n                    const charWidth = (lineContent.charCodeAt(i) === 9 /* CharCode.Tab */\n                        ? (tabSize - (wrappedTextIndentLength % tabSize))\n                        : 1);\n                    wrappedTextIndentLength += charWidth;\n                }\n                const indentWidth = Math.ceil(fontInfo.spaceWidth * wrappedTextIndentLength);\n                // Force sticking to beginning of line if no character would fit except for the indentation\n                if (indentWidth + fontInfo.typicalFullwidthCharacterWidth > overallWidth) {\n                    firstNonWhitespaceIndex = 0;\n                    wrappedTextIndentLength = 0;\n                }\n                else {\n                    width = overallWidth - indentWidth;\n                }\n            }\n        }\n        const renderLineContent = lineContent.substr(firstNonWhitespaceIndex);\n        const tmp = renderLine(renderLineContent, wrappedTextIndentLength, tabSize, width, sb, additionalIndentLength);\n        firstNonWhitespaceIndices[i] = firstNonWhitespaceIndex;\n        wrappedTextIndentLengths[i] = wrappedTextIndentLength;\n        renderLineContents[i] = renderLineContent;\n        allCharOffsets[i] = tmp[0];\n        allVisibleColumns[i] = tmp[1];\n    }\n    const html = sb.build();\n    const trustedhtml = (_a = ttPolicy === null || ttPolicy === void 0 ? void 0 : ttPolicy.createHTML(html)) !== null && _a !== void 0 ? _a : html;\n    containerDomNode.innerHTML = trustedhtml;\n    containerDomNode.style.position = 'absolute';\n    containerDomNode.style.top = '10000';\n    containerDomNode.style.wordWrap = 'break-word';\n    document.body.appendChild(containerDomNode);\n    const range = document.createRange();\n    const lineDomNodes = Array.prototype.slice.call(containerDomNode.children, 0);\n    const result = [];\n    for (let i = 0; i < requests.length; i++) {\n        const lineDomNode = lineDomNodes[i];\n        const breakOffsets = readLineBreaks(range, lineDomNode, renderLineContents[i], allCharOffsets[i]);\n        if (breakOffsets === null) {\n            result[i] = createEmptyLineBreakWithPossiblyInjectedText(i);\n            continue;\n        }\n        const firstNonWhitespaceIndex = firstNonWhitespaceIndices[i];\n        const wrappedTextIndentLength = wrappedTextIndentLengths[i] + additionalIndentSize;\n        const visibleColumns = allVisibleColumns[i];\n        const breakOffsetsVisibleColumn = [];\n        for (let j = 0, len = breakOffsets.length; j < len; j++) {\n            breakOffsetsVisibleColumn[j] = visibleColumns[breakOffsets[j]];\n        }\n        if (firstNonWhitespaceIndex !== 0) {\n            // All break offsets are relative to the renderLineContent, make them absolute again\n            for (let j = 0, len = breakOffsets.length; j < len; j++) {\n                breakOffsets[j] += firstNonWhitespaceIndex;\n            }\n        }\n        let injectionOptions;\n        let injectionOffsets;\n        const curInjectedTexts = injectedTextsPerLine[i];\n        if (curInjectedTexts) {\n            injectionOptions = curInjectedTexts.map(t => t.options);\n            injectionOffsets = curInjectedTexts.map(text => text.column - 1);\n        }\n        else {\n            injectionOptions = null;\n            injectionOffsets = null;\n        }\n        result[i] = new ModelLineProjectionData(injectionOffsets, injectionOptions, breakOffsets, breakOffsetsVisibleColumn, wrappedTextIndentLength);\n    }\n    document.body.removeChild(containerDomNode);\n    return result;\n}\nfunction renderLine(lineContent, initialVisibleColumn, tabSize, width, sb, wrappingIndentLength) {\n    if (wrappingIndentLength !== 0) {\n        const hangingOffset = String(wrappingIndentLength);\n        sb.appendASCIIString('<div style=\"text-indent: -');\n        sb.appendASCIIString(hangingOffset);\n        sb.appendASCIIString('px; padding-left: ');\n        sb.appendASCIIString(hangingOffset);\n        sb.appendASCIIString('px; box-sizing: border-box; width:');\n    }\n    else {\n        sb.appendASCIIString('<div style=\"width:');\n    }\n    sb.appendASCIIString(String(width));\n    sb.appendASCIIString('px;\">');\n    // if (containsRTL) {\n    // \tsb.appendASCIIString('\" dir=\"ltr');\n    // }\n    const len = lineContent.length;\n    let visibleColumn = initialVisibleColumn;\n    let charOffset = 0;\n    const charOffsets = [];\n    const visibleColumns = [];\n    let nextCharCode = (0 < len ? lineContent.charCodeAt(0) : 0 /* CharCode.Null */);\n    sb.appendASCIIString('<span>');\n    for (let charIndex = 0; charIndex < len; charIndex++) {\n        if (charIndex !== 0 && charIndex % 16384 /* Constants.SPAN_MODULO_LIMIT */ === 0) {\n            sb.appendASCIIString('</span><span>');\n        }\n        charOffsets[charIndex] = charOffset;\n        visibleColumns[charIndex] = visibleColumn;\n        const charCode = nextCharCode;\n        nextCharCode = (charIndex + 1 < len ? lineContent.charCodeAt(charIndex + 1) : 0 /* CharCode.Null */);\n        let producedCharacters = 1;\n        let charWidth = 1;\n        switch (charCode) {\n            case 9 /* CharCode.Tab */:\n                producedCharacters = (tabSize - (visibleColumn % tabSize));\n                charWidth = producedCharacters;\n                for (let space = 1; space <= producedCharacters; space++) {\n                    if (space < producedCharacters) {\n                        sb.write1(0xA0); // &nbsp;\n                    }\n                    else {\n                        sb.appendASCII(32 /* CharCode.Space */);\n                    }\n                }\n                break;\n            case 32 /* CharCode.Space */:\n                if (nextCharCode === 32 /* CharCode.Space */) {\n                    sb.write1(0xA0); // &nbsp;\n                }\n                else {\n                    sb.appendASCII(32 /* CharCode.Space */);\n                }\n                break;\n            case 60 /* CharCode.LessThan */:\n                sb.appendASCIIString('&lt;');\n                break;\n            case 62 /* CharCode.GreaterThan */:\n                sb.appendASCIIString('&gt;');\n                break;\n            case 38 /* CharCode.Ampersand */:\n                sb.appendASCIIString('&amp;');\n                break;\n            case 0 /* CharCode.Null */:\n                sb.appendASCIIString('&#00;');\n                break;\n            case 65279 /* CharCode.UTF8_BOM */:\n            case 8232 /* CharCode.LINE_SEPARATOR */:\n            case 8233 /* CharCode.PARAGRAPH_SEPARATOR */:\n            case 133 /* CharCode.NEXT_LINE */:\n                sb.write1(0xFFFD);\n                break;\n            default:\n                if (strings.isFullWidthCharacter(charCode)) {\n                    charWidth++;\n                }\n                if (charCode < 32) {\n                    sb.write1(9216 + charCode);\n                }\n                else {\n                    sb.write1(charCode);\n                }\n        }\n        charOffset += producedCharacters;\n        visibleColumn += charWidth;\n    }\n    sb.appendASCIIString('</span>');\n    charOffsets[lineContent.length] = charOffset;\n    visibleColumns[lineContent.length] = visibleColumn;\n    sb.appendASCIIString('</div>');\n    return [charOffsets, visibleColumns];\n}\nfunction readLineBreaks(range, lineDomNode, lineContent, charOffsets) {\n    if (lineContent.length <= 1) {\n        return null;\n    }\n    const spans = Array.prototype.slice.call(lineDomNode.children, 0);\n    const breakOffsets = [];\n    try {\n        discoverBreaks(range, spans, charOffsets, 0, null, lineContent.length - 1, null, breakOffsets);\n    }\n    catch (err) {\n        console.log(err);\n        return null;\n    }\n    if (breakOffsets.length === 0) {\n        return null;\n    }\n    breakOffsets.push(lineContent.length);\n    return breakOffsets;\n}\nfunction discoverBreaks(range, spans, charOffsets, low, lowRects, high, highRects, result) {\n    if (low === high) {\n        return;\n    }\n    lowRects = lowRects || readClientRect(range, spans, charOffsets[low], charOffsets[low + 1]);\n    highRects = highRects || readClientRect(range, spans, charOffsets[high], charOffsets[high + 1]);\n    if (Math.abs(lowRects[0].top - highRects[0].top) <= 0.1) {\n        // same line\n        return;\n    }\n    // there is at least one line break between these two offsets\n    if (low + 1 === high) {\n        // the two characters are adjacent, so the line break must be exactly between them\n        result.push(high);\n        return;\n    }\n    const mid = low + ((high - low) / 2) | 0;\n    const midRects = readClientRect(range, spans, charOffsets[mid], charOffsets[mid + 1]);\n    discoverBreaks(range, spans, charOffsets, low, lowRects, mid, midRects, result);\n    discoverBreaks(range, spans, charOffsets, mid, midRects, high, highRects, result);\n}\nfunction readClientRect(range, spans, startOffset, endOffset) {\n    range.setStart(spans[(startOffset / 16384 /* Constants.SPAN_MODULO_LIMIT */) | 0].firstChild, startOffset % 16384 /* Constants.SPAN_MODULO_LIMIT */);\n    range.setEnd(spans[(endOffset / 16384 /* Constants.SPAN_MODULO_LIMIT */) | 0].firstChild, endOffset % 16384 /* Constants.SPAN_MODULO_LIMIT */);\n    return range.getClientRects();\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}