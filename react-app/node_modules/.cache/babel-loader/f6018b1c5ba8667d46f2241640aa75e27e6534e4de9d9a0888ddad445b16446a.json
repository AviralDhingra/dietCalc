{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { Color } from '../../../base/common/color.js';\nimport { Range } from '../../common/core/range.js';\nimport * as languages from '../../common/languages.js';\nimport { ILanguageConfigurationService } from '../../common/languages/languageConfigurationRegistry.js';\nimport { ModesRegistry } from '../../common/languages/modesRegistry.js';\nimport { ILanguageService } from '../../common/languages/language.js';\nimport * as standaloneEnums from '../../common/standalone/standaloneEnums.js';\nimport { StandaloneServices } from './standaloneServices.js';\nimport { compile } from '../common/monarch/monarchCompile.js';\nimport { MonarchTokenizer } from '../common/monarch/monarchLexer.js';\nimport { IStandaloneThemeService } from '../common/standaloneTheme.js';\nimport { IMarkerService } from '../../../platform/markers/common/markers.js';\nimport { ILanguageFeaturesService } from '../../common/services/languageFeatures.js';\nimport { IConfigurationService } from '../../../platform/configuration/common/configuration.js';\n/**\n * Register information about a new language.\n */\nexport function register(language) {\n  // Intentionally using the `ModesRegistry` here to avoid\n  // instantiating services too quickly in the standalone editor.\n  ModesRegistry.registerLanguage(language);\n}\n/**\n * Get the information of all the registered languages.\n */\nexport function getLanguages() {\n  let result = [];\n  result = result.concat(ModesRegistry.getLanguages());\n  return result;\n}\nexport function getEncodedLanguageId(languageId) {\n  const languageService = StandaloneServices.get(ILanguageService);\n  return languageService.languageIdCodec.encodeLanguageId(languageId);\n}\n/**\n * An event emitted when a language is needed for the first time (e.g. a model has it set).\n * @event\n */\nexport function onLanguage(languageId, callback) {\n  const languageService = StandaloneServices.get(ILanguageService);\n  const disposable = languageService.onDidEncounterLanguage(encounteredLanguageId => {\n    if (encounteredLanguageId === languageId) {\n      // stop listening\n      disposable.dispose();\n      // invoke actual listener\n      callback();\n    }\n  });\n  return disposable;\n}\n/**\n * Set the editing configuration for a language.\n */\nexport function setLanguageConfiguration(languageId, configuration) {\n  const languageService = StandaloneServices.get(ILanguageService);\n  if (!languageService.isRegisteredLanguageId(languageId)) {\n    throw new Error(`Cannot set configuration for unknown language ${languageId}`);\n  }\n  const languageConfigurationService = StandaloneServices.get(ILanguageConfigurationService);\n  return languageConfigurationService.register(languageId, configuration, 100);\n}\n/**\n * @internal\n */\nexport class EncodedTokenizationSupportAdapter {\n  constructor(languageId, actual) {\n    this._languageId = languageId;\n    this._actual = actual;\n  }\n  getInitialState() {\n    return this._actual.getInitialState();\n  }\n  tokenize(line, hasEOL, state) {\n    if (typeof this._actual.tokenize === 'function') {\n      return TokenizationSupportAdapter.adaptTokenize(this._languageId, this._actual, line, state);\n    }\n    throw new Error('Not supported!');\n  }\n  tokenizeEncoded(line, hasEOL, state) {\n    const result = this._actual.tokenizeEncoded(line, state);\n    return new languages.EncodedTokenizationResult(result.tokens, result.endState);\n  }\n}\n/**\n * @internal\n */\nexport class TokenizationSupportAdapter {\n  constructor(_languageId, _actual, _languageService, _standaloneThemeService) {\n    this._languageId = _languageId;\n    this._actual = _actual;\n    this._languageService = _languageService;\n    this._standaloneThemeService = _standaloneThemeService;\n  }\n  getInitialState() {\n    return this._actual.getInitialState();\n  }\n  static _toClassicTokens(tokens, language) {\n    const result = [];\n    let previousStartIndex = 0;\n    for (let i = 0, len = tokens.length; i < len; i++) {\n      const t = tokens[i];\n      let startIndex = t.startIndex;\n      // Prevent issues stemming from a buggy external tokenizer.\n      if (i === 0) {\n        // Force first token to start at first index!\n        startIndex = 0;\n      } else if (startIndex < previousStartIndex) {\n        // Force tokens to be after one another!\n        startIndex = previousStartIndex;\n      }\n      result[i] = new languages.Token(startIndex, t.scopes, language);\n      previousStartIndex = startIndex;\n    }\n    return result;\n  }\n  static adaptTokenize(language, actual, line, state) {\n    const actualResult = actual.tokenize(line, state);\n    const tokens = TokenizationSupportAdapter._toClassicTokens(actualResult.tokens, language);\n    let endState;\n    // try to save an object if possible\n    if (actualResult.endState.equals(state)) {\n      endState = state;\n    } else {\n      endState = actualResult.endState;\n    }\n    return new languages.TokenizationResult(tokens, endState);\n  }\n  tokenize(line, hasEOL, state) {\n    return TokenizationSupportAdapter.adaptTokenize(this._languageId, this._actual, line, state);\n  }\n  _toBinaryTokens(languageIdCodec, tokens) {\n    const languageId = languageIdCodec.encodeLanguageId(this._languageId);\n    const tokenTheme = this._standaloneThemeService.getColorTheme().tokenTheme;\n    const result = [];\n    let resultLen = 0;\n    let previousStartIndex = 0;\n    for (let i = 0, len = tokens.length; i < len; i++) {\n      const t = tokens[i];\n      const metadata = tokenTheme.match(languageId, t.scopes);\n      if (resultLen > 0 && result[resultLen - 1] === metadata) {\n        // same metadata\n        continue;\n      }\n      let startIndex = t.startIndex;\n      // Prevent issues stemming from a buggy external tokenizer.\n      if (i === 0) {\n        // Force first token to start at first index!\n        startIndex = 0;\n      } else if (startIndex < previousStartIndex) {\n        // Force tokens to be after one another!\n        startIndex = previousStartIndex;\n      }\n      result[resultLen++] = startIndex;\n      result[resultLen++] = metadata;\n      previousStartIndex = startIndex;\n    }\n    const actualResult = new Uint32Array(resultLen);\n    for (let i = 0; i < resultLen; i++) {\n      actualResult[i] = result[i];\n    }\n    return actualResult;\n  }\n  tokenizeEncoded(line, hasEOL, state) {\n    const actualResult = this._actual.tokenize(line, state);\n    const tokens = this._toBinaryTokens(this._languageService.languageIdCodec, actualResult.tokens);\n    let endState;\n    // try to save an object if possible\n    if (actualResult.endState.equals(state)) {\n      endState = state;\n    } else {\n      endState = actualResult.endState;\n    }\n    return new languages.EncodedTokenizationResult(tokens, endState);\n  }\n}\nfunction isATokensProvider(provider) {\n  return typeof provider.getInitialState === 'function';\n}\nfunction isEncodedTokensProvider(provider) {\n  return 'tokenizeEncoded' in provider;\n}\nfunction isThenable(obj) {\n  return obj && typeof obj.then === 'function';\n}\n/**\n * Change the color map that is used for token colors.\n * Supported formats (hex): #RRGGBB, $RRGGBBAA, #RGB, #RGBA\n */\nexport function setColorMap(colorMap) {\n  const standaloneThemeService = StandaloneServices.get(IStandaloneThemeService);\n  if (colorMap) {\n    const result = [null];\n    for (let i = 1, len = colorMap.length; i < len; i++) {\n      result[i] = Color.fromHex(colorMap[i]);\n    }\n    standaloneThemeService.setColorMapOverride(result);\n  } else {\n    standaloneThemeService.setColorMapOverride(null);\n  }\n}\n/**\n * @internal\n */\nfunction createTokenizationSupportAdapter(languageId, provider) {\n  if (isEncodedTokensProvider(provider)) {\n    return new EncodedTokenizationSupportAdapter(languageId, provider);\n  } else {\n    return new TokenizationSupportAdapter(languageId, provider, StandaloneServices.get(ILanguageService), StandaloneServices.get(IStandaloneThemeService));\n  }\n}\n/**\n * Register a tokens provider factory for a language. This tokenizer will be exclusive with a tokenizer\n * set using `setTokensProvider` or one created using `setMonarchTokensProvider`, but will work together\n * with a tokens provider set using `registerDocumentSemanticTokensProvider` or `registerDocumentRangeSemanticTokensProvider`.\n */\nexport function registerTokensProviderFactory(languageId, factory) {\n  const adaptedFactory = {\n    createTokenizationSupport: () => __awaiter(this, void 0, void 0, function* () {\n      const result = yield Promise.resolve(factory.create());\n      if (!result) {\n        return null;\n      }\n      if (isATokensProvider(result)) {\n        return createTokenizationSupportAdapter(languageId, result);\n      }\n      return new MonarchTokenizer(StandaloneServices.get(ILanguageService), StandaloneServices.get(IStandaloneThemeService), languageId, compile(languageId, result), StandaloneServices.get(IConfigurationService));\n    })\n  };\n  return languages.TokenizationRegistry.registerFactory(languageId, adaptedFactory);\n}\n/**\n * Set the tokens provider for a language (manual implementation). This tokenizer will be exclusive\n * with a tokenizer created using `setMonarchTokensProvider`, or with `registerTokensProviderFactory`,\n * but will work together with a tokens provider set using `registerDocumentSemanticTokensProvider`\n * or `registerDocumentRangeSemanticTokensProvider`.\n */\nexport function setTokensProvider(languageId, provider) {\n  const languageService = StandaloneServices.get(ILanguageService);\n  if (!languageService.isRegisteredLanguageId(languageId)) {\n    throw new Error(`Cannot set tokens provider for unknown language ${languageId}`);\n  }\n  if (isThenable(provider)) {\n    return registerTokensProviderFactory(languageId, {\n      create: () => provider\n    });\n  }\n  return languages.TokenizationRegistry.register(languageId, createTokenizationSupportAdapter(languageId, provider));\n}\n/**\n * Set the tokens provider for a language (monarch implementation). This tokenizer will be exclusive\n * with a tokenizer set using `setTokensProvider`, or with `registerTokensProviderFactory`, but will\n * work together with a tokens provider set using `registerDocumentSemanticTokensProvider` or\n * `registerDocumentRangeSemanticTokensProvider`.\n */\nexport function setMonarchTokensProvider(languageId, languageDef) {\n  const create = languageDef => {\n    return new MonarchTokenizer(StandaloneServices.get(ILanguageService), StandaloneServices.get(IStandaloneThemeService), languageId, compile(languageId, languageDef), StandaloneServices.get(IConfigurationService));\n  };\n  if (isThenable(languageDef)) {\n    return registerTokensProviderFactory(languageId, {\n      create: () => languageDef\n    });\n  }\n  return languages.TokenizationRegistry.register(languageId, create(languageDef));\n}\n/**\n * Register a reference provider (used by e.g. reference search).\n */\nexport function registerReferenceProvider(languageSelector, provider) {\n  const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n  return languageFeaturesService.referenceProvider.register(languageSelector, provider);\n}\n/**\n * Register a rename provider (used by e.g. rename symbol).\n */\nexport function registerRenameProvider(languageSelector, provider) {\n  const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n  return languageFeaturesService.renameProvider.register(languageSelector, provider);\n}\n/**\n * Register a signature help provider (used by e.g. parameter hints).\n */\nexport function registerSignatureHelpProvider(languageSelector, provider) {\n  const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n  return languageFeaturesService.signatureHelpProvider.register(languageSelector, provider);\n}\n/**\n * Register a hover provider (used by e.g. editor hover).\n */\nexport function registerHoverProvider(languageSelector, provider) {\n  const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n  return languageFeaturesService.hoverProvider.register(languageSelector, {\n    provideHover: (model, position, token) => {\n      const word = model.getWordAtPosition(position);\n      return Promise.resolve(provider.provideHover(model, position, token)).then(value => {\n        if (!value) {\n          return undefined;\n        }\n        if (!value.range && word) {\n          value.range = new Range(position.lineNumber, word.startColumn, position.lineNumber, word.endColumn);\n        }\n        if (!value.range) {\n          value.range = new Range(position.lineNumber, position.column, position.lineNumber, position.column);\n        }\n        return value;\n      });\n    }\n  });\n}\n/**\n * Register a document symbol provider (used by e.g. outline).\n */\nexport function registerDocumentSymbolProvider(languageSelector, provider) {\n  const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n  return languageFeaturesService.documentSymbolProvider.register(languageSelector, provider);\n}\n/**\n * Register a document highlight provider (used by e.g. highlight occurrences).\n */\nexport function registerDocumentHighlightProvider(languageSelector, provider) {\n  const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n  return languageFeaturesService.documentHighlightProvider.register(languageSelector, provider);\n}\n/**\n * Register an linked editing range provider.\n */\nexport function registerLinkedEditingRangeProvider(languageSelector, provider) {\n  const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n  return languageFeaturesService.linkedEditingRangeProvider.register(languageSelector, provider);\n}\n/**\n * Register a definition provider (used by e.g. go to definition).\n */\nexport function registerDefinitionProvider(languageSelector, provider) {\n  const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n  return languageFeaturesService.definitionProvider.register(languageSelector, provider);\n}\n/**\n * Register a implementation provider (used by e.g. go to implementation).\n */\nexport function registerImplementationProvider(languageSelector, provider) {\n  const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n  return languageFeaturesService.implementationProvider.register(languageSelector, provider);\n}\n/**\n * Register a type definition provider (used by e.g. go to type definition).\n */\nexport function registerTypeDefinitionProvider(languageSelector, provider) {\n  const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n  return languageFeaturesService.typeDefinitionProvider.register(languageSelector, provider);\n}\n/**\n * Register a code lens provider (used by e.g. inline code lenses).\n */\nexport function registerCodeLensProvider(languageSelector, provider) {\n  const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n  return languageFeaturesService.codeLensProvider.register(languageSelector, provider);\n}\n/**\n * Register a code action provider (used by e.g. quick fix).\n */\nexport function registerCodeActionProvider(languageSelector, provider, metadata) {\n  const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n  return languageFeaturesService.codeActionProvider.register(languageSelector, {\n    providedCodeActionKinds: metadata === null || metadata === void 0 ? void 0 : metadata.providedCodeActionKinds,\n    documentation: metadata === null || metadata === void 0 ? void 0 : metadata.documentation,\n    provideCodeActions: (model, range, context, token) => {\n      const markerService = StandaloneServices.get(IMarkerService);\n      const markers = markerService.read({\n        resource: model.uri\n      }).filter(m => {\n        return Range.areIntersectingOrTouching(m, range);\n      });\n      return provider.provideCodeActions(model, range, {\n        markers,\n        only: context.only,\n        trigger: context.trigger\n      }, token);\n    },\n    resolveCodeAction: provider.resolveCodeAction\n  });\n}\n/**\n * Register a formatter that can handle only entire models.\n */\nexport function registerDocumentFormattingEditProvider(languageSelector, provider) {\n  const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n  return languageFeaturesService.documentFormattingEditProvider.register(languageSelector, provider);\n}\n/**\n * Register a formatter that can handle a range inside a model.\n */\nexport function registerDocumentRangeFormattingEditProvider(languageSelector, provider) {\n  const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n  return languageFeaturesService.documentRangeFormattingEditProvider.register(languageSelector, provider);\n}\n/**\n * Register a formatter than can do formatting as the user types.\n */\nexport function registerOnTypeFormattingEditProvider(languageSelector, provider) {\n  const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n  return languageFeaturesService.onTypeFormattingEditProvider.register(languageSelector, provider);\n}\n/**\n * Register a link provider that can find links in text.\n */\nexport function registerLinkProvider(languageSelector, provider) {\n  const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n  return languageFeaturesService.linkProvider.register(languageSelector, provider);\n}\n/**\n * Register a completion item provider (use by e.g. suggestions).\n */\nexport function registerCompletionItemProvider(languageSelector, provider) {\n  const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n  return languageFeaturesService.completionProvider.register(languageSelector, provider);\n}\n/**\n * Register a document color provider (used by Color Picker, Color Decorator).\n */\nexport function registerColorProvider(languageSelector, provider) {\n  const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n  return languageFeaturesService.colorProvider.register(languageSelector, provider);\n}\n/**\n * Register a folding range provider\n */\nexport function registerFoldingRangeProvider(languageSelector, provider) {\n  const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n  return languageFeaturesService.foldingRangeProvider.register(languageSelector, provider);\n}\n/**\n * Register a declaration provider\n */\nexport function registerDeclarationProvider(languageSelector, provider) {\n  const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n  return languageFeaturesService.declarationProvider.register(languageSelector, provider);\n}\n/**\n * Register a selection range provider\n */\nexport function registerSelectionRangeProvider(languageSelector, provider) {\n  const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n  return languageFeaturesService.selectionRangeProvider.register(languageSelector, provider);\n}\n/**\n * Register a document semantic tokens provider. A semantic tokens provider will complement and enhance a\n * simple top-down tokenizer. Simple top-down tokenizers can be set either via `setMonarchTokensProvider`\n * or `setTokensProvider`.\n *\n * For the best user experience, register both a semantic tokens provider and a top-down tokenizer.\n */\nexport function registerDocumentSemanticTokensProvider(languageSelector, provider) {\n  const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n  return languageFeaturesService.documentSemanticTokensProvider.register(languageSelector, provider);\n}\n/**\n * Register a document range semantic tokens provider. A semantic tokens provider will complement and enhance a\n * simple top-down tokenizer. Simple top-down tokenizers can be set either via `setMonarchTokensProvider`\n * or `setTokensProvider`.\n *\n * For the best user experience, register both a semantic tokens provider and a top-down tokenizer.\n */\nexport function registerDocumentRangeSemanticTokensProvider(languageSelector, provider) {\n  const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n  return languageFeaturesService.documentRangeSemanticTokensProvider.register(languageSelector, provider);\n}\n/**\n * Register an inline completions provider.\n */\nexport function registerInlineCompletionsProvider(languageSelector, provider) {\n  const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n  return languageFeaturesService.inlineCompletionsProvider.register(languageSelector, provider);\n}\n/**\n * Register an inlay hints provider.\n */\nexport function registerInlayHintsProvider(languageSelector, provider) {\n  const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n  return languageFeaturesService.inlayHintsProvider.register(languageSelector, provider);\n}\n/**\n * @internal\n */\nexport function createMonacoLanguagesAPI() {\n  return {\n    register: register,\n    getLanguages: getLanguages,\n    onLanguage: onLanguage,\n    getEncodedLanguageId: getEncodedLanguageId,\n    // provider methods\n    setLanguageConfiguration: setLanguageConfiguration,\n    setColorMap: setColorMap,\n    registerTokensProviderFactory: registerTokensProviderFactory,\n    setTokensProvider: setTokensProvider,\n    setMonarchTokensProvider: setMonarchTokensProvider,\n    registerReferenceProvider: registerReferenceProvider,\n    registerRenameProvider: registerRenameProvider,\n    registerCompletionItemProvider: registerCompletionItemProvider,\n    registerSignatureHelpProvider: registerSignatureHelpProvider,\n    registerHoverProvider: registerHoverProvider,\n    registerDocumentSymbolProvider: registerDocumentSymbolProvider,\n    registerDocumentHighlightProvider: registerDocumentHighlightProvider,\n    registerLinkedEditingRangeProvider: registerLinkedEditingRangeProvider,\n    registerDefinitionProvider: registerDefinitionProvider,\n    registerImplementationProvider: registerImplementationProvider,\n    registerTypeDefinitionProvider: registerTypeDefinitionProvider,\n    registerCodeLensProvider: registerCodeLensProvider,\n    registerCodeActionProvider: registerCodeActionProvider,\n    registerDocumentFormattingEditProvider: registerDocumentFormattingEditProvider,\n    registerDocumentRangeFormattingEditProvider: registerDocumentRangeFormattingEditProvider,\n    registerOnTypeFormattingEditProvider: registerOnTypeFormattingEditProvider,\n    registerLinkProvider: registerLinkProvider,\n    registerColorProvider: registerColorProvider,\n    registerFoldingRangeProvider: registerFoldingRangeProvider,\n    registerDeclarationProvider: registerDeclarationProvider,\n    registerSelectionRangeProvider: registerSelectionRangeProvider,\n    registerDocumentSemanticTokensProvider: registerDocumentSemanticTokensProvider,\n    registerDocumentRangeSemanticTokensProvider: registerDocumentRangeSemanticTokensProvider,\n    registerInlineCompletionsProvider: registerInlineCompletionsProvider,\n    registerInlayHintsProvider: registerInlayHintsProvider,\n    // enums\n    DocumentHighlightKind: standaloneEnums.DocumentHighlightKind,\n    CompletionItemKind: standaloneEnums.CompletionItemKind,\n    CompletionItemTag: standaloneEnums.CompletionItemTag,\n    CompletionItemInsertTextRule: standaloneEnums.CompletionItemInsertTextRule,\n    SymbolKind: standaloneEnums.SymbolKind,\n    SymbolTag: standaloneEnums.SymbolTag,\n    IndentAction: standaloneEnums.IndentAction,\n    CompletionTriggerKind: standaloneEnums.CompletionTriggerKind,\n    SignatureHelpTriggerKind: standaloneEnums.SignatureHelpTriggerKind,\n    InlayHintKind: standaloneEnums.InlayHintKind,\n    InlineCompletionTriggerKind: standaloneEnums.InlineCompletionTriggerKind,\n    CodeActionTriggerType: standaloneEnums.CodeActionTriggerType,\n    // classes\n    FoldingRangeKind: languages.FoldingRangeKind\n  };\n}","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Color","Range","languages","ILanguageConfigurationService","ModesRegistry","ILanguageService","standaloneEnums","StandaloneServices","compile","MonarchTokenizer","IStandaloneThemeService","IMarkerService","ILanguageFeaturesService","IConfigurationService","register","language","registerLanguage","getLanguages","concat","getEncodedLanguageId","languageId","languageService","get","languageIdCodec","encodeLanguageId","onLanguage","callback","disposable","onDidEncounterLanguage","encounteredLanguageId","dispose","setLanguageConfiguration","configuration","isRegisteredLanguageId","Error","languageConfigurationService","EncodedTokenizationSupportAdapter","constructor","actual","_languageId","_actual","getInitialState","tokenize","line","hasEOL","state","TokenizationSupportAdapter","adaptTokenize","tokenizeEncoded","EncodedTokenizationResult","tokens","endState","_languageService","_standaloneThemeService","_toClassicTokens","previousStartIndex","i","len","length","t","startIndex","Token","scopes","actualResult","equals","TokenizationResult","_toBinaryTokens","tokenTheme","getColorTheme","resultLen","metadata","match","Uint32Array","isATokensProvider","provider","isEncodedTokensProvider","isThenable","obj","setColorMap","colorMap","standaloneThemeService","fromHex","setColorMapOverride","createTokenizationSupportAdapter","registerTokensProviderFactory","factory","adaptedFactory","createTokenizationSupport","create","TokenizationRegistry","registerFactory","setTokensProvider","setMonarchTokensProvider","languageDef","registerReferenceProvider","languageSelector","languageFeaturesService","referenceProvider","registerRenameProvider","renameProvider","registerSignatureHelpProvider","signatureHelpProvider","registerHoverProvider","hoverProvider","provideHover","model","position","token","word","getWordAtPosition","undefined","range","lineNumber","startColumn","endColumn","column","registerDocumentSymbolProvider","documentSymbolProvider","registerDocumentHighlightProvider","documentHighlightProvider","registerLinkedEditingRangeProvider","linkedEditingRangeProvider","registerDefinitionProvider","definitionProvider","registerImplementationProvider","implementationProvider","registerTypeDefinitionProvider","typeDefinitionProvider","registerCodeLensProvider","codeLensProvider","registerCodeActionProvider","codeActionProvider","providedCodeActionKinds","documentation","provideCodeActions","context","markerService","markers","read","resource","uri","filter","m","areIntersectingOrTouching","only","trigger","resolveCodeAction","registerDocumentFormattingEditProvider","documentFormattingEditProvider","registerDocumentRangeFormattingEditProvider","documentRangeFormattingEditProvider","registerOnTypeFormattingEditProvider","onTypeFormattingEditProvider","registerLinkProvider","linkProvider","registerCompletionItemProvider","completionProvider","registerColorProvider","colorProvider","registerFoldingRangeProvider","foldingRangeProvider","registerDeclarationProvider","declarationProvider","registerSelectionRangeProvider","selectionRangeProvider","registerDocumentSemanticTokensProvider","documentSemanticTokensProvider","registerDocumentRangeSemanticTokensProvider","documentRangeSemanticTokensProvider","registerInlineCompletionsProvider","inlineCompletionsProvider","registerInlayHintsProvider","inlayHintsProvider","createMonacoLanguagesAPI","DocumentHighlightKind","CompletionItemKind","CompletionItemTag","CompletionItemInsertTextRule","SymbolKind","SymbolTag","IndentAction","CompletionTriggerKind","SignatureHelpTriggerKind","InlayHintKind","InlineCompletionTriggerKind","CodeActionTriggerType","FoldingRangeKind"],"sources":["/home/deathblade287/Desktop/AI-MODELS-TESTING/react-app/node_modules/monaco-editor/esm/vs/editor/standalone/browser/standaloneLanguages.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Color } from '../../../base/common/color.js';\nimport { Range } from '../../common/core/range.js';\nimport * as languages from '../../common/languages.js';\nimport { ILanguageConfigurationService } from '../../common/languages/languageConfigurationRegistry.js';\nimport { ModesRegistry } from '../../common/languages/modesRegistry.js';\nimport { ILanguageService } from '../../common/languages/language.js';\nimport * as standaloneEnums from '../../common/standalone/standaloneEnums.js';\nimport { StandaloneServices } from './standaloneServices.js';\nimport { compile } from '../common/monarch/monarchCompile.js';\nimport { MonarchTokenizer } from '../common/monarch/monarchLexer.js';\nimport { IStandaloneThemeService } from '../common/standaloneTheme.js';\nimport { IMarkerService } from '../../../platform/markers/common/markers.js';\nimport { ILanguageFeaturesService } from '../../common/services/languageFeatures.js';\nimport { IConfigurationService } from '../../../platform/configuration/common/configuration.js';\n/**\n * Register information about a new language.\n */\nexport function register(language) {\n    // Intentionally using the `ModesRegistry` here to avoid\n    // instantiating services too quickly in the standalone editor.\n    ModesRegistry.registerLanguage(language);\n}\n/**\n * Get the information of all the registered languages.\n */\nexport function getLanguages() {\n    let result = [];\n    result = result.concat(ModesRegistry.getLanguages());\n    return result;\n}\nexport function getEncodedLanguageId(languageId) {\n    const languageService = StandaloneServices.get(ILanguageService);\n    return languageService.languageIdCodec.encodeLanguageId(languageId);\n}\n/**\n * An event emitted when a language is needed for the first time (e.g. a model has it set).\n * @event\n */\nexport function onLanguage(languageId, callback) {\n    const languageService = StandaloneServices.get(ILanguageService);\n    const disposable = languageService.onDidEncounterLanguage((encounteredLanguageId) => {\n        if (encounteredLanguageId === languageId) {\n            // stop listening\n            disposable.dispose();\n            // invoke actual listener\n            callback();\n        }\n    });\n    return disposable;\n}\n/**\n * Set the editing configuration for a language.\n */\nexport function setLanguageConfiguration(languageId, configuration) {\n    const languageService = StandaloneServices.get(ILanguageService);\n    if (!languageService.isRegisteredLanguageId(languageId)) {\n        throw new Error(`Cannot set configuration for unknown language ${languageId}`);\n    }\n    const languageConfigurationService = StandaloneServices.get(ILanguageConfigurationService);\n    return languageConfigurationService.register(languageId, configuration, 100);\n}\n/**\n * @internal\n */\nexport class EncodedTokenizationSupportAdapter {\n    constructor(languageId, actual) {\n        this._languageId = languageId;\n        this._actual = actual;\n    }\n    getInitialState() {\n        return this._actual.getInitialState();\n    }\n    tokenize(line, hasEOL, state) {\n        if (typeof this._actual.tokenize === 'function') {\n            return TokenizationSupportAdapter.adaptTokenize(this._languageId, this._actual, line, state);\n        }\n        throw new Error('Not supported!');\n    }\n    tokenizeEncoded(line, hasEOL, state) {\n        const result = this._actual.tokenizeEncoded(line, state);\n        return new languages.EncodedTokenizationResult(result.tokens, result.endState);\n    }\n}\n/**\n * @internal\n */\nexport class TokenizationSupportAdapter {\n    constructor(_languageId, _actual, _languageService, _standaloneThemeService) {\n        this._languageId = _languageId;\n        this._actual = _actual;\n        this._languageService = _languageService;\n        this._standaloneThemeService = _standaloneThemeService;\n    }\n    getInitialState() {\n        return this._actual.getInitialState();\n    }\n    static _toClassicTokens(tokens, language) {\n        const result = [];\n        let previousStartIndex = 0;\n        for (let i = 0, len = tokens.length; i < len; i++) {\n            const t = tokens[i];\n            let startIndex = t.startIndex;\n            // Prevent issues stemming from a buggy external tokenizer.\n            if (i === 0) {\n                // Force first token to start at first index!\n                startIndex = 0;\n            }\n            else if (startIndex < previousStartIndex) {\n                // Force tokens to be after one another!\n                startIndex = previousStartIndex;\n            }\n            result[i] = new languages.Token(startIndex, t.scopes, language);\n            previousStartIndex = startIndex;\n        }\n        return result;\n    }\n    static adaptTokenize(language, actual, line, state) {\n        const actualResult = actual.tokenize(line, state);\n        const tokens = TokenizationSupportAdapter._toClassicTokens(actualResult.tokens, language);\n        let endState;\n        // try to save an object if possible\n        if (actualResult.endState.equals(state)) {\n            endState = state;\n        }\n        else {\n            endState = actualResult.endState;\n        }\n        return new languages.TokenizationResult(tokens, endState);\n    }\n    tokenize(line, hasEOL, state) {\n        return TokenizationSupportAdapter.adaptTokenize(this._languageId, this._actual, line, state);\n    }\n    _toBinaryTokens(languageIdCodec, tokens) {\n        const languageId = languageIdCodec.encodeLanguageId(this._languageId);\n        const tokenTheme = this._standaloneThemeService.getColorTheme().tokenTheme;\n        const result = [];\n        let resultLen = 0;\n        let previousStartIndex = 0;\n        for (let i = 0, len = tokens.length; i < len; i++) {\n            const t = tokens[i];\n            const metadata = tokenTheme.match(languageId, t.scopes);\n            if (resultLen > 0 && result[resultLen - 1] === metadata) {\n                // same metadata\n                continue;\n            }\n            let startIndex = t.startIndex;\n            // Prevent issues stemming from a buggy external tokenizer.\n            if (i === 0) {\n                // Force first token to start at first index!\n                startIndex = 0;\n            }\n            else if (startIndex < previousStartIndex) {\n                // Force tokens to be after one another!\n                startIndex = previousStartIndex;\n            }\n            result[resultLen++] = startIndex;\n            result[resultLen++] = metadata;\n            previousStartIndex = startIndex;\n        }\n        const actualResult = new Uint32Array(resultLen);\n        for (let i = 0; i < resultLen; i++) {\n            actualResult[i] = result[i];\n        }\n        return actualResult;\n    }\n    tokenizeEncoded(line, hasEOL, state) {\n        const actualResult = this._actual.tokenize(line, state);\n        const tokens = this._toBinaryTokens(this._languageService.languageIdCodec, actualResult.tokens);\n        let endState;\n        // try to save an object if possible\n        if (actualResult.endState.equals(state)) {\n            endState = state;\n        }\n        else {\n            endState = actualResult.endState;\n        }\n        return new languages.EncodedTokenizationResult(tokens, endState);\n    }\n}\nfunction isATokensProvider(provider) {\n    return (typeof provider.getInitialState === 'function');\n}\nfunction isEncodedTokensProvider(provider) {\n    return 'tokenizeEncoded' in provider;\n}\nfunction isThenable(obj) {\n    return obj && typeof obj.then === 'function';\n}\n/**\n * Change the color map that is used for token colors.\n * Supported formats (hex): #RRGGBB, $RRGGBBAA, #RGB, #RGBA\n */\nexport function setColorMap(colorMap) {\n    const standaloneThemeService = StandaloneServices.get(IStandaloneThemeService);\n    if (colorMap) {\n        const result = [null];\n        for (let i = 1, len = colorMap.length; i < len; i++) {\n            result[i] = Color.fromHex(colorMap[i]);\n        }\n        standaloneThemeService.setColorMapOverride(result);\n    }\n    else {\n        standaloneThemeService.setColorMapOverride(null);\n    }\n}\n/**\n * @internal\n */\nfunction createTokenizationSupportAdapter(languageId, provider) {\n    if (isEncodedTokensProvider(provider)) {\n        return new EncodedTokenizationSupportAdapter(languageId, provider);\n    }\n    else {\n        return new TokenizationSupportAdapter(languageId, provider, StandaloneServices.get(ILanguageService), StandaloneServices.get(IStandaloneThemeService));\n    }\n}\n/**\n * Register a tokens provider factory for a language. This tokenizer will be exclusive with a tokenizer\n * set using `setTokensProvider` or one created using `setMonarchTokensProvider`, but will work together\n * with a tokens provider set using `registerDocumentSemanticTokensProvider` or `registerDocumentRangeSemanticTokensProvider`.\n */\nexport function registerTokensProviderFactory(languageId, factory) {\n    const adaptedFactory = {\n        createTokenizationSupport: () => __awaiter(this, void 0, void 0, function* () {\n            const result = yield Promise.resolve(factory.create());\n            if (!result) {\n                return null;\n            }\n            if (isATokensProvider(result)) {\n                return createTokenizationSupportAdapter(languageId, result);\n            }\n            return new MonarchTokenizer(StandaloneServices.get(ILanguageService), StandaloneServices.get(IStandaloneThemeService), languageId, compile(languageId, result), StandaloneServices.get(IConfigurationService));\n        })\n    };\n    return languages.TokenizationRegistry.registerFactory(languageId, adaptedFactory);\n}\n/**\n * Set the tokens provider for a language (manual implementation). This tokenizer will be exclusive\n * with a tokenizer created using `setMonarchTokensProvider`, or with `registerTokensProviderFactory`,\n * but will work together with a tokens provider set using `registerDocumentSemanticTokensProvider`\n * or `registerDocumentRangeSemanticTokensProvider`.\n */\nexport function setTokensProvider(languageId, provider) {\n    const languageService = StandaloneServices.get(ILanguageService);\n    if (!languageService.isRegisteredLanguageId(languageId)) {\n        throw new Error(`Cannot set tokens provider for unknown language ${languageId}`);\n    }\n    if (isThenable(provider)) {\n        return registerTokensProviderFactory(languageId, { create: () => provider });\n    }\n    return languages.TokenizationRegistry.register(languageId, createTokenizationSupportAdapter(languageId, provider));\n}\n/**\n * Set the tokens provider for a language (monarch implementation). This tokenizer will be exclusive\n * with a tokenizer set using `setTokensProvider`, or with `registerTokensProviderFactory`, but will\n * work together with a tokens provider set using `registerDocumentSemanticTokensProvider` or\n * `registerDocumentRangeSemanticTokensProvider`.\n */\nexport function setMonarchTokensProvider(languageId, languageDef) {\n    const create = (languageDef) => {\n        return new MonarchTokenizer(StandaloneServices.get(ILanguageService), StandaloneServices.get(IStandaloneThemeService), languageId, compile(languageId, languageDef), StandaloneServices.get(IConfigurationService));\n    };\n    if (isThenable(languageDef)) {\n        return registerTokensProviderFactory(languageId, { create: () => languageDef });\n    }\n    return languages.TokenizationRegistry.register(languageId, create(languageDef));\n}\n/**\n * Register a reference provider (used by e.g. reference search).\n */\nexport function registerReferenceProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.referenceProvider.register(languageSelector, provider);\n}\n/**\n * Register a rename provider (used by e.g. rename symbol).\n */\nexport function registerRenameProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.renameProvider.register(languageSelector, provider);\n}\n/**\n * Register a signature help provider (used by e.g. parameter hints).\n */\nexport function registerSignatureHelpProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.signatureHelpProvider.register(languageSelector, provider);\n}\n/**\n * Register a hover provider (used by e.g. editor hover).\n */\nexport function registerHoverProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.hoverProvider.register(languageSelector, {\n        provideHover: (model, position, token) => {\n            const word = model.getWordAtPosition(position);\n            return Promise.resolve(provider.provideHover(model, position, token)).then((value) => {\n                if (!value) {\n                    return undefined;\n                }\n                if (!value.range && word) {\n                    value.range = new Range(position.lineNumber, word.startColumn, position.lineNumber, word.endColumn);\n                }\n                if (!value.range) {\n                    value.range = new Range(position.lineNumber, position.column, position.lineNumber, position.column);\n                }\n                return value;\n            });\n        }\n    });\n}\n/**\n * Register a document symbol provider (used by e.g. outline).\n */\nexport function registerDocumentSymbolProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.documentSymbolProvider.register(languageSelector, provider);\n}\n/**\n * Register a document highlight provider (used by e.g. highlight occurrences).\n */\nexport function registerDocumentHighlightProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.documentHighlightProvider.register(languageSelector, provider);\n}\n/**\n * Register an linked editing range provider.\n */\nexport function registerLinkedEditingRangeProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.linkedEditingRangeProvider.register(languageSelector, provider);\n}\n/**\n * Register a definition provider (used by e.g. go to definition).\n */\nexport function registerDefinitionProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.definitionProvider.register(languageSelector, provider);\n}\n/**\n * Register a implementation provider (used by e.g. go to implementation).\n */\nexport function registerImplementationProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.implementationProvider.register(languageSelector, provider);\n}\n/**\n * Register a type definition provider (used by e.g. go to type definition).\n */\nexport function registerTypeDefinitionProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.typeDefinitionProvider.register(languageSelector, provider);\n}\n/**\n * Register a code lens provider (used by e.g. inline code lenses).\n */\nexport function registerCodeLensProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.codeLensProvider.register(languageSelector, provider);\n}\n/**\n * Register a code action provider (used by e.g. quick fix).\n */\nexport function registerCodeActionProvider(languageSelector, provider, metadata) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.codeActionProvider.register(languageSelector, {\n        providedCodeActionKinds: metadata === null || metadata === void 0 ? void 0 : metadata.providedCodeActionKinds,\n        documentation: metadata === null || metadata === void 0 ? void 0 : metadata.documentation,\n        provideCodeActions: (model, range, context, token) => {\n            const markerService = StandaloneServices.get(IMarkerService);\n            const markers = markerService.read({ resource: model.uri }).filter(m => {\n                return Range.areIntersectingOrTouching(m, range);\n            });\n            return provider.provideCodeActions(model, range, { markers, only: context.only, trigger: context.trigger }, token);\n        },\n        resolveCodeAction: provider.resolveCodeAction\n    });\n}\n/**\n * Register a formatter that can handle only entire models.\n */\nexport function registerDocumentFormattingEditProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.documentFormattingEditProvider.register(languageSelector, provider);\n}\n/**\n * Register a formatter that can handle a range inside a model.\n */\nexport function registerDocumentRangeFormattingEditProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.documentRangeFormattingEditProvider.register(languageSelector, provider);\n}\n/**\n * Register a formatter than can do formatting as the user types.\n */\nexport function registerOnTypeFormattingEditProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.onTypeFormattingEditProvider.register(languageSelector, provider);\n}\n/**\n * Register a link provider that can find links in text.\n */\nexport function registerLinkProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.linkProvider.register(languageSelector, provider);\n}\n/**\n * Register a completion item provider (use by e.g. suggestions).\n */\nexport function registerCompletionItemProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.completionProvider.register(languageSelector, provider);\n}\n/**\n * Register a document color provider (used by Color Picker, Color Decorator).\n */\nexport function registerColorProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.colorProvider.register(languageSelector, provider);\n}\n/**\n * Register a folding range provider\n */\nexport function registerFoldingRangeProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.foldingRangeProvider.register(languageSelector, provider);\n}\n/**\n * Register a declaration provider\n */\nexport function registerDeclarationProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.declarationProvider.register(languageSelector, provider);\n}\n/**\n * Register a selection range provider\n */\nexport function registerSelectionRangeProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.selectionRangeProvider.register(languageSelector, provider);\n}\n/**\n * Register a document semantic tokens provider. A semantic tokens provider will complement and enhance a\n * simple top-down tokenizer. Simple top-down tokenizers can be set either via `setMonarchTokensProvider`\n * or `setTokensProvider`.\n *\n * For the best user experience, register both a semantic tokens provider and a top-down tokenizer.\n */\nexport function registerDocumentSemanticTokensProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.documentSemanticTokensProvider.register(languageSelector, provider);\n}\n/**\n * Register a document range semantic tokens provider. A semantic tokens provider will complement and enhance a\n * simple top-down tokenizer. Simple top-down tokenizers can be set either via `setMonarchTokensProvider`\n * or `setTokensProvider`.\n *\n * For the best user experience, register both a semantic tokens provider and a top-down tokenizer.\n */\nexport function registerDocumentRangeSemanticTokensProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.documentRangeSemanticTokensProvider.register(languageSelector, provider);\n}\n/**\n * Register an inline completions provider.\n */\nexport function registerInlineCompletionsProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.inlineCompletionsProvider.register(languageSelector, provider);\n}\n/**\n * Register an inlay hints provider.\n */\nexport function registerInlayHintsProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.inlayHintsProvider.register(languageSelector, provider);\n}\n/**\n * @internal\n */\nexport function createMonacoLanguagesAPI() {\n    return {\n        register: register,\n        getLanguages: getLanguages,\n        onLanguage: onLanguage,\n        getEncodedLanguageId: getEncodedLanguageId,\n        // provider methods\n        setLanguageConfiguration: setLanguageConfiguration,\n        setColorMap: setColorMap,\n        registerTokensProviderFactory: registerTokensProviderFactory,\n        setTokensProvider: setTokensProvider,\n        setMonarchTokensProvider: setMonarchTokensProvider,\n        registerReferenceProvider: registerReferenceProvider,\n        registerRenameProvider: registerRenameProvider,\n        registerCompletionItemProvider: registerCompletionItemProvider,\n        registerSignatureHelpProvider: registerSignatureHelpProvider,\n        registerHoverProvider: registerHoverProvider,\n        registerDocumentSymbolProvider: registerDocumentSymbolProvider,\n        registerDocumentHighlightProvider: registerDocumentHighlightProvider,\n        registerLinkedEditingRangeProvider: registerLinkedEditingRangeProvider,\n        registerDefinitionProvider: registerDefinitionProvider,\n        registerImplementationProvider: registerImplementationProvider,\n        registerTypeDefinitionProvider: registerTypeDefinitionProvider,\n        registerCodeLensProvider: registerCodeLensProvider,\n        registerCodeActionProvider: registerCodeActionProvider,\n        registerDocumentFormattingEditProvider: registerDocumentFormattingEditProvider,\n        registerDocumentRangeFormattingEditProvider: registerDocumentRangeFormattingEditProvider,\n        registerOnTypeFormattingEditProvider: registerOnTypeFormattingEditProvider,\n        registerLinkProvider: registerLinkProvider,\n        registerColorProvider: registerColorProvider,\n        registerFoldingRangeProvider: registerFoldingRangeProvider,\n        registerDeclarationProvider: registerDeclarationProvider,\n        registerSelectionRangeProvider: registerSelectionRangeProvider,\n        registerDocumentSemanticTokensProvider: registerDocumentSemanticTokensProvider,\n        registerDocumentRangeSemanticTokensProvider: registerDocumentRangeSemanticTokensProvider,\n        registerInlineCompletionsProvider: registerInlineCompletionsProvider,\n        registerInlayHintsProvider: registerInlayHintsProvider,\n        // enums\n        DocumentHighlightKind: standaloneEnums.DocumentHighlightKind,\n        CompletionItemKind: standaloneEnums.CompletionItemKind,\n        CompletionItemTag: standaloneEnums.CompletionItemTag,\n        CompletionItemInsertTextRule: standaloneEnums.CompletionItemInsertTextRule,\n        SymbolKind: standaloneEnums.SymbolKind,\n        SymbolTag: standaloneEnums.SymbolTag,\n        IndentAction: standaloneEnums.IndentAction,\n        CompletionTriggerKind: standaloneEnums.CompletionTriggerKind,\n        SignatureHelpTriggerKind: standaloneEnums.SignatureHelpTriggerKind,\n        InlayHintKind: standaloneEnums.InlayHintKind,\n        InlineCompletionTriggerKind: standaloneEnums.InlineCompletionTriggerKind,\n        CodeActionTriggerType: standaloneEnums.CodeActionTriggerType,\n        // classes\n        FoldingRangeKind: languages.FoldingRangeKind,\n    };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}