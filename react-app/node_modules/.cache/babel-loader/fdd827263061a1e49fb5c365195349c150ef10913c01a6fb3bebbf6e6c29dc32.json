{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { alert } from '../../../../base/browser/ui/aria/aria.js';\nimport { asArray, isNonEmptyArray } from '../../../../base/common/arrays.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { onUnexpectedExternalError } from '../../../../base/common/errors.js';\nimport { Iterable } from '../../../../base/common/iterator.js';\nimport { LinkedList } from '../../../../base/common/linkedList.js';\nimport { assertType } from '../../../../base/common/types.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { EditorStateCancellationTokenSource, TextModelCancellationTokenSource } from '../../editorState/browser/editorState.js';\nimport { isCodeEditor } from '../../../browser/editorBrowser.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { IEditorWorkerService } from '../../../common/services/editorWorker.js';\nimport { ITextModelService } from '../../../common/services/resolverService.js';\nimport { FormattingEdit } from './formattingEdit.js';\nimport * as nls from '../../../../nls.js';\nimport { CommandsRegistry } from '../../../../platform/commands/common/commands.js';\nimport { ExtensionIdentifier } from '../../../../platform/extensions/common/extensions.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nexport function alertFormattingEdits(edits) {\n  edits = edits.filter(edit => edit.range);\n  if (!edits.length) {\n    return;\n  }\n  let {\n    range\n  } = edits[0];\n  for (let i = 1; i < edits.length; i++) {\n    range = Range.plusRange(range, edits[i].range);\n  }\n  const {\n    startLineNumber,\n    endLineNumber\n  } = range;\n  if (startLineNumber === endLineNumber) {\n    if (edits.length === 1) {\n      alert(nls.localize('hint11', \"Made 1 formatting edit on line {0}\", startLineNumber));\n    } else {\n      alert(nls.localize('hintn1', \"Made {0} formatting edits on line {1}\", edits.length, startLineNumber));\n    }\n  } else {\n    if (edits.length === 1) {\n      alert(nls.localize('hint1n', \"Made 1 formatting edit between lines {0} and {1}\", startLineNumber, endLineNumber));\n    } else {\n      alert(nls.localize('hintnn', \"Made {0} formatting edits between lines {1} and {2}\", edits.length, startLineNumber, endLineNumber));\n    }\n  }\n}\nexport function getRealAndSyntheticDocumentFormattersOrdered(documentFormattingEditProvider, documentRangeFormattingEditProvider, model) {\n  const result = [];\n  const seen = new Set();\n  // (1) add all document formatter\n  const docFormatter = documentFormattingEditProvider.ordered(model);\n  for (const formatter of docFormatter) {\n    result.push(formatter);\n    if (formatter.extensionId) {\n      seen.add(ExtensionIdentifier.toKey(formatter.extensionId));\n    }\n  }\n  // (2) add all range formatter as document formatter (unless the same extension already did that)\n  const rangeFormatter = documentRangeFormattingEditProvider.ordered(model);\n  for (const formatter of rangeFormatter) {\n    if (formatter.extensionId) {\n      if (seen.has(ExtensionIdentifier.toKey(formatter.extensionId))) {\n        continue;\n      }\n      seen.add(ExtensionIdentifier.toKey(formatter.extensionId));\n    }\n    result.push({\n      displayName: formatter.displayName,\n      extensionId: formatter.extensionId,\n      provideDocumentFormattingEdits(model, options, token) {\n        return formatter.provideDocumentRangeFormattingEdits(model, model.getFullModelRange(), options, token);\n      }\n    });\n  }\n  return result;\n}\nexport class FormattingConflicts {\n  static setFormatterSelector(selector) {\n    const remove = FormattingConflicts._selectors.unshift(selector);\n    return {\n      dispose: remove\n    };\n  }\n  static select(formatter, document, mode) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (formatter.length === 0) {\n        return undefined;\n      }\n      const selector = Iterable.first(FormattingConflicts._selectors);\n      if (selector) {\n        return yield selector(formatter, document, mode);\n      }\n      return undefined;\n    });\n  }\n}\nFormattingConflicts._selectors = new LinkedList();\nexport function formatDocumentRangesWithSelectedProvider(accessor, editorOrModel, rangeOrRanges, mode, progress, token) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const instaService = accessor.get(IInstantiationService);\n    const {\n      documentRangeFormattingEditProvider: documentRangeFormattingEditProviderRegistry\n    } = accessor.get(ILanguageFeaturesService);\n    const model = isCodeEditor(editorOrModel) ? editorOrModel.getModel() : editorOrModel;\n    const provider = documentRangeFormattingEditProviderRegistry.ordered(model);\n    const selected = yield FormattingConflicts.select(provider, model, mode);\n    if (selected) {\n      progress.report(selected);\n      yield instaService.invokeFunction(formatDocumentRangesWithProvider, selected, editorOrModel, rangeOrRanges, token);\n    }\n  });\n}\nexport function formatDocumentRangesWithProvider(accessor, provider, editorOrModel, rangeOrRanges, token) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const workerService = accessor.get(IEditorWorkerService);\n    let model;\n    let cts;\n    if (isCodeEditor(editorOrModel)) {\n      model = editorOrModel.getModel();\n      cts = new EditorStateCancellationTokenSource(editorOrModel, 1 /* CodeEditorStateFlag.Value */ | 4 /* CodeEditorStateFlag.Position */, undefined, token);\n    } else {\n      model = editorOrModel;\n      cts = new TextModelCancellationTokenSource(editorOrModel, token);\n    }\n    // make sure that ranges don't overlap nor touch each other\n    const ranges = [];\n    let len = 0;\n    for (const range of asArray(rangeOrRanges).sort(Range.compareRangesUsingStarts)) {\n      if (len > 0 && Range.areIntersectingOrTouching(ranges[len - 1], range)) {\n        ranges[len - 1] = Range.fromPositions(ranges[len - 1].getStartPosition(), range.getEndPosition());\n      } else {\n        len = ranges.push(range);\n      }\n    }\n    const computeEdits = range => __awaiter(this, void 0, void 0, function* () {\n      return (yield provider.provideDocumentRangeFormattingEdits(model, range, model.getFormattingOptions(), cts.token)) || [];\n    });\n    const hasIntersectingEdit = (a, b) => {\n      if (!a.length || !b.length) {\n        return false;\n      }\n      // quick exit if the list of ranges are completely unrelated [O(n)]\n      const mergedA = a.reduce((acc, val) => {\n        return Range.plusRange(acc, val.range);\n      }, a[0].range);\n      if (!b.some(x => {\n        return Range.intersectRanges(mergedA, x.range);\n      })) {\n        return false;\n      }\n      // fallback to a complete check [O(n^2)]\n      for (const edit of a) {\n        for (const otherEdit of b) {\n          if (Range.intersectRanges(edit.range, otherEdit.range)) {\n            return true;\n          }\n        }\n      }\n      return false;\n    };\n    const allEdits = [];\n    const rawEditsList = [];\n    try {\n      for (const range of ranges) {\n        if (cts.token.isCancellationRequested) {\n          return true;\n        }\n        rawEditsList.push(yield computeEdits(range));\n      }\n      for (let i = 0; i < ranges.length; ++i) {\n        for (let j = i + 1; j < ranges.length; ++j) {\n          if (cts.token.isCancellationRequested) {\n            return true;\n          }\n          if (hasIntersectingEdit(rawEditsList[i], rawEditsList[j])) {\n            // Merge ranges i and j into a single range, recompute the associated edits\n            const mergedRange = Range.plusRange(ranges[i], ranges[j]);\n            const edits = yield computeEdits(mergedRange);\n            ranges.splice(j, 1);\n            ranges.splice(i, 1);\n            ranges.push(mergedRange);\n            rawEditsList.splice(j, 1);\n            rawEditsList.splice(i, 1);\n            rawEditsList.push(edits);\n            // Restart scanning\n            i = 0;\n            j = 0;\n          }\n        }\n      }\n      for (const rawEdits of rawEditsList) {\n        if (cts.token.isCancellationRequested) {\n          return true;\n        }\n        const minimalEdits = yield workerService.computeMoreMinimalEdits(model.uri, rawEdits);\n        if (minimalEdits) {\n          allEdits.push(...minimalEdits);\n        }\n      }\n    } finally {\n      cts.dispose();\n    }\n    if (allEdits.length === 0) {\n      return false;\n    }\n    if (isCodeEditor(editorOrModel)) {\n      // use editor to apply edits\n      FormattingEdit.execute(editorOrModel, allEdits, true);\n      alertFormattingEdits(allEdits);\n      editorOrModel.revealPositionInCenterIfOutsideViewport(editorOrModel.getPosition(), 1 /* ScrollType.Immediate */);\n    } else {\n      // use model to apply edits\n      const [{\n        range\n      }] = allEdits;\n      const initialSelection = new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\n      model.pushEditOperations([initialSelection], allEdits.map(edit => {\n        return {\n          text: edit.text,\n          range: Range.lift(edit.range),\n          forceMoveMarkers: true\n        };\n      }), undoEdits => {\n        for (const {\n          range\n        } of undoEdits) {\n          if (Range.areIntersectingOrTouching(range, initialSelection)) {\n            return [new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn)];\n          }\n        }\n        return null;\n      });\n    }\n    return true;\n  });\n}\nexport function formatDocumentWithSelectedProvider(accessor, editorOrModel, mode, progress, token) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const instaService = accessor.get(IInstantiationService);\n    const languageFeaturesService = accessor.get(ILanguageFeaturesService);\n    const model = isCodeEditor(editorOrModel) ? editorOrModel.getModel() : editorOrModel;\n    const provider = getRealAndSyntheticDocumentFormattersOrdered(languageFeaturesService.documentFormattingEditProvider, languageFeaturesService.documentRangeFormattingEditProvider, model);\n    const selected = yield FormattingConflicts.select(provider, model, mode);\n    if (selected) {\n      progress.report(selected);\n      yield instaService.invokeFunction(formatDocumentWithProvider, selected, editorOrModel, mode, token);\n    }\n  });\n}\nexport function formatDocumentWithProvider(accessor, provider, editorOrModel, mode, token) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const workerService = accessor.get(IEditorWorkerService);\n    let model;\n    let cts;\n    if (isCodeEditor(editorOrModel)) {\n      model = editorOrModel.getModel();\n      cts = new EditorStateCancellationTokenSource(editorOrModel, 1 /* CodeEditorStateFlag.Value */ | 4 /* CodeEditorStateFlag.Position */, undefined, token);\n    } else {\n      model = editorOrModel;\n      cts = new TextModelCancellationTokenSource(editorOrModel, token);\n    }\n    let edits;\n    try {\n      const rawEdits = yield provider.provideDocumentFormattingEdits(model, model.getFormattingOptions(), cts.token);\n      edits = yield workerService.computeMoreMinimalEdits(model.uri, rawEdits);\n      if (cts.token.isCancellationRequested) {\n        return true;\n      }\n    } finally {\n      cts.dispose();\n    }\n    if (!edits || edits.length === 0) {\n      return false;\n    }\n    if (isCodeEditor(editorOrModel)) {\n      // use editor to apply edits\n      FormattingEdit.execute(editorOrModel, edits, mode !== 2 /* FormattingMode.Silent */);\n      if (mode !== 2 /* FormattingMode.Silent */) {\n        alertFormattingEdits(edits);\n        editorOrModel.revealPositionInCenterIfOutsideViewport(editorOrModel.getPosition(), 1 /* ScrollType.Immediate */);\n      }\n    } else {\n      // use model to apply edits\n      const [{\n        range\n      }] = edits;\n      const initialSelection = new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\n      model.pushEditOperations([initialSelection], edits.map(edit => {\n        return {\n          text: edit.text,\n          range: Range.lift(edit.range),\n          forceMoveMarkers: true\n        };\n      }), undoEdits => {\n        for (const {\n          range\n        } of undoEdits) {\n          if (Range.areIntersectingOrTouching(range, initialSelection)) {\n            return [new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn)];\n          }\n        }\n        return null;\n      });\n    }\n    return true;\n  });\n}\nexport function getDocumentRangeFormattingEditsUntilResult(workerService, languageFeaturesService, model, range, options, token) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const providers = languageFeaturesService.documentRangeFormattingEditProvider.ordered(model);\n    for (const provider of providers) {\n      const rawEdits = yield Promise.resolve(provider.provideDocumentRangeFormattingEdits(model, range, options, token)).catch(onUnexpectedExternalError);\n      if (isNonEmptyArray(rawEdits)) {\n        return yield workerService.computeMoreMinimalEdits(model.uri, rawEdits);\n      }\n    }\n    return undefined;\n  });\n}\nexport function getDocumentFormattingEditsUntilResult(workerService, languageFeaturesService, model, options, token) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const providers = getRealAndSyntheticDocumentFormattersOrdered(languageFeaturesService.documentFormattingEditProvider, languageFeaturesService.documentRangeFormattingEditProvider, model);\n    for (const provider of providers) {\n      const rawEdits = yield Promise.resolve(provider.provideDocumentFormattingEdits(model, options, token)).catch(onUnexpectedExternalError);\n      if (isNonEmptyArray(rawEdits)) {\n        return yield workerService.computeMoreMinimalEdits(model.uri, rawEdits);\n      }\n    }\n    return undefined;\n  });\n}\nexport function getOnTypeFormattingEdits(workerService, languageFeaturesService, model, position, ch, options, token) {\n  const providers = languageFeaturesService.onTypeFormattingEditProvider.ordered(model);\n  if (providers.length === 0) {\n    return Promise.resolve(undefined);\n  }\n  if (providers[0].autoFormatTriggerCharacters.indexOf(ch) < 0) {\n    return Promise.resolve(undefined);\n  }\n  return Promise.resolve(providers[0].provideOnTypeFormattingEdits(model, position, ch, options, token)).catch(onUnexpectedExternalError).then(edits => {\n    return workerService.computeMoreMinimalEdits(model.uri, edits);\n  });\n}\nCommandsRegistry.registerCommand('_executeFormatRangeProvider', function (accessor) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n  return __awaiter(this, void 0, void 0, function* () {\n    const [resource, range, options] = args;\n    assertType(URI.isUri(resource));\n    assertType(Range.isIRange(range));\n    const resolverService = accessor.get(ITextModelService);\n    const workerService = accessor.get(IEditorWorkerService);\n    const languageFeaturesService = accessor.get(ILanguageFeaturesService);\n    const reference = yield resolverService.createModelReference(resource);\n    try {\n      return getDocumentRangeFormattingEditsUntilResult(workerService, languageFeaturesService, reference.object.textEditorModel, Range.lift(range), options, CancellationToken.None);\n    } finally {\n      reference.dispose();\n    }\n  });\n});\nCommandsRegistry.registerCommand('_executeFormatDocumentProvider', function (accessor) {\n  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    args[_key2 - 1] = arguments[_key2];\n  }\n  return __awaiter(this, void 0, void 0, function* () {\n    const [resource, options] = args;\n    assertType(URI.isUri(resource));\n    const resolverService = accessor.get(ITextModelService);\n    const workerService = accessor.get(IEditorWorkerService);\n    const languageFeaturesService = accessor.get(ILanguageFeaturesService);\n    const reference = yield resolverService.createModelReference(resource);\n    try {\n      return getDocumentFormattingEditsUntilResult(workerService, languageFeaturesService, reference.object.textEditorModel, options, CancellationToken.None);\n    } finally {\n      reference.dispose();\n    }\n  });\n});\nCommandsRegistry.registerCommand('_executeFormatOnTypeProvider', function (accessor) {\n  for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n    args[_key3 - 1] = arguments[_key3];\n  }\n  return __awaiter(this, void 0, void 0, function* () {\n    const [resource, position, ch, options] = args;\n    assertType(URI.isUri(resource));\n    assertType(Position.isIPosition(position));\n    assertType(typeof ch === 'string');\n    const resolverService = accessor.get(ITextModelService);\n    const workerService = accessor.get(IEditorWorkerService);\n    const languageFeaturesService = accessor.get(ILanguageFeaturesService);\n    const reference = yield resolverService.createModelReference(resource);\n    try {\n      return getOnTypeFormattingEdits(workerService, languageFeaturesService, reference.object.textEditorModel, Position.lift(position), ch, options, CancellationToken.None);\n    } finally {\n      reference.dispose();\n    }\n  });\n});","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","alert","asArray","isNonEmptyArray","CancellationToken","onUnexpectedExternalError","Iterable","LinkedList","assertType","URI","EditorStateCancellationTokenSource","TextModelCancellationTokenSource","isCodeEditor","Position","Range","Selection","IEditorWorkerService","ITextModelService","FormattingEdit","nls","CommandsRegistry","ExtensionIdentifier","IInstantiationService","ILanguageFeaturesService","alertFormattingEdits","edits","filter","edit","range","length","i","plusRange","startLineNumber","endLineNumber","localize","getRealAndSyntheticDocumentFormattersOrdered","documentFormattingEditProvider","documentRangeFormattingEditProvider","model","seen","Set","docFormatter","ordered","formatter","push","extensionId","add","toKey","rangeFormatter","has","displayName","provideDocumentFormattingEdits","options","token","provideDocumentRangeFormattingEdits","getFullModelRange","FormattingConflicts","setFormatterSelector","selector","remove","_selectors","unshift","dispose","select","document","mode","undefined","first","formatDocumentRangesWithSelectedProvider","accessor","editorOrModel","rangeOrRanges","progress","instaService","get","documentRangeFormattingEditProviderRegistry","getModel","provider","selected","report","invokeFunction","formatDocumentRangesWithProvider","workerService","cts","ranges","len","sort","compareRangesUsingStarts","areIntersectingOrTouching","fromPositions","getStartPosition","getEndPosition","computeEdits","getFormattingOptions","hasIntersectingEdit","a","b","mergedA","reduce","acc","val","some","x","intersectRanges","otherEdit","allEdits","rawEditsList","isCancellationRequested","j","mergedRange","splice","rawEdits","minimalEdits","computeMoreMinimalEdits","uri","execute","revealPositionInCenterIfOutsideViewport","getPosition","initialSelection","startColumn","endColumn","pushEditOperations","map","text","lift","forceMoveMarkers","undoEdits","formatDocumentWithSelectedProvider","languageFeaturesService","formatDocumentWithProvider","getDocumentRangeFormattingEditsUntilResult","providers","catch","getDocumentFormattingEditsUntilResult","getOnTypeFormattingEdits","position","ch","onTypeFormattingEditProvider","autoFormatTriggerCharacters","indexOf","provideOnTypeFormattingEdits","registerCommand","args","resource","isUri","isIRange","resolverService","reference","createModelReference","object","textEditorModel","None","isIPosition"],"sources":["/home/deathblade287/Desktop/AI-MODELS-TESTING/react-app/node_modules/monaco-editor/esm/vs/editor/contrib/format/browser/format.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { alert } from '../../../../base/browser/ui/aria/aria.js';\nimport { asArray, isNonEmptyArray } from '../../../../base/common/arrays.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { onUnexpectedExternalError } from '../../../../base/common/errors.js';\nimport { Iterable } from '../../../../base/common/iterator.js';\nimport { LinkedList } from '../../../../base/common/linkedList.js';\nimport { assertType } from '../../../../base/common/types.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { EditorStateCancellationTokenSource, TextModelCancellationTokenSource } from '../../editorState/browser/editorState.js';\nimport { isCodeEditor } from '../../../browser/editorBrowser.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { IEditorWorkerService } from '../../../common/services/editorWorker.js';\nimport { ITextModelService } from '../../../common/services/resolverService.js';\nimport { FormattingEdit } from './formattingEdit.js';\nimport * as nls from '../../../../nls.js';\nimport { CommandsRegistry } from '../../../../platform/commands/common/commands.js';\nimport { ExtensionIdentifier } from '../../../../platform/extensions/common/extensions.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nexport function alertFormattingEdits(edits) {\n    edits = edits.filter(edit => edit.range);\n    if (!edits.length) {\n        return;\n    }\n    let { range } = edits[0];\n    for (let i = 1; i < edits.length; i++) {\n        range = Range.plusRange(range, edits[i].range);\n    }\n    const { startLineNumber, endLineNumber } = range;\n    if (startLineNumber === endLineNumber) {\n        if (edits.length === 1) {\n            alert(nls.localize('hint11', \"Made 1 formatting edit on line {0}\", startLineNumber));\n        }\n        else {\n            alert(nls.localize('hintn1', \"Made {0} formatting edits on line {1}\", edits.length, startLineNumber));\n        }\n    }\n    else {\n        if (edits.length === 1) {\n            alert(nls.localize('hint1n', \"Made 1 formatting edit between lines {0} and {1}\", startLineNumber, endLineNumber));\n        }\n        else {\n            alert(nls.localize('hintnn', \"Made {0} formatting edits between lines {1} and {2}\", edits.length, startLineNumber, endLineNumber));\n        }\n    }\n}\nexport function getRealAndSyntheticDocumentFormattersOrdered(documentFormattingEditProvider, documentRangeFormattingEditProvider, model) {\n    const result = [];\n    const seen = new Set();\n    // (1) add all document formatter\n    const docFormatter = documentFormattingEditProvider.ordered(model);\n    for (const formatter of docFormatter) {\n        result.push(formatter);\n        if (formatter.extensionId) {\n            seen.add(ExtensionIdentifier.toKey(formatter.extensionId));\n        }\n    }\n    // (2) add all range formatter as document formatter (unless the same extension already did that)\n    const rangeFormatter = documentRangeFormattingEditProvider.ordered(model);\n    for (const formatter of rangeFormatter) {\n        if (formatter.extensionId) {\n            if (seen.has(ExtensionIdentifier.toKey(formatter.extensionId))) {\n                continue;\n            }\n            seen.add(ExtensionIdentifier.toKey(formatter.extensionId));\n        }\n        result.push({\n            displayName: formatter.displayName,\n            extensionId: formatter.extensionId,\n            provideDocumentFormattingEdits(model, options, token) {\n                return formatter.provideDocumentRangeFormattingEdits(model, model.getFullModelRange(), options, token);\n            }\n        });\n    }\n    return result;\n}\nexport class FormattingConflicts {\n    static setFormatterSelector(selector) {\n        const remove = FormattingConflicts._selectors.unshift(selector);\n        return { dispose: remove };\n    }\n    static select(formatter, document, mode) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (formatter.length === 0) {\n                return undefined;\n            }\n            const selector = Iterable.first(FormattingConflicts._selectors);\n            if (selector) {\n                return yield selector(formatter, document, mode);\n            }\n            return undefined;\n        });\n    }\n}\nFormattingConflicts._selectors = new LinkedList();\nexport function formatDocumentRangesWithSelectedProvider(accessor, editorOrModel, rangeOrRanges, mode, progress, token) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const instaService = accessor.get(IInstantiationService);\n        const { documentRangeFormattingEditProvider: documentRangeFormattingEditProviderRegistry } = accessor.get(ILanguageFeaturesService);\n        const model = isCodeEditor(editorOrModel) ? editorOrModel.getModel() : editorOrModel;\n        const provider = documentRangeFormattingEditProviderRegistry.ordered(model);\n        const selected = yield FormattingConflicts.select(provider, model, mode);\n        if (selected) {\n            progress.report(selected);\n            yield instaService.invokeFunction(formatDocumentRangesWithProvider, selected, editorOrModel, rangeOrRanges, token);\n        }\n    });\n}\nexport function formatDocumentRangesWithProvider(accessor, provider, editorOrModel, rangeOrRanges, token) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const workerService = accessor.get(IEditorWorkerService);\n        let model;\n        let cts;\n        if (isCodeEditor(editorOrModel)) {\n            model = editorOrModel.getModel();\n            cts = new EditorStateCancellationTokenSource(editorOrModel, 1 /* CodeEditorStateFlag.Value */ | 4 /* CodeEditorStateFlag.Position */, undefined, token);\n        }\n        else {\n            model = editorOrModel;\n            cts = new TextModelCancellationTokenSource(editorOrModel, token);\n        }\n        // make sure that ranges don't overlap nor touch each other\n        const ranges = [];\n        let len = 0;\n        for (const range of asArray(rangeOrRanges).sort(Range.compareRangesUsingStarts)) {\n            if (len > 0 && Range.areIntersectingOrTouching(ranges[len - 1], range)) {\n                ranges[len - 1] = Range.fromPositions(ranges[len - 1].getStartPosition(), range.getEndPosition());\n            }\n            else {\n                len = ranges.push(range);\n            }\n        }\n        const computeEdits = (range) => __awaiter(this, void 0, void 0, function* () {\n            return (yield provider.provideDocumentRangeFormattingEdits(model, range, model.getFormattingOptions(), cts.token)) || [];\n        });\n        const hasIntersectingEdit = (a, b) => {\n            if (!a.length || !b.length) {\n                return false;\n            }\n            // quick exit if the list of ranges are completely unrelated [O(n)]\n            const mergedA = a.reduce((acc, val) => { return Range.plusRange(acc, val.range); }, a[0].range);\n            if (!b.some(x => { return Range.intersectRanges(mergedA, x.range); })) {\n                return false;\n            }\n            // fallback to a complete check [O(n^2)]\n            for (const edit of a) {\n                for (const otherEdit of b) {\n                    if (Range.intersectRanges(edit.range, otherEdit.range)) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        };\n        const allEdits = [];\n        const rawEditsList = [];\n        try {\n            for (const range of ranges) {\n                if (cts.token.isCancellationRequested) {\n                    return true;\n                }\n                rawEditsList.push(yield computeEdits(range));\n            }\n            for (let i = 0; i < ranges.length; ++i) {\n                for (let j = i + 1; j < ranges.length; ++j) {\n                    if (cts.token.isCancellationRequested) {\n                        return true;\n                    }\n                    if (hasIntersectingEdit(rawEditsList[i], rawEditsList[j])) {\n                        // Merge ranges i and j into a single range, recompute the associated edits\n                        const mergedRange = Range.plusRange(ranges[i], ranges[j]);\n                        const edits = yield computeEdits(mergedRange);\n                        ranges.splice(j, 1);\n                        ranges.splice(i, 1);\n                        ranges.push(mergedRange);\n                        rawEditsList.splice(j, 1);\n                        rawEditsList.splice(i, 1);\n                        rawEditsList.push(edits);\n                        // Restart scanning\n                        i = 0;\n                        j = 0;\n                    }\n                }\n            }\n            for (const rawEdits of rawEditsList) {\n                if (cts.token.isCancellationRequested) {\n                    return true;\n                }\n                const minimalEdits = yield workerService.computeMoreMinimalEdits(model.uri, rawEdits);\n                if (minimalEdits) {\n                    allEdits.push(...minimalEdits);\n                }\n            }\n        }\n        finally {\n            cts.dispose();\n        }\n        if (allEdits.length === 0) {\n            return false;\n        }\n        if (isCodeEditor(editorOrModel)) {\n            // use editor to apply edits\n            FormattingEdit.execute(editorOrModel, allEdits, true);\n            alertFormattingEdits(allEdits);\n            editorOrModel.revealPositionInCenterIfOutsideViewport(editorOrModel.getPosition(), 1 /* ScrollType.Immediate */);\n        }\n        else {\n            // use model to apply edits\n            const [{ range }] = allEdits;\n            const initialSelection = new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\n            model.pushEditOperations([initialSelection], allEdits.map(edit => {\n                return {\n                    text: edit.text,\n                    range: Range.lift(edit.range),\n                    forceMoveMarkers: true\n                };\n            }), undoEdits => {\n                for (const { range } of undoEdits) {\n                    if (Range.areIntersectingOrTouching(range, initialSelection)) {\n                        return [new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn)];\n                    }\n                }\n                return null;\n            });\n        }\n        return true;\n    });\n}\nexport function formatDocumentWithSelectedProvider(accessor, editorOrModel, mode, progress, token) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const instaService = accessor.get(IInstantiationService);\n        const languageFeaturesService = accessor.get(ILanguageFeaturesService);\n        const model = isCodeEditor(editorOrModel) ? editorOrModel.getModel() : editorOrModel;\n        const provider = getRealAndSyntheticDocumentFormattersOrdered(languageFeaturesService.documentFormattingEditProvider, languageFeaturesService.documentRangeFormattingEditProvider, model);\n        const selected = yield FormattingConflicts.select(provider, model, mode);\n        if (selected) {\n            progress.report(selected);\n            yield instaService.invokeFunction(formatDocumentWithProvider, selected, editorOrModel, mode, token);\n        }\n    });\n}\nexport function formatDocumentWithProvider(accessor, provider, editorOrModel, mode, token) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const workerService = accessor.get(IEditorWorkerService);\n        let model;\n        let cts;\n        if (isCodeEditor(editorOrModel)) {\n            model = editorOrModel.getModel();\n            cts = new EditorStateCancellationTokenSource(editorOrModel, 1 /* CodeEditorStateFlag.Value */ | 4 /* CodeEditorStateFlag.Position */, undefined, token);\n        }\n        else {\n            model = editorOrModel;\n            cts = new TextModelCancellationTokenSource(editorOrModel, token);\n        }\n        let edits;\n        try {\n            const rawEdits = yield provider.provideDocumentFormattingEdits(model, model.getFormattingOptions(), cts.token);\n            edits = yield workerService.computeMoreMinimalEdits(model.uri, rawEdits);\n            if (cts.token.isCancellationRequested) {\n                return true;\n            }\n        }\n        finally {\n            cts.dispose();\n        }\n        if (!edits || edits.length === 0) {\n            return false;\n        }\n        if (isCodeEditor(editorOrModel)) {\n            // use editor to apply edits\n            FormattingEdit.execute(editorOrModel, edits, mode !== 2 /* FormattingMode.Silent */);\n            if (mode !== 2 /* FormattingMode.Silent */) {\n                alertFormattingEdits(edits);\n                editorOrModel.revealPositionInCenterIfOutsideViewport(editorOrModel.getPosition(), 1 /* ScrollType.Immediate */);\n            }\n        }\n        else {\n            // use model to apply edits\n            const [{ range }] = edits;\n            const initialSelection = new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\n            model.pushEditOperations([initialSelection], edits.map(edit => {\n                return {\n                    text: edit.text,\n                    range: Range.lift(edit.range),\n                    forceMoveMarkers: true\n                };\n            }), undoEdits => {\n                for (const { range } of undoEdits) {\n                    if (Range.areIntersectingOrTouching(range, initialSelection)) {\n                        return [new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn)];\n                    }\n                }\n                return null;\n            });\n        }\n        return true;\n    });\n}\nexport function getDocumentRangeFormattingEditsUntilResult(workerService, languageFeaturesService, model, range, options, token) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const providers = languageFeaturesService.documentRangeFormattingEditProvider.ordered(model);\n        for (const provider of providers) {\n            const rawEdits = yield Promise.resolve(provider.provideDocumentRangeFormattingEdits(model, range, options, token)).catch(onUnexpectedExternalError);\n            if (isNonEmptyArray(rawEdits)) {\n                return yield workerService.computeMoreMinimalEdits(model.uri, rawEdits);\n            }\n        }\n        return undefined;\n    });\n}\nexport function getDocumentFormattingEditsUntilResult(workerService, languageFeaturesService, model, options, token) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const providers = getRealAndSyntheticDocumentFormattersOrdered(languageFeaturesService.documentFormattingEditProvider, languageFeaturesService.documentRangeFormattingEditProvider, model);\n        for (const provider of providers) {\n            const rawEdits = yield Promise.resolve(provider.provideDocumentFormattingEdits(model, options, token)).catch(onUnexpectedExternalError);\n            if (isNonEmptyArray(rawEdits)) {\n                return yield workerService.computeMoreMinimalEdits(model.uri, rawEdits);\n            }\n        }\n        return undefined;\n    });\n}\nexport function getOnTypeFormattingEdits(workerService, languageFeaturesService, model, position, ch, options, token) {\n    const providers = languageFeaturesService.onTypeFormattingEditProvider.ordered(model);\n    if (providers.length === 0) {\n        return Promise.resolve(undefined);\n    }\n    if (providers[0].autoFormatTriggerCharacters.indexOf(ch) < 0) {\n        return Promise.resolve(undefined);\n    }\n    return Promise.resolve(providers[0].provideOnTypeFormattingEdits(model, position, ch, options, token)).catch(onUnexpectedExternalError).then(edits => {\n        return workerService.computeMoreMinimalEdits(model.uri, edits);\n    });\n}\nCommandsRegistry.registerCommand('_executeFormatRangeProvider', function (accessor, ...args) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const [resource, range, options] = args;\n        assertType(URI.isUri(resource));\n        assertType(Range.isIRange(range));\n        const resolverService = accessor.get(ITextModelService);\n        const workerService = accessor.get(IEditorWorkerService);\n        const languageFeaturesService = accessor.get(ILanguageFeaturesService);\n        const reference = yield resolverService.createModelReference(resource);\n        try {\n            return getDocumentRangeFormattingEditsUntilResult(workerService, languageFeaturesService, reference.object.textEditorModel, Range.lift(range), options, CancellationToken.None);\n        }\n        finally {\n            reference.dispose();\n        }\n    });\n});\nCommandsRegistry.registerCommand('_executeFormatDocumentProvider', function (accessor, ...args) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const [resource, options] = args;\n        assertType(URI.isUri(resource));\n        const resolverService = accessor.get(ITextModelService);\n        const workerService = accessor.get(IEditorWorkerService);\n        const languageFeaturesService = accessor.get(ILanguageFeaturesService);\n        const reference = yield resolverService.createModelReference(resource);\n        try {\n            return getDocumentFormattingEditsUntilResult(workerService, languageFeaturesService, reference.object.textEditorModel, options, CancellationToken.None);\n        }\n        finally {\n            reference.dispose();\n        }\n    });\n});\nCommandsRegistry.registerCommand('_executeFormatOnTypeProvider', function (accessor, ...args) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const [resource, position, ch, options] = args;\n        assertType(URI.isUri(resource));\n        assertType(Position.isIPosition(position));\n        assertType(typeof ch === 'string');\n        const resolverService = accessor.get(ITextModelService);\n        const workerService = accessor.get(IEditorWorkerService);\n        const languageFeaturesService = accessor.get(ILanguageFeaturesService);\n        const reference = yield resolverService.createModelReference(resource);\n        try {\n            return getOnTypeFormattingEdits(workerService, languageFeaturesService, reference.object.textEditorModel, Position.lift(position), ch, options, CancellationToken.None);\n        }\n        finally {\n            reference.dispose();\n        }\n    });\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}