{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as assert from '../../../base/common/assert.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport * as objects from '../../../base/common/objects.js';\nimport { Range } from '../../common/core/range.js';\nconst defaultOptions = {\n  followsCaret: true,\n  ignoreCharChanges: true,\n  alwaysRevealFirst: true\n};\n/**\n * Create a new diff navigator for the provided diff editor.\n */\nexport class DiffNavigator extends Disposable {\n  constructor(editor) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super();\n    this._onDidUpdate = this._register(new Emitter());\n    this._editor = editor;\n    this._options = objects.mixin(options, defaultOptions, false);\n    this.disposed = false;\n    this.nextIdx = -1;\n    this.ranges = [];\n    this.ignoreSelectionChange = false;\n    this.revealFirst = Boolean(this._options.alwaysRevealFirst);\n    // hook up to diff editor for diff, disposal, and caret move\n    this._register(this._editor.onDidDispose(() => this.dispose()));\n    this._register(this._editor.onDidUpdateDiff(() => this._onDiffUpdated()));\n    if (this._options.followsCaret) {\n      this._register(this._editor.getModifiedEditor().onDidChangeCursorPosition(e => {\n        if (this.ignoreSelectionChange) {\n          return;\n        }\n        this.nextIdx = -1;\n      }));\n    }\n    if (this._options.alwaysRevealFirst) {\n      this._register(this._editor.getModifiedEditor().onDidChangeModel(e => {\n        this.revealFirst = true;\n      }));\n    }\n    // init things\n    this._init();\n  }\n  _init() {\n    const changes = this._editor.getLineChanges();\n    if (!changes) {\n      return;\n    }\n  }\n  _onDiffUpdated() {\n    this._init();\n    this._compute(this._editor.getLineChanges());\n    if (this.revealFirst) {\n      // Only reveal first on first non-null changes\n      if (this._editor.getLineChanges() !== null) {\n        this.revealFirst = false;\n        this.nextIdx = -1;\n        this.next(1 /* ScrollType.Immediate */);\n      }\n    }\n  }\n\n  _compute(lineChanges) {\n    // new ranges\n    this.ranges = [];\n    if (lineChanges) {\n      // create ranges from changes\n      lineChanges.forEach(lineChange => {\n        if (!this._options.ignoreCharChanges && lineChange.charChanges) {\n          lineChange.charChanges.forEach(charChange => {\n            this.ranges.push({\n              rhs: true,\n              range: new Range(charChange.modifiedStartLineNumber, charChange.modifiedStartColumn, charChange.modifiedEndLineNumber, charChange.modifiedEndColumn)\n            });\n          });\n        } else {\n          if (lineChange.modifiedEndLineNumber === 0) {\n            // a deletion\n            this.ranges.push({\n              rhs: true,\n              range: new Range(lineChange.modifiedStartLineNumber, 1, lineChange.modifiedStartLineNumber + 1, 1)\n            });\n          } else {\n            // an insertion or modification\n            this.ranges.push({\n              rhs: true,\n              range: new Range(lineChange.modifiedStartLineNumber, 1, lineChange.modifiedEndLineNumber + 1, 1)\n            });\n          }\n        }\n      });\n    }\n    // sort\n    this.ranges.sort((left, right) => Range.compareRangesUsingStarts(left.range, right.range));\n    this._onDidUpdate.fire(this);\n  }\n  _initIdx(fwd) {\n    let found = false;\n    const position = this._editor.getPosition();\n    if (!position) {\n      this.nextIdx = 0;\n      return;\n    }\n    for (let i = 0, len = this.ranges.length; i < len && !found; i++) {\n      const range = this.ranges[i].range;\n      if (position.isBeforeOrEqual(range.getStartPosition())) {\n        this.nextIdx = i + (fwd ? 0 : -1);\n        found = true;\n      }\n    }\n    if (!found) {\n      // after the last change\n      this.nextIdx = fwd ? 0 : this.ranges.length - 1;\n    }\n    if (this.nextIdx < 0) {\n      this.nextIdx = this.ranges.length - 1;\n    }\n  }\n  _move(fwd, scrollType) {\n    assert.ok(!this.disposed, 'Illegal State - diff navigator has been disposed');\n    if (!this.canNavigate()) {\n      return;\n    }\n    if (this.nextIdx === -1) {\n      this._initIdx(fwd);\n    } else if (fwd) {\n      this.nextIdx += 1;\n      if (this.nextIdx >= this.ranges.length) {\n        this.nextIdx = 0;\n      }\n    } else {\n      this.nextIdx -= 1;\n      if (this.nextIdx < 0) {\n        this.nextIdx = this.ranges.length - 1;\n      }\n    }\n    const info = this.ranges[this.nextIdx];\n    this.ignoreSelectionChange = true;\n    try {\n      const pos = info.range.getStartPosition();\n      this._editor.setPosition(pos);\n      this._editor.revealRangeInCenter(info.range, scrollType);\n    } finally {\n      this.ignoreSelectionChange = false;\n    }\n  }\n  canNavigate() {\n    return this.ranges && this.ranges.length > 0;\n  }\n  next() {\n    let scrollType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    this._move(true, scrollType);\n  }\n  previous() {\n    let scrollType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    this._move(false, scrollType);\n  }\n  dispose() {\n    super.dispose();\n    this.ranges = [];\n    this.disposed = true;\n  }\n}","map":{"version":3,"names":["assert","Emitter","Disposable","objects","Range","defaultOptions","followsCaret","ignoreCharChanges","alwaysRevealFirst","DiffNavigator","constructor","editor","options","_onDidUpdate","_register","_editor","_options","mixin","disposed","nextIdx","ranges","ignoreSelectionChange","revealFirst","Boolean","onDidDispose","dispose","onDidUpdateDiff","_onDiffUpdated","getModifiedEditor","onDidChangeCursorPosition","e","onDidChangeModel","_init","changes","getLineChanges","_compute","next","lineChanges","forEach","lineChange","charChanges","charChange","push","rhs","range","modifiedStartLineNumber","modifiedStartColumn","modifiedEndLineNumber","modifiedEndColumn","sort","left","right","compareRangesUsingStarts","fire","_initIdx","fwd","found","position","getPosition","i","len","length","isBeforeOrEqual","getStartPosition","_move","scrollType","ok","canNavigate","info","pos","setPosition","revealRangeInCenter","previous"],"sources":["/home/deathblade287/Desktop/AI-MODELS-TESTING/react-app/node_modules/monaco-editor/esm/vs/editor/browser/widget/diffNavigator.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as assert from '../../../base/common/assert.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport * as objects from '../../../base/common/objects.js';\nimport { Range } from '../../common/core/range.js';\nconst defaultOptions = {\n    followsCaret: true,\n    ignoreCharChanges: true,\n    alwaysRevealFirst: true\n};\n/**\n * Create a new diff navigator for the provided diff editor.\n */\nexport class DiffNavigator extends Disposable {\n    constructor(editor, options = {}) {\n        super();\n        this._onDidUpdate = this._register(new Emitter());\n        this._editor = editor;\n        this._options = objects.mixin(options, defaultOptions, false);\n        this.disposed = false;\n        this.nextIdx = -1;\n        this.ranges = [];\n        this.ignoreSelectionChange = false;\n        this.revealFirst = Boolean(this._options.alwaysRevealFirst);\n        // hook up to diff editor for diff, disposal, and caret move\n        this._register(this._editor.onDidDispose(() => this.dispose()));\n        this._register(this._editor.onDidUpdateDiff(() => this._onDiffUpdated()));\n        if (this._options.followsCaret) {\n            this._register(this._editor.getModifiedEditor().onDidChangeCursorPosition((e) => {\n                if (this.ignoreSelectionChange) {\n                    return;\n                }\n                this.nextIdx = -1;\n            }));\n        }\n        if (this._options.alwaysRevealFirst) {\n            this._register(this._editor.getModifiedEditor().onDidChangeModel((e) => {\n                this.revealFirst = true;\n            }));\n        }\n        // init things\n        this._init();\n    }\n    _init() {\n        const changes = this._editor.getLineChanges();\n        if (!changes) {\n            return;\n        }\n    }\n    _onDiffUpdated() {\n        this._init();\n        this._compute(this._editor.getLineChanges());\n        if (this.revealFirst) {\n            // Only reveal first on first non-null changes\n            if (this._editor.getLineChanges() !== null) {\n                this.revealFirst = false;\n                this.nextIdx = -1;\n                this.next(1 /* ScrollType.Immediate */);\n            }\n        }\n    }\n    _compute(lineChanges) {\n        // new ranges\n        this.ranges = [];\n        if (lineChanges) {\n            // create ranges from changes\n            lineChanges.forEach((lineChange) => {\n                if (!this._options.ignoreCharChanges && lineChange.charChanges) {\n                    lineChange.charChanges.forEach((charChange) => {\n                        this.ranges.push({\n                            rhs: true,\n                            range: new Range(charChange.modifiedStartLineNumber, charChange.modifiedStartColumn, charChange.modifiedEndLineNumber, charChange.modifiedEndColumn)\n                        });\n                    });\n                }\n                else {\n                    if (lineChange.modifiedEndLineNumber === 0) {\n                        // a deletion\n                        this.ranges.push({\n                            rhs: true,\n                            range: new Range(lineChange.modifiedStartLineNumber, 1, lineChange.modifiedStartLineNumber + 1, 1)\n                        });\n                    }\n                    else {\n                        // an insertion or modification\n                        this.ranges.push({\n                            rhs: true,\n                            range: new Range(lineChange.modifiedStartLineNumber, 1, lineChange.modifiedEndLineNumber + 1, 1)\n                        });\n                    }\n                }\n            });\n        }\n        // sort\n        this.ranges.sort((left, right) => Range.compareRangesUsingStarts(left.range, right.range));\n        this._onDidUpdate.fire(this);\n    }\n    _initIdx(fwd) {\n        let found = false;\n        const position = this._editor.getPosition();\n        if (!position) {\n            this.nextIdx = 0;\n            return;\n        }\n        for (let i = 0, len = this.ranges.length; i < len && !found; i++) {\n            const range = this.ranges[i].range;\n            if (position.isBeforeOrEqual(range.getStartPosition())) {\n                this.nextIdx = i + (fwd ? 0 : -1);\n                found = true;\n            }\n        }\n        if (!found) {\n            // after the last change\n            this.nextIdx = fwd ? 0 : this.ranges.length - 1;\n        }\n        if (this.nextIdx < 0) {\n            this.nextIdx = this.ranges.length - 1;\n        }\n    }\n    _move(fwd, scrollType) {\n        assert.ok(!this.disposed, 'Illegal State - diff navigator has been disposed');\n        if (!this.canNavigate()) {\n            return;\n        }\n        if (this.nextIdx === -1) {\n            this._initIdx(fwd);\n        }\n        else if (fwd) {\n            this.nextIdx += 1;\n            if (this.nextIdx >= this.ranges.length) {\n                this.nextIdx = 0;\n            }\n        }\n        else {\n            this.nextIdx -= 1;\n            if (this.nextIdx < 0) {\n                this.nextIdx = this.ranges.length - 1;\n            }\n        }\n        const info = this.ranges[this.nextIdx];\n        this.ignoreSelectionChange = true;\n        try {\n            const pos = info.range.getStartPosition();\n            this._editor.setPosition(pos);\n            this._editor.revealRangeInCenter(info.range, scrollType);\n        }\n        finally {\n            this.ignoreSelectionChange = false;\n        }\n    }\n    canNavigate() {\n        return this.ranges && this.ranges.length > 0;\n    }\n    next(scrollType = 0 /* ScrollType.Smooth */) {\n        this._move(true, scrollType);\n    }\n    previous(scrollType = 0 /* ScrollType.Smooth */) {\n        this._move(false, scrollType);\n    }\n    dispose() {\n        super.dispose();\n        this.ranges = [];\n        this.disposed = true;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}