{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Position } from './core/position.js';\nimport { Range } from './core/range.js';\nimport { Selection } from './core/selection.js';\nimport { createScopedLineTokens } from './languages/supports.js';\nimport { CursorColumns } from './core/cursorColumns.js';\nimport { normalizeIndentation } from './core/indentation.js';\nconst autoCloseAlways = () => true;\nconst autoCloseNever = () => false;\nconst autoCloseBeforeWhitespace = chr => chr === ' ' || chr === '\\t';\nexport class CursorConfiguration {\n  constructor(languageId, modelOptions, configuration, languageConfigurationService) {\n    this.languageConfigurationService = languageConfigurationService;\n    this._cursorMoveConfigurationBrand = undefined;\n    this._languageId = languageId;\n    const options = configuration.options;\n    const layoutInfo = options.get(133 /* EditorOption.layoutInfo */);\n    this.readOnly = options.get(83 /* EditorOption.readOnly */);\n    this.tabSize = modelOptions.tabSize;\n    this.indentSize = modelOptions.indentSize;\n    this.insertSpaces = modelOptions.insertSpaces;\n    this.stickyTabStops = options.get(106 /* EditorOption.stickyTabStops */);\n    this.lineHeight = options.get(61 /* EditorOption.lineHeight */);\n    this.pageSize = Math.max(1, Math.floor(layoutInfo.height / this.lineHeight) - 2);\n    this.useTabStops = options.get(118 /* EditorOption.useTabStops */);\n    this.wordSeparators = options.get(119 /* EditorOption.wordSeparators */);\n    this.emptySelectionClipboard = options.get(33 /* EditorOption.emptySelectionClipboard */);\n    this.copyWithSyntaxHighlighting = options.get(21 /* EditorOption.copyWithSyntaxHighlighting */);\n    this.multiCursorMergeOverlapping = options.get(71 /* EditorOption.multiCursorMergeOverlapping */);\n    this.multiCursorPaste = options.get(73 /* EditorOption.multiCursorPaste */);\n    this.autoClosingBrackets = options.get(5 /* EditorOption.autoClosingBrackets */);\n    this.autoClosingQuotes = options.get(8 /* EditorOption.autoClosingQuotes */);\n    this.autoClosingDelete = options.get(6 /* EditorOption.autoClosingDelete */);\n    this.autoClosingOvertype = options.get(7 /* EditorOption.autoClosingOvertype */);\n    this.autoSurround = options.get(11 /* EditorOption.autoSurround */);\n    this.autoIndent = options.get(9 /* EditorOption.autoIndent */);\n    this.surroundingPairs = {};\n    this._electricChars = null;\n    this.shouldAutoCloseBefore = {\n      quote: this._getShouldAutoClose(languageId, this.autoClosingQuotes),\n      bracket: this._getShouldAutoClose(languageId, this.autoClosingBrackets)\n    };\n    this.autoClosingPairs = this.languageConfigurationService.getLanguageConfiguration(languageId).getAutoClosingPairs();\n    const surroundingPairs = this.languageConfigurationService.getLanguageConfiguration(languageId).getSurroundingPairs();\n    if (surroundingPairs) {\n      for (const pair of surroundingPairs) {\n        this.surroundingPairs[pair.open] = pair.close;\n      }\n    }\n  }\n  static shouldRecreate(e) {\n    return e.hasChanged(133 /* EditorOption.layoutInfo */) || e.hasChanged(119 /* EditorOption.wordSeparators */) || e.hasChanged(33 /* EditorOption.emptySelectionClipboard */) || e.hasChanged(71 /* EditorOption.multiCursorMergeOverlapping */) || e.hasChanged(73 /* EditorOption.multiCursorPaste */) || e.hasChanged(5 /* EditorOption.autoClosingBrackets */) || e.hasChanged(8 /* EditorOption.autoClosingQuotes */) || e.hasChanged(6 /* EditorOption.autoClosingDelete */) || e.hasChanged(7 /* EditorOption.autoClosingOvertype */) || e.hasChanged(11 /* EditorOption.autoSurround */) || e.hasChanged(118 /* EditorOption.useTabStops */) || e.hasChanged(61 /* EditorOption.lineHeight */) || e.hasChanged(83 /* EditorOption.readOnly */);\n  }\n\n  get electricChars() {\n    var _a;\n    if (!this._electricChars) {\n      this._electricChars = {};\n      const electricChars = (_a = this.languageConfigurationService.getLanguageConfiguration(this._languageId).electricCharacter) === null || _a === void 0 ? void 0 : _a.getElectricCharacters();\n      if (electricChars) {\n        for (const char of electricChars) {\n          this._electricChars[char] = true;\n        }\n      }\n    }\n    return this._electricChars;\n  }\n  /**\n   * Should return opening bracket type to match indentation with\n   */\n  onElectricCharacter(character, context, column) {\n    const scopedLineTokens = createScopedLineTokens(context, column - 1);\n    const electricCharacterSupport = this.languageConfigurationService.getLanguageConfiguration(scopedLineTokens.languageId).electricCharacter;\n    if (!electricCharacterSupport) {\n      return null;\n    }\n    return electricCharacterSupport.onElectricCharacter(character, scopedLineTokens, column - scopedLineTokens.firstCharOffset);\n  }\n  normalizeIndentation(str) {\n    return normalizeIndentation(str, this.indentSize, this.insertSpaces);\n  }\n  _getShouldAutoClose(languageId, autoCloseConfig) {\n    switch (autoCloseConfig) {\n      case 'beforeWhitespace':\n        return autoCloseBeforeWhitespace;\n      case 'languageDefined':\n        return this._getLanguageDefinedShouldAutoClose(languageId);\n      case 'always':\n        return autoCloseAlways;\n      case 'never':\n        return autoCloseNever;\n    }\n  }\n  _getLanguageDefinedShouldAutoClose(languageId) {\n    const autoCloseBeforeSet = this.languageConfigurationService.getLanguageConfiguration(languageId).getAutoCloseBeforeSet();\n    return c => autoCloseBeforeSet.indexOf(c) !== -1;\n  }\n  /**\n   * Returns a visible column from a column.\n   * @see {@link CursorColumns}\n   */\n  visibleColumnFromColumn(model, position) {\n    return CursorColumns.visibleColumnFromColumn(model.getLineContent(position.lineNumber), position.column, this.tabSize);\n  }\n  /**\n   * Returns a visible column from a column.\n   * @see {@link CursorColumns}\n   */\n  columnFromVisibleColumn(model, lineNumber, visibleColumn) {\n    const result = CursorColumns.columnFromVisibleColumn(model.getLineContent(lineNumber), visibleColumn, this.tabSize);\n    const minColumn = model.getLineMinColumn(lineNumber);\n    if (result < minColumn) {\n      return minColumn;\n    }\n    const maxColumn = model.getLineMaxColumn(lineNumber);\n    if (result > maxColumn) {\n      return maxColumn;\n    }\n    return result;\n  }\n}\nexport class CursorState {\n  constructor(modelState, viewState) {\n    this._cursorStateBrand = undefined;\n    this.modelState = modelState;\n    this.viewState = viewState;\n  }\n  static fromModelState(modelState) {\n    return new PartialModelCursorState(modelState);\n  }\n  static fromViewState(viewState) {\n    return new PartialViewCursorState(viewState);\n  }\n  static fromModelSelection(modelSelection) {\n    const selection = Selection.liftSelection(modelSelection);\n    const modelState = new SingleCursorState(Range.fromPositions(selection.getSelectionStart()), 0, selection.getPosition(), 0);\n    return CursorState.fromModelState(modelState);\n  }\n  static fromModelSelections(modelSelections) {\n    const states = [];\n    for (let i = 0, len = modelSelections.length; i < len; i++) {\n      states[i] = this.fromModelSelection(modelSelections[i]);\n    }\n    return states;\n  }\n  equals(other) {\n    return this.viewState.equals(other.viewState) && this.modelState.equals(other.modelState);\n  }\n}\nexport class PartialModelCursorState {\n  constructor(modelState) {\n    this.modelState = modelState;\n    this.viewState = null;\n  }\n}\nexport class PartialViewCursorState {\n  constructor(viewState) {\n    this.modelState = null;\n    this.viewState = viewState;\n  }\n}\n/**\n * Represents the cursor state on either the model or on the view model.\n */\nexport class SingleCursorState {\n  constructor(selectionStart, selectionStartLeftoverVisibleColumns, position, leftoverVisibleColumns) {\n    this._singleCursorStateBrand = undefined;\n    this.selectionStart = selectionStart;\n    this.selectionStartLeftoverVisibleColumns = selectionStartLeftoverVisibleColumns;\n    this.position = position;\n    this.leftoverVisibleColumns = leftoverVisibleColumns;\n    this.selection = SingleCursorState._computeSelection(this.selectionStart, this.position);\n  }\n  equals(other) {\n    return this.selectionStartLeftoverVisibleColumns === other.selectionStartLeftoverVisibleColumns && this.leftoverVisibleColumns === other.leftoverVisibleColumns && this.position.equals(other.position) && this.selectionStart.equalsRange(other.selectionStart);\n  }\n  hasSelection() {\n    return !this.selection.isEmpty() || !this.selectionStart.isEmpty();\n  }\n  move(inSelectionMode, lineNumber, column, leftoverVisibleColumns) {\n    if (inSelectionMode) {\n      // move just position\n      return new SingleCursorState(this.selectionStart, this.selectionStartLeftoverVisibleColumns, new Position(lineNumber, column), leftoverVisibleColumns);\n    } else {\n      // move everything\n      return new SingleCursorState(new Range(lineNumber, column, lineNumber, column), leftoverVisibleColumns, new Position(lineNumber, column), leftoverVisibleColumns);\n    }\n  }\n  static _computeSelection(selectionStart, position) {\n    if (selectionStart.isEmpty() || !position.isBeforeOrEqual(selectionStart.getStartPosition())) {\n      return Selection.fromPositions(selectionStart.getStartPosition(), position);\n    } else {\n      return Selection.fromPositions(selectionStart.getEndPosition(), position);\n    }\n  }\n}\nexport class EditOperationResult {\n  constructor(type, commands, opts) {\n    this._editOperationResultBrand = undefined;\n    this.type = type;\n    this.commands = commands;\n    this.shouldPushStackElementBefore = opts.shouldPushStackElementBefore;\n    this.shouldPushStackElementAfter = opts.shouldPushStackElementAfter;\n  }\n}\nexport function isQuote(ch) {\n  return ch === '\\'' || ch === '\"' || ch === '`';\n}","map":{"version":3,"names":["Position","Range","Selection","createScopedLineTokens","CursorColumns","normalizeIndentation","autoCloseAlways","autoCloseNever","autoCloseBeforeWhitespace","chr","CursorConfiguration","constructor","languageId","modelOptions","configuration","languageConfigurationService","_cursorMoveConfigurationBrand","undefined","_languageId","options","layoutInfo","get","readOnly","tabSize","indentSize","insertSpaces","stickyTabStops","lineHeight","pageSize","Math","max","floor","height","useTabStops","wordSeparators","emptySelectionClipboard","copyWithSyntaxHighlighting","multiCursorMergeOverlapping","multiCursorPaste","autoClosingBrackets","autoClosingQuotes","autoClosingDelete","autoClosingOvertype","autoSurround","autoIndent","surroundingPairs","_electricChars","shouldAutoCloseBefore","quote","_getShouldAutoClose","bracket","autoClosingPairs","getLanguageConfiguration","getAutoClosingPairs","getSurroundingPairs","pair","open","close","shouldRecreate","e","hasChanged","electricChars","_a","electricCharacter","getElectricCharacters","char","onElectricCharacter","character","context","column","scopedLineTokens","electricCharacterSupport","firstCharOffset","str","autoCloseConfig","_getLanguageDefinedShouldAutoClose","autoCloseBeforeSet","getAutoCloseBeforeSet","c","indexOf","visibleColumnFromColumn","model","position","getLineContent","lineNumber","columnFromVisibleColumn","visibleColumn","result","minColumn","getLineMinColumn","maxColumn","getLineMaxColumn","CursorState","modelState","viewState","_cursorStateBrand","fromModelState","PartialModelCursorState","fromViewState","PartialViewCursorState","fromModelSelection","modelSelection","selection","liftSelection","SingleCursorState","fromPositions","getSelectionStart","getPosition","fromModelSelections","modelSelections","states","i","len","length","equals","other","selectionStart","selectionStartLeftoverVisibleColumns","leftoverVisibleColumns","_singleCursorStateBrand","_computeSelection","equalsRange","hasSelection","isEmpty","move","inSelectionMode","isBeforeOrEqual","getStartPosition","getEndPosition","EditOperationResult","type","commands","opts","_editOperationResultBrand","shouldPushStackElementBefore","shouldPushStackElementAfter","isQuote","ch"],"sources":["/home/deathblade287/Desktop/AI-MODELS-TESTING/react-app/node_modules/monaco-editor/esm/vs/editor/common/cursorCommon.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Position } from './core/position.js';\nimport { Range } from './core/range.js';\nimport { Selection } from './core/selection.js';\nimport { createScopedLineTokens } from './languages/supports.js';\nimport { CursorColumns } from './core/cursorColumns.js';\nimport { normalizeIndentation } from './core/indentation.js';\nconst autoCloseAlways = () => true;\nconst autoCloseNever = () => false;\nconst autoCloseBeforeWhitespace = (chr) => (chr === ' ' || chr === '\\t');\nexport class CursorConfiguration {\n    constructor(languageId, modelOptions, configuration, languageConfigurationService) {\n        this.languageConfigurationService = languageConfigurationService;\n        this._cursorMoveConfigurationBrand = undefined;\n        this._languageId = languageId;\n        const options = configuration.options;\n        const layoutInfo = options.get(133 /* EditorOption.layoutInfo */);\n        this.readOnly = options.get(83 /* EditorOption.readOnly */);\n        this.tabSize = modelOptions.tabSize;\n        this.indentSize = modelOptions.indentSize;\n        this.insertSpaces = modelOptions.insertSpaces;\n        this.stickyTabStops = options.get(106 /* EditorOption.stickyTabStops */);\n        this.lineHeight = options.get(61 /* EditorOption.lineHeight */);\n        this.pageSize = Math.max(1, Math.floor(layoutInfo.height / this.lineHeight) - 2);\n        this.useTabStops = options.get(118 /* EditorOption.useTabStops */);\n        this.wordSeparators = options.get(119 /* EditorOption.wordSeparators */);\n        this.emptySelectionClipboard = options.get(33 /* EditorOption.emptySelectionClipboard */);\n        this.copyWithSyntaxHighlighting = options.get(21 /* EditorOption.copyWithSyntaxHighlighting */);\n        this.multiCursorMergeOverlapping = options.get(71 /* EditorOption.multiCursorMergeOverlapping */);\n        this.multiCursorPaste = options.get(73 /* EditorOption.multiCursorPaste */);\n        this.autoClosingBrackets = options.get(5 /* EditorOption.autoClosingBrackets */);\n        this.autoClosingQuotes = options.get(8 /* EditorOption.autoClosingQuotes */);\n        this.autoClosingDelete = options.get(6 /* EditorOption.autoClosingDelete */);\n        this.autoClosingOvertype = options.get(7 /* EditorOption.autoClosingOvertype */);\n        this.autoSurround = options.get(11 /* EditorOption.autoSurround */);\n        this.autoIndent = options.get(9 /* EditorOption.autoIndent */);\n        this.surroundingPairs = {};\n        this._electricChars = null;\n        this.shouldAutoCloseBefore = {\n            quote: this._getShouldAutoClose(languageId, this.autoClosingQuotes),\n            bracket: this._getShouldAutoClose(languageId, this.autoClosingBrackets)\n        };\n        this.autoClosingPairs = this.languageConfigurationService.getLanguageConfiguration(languageId).getAutoClosingPairs();\n        const surroundingPairs = this.languageConfigurationService.getLanguageConfiguration(languageId).getSurroundingPairs();\n        if (surroundingPairs) {\n            for (const pair of surroundingPairs) {\n                this.surroundingPairs[pair.open] = pair.close;\n            }\n        }\n    }\n    static shouldRecreate(e) {\n        return (e.hasChanged(133 /* EditorOption.layoutInfo */)\n            || e.hasChanged(119 /* EditorOption.wordSeparators */)\n            || e.hasChanged(33 /* EditorOption.emptySelectionClipboard */)\n            || e.hasChanged(71 /* EditorOption.multiCursorMergeOverlapping */)\n            || e.hasChanged(73 /* EditorOption.multiCursorPaste */)\n            || e.hasChanged(5 /* EditorOption.autoClosingBrackets */)\n            || e.hasChanged(8 /* EditorOption.autoClosingQuotes */)\n            || e.hasChanged(6 /* EditorOption.autoClosingDelete */)\n            || e.hasChanged(7 /* EditorOption.autoClosingOvertype */)\n            || e.hasChanged(11 /* EditorOption.autoSurround */)\n            || e.hasChanged(118 /* EditorOption.useTabStops */)\n            || e.hasChanged(61 /* EditorOption.lineHeight */)\n            || e.hasChanged(83 /* EditorOption.readOnly */));\n    }\n    get electricChars() {\n        var _a;\n        if (!this._electricChars) {\n            this._electricChars = {};\n            const electricChars = (_a = this.languageConfigurationService.getLanguageConfiguration(this._languageId).electricCharacter) === null || _a === void 0 ? void 0 : _a.getElectricCharacters();\n            if (electricChars) {\n                for (const char of electricChars) {\n                    this._electricChars[char] = true;\n                }\n            }\n        }\n        return this._electricChars;\n    }\n    /**\n     * Should return opening bracket type to match indentation with\n     */\n    onElectricCharacter(character, context, column) {\n        const scopedLineTokens = createScopedLineTokens(context, column - 1);\n        const electricCharacterSupport = this.languageConfigurationService.getLanguageConfiguration(scopedLineTokens.languageId).electricCharacter;\n        if (!electricCharacterSupport) {\n            return null;\n        }\n        return electricCharacterSupport.onElectricCharacter(character, scopedLineTokens, column - scopedLineTokens.firstCharOffset);\n    }\n    normalizeIndentation(str) {\n        return normalizeIndentation(str, this.indentSize, this.insertSpaces);\n    }\n    _getShouldAutoClose(languageId, autoCloseConfig) {\n        switch (autoCloseConfig) {\n            case 'beforeWhitespace':\n                return autoCloseBeforeWhitespace;\n            case 'languageDefined':\n                return this._getLanguageDefinedShouldAutoClose(languageId);\n            case 'always':\n                return autoCloseAlways;\n            case 'never':\n                return autoCloseNever;\n        }\n    }\n    _getLanguageDefinedShouldAutoClose(languageId) {\n        const autoCloseBeforeSet = this.languageConfigurationService.getLanguageConfiguration(languageId).getAutoCloseBeforeSet();\n        return c => autoCloseBeforeSet.indexOf(c) !== -1;\n    }\n    /**\n     * Returns a visible column from a column.\n     * @see {@link CursorColumns}\n     */\n    visibleColumnFromColumn(model, position) {\n        return CursorColumns.visibleColumnFromColumn(model.getLineContent(position.lineNumber), position.column, this.tabSize);\n    }\n    /**\n     * Returns a visible column from a column.\n     * @see {@link CursorColumns}\n     */\n    columnFromVisibleColumn(model, lineNumber, visibleColumn) {\n        const result = CursorColumns.columnFromVisibleColumn(model.getLineContent(lineNumber), visibleColumn, this.tabSize);\n        const minColumn = model.getLineMinColumn(lineNumber);\n        if (result < minColumn) {\n            return minColumn;\n        }\n        const maxColumn = model.getLineMaxColumn(lineNumber);\n        if (result > maxColumn) {\n            return maxColumn;\n        }\n        return result;\n    }\n}\nexport class CursorState {\n    constructor(modelState, viewState) {\n        this._cursorStateBrand = undefined;\n        this.modelState = modelState;\n        this.viewState = viewState;\n    }\n    static fromModelState(modelState) {\n        return new PartialModelCursorState(modelState);\n    }\n    static fromViewState(viewState) {\n        return new PartialViewCursorState(viewState);\n    }\n    static fromModelSelection(modelSelection) {\n        const selection = Selection.liftSelection(modelSelection);\n        const modelState = new SingleCursorState(Range.fromPositions(selection.getSelectionStart()), 0, selection.getPosition(), 0);\n        return CursorState.fromModelState(modelState);\n    }\n    static fromModelSelections(modelSelections) {\n        const states = [];\n        for (let i = 0, len = modelSelections.length; i < len; i++) {\n            states[i] = this.fromModelSelection(modelSelections[i]);\n        }\n        return states;\n    }\n    equals(other) {\n        return (this.viewState.equals(other.viewState) && this.modelState.equals(other.modelState));\n    }\n}\nexport class PartialModelCursorState {\n    constructor(modelState) {\n        this.modelState = modelState;\n        this.viewState = null;\n    }\n}\nexport class PartialViewCursorState {\n    constructor(viewState) {\n        this.modelState = null;\n        this.viewState = viewState;\n    }\n}\n/**\n * Represents the cursor state on either the model or on the view model.\n */\nexport class SingleCursorState {\n    constructor(selectionStart, selectionStartLeftoverVisibleColumns, position, leftoverVisibleColumns) {\n        this._singleCursorStateBrand = undefined;\n        this.selectionStart = selectionStart;\n        this.selectionStartLeftoverVisibleColumns = selectionStartLeftoverVisibleColumns;\n        this.position = position;\n        this.leftoverVisibleColumns = leftoverVisibleColumns;\n        this.selection = SingleCursorState._computeSelection(this.selectionStart, this.position);\n    }\n    equals(other) {\n        return (this.selectionStartLeftoverVisibleColumns === other.selectionStartLeftoverVisibleColumns\n            && this.leftoverVisibleColumns === other.leftoverVisibleColumns\n            && this.position.equals(other.position)\n            && this.selectionStart.equalsRange(other.selectionStart));\n    }\n    hasSelection() {\n        return (!this.selection.isEmpty() || !this.selectionStart.isEmpty());\n    }\n    move(inSelectionMode, lineNumber, column, leftoverVisibleColumns) {\n        if (inSelectionMode) {\n            // move just position\n            return new SingleCursorState(this.selectionStart, this.selectionStartLeftoverVisibleColumns, new Position(lineNumber, column), leftoverVisibleColumns);\n        }\n        else {\n            // move everything\n            return new SingleCursorState(new Range(lineNumber, column, lineNumber, column), leftoverVisibleColumns, new Position(lineNumber, column), leftoverVisibleColumns);\n        }\n    }\n    static _computeSelection(selectionStart, position) {\n        if (selectionStart.isEmpty() || !position.isBeforeOrEqual(selectionStart.getStartPosition())) {\n            return Selection.fromPositions(selectionStart.getStartPosition(), position);\n        }\n        else {\n            return Selection.fromPositions(selectionStart.getEndPosition(), position);\n        }\n    }\n}\nexport class EditOperationResult {\n    constructor(type, commands, opts) {\n        this._editOperationResultBrand = undefined;\n        this.type = type;\n        this.commands = commands;\n        this.shouldPushStackElementBefore = opts.shouldPushStackElementBefore;\n        this.shouldPushStackElementAfter = opts.shouldPushStackElementAfter;\n    }\n}\nexport function isQuote(ch) {\n    return (ch === '\\'' || ch === '\"' || ch === '`');\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,QAAQ,QAAQ,oBAAoB;AAC7C,SAASC,KAAK,QAAQ,iBAAiB;AACvC,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,sBAAsB,QAAQ,yBAAyB;AAChE,SAASC,aAAa,QAAQ,yBAAyB;AACvD,SAASC,oBAAoB,QAAQ,uBAAuB;AAC5D,MAAMC,eAAe,GAAG,MAAM,IAAI;AAClC,MAAMC,cAAc,GAAG,MAAM,KAAK;AAClC,MAAMC,yBAAyB,GAAIC,GAAG,IAAMA,GAAG,KAAK,GAAG,IAAIA,GAAG,KAAK,IAAK;AACxE,OAAO,MAAMC,mBAAmB,CAAC;EAC7BC,WAAW,CAACC,UAAU,EAAEC,YAAY,EAAEC,aAAa,EAAEC,4BAA4B,EAAE;IAC/E,IAAI,CAACA,4BAA4B,GAAGA,4BAA4B;IAChE,IAAI,CAACC,6BAA6B,GAAGC,SAAS;IAC9C,IAAI,CAACC,WAAW,GAAGN,UAAU;IAC7B,MAAMO,OAAO,GAAGL,aAAa,CAACK,OAAO;IACrC,MAAMC,UAAU,GAAGD,OAAO,CAACE,GAAG,CAAC,GAAG,CAAC,8BAA8B;IACjE,IAAI,CAACC,QAAQ,GAAGH,OAAO,CAACE,GAAG,CAAC,EAAE,CAAC,4BAA4B;IAC3D,IAAI,CAACE,OAAO,GAAGV,YAAY,CAACU,OAAO;IACnC,IAAI,CAACC,UAAU,GAAGX,YAAY,CAACW,UAAU;IACzC,IAAI,CAACC,YAAY,GAAGZ,YAAY,CAACY,YAAY;IAC7C,IAAI,CAACC,cAAc,GAAGP,OAAO,CAACE,GAAG,CAAC,GAAG,CAAC,kCAAkC;IACxE,IAAI,CAACM,UAAU,GAAGR,OAAO,CAACE,GAAG,CAAC,EAAE,CAAC,8BAA8B;IAC/D,IAAI,CAACO,QAAQ,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAED,IAAI,CAACE,KAAK,CAACX,UAAU,CAACY,MAAM,GAAG,IAAI,CAACL,UAAU,CAAC,GAAG,CAAC,CAAC;IAChF,IAAI,CAACM,WAAW,GAAGd,OAAO,CAACE,GAAG,CAAC,GAAG,CAAC,+BAA+B;IAClE,IAAI,CAACa,cAAc,GAAGf,OAAO,CAACE,GAAG,CAAC,GAAG,CAAC,kCAAkC;IACxE,IAAI,CAACc,uBAAuB,GAAGhB,OAAO,CAACE,GAAG,CAAC,EAAE,CAAC,2CAA2C;IACzF,IAAI,CAACe,0BAA0B,GAAGjB,OAAO,CAACE,GAAG,CAAC,EAAE,CAAC,8CAA8C;IAC/F,IAAI,CAACgB,2BAA2B,GAAGlB,OAAO,CAACE,GAAG,CAAC,EAAE,CAAC,+CAA+C;IACjG,IAAI,CAACiB,gBAAgB,GAAGnB,OAAO,CAACE,GAAG,CAAC,EAAE,CAAC,oCAAoC;IAC3E,IAAI,CAACkB,mBAAmB,GAAGpB,OAAO,CAACE,GAAG,CAAC,CAAC,CAAC,uCAAuC;IAChF,IAAI,CAACmB,iBAAiB,GAAGrB,OAAO,CAACE,GAAG,CAAC,CAAC,CAAC,qCAAqC;IAC5E,IAAI,CAACoB,iBAAiB,GAAGtB,OAAO,CAACE,GAAG,CAAC,CAAC,CAAC,qCAAqC;IAC5E,IAAI,CAACqB,mBAAmB,GAAGvB,OAAO,CAACE,GAAG,CAAC,CAAC,CAAC,uCAAuC;IAChF,IAAI,CAACsB,YAAY,GAAGxB,OAAO,CAACE,GAAG,CAAC,EAAE,CAAC,gCAAgC;IACnE,IAAI,CAACuB,UAAU,GAAGzB,OAAO,CAACE,GAAG,CAAC,CAAC,CAAC,8BAA8B;IAC9D,IAAI,CAACwB,gBAAgB,GAAG,CAAC,CAAC;IAC1B,IAAI,CAACC,cAAc,GAAG,IAAI;IAC1B,IAAI,CAACC,qBAAqB,GAAG;MACzBC,KAAK,EAAE,IAAI,CAACC,mBAAmB,CAACrC,UAAU,EAAE,IAAI,CAAC4B,iBAAiB,CAAC;MACnEU,OAAO,EAAE,IAAI,CAACD,mBAAmB,CAACrC,UAAU,EAAE,IAAI,CAAC2B,mBAAmB;IAC1E,CAAC;IACD,IAAI,CAACY,gBAAgB,GAAG,IAAI,CAACpC,4BAA4B,CAACqC,wBAAwB,CAACxC,UAAU,CAAC,CAACyC,mBAAmB,EAAE;IACpH,MAAMR,gBAAgB,GAAG,IAAI,CAAC9B,4BAA4B,CAACqC,wBAAwB,CAACxC,UAAU,CAAC,CAAC0C,mBAAmB,EAAE;IACrH,IAAIT,gBAAgB,EAAE;MAClB,KAAK,MAAMU,IAAI,IAAIV,gBAAgB,EAAE;QACjC,IAAI,CAACA,gBAAgB,CAACU,IAAI,CAACC,IAAI,CAAC,GAAGD,IAAI,CAACE,KAAK;MACjD;IACJ;EACJ;EACA,OAAOC,cAAc,CAACC,CAAC,EAAE;IACrB,OAAQA,CAAC,CAACC,UAAU,CAAC,GAAG,CAAC,8BAA8B,IAChDD,CAAC,CAACC,UAAU,CAAC,GAAG,CAAC,kCAAkC,IACnDD,CAAC,CAACC,UAAU,CAAC,EAAE,CAAC,2CAA2C,IAC3DD,CAAC,CAACC,UAAU,CAAC,EAAE,CAAC,+CAA+C,IAC/DD,CAAC,CAACC,UAAU,CAAC,EAAE,CAAC,oCAAoC,IACpDD,CAAC,CAACC,UAAU,CAAC,CAAC,CAAC,uCAAuC,IACtDD,CAAC,CAACC,UAAU,CAAC,CAAC,CAAC,qCAAqC,IACpDD,CAAC,CAACC,UAAU,CAAC,CAAC,CAAC,qCAAqC,IACpDD,CAAC,CAACC,UAAU,CAAC,CAAC,CAAC,uCAAuC,IACtDD,CAAC,CAACC,UAAU,CAAC,EAAE,CAAC,gCAAgC,IAChDD,CAAC,CAACC,UAAU,CAAC,GAAG,CAAC,+BAA+B,IAChDD,CAAC,CAACC,UAAU,CAAC,EAAE,CAAC,8BAA8B,IAC9CD,CAAC,CAACC,UAAU,CAAC,EAAE,CAAC,4BAA4B;EACvD;;EACA,IAAIC,aAAa,GAAG;IAChB,IAAIC,EAAE;IACN,IAAI,CAAC,IAAI,CAAChB,cAAc,EAAE;MACtB,IAAI,CAACA,cAAc,GAAG,CAAC,CAAC;MACxB,MAAMe,aAAa,GAAG,CAACC,EAAE,GAAG,IAAI,CAAC/C,4BAA4B,CAACqC,wBAAwB,CAAC,IAAI,CAAClC,WAAW,CAAC,CAAC6C,iBAAiB,MAAM,IAAI,IAAID,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACE,qBAAqB,EAAE;MAC3L,IAAIH,aAAa,EAAE;QACf,KAAK,MAAMI,IAAI,IAAIJ,aAAa,EAAE;UAC9B,IAAI,CAACf,cAAc,CAACmB,IAAI,CAAC,GAAG,IAAI;QACpC;MACJ;IACJ;IACA,OAAO,IAAI,CAACnB,cAAc;EAC9B;EACA;AACJ;AACA;EACIoB,mBAAmB,CAACC,SAAS,EAAEC,OAAO,EAAEC,MAAM,EAAE;IAC5C,MAAMC,gBAAgB,GAAGnE,sBAAsB,CAACiE,OAAO,EAAEC,MAAM,GAAG,CAAC,CAAC;IACpE,MAAME,wBAAwB,GAAG,IAAI,CAACxD,4BAA4B,CAACqC,wBAAwB,CAACkB,gBAAgB,CAAC1D,UAAU,CAAC,CAACmD,iBAAiB;IAC1I,IAAI,CAACQ,wBAAwB,EAAE;MAC3B,OAAO,IAAI;IACf;IACA,OAAOA,wBAAwB,CAACL,mBAAmB,CAACC,SAAS,EAAEG,gBAAgB,EAAED,MAAM,GAAGC,gBAAgB,CAACE,eAAe,CAAC;EAC/H;EACAnE,oBAAoB,CAACoE,GAAG,EAAE;IACtB,OAAOpE,oBAAoB,CAACoE,GAAG,EAAE,IAAI,CAACjD,UAAU,EAAE,IAAI,CAACC,YAAY,CAAC;EACxE;EACAwB,mBAAmB,CAACrC,UAAU,EAAE8D,eAAe,EAAE;IAC7C,QAAQA,eAAe;MACnB,KAAK,kBAAkB;QACnB,OAAOlE,yBAAyB;MACpC,KAAK,iBAAiB;QAClB,OAAO,IAAI,CAACmE,kCAAkC,CAAC/D,UAAU,CAAC;MAC9D,KAAK,QAAQ;QACT,OAAON,eAAe;MAC1B,KAAK,OAAO;QACR,OAAOC,cAAc;IAAC;EAElC;EACAoE,kCAAkC,CAAC/D,UAAU,EAAE;IAC3C,MAAMgE,kBAAkB,GAAG,IAAI,CAAC7D,4BAA4B,CAACqC,wBAAwB,CAACxC,UAAU,CAAC,CAACiE,qBAAqB,EAAE;IACzH,OAAOC,CAAC,IAAIF,kBAAkB,CAACG,OAAO,CAACD,CAAC,CAAC,KAAK,CAAC,CAAC;EACpD;EACA;AACJ;AACA;AACA;EACIE,uBAAuB,CAACC,KAAK,EAAEC,QAAQ,EAAE;IACrC,OAAO9E,aAAa,CAAC4E,uBAAuB,CAACC,KAAK,CAACE,cAAc,CAACD,QAAQ,CAACE,UAAU,CAAC,EAAEF,QAAQ,CAACb,MAAM,EAAE,IAAI,CAAC9C,OAAO,CAAC;EAC1H;EACA;AACJ;AACA;AACA;EACI8D,uBAAuB,CAACJ,KAAK,EAAEG,UAAU,EAAEE,aAAa,EAAE;IACtD,MAAMC,MAAM,GAAGnF,aAAa,CAACiF,uBAAuB,CAACJ,KAAK,CAACE,cAAc,CAACC,UAAU,CAAC,EAAEE,aAAa,EAAE,IAAI,CAAC/D,OAAO,CAAC;IACnH,MAAMiE,SAAS,GAAGP,KAAK,CAACQ,gBAAgB,CAACL,UAAU,CAAC;IACpD,IAAIG,MAAM,GAAGC,SAAS,EAAE;MACpB,OAAOA,SAAS;IACpB;IACA,MAAME,SAAS,GAAGT,KAAK,CAACU,gBAAgB,CAACP,UAAU,CAAC;IACpD,IAAIG,MAAM,GAAGG,SAAS,EAAE;MACpB,OAAOA,SAAS;IACpB;IACA,OAAOH,MAAM;EACjB;AACJ;AACA,OAAO,MAAMK,WAAW,CAAC;EACrBjF,WAAW,CAACkF,UAAU,EAAEC,SAAS,EAAE;IAC/B,IAAI,CAACC,iBAAiB,GAAG9E,SAAS;IAClC,IAAI,CAAC4E,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,SAAS,GAAGA,SAAS;EAC9B;EACA,OAAOE,cAAc,CAACH,UAAU,EAAE;IAC9B,OAAO,IAAII,uBAAuB,CAACJ,UAAU,CAAC;EAClD;EACA,OAAOK,aAAa,CAACJ,SAAS,EAAE;IAC5B,OAAO,IAAIK,sBAAsB,CAACL,SAAS,CAAC;EAChD;EACA,OAAOM,kBAAkB,CAACC,cAAc,EAAE;IACtC,MAAMC,SAAS,GAAGpG,SAAS,CAACqG,aAAa,CAACF,cAAc,CAAC;IACzD,MAAMR,UAAU,GAAG,IAAIW,iBAAiB,CAACvG,KAAK,CAACwG,aAAa,CAACH,SAAS,CAACI,iBAAiB,EAAE,CAAC,EAAE,CAAC,EAAEJ,SAAS,CAACK,WAAW,EAAE,EAAE,CAAC,CAAC;IAC3H,OAAOf,WAAW,CAACI,cAAc,CAACH,UAAU,CAAC;EACjD;EACA,OAAOe,mBAAmB,CAACC,eAAe,EAAE;IACxC,MAAMC,MAAM,GAAG,EAAE;IACjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGH,eAAe,CAACI,MAAM,EAAEF,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;MACxDD,MAAM,CAACC,CAAC,CAAC,GAAG,IAAI,CAACX,kBAAkB,CAACS,eAAe,CAACE,CAAC,CAAC,CAAC;IAC3D;IACA,OAAOD,MAAM;EACjB;EACAI,MAAM,CAACC,KAAK,EAAE;IACV,OAAQ,IAAI,CAACrB,SAAS,CAACoB,MAAM,CAACC,KAAK,CAACrB,SAAS,CAAC,IAAI,IAAI,CAACD,UAAU,CAACqB,MAAM,CAACC,KAAK,CAACtB,UAAU,CAAC;EAC9F;AACJ;AACA,OAAO,MAAMI,uBAAuB,CAAC;EACjCtF,WAAW,CAACkF,UAAU,EAAE;IACpB,IAAI,CAACA,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,SAAS,GAAG,IAAI;EACzB;AACJ;AACA,OAAO,MAAMK,sBAAsB,CAAC;EAChCxF,WAAW,CAACmF,SAAS,EAAE;IACnB,IAAI,CAACD,UAAU,GAAG,IAAI;IACtB,IAAI,CAACC,SAAS,GAAGA,SAAS;EAC9B;AACJ;AACA;AACA;AACA;AACA,OAAO,MAAMU,iBAAiB,CAAC;EAC3B7F,WAAW,CAACyG,cAAc,EAAEC,oCAAoC,EAAEnC,QAAQ,EAAEoC,sBAAsB,EAAE;IAChG,IAAI,CAACC,uBAAuB,GAAGtG,SAAS;IACxC,IAAI,CAACmG,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACC,oCAAoC,GAAGA,oCAAoC;IAChF,IAAI,CAACnC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACoC,sBAAsB,GAAGA,sBAAsB;IACpD,IAAI,CAAChB,SAAS,GAAGE,iBAAiB,CAACgB,iBAAiB,CAAC,IAAI,CAACJ,cAAc,EAAE,IAAI,CAAClC,QAAQ,CAAC;EAC5F;EACAgC,MAAM,CAACC,KAAK,EAAE;IACV,OAAQ,IAAI,CAACE,oCAAoC,KAAKF,KAAK,CAACE,oCAAoC,IACzF,IAAI,CAACC,sBAAsB,KAAKH,KAAK,CAACG,sBAAsB,IAC5D,IAAI,CAACpC,QAAQ,CAACgC,MAAM,CAACC,KAAK,CAACjC,QAAQ,CAAC,IACpC,IAAI,CAACkC,cAAc,CAACK,WAAW,CAACN,KAAK,CAACC,cAAc,CAAC;EAChE;EACAM,YAAY,GAAG;IACX,OAAQ,CAAC,IAAI,CAACpB,SAAS,CAACqB,OAAO,EAAE,IAAI,CAAC,IAAI,CAACP,cAAc,CAACO,OAAO,EAAE;EACvE;EACAC,IAAI,CAACC,eAAe,EAAEzC,UAAU,EAAEf,MAAM,EAAEiD,sBAAsB,EAAE;IAC9D,IAAIO,eAAe,EAAE;MACjB;MACA,OAAO,IAAIrB,iBAAiB,CAAC,IAAI,CAACY,cAAc,EAAE,IAAI,CAACC,oCAAoC,EAAE,IAAIrH,QAAQ,CAACoF,UAAU,EAAEf,MAAM,CAAC,EAAEiD,sBAAsB,CAAC;IAC1J,CAAC,MACI;MACD;MACA,OAAO,IAAId,iBAAiB,CAAC,IAAIvG,KAAK,CAACmF,UAAU,EAAEf,MAAM,EAAEe,UAAU,EAAEf,MAAM,CAAC,EAAEiD,sBAAsB,EAAE,IAAItH,QAAQ,CAACoF,UAAU,EAAEf,MAAM,CAAC,EAAEiD,sBAAsB,CAAC;IACrK;EACJ;EACA,OAAOE,iBAAiB,CAACJ,cAAc,EAAElC,QAAQ,EAAE;IAC/C,IAAIkC,cAAc,CAACO,OAAO,EAAE,IAAI,CAACzC,QAAQ,CAAC4C,eAAe,CAACV,cAAc,CAACW,gBAAgB,EAAE,CAAC,EAAE;MAC1F,OAAO7H,SAAS,CAACuG,aAAa,CAACW,cAAc,CAACW,gBAAgB,EAAE,EAAE7C,QAAQ,CAAC;IAC/E,CAAC,MACI;MACD,OAAOhF,SAAS,CAACuG,aAAa,CAACW,cAAc,CAACY,cAAc,EAAE,EAAE9C,QAAQ,CAAC;IAC7E;EACJ;AACJ;AACA,OAAO,MAAM+C,mBAAmB,CAAC;EAC7BtH,WAAW,CAACuH,IAAI,EAAEC,QAAQ,EAAEC,IAAI,EAAE;IAC9B,IAAI,CAACC,yBAAyB,GAAGpH,SAAS;IAC1C,IAAI,CAACiH,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACG,4BAA4B,GAAGF,IAAI,CAACE,4BAA4B;IACrE,IAAI,CAACC,2BAA2B,GAAGH,IAAI,CAACG,2BAA2B;EACvE;AACJ;AACA,OAAO,SAASC,OAAO,CAACC,EAAE,EAAE;EACxB,OAAQA,EAAE,KAAK,IAAI,IAAIA,EAAE,KAAK,GAAG,IAAIA,EAAE,KAAK,GAAG;AACnD"},"metadata":{},"sourceType":"module","externalDependencies":[]}