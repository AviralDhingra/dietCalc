{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { regExpLeadsToEndlessLoop } from '../../../base/common/strings.js';\nimport { clearPlatformLanguageAssociations, getLanguageIds, registerPlatformLanguageAssociation } from './languagesAssociations.js';\nimport { ModesRegistry, PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nimport { Extensions } from '../../../platform/configuration/common/configurationRegistry.js';\nimport { Registry } from '../../../platform/registry/common/platform.js';\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\nconst NULL_LANGUAGE_ID = 'vs.editor.nullLanguage';\nexport class LanguageIdCodec {\n  constructor() {\n    this._languageIdToLanguage = [];\n    this._languageToLanguageId = new Map();\n    this._register(NULL_LANGUAGE_ID, 0 /* LanguageId.Null */);\n    this._register(PLAINTEXT_LANGUAGE_ID, 1 /* LanguageId.PlainText */);\n    this._nextLanguageId = 2;\n  }\n  _register(language, languageId) {\n    this._languageIdToLanguage[languageId] = language;\n    this._languageToLanguageId.set(language, languageId);\n  }\n  register(language) {\n    if (this._languageToLanguageId.has(language)) {\n      return;\n    }\n    const languageId = this._nextLanguageId++;\n    this._register(language, languageId);\n  }\n  encodeLanguageId(languageId) {\n    return this._languageToLanguageId.get(languageId) || 0 /* LanguageId.Null */;\n  }\n\n  decodeLanguageId(languageId) {\n    return this._languageIdToLanguage[languageId] || NULL_LANGUAGE_ID;\n  }\n}\nexport class LanguagesRegistry extends Disposable {\n  constructor() {\n    let useModesRegistry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    let warnOnOverwrite = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    super();\n    this._onDidChange = this._register(new Emitter());\n    this.onDidChange = this._onDidChange.event;\n    LanguagesRegistry.instanceCount++;\n    this._warnOnOverwrite = warnOnOverwrite;\n    this.languageIdCodec = new LanguageIdCodec();\n    this._dynamicLanguages = [];\n    this._languages = {};\n    this._mimeTypesMap = {};\n    this._nameMap = {};\n    this._lowercaseNameMap = {};\n    if (useModesRegistry) {\n      this._initializeFromRegistry();\n      this._register(ModesRegistry.onDidChangeLanguages(m => {\n        this._initializeFromRegistry();\n      }));\n    }\n  }\n  dispose() {\n    LanguagesRegistry.instanceCount--;\n    super.dispose();\n  }\n  _initializeFromRegistry() {\n    this._languages = {};\n    this._mimeTypesMap = {};\n    this._nameMap = {};\n    this._lowercaseNameMap = {};\n    clearPlatformLanguageAssociations();\n    const desc = [].concat(ModesRegistry.getLanguages()).concat(this._dynamicLanguages);\n    this._registerLanguages(desc);\n  }\n  _registerLanguages(desc) {\n    for (const d of desc) {\n      this._registerLanguage(d);\n    }\n    // Rebuild fast path maps\n    this._mimeTypesMap = {};\n    this._nameMap = {};\n    this._lowercaseNameMap = {};\n    Object.keys(this._languages).forEach(langId => {\n      const language = this._languages[langId];\n      if (language.name) {\n        this._nameMap[language.name] = language.identifier;\n      }\n      language.aliases.forEach(alias => {\n        this._lowercaseNameMap[alias.toLowerCase()] = language.identifier;\n      });\n      language.mimetypes.forEach(mimetype => {\n        this._mimeTypesMap[mimetype] = language.identifier;\n      });\n    });\n    Registry.as(Extensions.Configuration).registerOverrideIdentifiers(this.getRegisteredLanguageIds());\n    this._onDidChange.fire();\n  }\n  _registerLanguage(lang) {\n    const langId = lang.id;\n    let resolvedLanguage;\n    if (hasOwnProperty.call(this._languages, langId)) {\n      resolvedLanguage = this._languages[langId];\n    } else {\n      this.languageIdCodec.register(langId);\n      resolvedLanguage = {\n        identifier: langId,\n        name: null,\n        mimetypes: [],\n        aliases: [],\n        extensions: [],\n        filenames: [],\n        configurationFiles: [],\n        icons: []\n      };\n      this._languages[langId] = resolvedLanguage;\n    }\n    this._mergeLanguage(resolvedLanguage, lang);\n  }\n  _mergeLanguage(resolvedLanguage, lang) {\n    const langId = lang.id;\n    let primaryMime = null;\n    if (Array.isArray(lang.mimetypes) && lang.mimetypes.length > 0) {\n      resolvedLanguage.mimetypes.push(...lang.mimetypes);\n      primaryMime = lang.mimetypes[0];\n    }\n    if (!primaryMime) {\n      primaryMime = `text/x-${langId}`;\n      resolvedLanguage.mimetypes.push(primaryMime);\n    }\n    if (Array.isArray(lang.extensions)) {\n      if (lang.configuration) {\n        // insert first as this appears to be the 'primary' language definition\n        resolvedLanguage.extensions = lang.extensions.concat(resolvedLanguage.extensions);\n      } else {\n        resolvedLanguage.extensions = resolvedLanguage.extensions.concat(lang.extensions);\n      }\n      for (const extension of lang.extensions) {\n        registerPlatformLanguageAssociation({\n          id: langId,\n          mime: primaryMime,\n          extension: extension\n        }, this._warnOnOverwrite);\n      }\n    }\n    if (Array.isArray(lang.filenames)) {\n      for (const filename of lang.filenames) {\n        registerPlatformLanguageAssociation({\n          id: langId,\n          mime: primaryMime,\n          filename: filename\n        }, this._warnOnOverwrite);\n        resolvedLanguage.filenames.push(filename);\n      }\n    }\n    if (Array.isArray(lang.filenamePatterns)) {\n      for (const filenamePattern of lang.filenamePatterns) {\n        registerPlatformLanguageAssociation({\n          id: langId,\n          mime: primaryMime,\n          filepattern: filenamePattern\n        }, this._warnOnOverwrite);\n      }\n    }\n    if (typeof lang.firstLine === 'string' && lang.firstLine.length > 0) {\n      let firstLineRegexStr = lang.firstLine;\n      if (firstLineRegexStr.charAt(0) !== '^') {\n        firstLineRegexStr = '^' + firstLineRegexStr;\n      }\n      try {\n        const firstLineRegex = new RegExp(firstLineRegexStr);\n        if (!regExpLeadsToEndlessLoop(firstLineRegex)) {\n          registerPlatformLanguageAssociation({\n            id: langId,\n            mime: primaryMime,\n            firstline: firstLineRegex\n          }, this._warnOnOverwrite);\n        }\n      } catch (err) {\n        // Most likely, the regex was bad\n        onUnexpectedError(err);\n      }\n    }\n    resolvedLanguage.aliases.push(langId);\n    let langAliases = null;\n    if (typeof lang.aliases !== 'undefined' && Array.isArray(lang.aliases)) {\n      if (lang.aliases.length === 0) {\n        // signal that this language should not get a name\n        langAliases = [null];\n      } else {\n        langAliases = lang.aliases;\n      }\n    }\n    if (langAliases !== null) {\n      for (const langAlias of langAliases) {\n        if (!langAlias || langAlias.length === 0) {\n          continue;\n        }\n        resolvedLanguage.aliases.push(langAlias);\n      }\n    }\n    const containsAliases = langAliases !== null && langAliases.length > 0;\n    if (containsAliases && langAliases[0] === null) {\n      // signal that this language should not get a name\n    } else {\n      const bestName = (containsAliases ? langAliases[0] : null) || langId;\n      if (containsAliases || !resolvedLanguage.name) {\n        resolvedLanguage.name = bestName;\n      }\n    }\n    if (lang.configuration) {\n      resolvedLanguage.configurationFiles.push(lang.configuration);\n    }\n    if (lang.icon) {\n      resolvedLanguage.icons.push(lang.icon);\n    }\n  }\n  isRegisteredLanguageId(languageId) {\n    if (!languageId) {\n      return false;\n    }\n    return hasOwnProperty.call(this._languages, languageId);\n  }\n  getRegisteredLanguageIds() {\n    return Object.keys(this._languages);\n  }\n  getLanguageIdByLanguageName(languageName) {\n    const languageNameLower = languageName.toLowerCase();\n    if (!hasOwnProperty.call(this._lowercaseNameMap, languageNameLower)) {\n      return null;\n    }\n    return this._lowercaseNameMap[languageNameLower];\n  }\n  getLanguageIdByMimeType(mimeType) {\n    if (!mimeType) {\n      return null;\n    }\n    if (hasOwnProperty.call(this._mimeTypesMap, mimeType)) {\n      return this._mimeTypesMap[mimeType];\n    }\n    return null;\n  }\n  guessLanguageIdByFilepathOrFirstLine(resource, firstLine) {\n    if (!resource && !firstLine) {\n      return [];\n    }\n    return getLanguageIds(resource, firstLine);\n  }\n}\nLanguagesRegistry.instanceCount = 0;","map":{"version":3,"names":["onUnexpectedError","Emitter","Disposable","regExpLeadsToEndlessLoop","clearPlatformLanguageAssociations","getLanguageIds","registerPlatformLanguageAssociation","ModesRegistry","PLAINTEXT_LANGUAGE_ID","Extensions","Registry","hasOwnProperty","Object","prototype","NULL_LANGUAGE_ID","LanguageIdCodec","constructor","_languageIdToLanguage","_languageToLanguageId","Map","_register","_nextLanguageId","language","languageId","set","register","has","encodeLanguageId","get","decodeLanguageId","LanguagesRegistry","useModesRegistry","warnOnOverwrite","_onDidChange","onDidChange","event","instanceCount","_warnOnOverwrite","languageIdCodec","_dynamicLanguages","_languages","_mimeTypesMap","_nameMap","_lowercaseNameMap","_initializeFromRegistry","onDidChangeLanguages","m","dispose","desc","concat","getLanguages","_registerLanguages","d","_registerLanguage","keys","forEach","langId","name","identifier","aliases","alias","toLowerCase","mimetypes","mimetype","as","Configuration","registerOverrideIdentifiers","getRegisteredLanguageIds","fire","lang","id","resolvedLanguage","call","extensions","filenames","configurationFiles","icons","_mergeLanguage","primaryMime","Array","isArray","length","push","configuration","extension","mime","filename","filenamePatterns","filenamePattern","filepattern","firstLine","firstLineRegexStr","charAt","firstLineRegex","RegExp","firstline","err","langAliases","langAlias","containsAliases","bestName","icon","isRegisteredLanguageId","getLanguageIdByLanguageName","languageName","languageNameLower","getLanguageIdByMimeType","mimeType","guessLanguageIdByFilepathOrFirstLine","resource"],"sources":["/home/deathblade287/Desktop/AI-MODELS-TESTING/react-app/node_modules/monaco-editor/esm/vs/editor/common/services/languagesRegistry.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { regExpLeadsToEndlessLoop } from '../../../base/common/strings.js';\nimport { clearPlatformLanguageAssociations, getLanguageIds, registerPlatformLanguageAssociation } from './languagesAssociations.js';\nimport { ModesRegistry, PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nimport { Extensions } from '../../../platform/configuration/common/configurationRegistry.js';\nimport { Registry } from '../../../platform/registry/common/platform.js';\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\nconst NULL_LANGUAGE_ID = 'vs.editor.nullLanguage';\nexport class LanguageIdCodec {\n    constructor() {\n        this._languageIdToLanguage = [];\n        this._languageToLanguageId = new Map();\n        this._register(NULL_LANGUAGE_ID, 0 /* LanguageId.Null */);\n        this._register(PLAINTEXT_LANGUAGE_ID, 1 /* LanguageId.PlainText */);\n        this._nextLanguageId = 2;\n    }\n    _register(language, languageId) {\n        this._languageIdToLanguage[languageId] = language;\n        this._languageToLanguageId.set(language, languageId);\n    }\n    register(language) {\n        if (this._languageToLanguageId.has(language)) {\n            return;\n        }\n        const languageId = this._nextLanguageId++;\n        this._register(language, languageId);\n    }\n    encodeLanguageId(languageId) {\n        return this._languageToLanguageId.get(languageId) || 0 /* LanguageId.Null */;\n    }\n    decodeLanguageId(languageId) {\n        return this._languageIdToLanguage[languageId] || NULL_LANGUAGE_ID;\n    }\n}\nexport class LanguagesRegistry extends Disposable {\n    constructor(useModesRegistry = true, warnOnOverwrite = false) {\n        super();\n        this._onDidChange = this._register(new Emitter());\n        this.onDidChange = this._onDidChange.event;\n        LanguagesRegistry.instanceCount++;\n        this._warnOnOverwrite = warnOnOverwrite;\n        this.languageIdCodec = new LanguageIdCodec();\n        this._dynamicLanguages = [];\n        this._languages = {};\n        this._mimeTypesMap = {};\n        this._nameMap = {};\n        this._lowercaseNameMap = {};\n        if (useModesRegistry) {\n            this._initializeFromRegistry();\n            this._register(ModesRegistry.onDidChangeLanguages((m) => {\n                this._initializeFromRegistry();\n            }));\n        }\n    }\n    dispose() {\n        LanguagesRegistry.instanceCount--;\n        super.dispose();\n    }\n    _initializeFromRegistry() {\n        this._languages = {};\n        this._mimeTypesMap = {};\n        this._nameMap = {};\n        this._lowercaseNameMap = {};\n        clearPlatformLanguageAssociations();\n        const desc = [].concat(ModesRegistry.getLanguages()).concat(this._dynamicLanguages);\n        this._registerLanguages(desc);\n    }\n    _registerLanguages(desc) {\n        for (const d of desc) {\n            this._registerLanguage(d);\n        }\n        // Rebuild fast path maps\n        this._mimeTypesMap = {};\n        this._nameMap = {};\n        this._lowercaseNameMap = {};\n        Object.keys(this._languages).forEach((langId) => {\n            const language = this._languages[langId];\n            if (language.name) {\n                this._nameMap[language.name] = language.identifier;\n            }\n            language.aliases.forEach((alias) => {\n                this._lowercaseNameMap[alias.toLowerCase()] = language.identifier;\n            });\n            language.mimetypes.forEach((mimetype) => {\n                this._mimeTypesMap[mimetype] = language.identifier;\n            });\n        });\n        Registry.as(Extensions.Configuration).registerOverrideIdentifiers(this.getRegisteredLanguageIds());\n        this._onDidChange.fire();\n    }\n    _registerLanguage(lang) {\n        const langId = lang.id;\n        let resolvedLanguage;\n        if (hasOwnProperty.call(this._languages, langId)) {\n            resolvedLanguage = this._languages[langId];\n        }\n        else {\n            this.languageIdCodec.register(langId);\n            resolvedLanguage = {\n                identifier: langId,\n                name: null,\n                mimetypes: [],\n                aliases: [],\n                extensions: [],\n                filenames: [],\n                configurationFiles: [],\n                icons: []\n            };\n            this._languages[langId] = resolvedLanguage;\n        }\n        this._mergeLanguage(resolvedLanguage, lang);\n    }\n    _mergeLanguage(resolvedLanguage, lang) {\n        const langId = lang.id;\n        let primaryMime = null;\n        if (Array.isArray(lang.mimetypes) && lang.mimetypes.length > 0) {\n            resolvedLanguage.mimetypes.push(...lang.mimetypes);\n            primaryMime = lang.mimetypes[0];\n        }\n        if (!primaryMime) {\n            primaryMime = `text/x-${langId}`;\n            resolvedLanguage.mimetypes.push(primaryMime);\n        }\n        if (Array.isArray(lang.extensions)) {\n            if (lang.configuration) {\n                // insert first as this appears to be the 'primary' language definition\n                resolvedLanguage.extensions = lang.extensions.concat(resolvedLanguage.extensions);\n            }\n            else {\n                resolvedLanguage.extensions = resolvedLanguage.extensions.concat(lang.extensions);\n            }\n            for (const extension of lang.extensions) {\n                registerPlatformLanguageAssociation({ id: langId, mime: primaryMime, extension: extension }, this._warnOnOverwrite);\n            }\n        }\n        if (Array.isArray(lang.filenames)) {\n            for (const filename of lang.filenames) {\n                registerPlatformLanguageAssociation({ id: langId, mime: primaryMime, filename: filename }, this._warnOnOverwrite);\n                resolvedLanguage.filenames.push(filename);\n            }\n        }\n        if (Array.isArray(lang.filenamePatterns)) {\n            for (const filenamePattern of lang.filenamePatterns) {\n                registerPlatformLanguageAssociation({ id: langId, mime: primaryMime, filepattern: filenamePattern }, this._warnOnOverwrite);\n            }\n        }\n        if (typeof lang.firstLine === 'string' && lang.firstLine.length > 0) {\n            let firstLineRegexStr = lang.firstLine;\n            if (firstLineRegexStr.charAt(0) !== '^') {\n                firstLineRegexStr = '^' + firstLineRegexStr;\n            }\n            try {\n                const firstLineRegex = new RegExp(firstLineRegexStr);\n                if (!regExpLeadsToEndlessLoop(firstLineRegex)) {\n                    registerPlatformLanguageAssociation({ id: langId, mime: primaryMime, firstline: firstLineRegex }, this._warnOnOverwrite);\n                }\n            }\n            catch (err) {\n                // Most likely, the regex was bad\n                onUnexpectedError(err);\n            }\n        }\n        resolvedLanguage.aliases.push(langId);\n        let langAliases = null;\n        if (typeof lang.aliases !== 'undefined' && Array.isArray(lang.aliases)) {\n            if (lang.aliases.length === 0) {\n                // signal that this language should not get a name\n                langAliases = [null];\n            }\n            else {\n                langAliases = lang.aliases;\n            }\n        }\n        if (langAliases !== null) {\n            for (const langAlias of langAliases) {\n                if (!langAlias || langAlias.length === 0) {\n                    continue;\n                }\n                resolvedLanguage.aliases.push(langAlias);\n            }\n        }\n        const containsAliases = (langAliases !== null && langAliases.length > 0);\n        if (containsAliases && langAliases[0] === null) {\n            // signal that this language should not get a name\n        }\n        else {\n            const bestName = (containsAliases ? langAliases[0] : null) || langId;\n            if (containsAliases || !resolvedLanguage.name) {\n                resolvedLanguage.name = bestName;\n            }\n        }\n        if (lang.configuration) {\n            resolvedLanguage.configurationFiles.push(lang.configuration);\n        }\n        if (lang.icon) {\n            resolvedLanguage.icons.push(lang.icon);\n        }\n    }\n    isRegisteredLanguageId(languageId) {\n        if (!languageId) {\n            return false;\n        }\n        return hasOwnProperty.call(this._languages, languageId);\n    }\n    getRegisteredLanguageIds() {\n        return Object.keys(this._languages);\n    }\n    getLanguageIdByLanguageName(languageName) {\n        const languageNameLower = languageName.toLowerCase();\n        if (!hasOwnProperty.call(this._lowercaseNameMap, languageNameLower)) {\n            return null;\n        }\n        return this._lowercaseNameMap[languageNameLower];\n    }\n    getLanguageIdByMimeType(mimeType) {\n        if (!mimeType) {\n            return null;\n        }\n        if (hasOwnProperty.call(this._mimeTypesMap, mimeType)) {\n            return this._mimeTypesMap[mimeType];\n        }\n        return null;\n    }\n    guessLanguageIdByFilepathOrFirstLine(resource, firstLine) {\n        if (!resource && !firstLine) {\n            return [];\n        }\n        return getLanguageIds(resource, firstLine);\n    }\n}\nLanguagesRegistry.instanceCount = 0;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}