{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './lineNumbers.css';\nimport * as platform from '../../../../base/common/platform.js';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { Position } from '../../../common/core/position.js';\nimport { editorActiveLineNumber, editorLineNumbers } from '../../../common/core/editorColorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nexport class LineNumbersOverlay extends DynamicViewOverlay {\n  constructor(context) {\n    super();\n    this._context = context;\n    this._readConfig();\n    this._lastCursorModelPosition = new Position(1, 1);\n    this._lastCursorViewPosition = new Position(1, 1);\n    this._renderResult = null;\n    this._activeLineNumber = 1;\n    this._context.addEventHandler(this);\n  }\n  _readConfig() {\n    const options = this._context.configuration.options;\n    this._lineHeight = options.get(61 /* EditorOption.lineHeight */);\n    const lineNumbers = options.get(62 /* EditorOption.lineNumbers */);\n    this._renderLineNumbers = lineNumbers.renderType;\n    this._renderCustomLineNumbers = lineNumbers.renderFn;\n    this._renderFinalNewline = options.get(86 /* EditorOption.renderFinalNewline */);\n    const layoutInfo = options.get(133 /* EditorOption.layoutInfo */);\n    this._lineNumbersLeft = layoutInfo.lineNumbersLeft;\n    this._lineNumbersWidth = layoutInfo.lineNumbersWidth;\n  }\n  dispose() {\n    this._context.removeEventHandler(this);\n    this._renderResult = null;\n    super.dispose();\n  }\n  // --- begin event handlers\n  onConfigurationChanged(e) {\n    this._readConfig();\n    return true;\n  }\n  onCursorStateChanged(e) {\n    const primaryViewPosition = e.selections[0].getPosition();\n    this._lastCursorViewPosition = primaryViewPosition;\n    this._lastCursorModelPosition = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(primaryViewPosition);\n    let shouldRender = false;\n    if (this._activeLineNumber !== primaryViewPosition.lineNumber) {\n      this._activeLineNumber = primaryViewPosition.lineNumber;\n      shouldRender = true;\n    }\n    if (this._renderLineNumbers === 2 /* RenderLineNumbersType.Relative */ || this._renderLineNumbers === 3 /* RenderLineNumbersType.Interval */) {\n      shouldRender = true;\n    }\n    return shouldRender;\n  }\n  onFlushed(e) {\n    return true;\n  }\n  onLinesChanged(e) {\n    return true;\n  }\n  onLinesDeleted(e) {\n    return true;\n  }\n  onLinesInserted(e) {\n    return true;\n  }\n  onScrollChanged(e) {\n    return e.scrollTopChanged;\n  }\n  onZonesChanged(e) {\n    return true;\n  }\n  // --- end event handlers\n  _getLineRenderLineNumber(viewLineNumber) {\n    const modelPosition = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(viewLineNumber, 1));\n    if (modelPosition.column !== 1) {\n      return '';\n    }\n    const modelLineNumber = modelPosition.lineNumber;\n    if (this._renderCustomLineNumbers) {\n      return this._renderCustomLineNumbers(modelLineNumber);\n    }\n    if (this._renderLineNumbers === 3 /* RenderLineNumbersType.Interval */) {\n      if (this._lastCursorModelPosition.lineNumber === modelLineNumber) {\n        return String(modelLineNumber);\n      }\n      if (modelLineNumber % 10 === 0) {\n        return String(modelLineNumber);\n      }\n      return '';\n    }\n    return String(modelLineNumber);\n  }\n  prepareRender(ctx) {\n    if (this._renderLineNumbers === 0 /* RenderLineNumbersType.Off */) {\n      this._renderResult = null;\n      return;\n    }\n    const lineHeightClassName = platform.isLinux ? this._lineHeight % 2 === 0 ? ' lh-even' : ' lh-odd' : '';\n    const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n    const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n    const common = '<div class=\"' + LineNumbersOverlay.CLASS_NAME + lineHeightClassName + '\" style=\"left:' + this._lineNumbersLeft + 'px;width:' + this._lineNumbersWidth + 'px;\">';\n    let relativeLineNumbers = null;\n    if (this._renderLineNumbers === 2 /* RenderLineNumbersType.Relative */) {\n      relativeLineNumbers = new Array(visibleEndLineNumber - visibleStartLineNumber + 1);\n      if (this._lastCursorViewPosition.lineNumber >= visibleStartLineNumber && this._lastCursorViewPosition.lineNumber <= visibleEndLineNumber) {\n        relativeLineNumbers[this._lastCursorViewPosition.lineNumber - visibleStartLineNumber] = this._lastCursorModelPosition.lineNumber;\n      }\n      // Iterate up to compute relative line numbers\n      {\n        let value = 0;\n        for (let lineNumber = this._lastCursorViewPosition.lineNumber + 1; lineNumber <= visibleEndLineNumber; lineNumber++) {\n          const modelPosition = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(lineNumber, 1));\n          const isWrappedLine = modelPosition.column !== 1;\n          if (!isWrappedLine) {\n            value++;\n          }\n          if (lineNumber >= visibleStartLineNumber) {\n            relativeLineNumbers[lineNumber - visibleStartLineNumber] = isWrappedLine ? 0 : value;\n          }\n        }\n      }\n      // Iterate down to compute relative line numbers\n      {\n        let value = 0;\n        for (let lineNumber = this._lastCursorViewPosition.lineNumber - 1; lineNumber >= visibleStartLineNumber; lineNumber--) {\n          const modelPosition = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(lineNumber, 1));\n          const isWrappedLine = modelPosition.column !== 1;\n          if (!isWrappedLine) {\n            value++;\n          }\n          if (lineNumber <= visibleEndLineNumber) {\n            relativeLineNumbers[lineNumber - visibleStartLineNumber] = isWrappedLine ? 0 : value;\n          }\n        }\n      }\n    }\n    const lineCount = this._context.viewModel.getLineCount();\n    const output = [];\n    for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n      const lineIndex = lineNumber - visibleStartLineNumber;\n      if (!this._renderFinalNewline) {\n        if (lineNumber === lineCount && this._context.viewModel.getLineLength(lineNumber) === 0) {\n          // Do not render last (empty) line\n          output[lineIndex] = '';\n          continue;\n        }\n      }\n      let renderLineNumber;\n      if (relativeLineNumbers) {\n        const relativeLineNumber = relativeLineNumbers[lineIndex];\n        if (this._lastCursorViewPosition.lineNumber === lineNumber) {\n          // current line!\n          renderLineNumber = `<span class=\"relative-current-line-number\">${relativeLineNumber}</span>`;\n        } else if (relativeLineNumber) {\n          renderLineNumber = String(relativeLineNumber);\n        } else {\n          renderLineNumber = '';\n        }\n      } else {\n        renderLineNumber = this._getLineRenderLineNumber(lineNumber);\n      }\n      if (renderLineNumber) {\n        if (lineNumber === this._activeLineNumber) {\n          output[lineIndex] = '<div class=\"active-line-number ' + LineNumbersOverlay.CLASS_NAME + lineHeightClassName + '\" style=\"left:' + this._lineNumbersLeft + 'px;width:' + this._lineNumbersWidth + 'px;\">' + renderLineNumber + '</div>';\n        } else {\n          output[lineIndex] = common + renderLineNumber + '</div>';\n        }\n      } else {\n        output[lineIndex] = '';\n      }\n    }\n    this._renderResult = output;\n  }\n  render(startLineNumber, lineNumber) {\n    if (!this._renderResult) {\n      return '';\n    }\n    const lineIndex = lineNumber - startLineNumber;\n    if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n      return '';\n    }\n    return this._renderResult[lineIndex];\n  }\n}\nLineNumbersOverlay.CLASS_NAME = 'line-numbers';\n// theming\nregisterThemingParticipant((theme, collector) => {\n  const lineNumbers = theme.getColor(editorLineNumbers);\n  if (lineNumbers) {\n    collector.addRule(`.monaco-editor .line-numbers { color: ${lineNumbers}; }`);\n  }\n  const activeLineNumber = theme.getColor(editorActiveLineNumber);\n  if (activeLineNumber) {\n    collector.addRule(`.monaco-editor .line-numbers.active-line-number { color: ${activeLineNumber}; }`);\n  }\n});","map":{"version":3,"names":["platform","DynamicViewOverlay","Position","editorActiveLineNumber","editorLineNumbers","registerThemingParticipant","LineNumbersOverlay","constructor","context","_context","_readConfig","_lastCursorModelPosition","_lastCursorViewPosition","_renderResult","_activeLineNumber","addEventHandler","options","configuration","_lineHeight","get","lineNumbers","_renderLineNumbers","renderType","_renderCustomLineNumbers","renderFn","_renderFinalNewline","layoutInfo","_lineNumbersLeft","lineNumbersLeft","_lineNumbersWidth","lineNumbersWidth","dispose","removeEventHandler","onConfigurationChanged","e","onCursorStateChanged","primaryViewPosition","selections","getPosition","viewModel","coordinatesConverter","convertViewPositionToModelPosition","shouldRender","lineNumber","onFlushed","onLinesChanged","onLinesDeleted","onLinesInserted","onScrollChanged","scrollTopChanged","onZonesChanged","_getLineRenderLineNumber","viewLineNumber","modelPosition","column","modelLineNumber","String","prepareRender","ctx","lineHeightClassName","isLinux","visibleStartLineNumber","visibleRange","startLineNumber","visibleEndLineNumber","endLineNumber","common","CLASS_NAME","relativeLineNumbers","Array","value","isWrappedLine","lineCount","getLineCount","output","lineIndex","getLineLength","renderLineNumber","relativeLineNumber","render","length","theme","collector","getColor","addRule","activeLineNumber"],"sources":["/home/deathblade287/Desktop/AI-MODELS-TESTING/react-app/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/lineNumbers/lineNumbers.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './lineNumbers.css';\nimport * as platform from '../../../../base/common/platform.js';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { Position } from '../../../common/core/position.js';\nimport { editorActiveLineNumber, editorLineNumbers } from '../../../common/core/editorColorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nexport class LineNumbersOverlay extends DynamicViewOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        this._readConfig();\n        this._lastCursorModelPosition = new Position(1, 1);\n        this._lastCursorViewPosition = new Position(1, 1);\n        this._renderResult = null;\n        this._activeLineNumber = 1;\n        this._context.addEventHandler(this);\n    }\n    _readConfig() {\n        const options = this._context.configuration.options;\n        this._lineHeight = options.get(61 /* EditorOption.lineHeight */);\n        const lineNumbers = options.get(62 /* EditorOption.lineNumbers */);\n        this._renderLineNumbers = lineNumbers.renderType;\n        this._renderCustomLineNumbers = lineNumbers.renderFn;\n        this._renderFinalNewline = options.get(86 /* EditorOption.renderFinalNewline */);\n        const layoutInfo = options.get(133 /* EditorOption.layoutInfo */);\n        this._lineNumbersLeft = layoutInfo.lineNumbersLeft;\n        this._lineNumbersWidth = layoutInfo.lineNumbersWidth;\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        this._readConfig();\n        return true;\n    }\n    onCursorStateChanged(e) {\n        const primaryViewPosition = e.selections[0].getPosition();\n        this._lastCursorViewPosition = primaryViewPosition;\n        this._lastCursorModelPosition = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(primaryViewPosition);\n        let shouldRender = false;\n        if (this._activeLineNumber !== primaryViewPosition.lineNumber) {\n            this._activeLineNumber = primaryViewPosition.lineNumber;\n            shouldRender = true;\n        }\n        if (this._renderLineNumbers === 2 /* RenderLineNumbersType.Relative */ || this._renderLineNumbers === 3 /* RenderLineNumbersType.Interval */) {\n            shouldRender = true;\n        }\n        return shouldRender;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    _getLineRenderLineNumber(viewLineNumber) {\n        const modelPosition = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(viewLineNumber, 1));\n        if (modelPosition.column !== 1) {\n            return '';\n        }\n        const modelLineNumber = modelPosition.lineNumber;\n        if (this._renderCustomLineNumbers) {\n            return this._renderCustomLineNumbers(modelLineNumber);\n        }\n        if (this._renderLineNumbers === 3 /* RenderLineNumbersType.Interval */) {\n            if (this._lastCursorModelPosition.lineNumber === modelLineNumber) {\n                return String(modelLineNumber);\n            }\n            if (modelLineNumber % 10 === 0) {\n                return String(modelLineNumber);\n            }\n            return '';\n        }\n        return String(modelLineNumber);\n    }\n    prepareRender(ctx) {\n        if (this._renderLineNumbers === 0 /* RenderLineNumbersType.Off */) {\n            this._renderResult = null;\n            return;\n        }\n        const lineHeightClassName = (platform.isLinux ? (this._lineHeight % 2 === 0 ? ' lh-even' : ' lh-odd') : '');\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const common = '<div class=\"' + LineNumbersOverlay.CLASS_NAME + lineHeightClassName + '\" style=\"left:' + this._lineNumbersLeft + 'px;width:' + this._lineNumbersWidth + 'px;\">';\n        let relativeLineNumbers = null;\n        if (this._renderLineNumbers === 2 /* RenderLineNumbersType.Relative */) {\n            relativeLineNumbers = new Array(visibleEndLineNumber - visibleStartLineNumber + 1);\n            if (this._lastCursorViewPosition.lineNumber >= visibleStartLineNumber && this._lastCursorViewPosition.lineNumber <= visibleEndLineNumber) {\n                relativeLineNumbers[this._lastCursorViewPosition.lineNumber - visibleStartLineNumber] = this._lastCursorModelPosition.lineNumber;\n            }\n            // Iterate up to compute relative line numbers\n            {\n                let value = 0;\n                for (let lineNumber = this._lastCursorViewPosition.lineNumber + 1; lineNumber <= visibleEndLineNumber; lineNumber++) {\n                    const modelPosition = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(lineNumber, 1));\n                    const isWrappedLine = (modelPosition.column !== 1);\n                    if (!isWrappedLine) {\n                        value++;\n                    }\n                    if (lineNumber >= visibleStartLineNumber) {\n                        relativeLineNumbers[lineNumber - visibleStartLineNumber] = isWrappedLine ? 0 : value;\n                    }\n                }\n            }\n            // Iterate down to compute relative line numbers\n            {\n                let value = 0;\n                for (let lineNumber = this._lastCursorViewPosition.lineNumber - 1; lineNumber >= visibleStartLineNumber; lineNumber--) {\n                    const modelPosition = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(lineNumber, 1));\n                    const isWrappedLine = (modelPosition.column !== 1);\n                    if (!isWrappedLine) {\n                        value++;\n                    }\n                    if (lineNumber <= visibleEndLineNumber) {\n                        relativeLineNumbers[lineNumber - visibleStartLineNumber] = isWrappedLine ? 0 : value;\n                    }\n                }\n            }\n        }\n        const lineCount = this._context.viewModel.getLineCount();\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            if (!this._renderFinalNewline) {\n                if (lineNumber === lineCount && this._context.viewModel.getLineLength(lineNumber) === 0) {\n                    // Do not render last (empty) line\n                    output[lineIndex] = '';\n                    continue;\n                }\n            }\n            let renderLineNumber;\n            if (relativeLineNumbers) {\n                const relativeLineNumber = relativeLineNumbers[lineIndex];\n                if (this._lastCursorViewPosition.lineNumber === lineNumber) {\n                    // current line!\n                    renderLineNumber = `<span class=\"relative-current-line-number\">${relativeLineNumber}</span>`;\n                }\n                else if (relativeLineNumber) {\n                    renderLineNumber = String(relativeLineNumber);\n                }\n                else {\n                    renderLineNumber = '';\n                }\n            }\n            else {\n                renderLineNumber = this._getLineRenderLineNumber(lineNumber);\n            }\n            if (renderLineNumber) {\n                if (lineNumber === this._activeLineNumber) {\n                    output[lineIndex] = ('<div class=\"active-line-number ' + LineNumbersOverlay.CLASS_NAME + lineHeightClassName + '\" style=\"left:' + this._lineNumbersLeft + 'px;width:' + this._lineNumbersWidth + 'px;\">'\n                        + renderLineNumber\n                        + '</div>');\n                }\n                else {\n                    output[lineIndex] = (common\n                        + renderLineNumber\n                        + '</div>');\n                }\n            }\n            else {\n                output[lineIndex] = '';\n            }\n        }\n        this._renderResult = output;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    }\n}\nLineNumbersOverlay.CLASS_NAME = 'line-numbers';\n// theming\nregisterThemingParticipant((theme, collector) => {\n    const lineNumbers = theme.getColor(editorLineNumbers);\n    if (lineNumbers) {\n        collector.addRule(`.monaco-editor .line-numbers { color: ${lineNumbers}; }`);\n    }\n    const activeLineNumber = theme.getColor(editorActiveLineNumber);\n    if (activeLineNumber) {\n        collector.addRule(`.monaco-editor .line-numbers.active-line-number { color: ${activeLineNumber}; }`);\n    }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}