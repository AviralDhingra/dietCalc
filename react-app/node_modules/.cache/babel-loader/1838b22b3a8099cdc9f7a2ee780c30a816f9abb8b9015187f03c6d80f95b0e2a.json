{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as arrays from '../../../base/common/arrays.js';\nimport { ResourceMap } from '../../../base/common/map.js';\nimport * as objects from '../../../base/common/objects.js';\nimport * as types from '../../../base/common/types.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { addToValueTree, getConfigurationValue, removeFromValueTree, toValuesTree } from './configuration.js';\nexport class ConfigurationModel {\n  constructor() {\n    let _contents = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let _keys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let _overrides = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    this._contents = _contents;\n    this._keys = _keys;\n    this._overrides = _overrides;\n    this.frozen = false;\n    this.overrideConfigurations = new Map();\n  }\n  get contents() {\n    return this.checkAndFreeze(this._contents);\n  }\n  get overrides() {\n    return this.checkAndFreeze(this._overrides);\n  }\n  get keys() {\n    return this.checkAndFreeze(this._keys);\n  }\n  isEmpty() {\n    return this._keys.length === 0 && Object.keys(this._contents).length === 0 && this._overrides.length === 0;\n  }\n  getValue(section) {\n    return section ? getConfigurationValue(this.contents, section) : this.contents;\n  }\n  getOverrideValue(section, overrideIdentifier) {\n    const overrideContents = this.getContentsForOverrideIdentifer(overrideIdentifier);\n    return overrideContents ? section ? getConfigurationValue(overrideContents, section) : overrideContents : undefined;\n  }\n  override(identifier) {\n    let overrideConfigurationModel = this.overrideConfigurations.get(identifier);\n    if (!overrideConfigurationModel) {\n      overrideConfigurationModel = this.createOverrideConfigurationModel(identifier);\n      this.overrideConfigurations.set(identifier, overrideConfigurationModel);\n    }\n    return overrideConfigurationModel;\n  }\n  merge() {\n    const contents = objects.deepClone(this.contents);\n    const overrides = objects.deepClone(this.overrides);\n    const keys = [...this.keys];\n    for (var _len = arguments.length, others = new Array(_len), _key = 0; _key < _len; _key++) {\n      others[_key] = arguments[_key];\n    }\n    for (const other of others) {\n      if (other.isEmpty()) {\n        continue;\n      }\n      this.mergeContents(contents, other.contents);\n      for (const otherOverride of other.overrides) {\n        const [override] = overrides.filter(o => arrays.equals(o.identifiers, otherOverride.identifiers));\n        if (override) {\n          this.mergeContents(override.contents, otherOverride.contents);\n          override.keys.push(...otherOverride.keys);\n          override.keys = arrays.distinct(override.keys);\n        } else {\n          overrides.push(objects.deepClone(otherOverride));\n        }\n      }\n      for (const key of other.keys) {\n        if (keys.indexOf(key) === -1) {\n          keys.push(key);\n        }\n      }\n    }\n    return new ConfigurationModel(contents, keys, overrides);\n  }\n  freeze() {\n    this.frozen = true;\n    return this;\n  }\n  createOverrideConfigurationModel(identifier) {\n    const overrideContents = this.getContentsForOverrideIdentifer(identifier);\n    if (!overrideContents || typeof overrideContents !== 'object' || !Object.keys(overrideContents).length) {\n      // If there are no valid overrides, return self\n      return this;\n    }\n    const contents = {};\n    for (const key of arrays.distinct([...Object.keys(this.contents), ...Object.keys(overrideContents)])) {\n      let contentsForKey = this.contents[key];\n      const overrideContentsForKey = overrideContents[key];\n      // If there are override contents for the key, clone and merge otherwise use base contents\n      if (overrideContentsForKey) {\n        // Clone and merge only if base contents and override contents are of type object otherwise just override\n        if (typeof contentsForKey === 'object' && typeof overrideContentsForKey === 'object') {\n          contentsForKey = objects.deepClone(contentsForKey);\n          this.mergeContents(contentsForKey, overrideContentsForKey);\n        } else {\n          contentsForKey = overrideContentsForKey;\n        }\n      }\n      contents[key] = contentsForKey;\n    }\n    return new ConfigurationModel(contents, this.keys, this.overrides);\n  }\n  mergeContents(source, target) {\n    for (const key of Object.keys(target)) {\n      if (key in source) {\n        if (types.isObject(source[key]) && types.isObject(target[key])) {\n          this.mergeContents(source[key], target[key]);\n          continue;\n        }\n      }\n      source[key] = objects.deepClone(target[key]);\n    }\n  }\n  checkAndFreeze(data) {\n    if (this.frozen && !Object.isFrozen(data)) {\n      return objects.deepFreeze(data);\n    }\n    return data;\n  }\n  getContentsForOverrideIdentifer(identifier) {\n    let contentsForIdentifierOnly = null;\n    let contents = null;\n    const mergeContents = contentsToMerge => {\n      if (contentsToMerge) {\n        if (contents) {\n          this.mergeContents(contents, contentsToMerge);\n        } else {\n          contents = objects.deepClone(contentsToMerge);\n        }\n      }\n    };\n    for (const override of this.overrides) {\n      if (arrays.equals(override.identifiers, [identifier])) {\n        contentsForIdentifierOnly = override.contents;\n      } else if (override.identifiers.includes(identifier)) {\n        mergeContents(override.contents);\n      }\n    }\n    // Merge contents of the identifier only at the end to take precedence.\n    mergeContents(contentsForIdentifierOnly);\n    return contents;\n  }\n  toJSON() {\n    return {\n      contents: this.contents,\n      overrides: this.overrides,\n      keys: this.keys\n    };\n  }\n  // Update methods\n  setValue(key, value) {\n    this.addKey(key);\n    addToValueTree(this.contents, key, value, e => {\n      throw new Error(e);\n    });\n  }\n  removeValue(key) {\n    if (this.removeKey(key)) {\n      removeFromValueTree(this.contents, key);\n    }\n  }\n  addKey(key) {\n    let index = this.keys.length;\n    for (let i = 0; i < index; i++) {\n      if (key.indexOf(this.keys[i]) === 0) {\n        index = i;\n      }\n    }\n    this.keys.splice(index, 1, key);\n  }\n  removeKey(key) {\n    const index = this.keys.indexOf(key);\n    if (index !== -1) {\n      this.keys.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n}\nexport class Configuration {\n  constructor(_defaultConfiguration, _policyConfiguration, _applicationConfiguration, _localUserConfiguration) {\n    let _remoteUserConfiguration = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : new ConfigurationModel();\n    let _workspaceConfiguration = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : new ConfigurationModel();\n    let _folderConfigurations = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ResourceMap();\n    let _memoryConfiguration = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : new ConfigurationModel();\n    let _memoryConfigurationByResource = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : new ResourceMap();\n    let _freeze = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : true;\n    this._defaultConfiguration = _defaultConfiguration;\n    this._policyConfiguration = _policyConfiguration;\n    this._applicationConfiguration = _applicationConfiguration;\n    this._localUserConfiguration = _localUserConfiguration;\n    this._remoteUserConfiguration = _remoteUserConfiguration;\n    this._workspaceConfiguration = _workspaceConfiguration;\n    this._folderConfigurations = _folderConfigurations;\n    this._memoryConfiguration = _memoryConfiguration;\n    this._memoryConfigurationByResource = _memoryConfigurationByResource;\n    this._freeze = _freeze;\n    this._workspaceConsolidatedConfiguration = null;\n    this._foldersConsolidatedConfigurations = new ResourceMap();\n    this._userConfiguration = null;\n  }\n  getValue(section, overrides, workspace) {\n    const consolidateConfigurationModel = this.getConsolidatedConfigurationModel(section, overrides, workspace);\n    return consolidateConfigurationModel.getValue(section);\n  }\n  updateValue(key, value) {\n    let overrides = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let memoryConfiguration;\n    if (overrides.resource) {\n      memoryConfiguration = this._memoryConfigurationByResource.get(overrides.resource);\n      if (!memoryConfiguration) {\n        memoryConfiguration = new ConfigurationModel();\n        this._memoryConfigurationByResource.set(overrides.resource, memoryConfiguration);\n      }\n    } else {\n      memoryConfiguration = this._memoryConfiguration;\n    }\n    if (value === undefined) {\n      memoryConfiguration.removeValue(key);\n    } else {\n      memoryConfiguration.setValue(key, value);\n    }\n    if (!overrides.resource) {\n      this._workspaceConsolidatedConfiguration = null;\n    }\n  }\n  inspect(key, overrides, workspace) {\n    const consolidateConfigurationModel = this.getConsolidatedConfigurationModel(key, overrides, workspace);\n    const folderConfigurationModel = this.getFolderConfigurationModelForResource(overrides.resource, workspace);\n    const memoryConfigurationModel = overrides.resource ? this._memoryConfigurationByResource.get(overrides.resource) || this._memoryConfiguration : this._memoryConfiguration;\n    const defaultValue = overrides.overrideIdentifier ? this._defaultConfiguration.freeze().override(overrides.overrideIdentifier).getValue(key) : this._defaultConfiguration.freeze().getValue(key);\n    const policyValue = this._policyConfiguration.isEmpty() ? undefined : this._policyConfiguration.freeze().getValue(key);\n    const applicationValue = this.applicationConfiguration.isEmpty() ? undefined : this.applicationConfiguration.freeze().getValue(key);\n    const userValue = overrides.overrideIdentifier ? this.userConfiguration.freeze().override(overrides.overrideIdentifier).getValue(key) : this.userConfiguration.freeze().getValue(key);\n    const userLocalValue = overrides.overrideIdentifier ? this.localUserConfiguration.freeze().override(overrides.overrideIdentifier).getValue(key) : this.localUserConfiguration.freeze().getValue(key);\n    const userRemoteValue = overrides.overrideIdentifier ? this.remoteUserConfiguration.freeze().override(overrides.overrideIdentifier).getValue(key) : this.remoteUserConfiguration.freeze().getValue(key);\n    const workspaceValue = workspace ? overrides.overrideIdentifier ? this._workspaceConfiguration.freeze().override(overrides.overrideIdentifier).getValue(key) : this._workspaceConfiguration.freeze().getValue(key) : undefined; //Check on workspace exists or not because _workspaceConfiguration is never null\n    const workspaceFolderValue = folderConfigurationModel ? overrides.overrideIdentifier ? folderConfigurationModel.freeze().override(overrides.overrideIdentifier).getValue(key) : folderConfigurationModel.freeze().getValue(key) : undefined;\n    const memoryValue = overrides.overrideIdentifier ? memoryConfigurationModel.override(overrides.overrideIdentifier).getValue(key) : memoryConfigurationModel.getValue(key);\n    const value = consolidateConfigurationModel.getValue(key);\n    const overrideIdentifiers = arrays.distinct(consolidateConfigurationModel.overrides.map(override => override.identifiers).flat()).filter(overrideIdentifier => consolidateConfigurationModel.getOverrideValue(key, overrideIdentifier) !== undefined);\n    return {\n      defaultValue,\n      policyValue,\n      applicationValue,\n      userValue,\n      userLocalValue,\n      userRemoteValue,\n      workspaceValue,\n      workspaceFolderValue,\n      memoryValue,\n      value,\n      default: defaultValue !== undefined ? {\n        value: this._defaultConfiguration.freeze().getValue(key),\n        override: overrides.overrideIdentifier ? this._defaultConfiguration.freeze().getOverrideValue(key, overrides.overrideIdentifier) : undefined\n      } : undefined,\n      policy: policyValue !== undefined ? {\n        value: policyValue\n      } : undefined,\n      application: applicationValue !== undefined ? {\n        value: applicationValue,\n        override: overrides.overrideIdentifier ? this.applicationConfiguration.freeze().getOverrideValue(key, overrides.overrideIdentifier) : undefined\n      } : undefined,\n      user: userValue !== undefined ? {\n        value: this.userConfiguration.freeze().getValue(key),\n        override: overrides.overrideIdentifier ? this.userConfiguration.freeze().getOverrideValue(key, overrides.overrideIdentifier) : undefined\n      } : undefined,\n      userLocal: userLocalValue !== undefined ? {\n        value: this.localUserConfiguration.freeze().getValue(key),\n        override: overrides.overrideIdentifier ? this.localUserConfiguration.freeze().getOverrideValue(key, overrides.overrideIdentifier) : undefined\n      } : undefined,\n      userRemote: userRemoteValue !== undefined ? {\n        value: this.remoteUserConfiguration.freeze().getValue(key),\n        override: overrides.overrideIdentifier ? this.remoteUserConfiguration.freeze().getOverrideValue(key, overrides.overrideIdentifier) : undefined\n      } : undefined,\n      workspace: workspaceValue !== undefined ? {\n        value: this._workspaceConfiguration.freeze().getValue(key),\n        override: overrides.overrideIdentifier ? this._workspaceConfiguration.freeze().getOverrideValue(key, overrides.overrideIdentifier) : undefined\n      } : undefined,\n      workspaceFolder: workspaceFolderValue !== undefined ? {\n        value: folderConfigurationModel === null || folderConfigurationModel === void 0 ? void 0 : folderConfigurationModel.freeze().getValue(key),\n        override: overrides.overrideIdentifier ? folderConfigurationModel === null || folderConfigurationModel === void 0 ? void 0 : folderConfigurationModel.freeze().getOverrideValue(key, overrides.overrideIdentifier) : undefined\n      } : undefined,\n      memory: memoryValue !== undefined ? {\n        value: memoryConfigurationModel.getValue(key),\n        override: overrides.overrideIdentifier ? memoryConfigurationModel.getOverrideValue(key, overrides.overrideIdentifier) : undefined\n      } : undefined,\n      overrideIdentifiers: overrideIdentifiers.length ? overrideIdentifiers : undefined\n    };\n  }\n  get applicationConfiguration() {\n    return this._applicationConfiguration;\n  }\n  get userConfiguration() {\n    if (!this._userConfiguration) {\n      this._userConfiguration = this._remoteUserConfiguration.isEmpty() ? this._localUserConfiguration : this._localUserConfiguration.merge(this._remoteUserConfiguration);\n      if (this._freeze) {\n        this._userConfiguration.freeze();\n      }\n    }\n    return this._userConfiguration;\n  }\n  get localUserConfiguration() {\n    return this._localUserConfiguration;\n  }\n  get remoteUserConfiguration() {\n    return this._remoteUserConfiguration;\n  }\n  getConsolidatedConfigurationModel(section, overrides, workspace) {\n    let configurationModel = this.getConsolidatedConfigurationModelForResource(overrides, workspace);\n    if (overrides.overrideIdentifier) {\n      configurationModel = configurationModel.override(overrides.overrideIdentifier);\n    }\n    if (!this._policyConfiguration.isEmpty() && this._policyConfiguration.getValue(section) !== undefined) {\n      configurationModel = configurationModel.merge(this._policyConfiguration);\n    }\n    return configurationModel;\n  }\n  getConsolidatedConfigurationModelForResource(_ref, workspace) {\n    let {\n      resource\n    } = _ref;\n    let consolidateConfiguration = this.getWorkspaceConsolidatedConfiguration();\n    if (workspace && resource) {\n      const root = workspace.getFolder(resource);\n      if (root) {\n        consolidateConfiguration = this.getFolderConsolidatedConfiguration(root.uri) || consolidateConfiguration;\n      }\n      const memoryConfigurationForResource = this._memoryConfigurationByResource.get(resource);\n      if (memoryConfigurationForResource) {\n        consolidateConfiguration = consolidateConfiguration.merge(memoryConfigurationForResource);\n      }\n    }\n    return consolidateConfiguration;\n  }\n  getWorkspaceConsolidatedConfiguration() {\n    if (!this._workspaceConsolidatedConfiguration) {\n      this._workspaceConsolidatedConfiguration = this._defaultConfiguration.merge(this.applicationConfiguration, this.userConfiguration, this._workspaceConfiguration, this._memoryConfiguration);\n      if (this._freeze) {\n        this._workspaceConfiguration = this._workspaceConfiguration.freeze();\n      }\n    }\n    return this._workspaceConsolidatedConfiguration;\n  }\n  getFolderConsolidatedConfiguration(folder) {\n    let folderConsolidatedConfiguration = this._foldersConsolidatedConfigurations.get(folder);\n    if (!folderConsolidatedConfiguration) {\n      const workspaceConsolidateConfiguration = this.getWorkspaceConsolidatedConfiguration();\n      const folderConfiguration = this._folderConfigurations.get(folder);\n      if (folderConfiguration) {\n        folderConsolidatedConfiguration = workspaceConsolidateConfiguration.merge(folderConfiguration);\n        if (this._freeze) {\n          folderConsolidatedConfiguration = folderConsolidatedConfiguration.freeze();\n        }\n        this._foldersConsolidatedConfigurations.set(folder, folderConsolidatedConfiguration);\n      } else {\n        folderConsolidatedConfiguration = workspaceConsolidateConfiguration;\n      }\n    }\n    return folderConsolidatedConfiguration;\n  }\n  getFolderConfigurationModelForResource(resource, workspace) {\n    if (workspace && resource) {\n      const root = workspace.getFolder(resource);\n      if (root) {\n        return this._folderConfigurations.get(root.uri);\n      }\n    }\n    return undefined;\n  }\n  toData() {\n    return {\n      defaults: {\n        contents: this._defaultConfiguration.contents,\n        overrides: this._defaultConfiguration.overrides,\n        keys: this._defaultConfiguration.keys\n      },\n      policy: {\n        contents: this._policyConfiguration.contents,\n        overrides: this._policyConfiguration.overrides,\n        keys: this._policyConfiguration.keys\n      },\n      application: {\n        contents: this.applicationConfiguration.contents,\n        overrides: this.applicationConfiguration.overrides,\n        keys: this.applicationConfiguration.keys\n      },\n      user: {\n        contents: this.userConfiguration.contents,\n        overrides: this.userConfiguration.overrides,\n        keys: this.userConfiguration.keys\n      },\n      workspace: {\n        contents: this._workspaceConfiguration.contents,\n        overrides: this._workspaceConfiguration.overrides,\n        keys: this._workspaceConfiguration.keys\n      },\n      folders: [...this._folderConfigurations.keys()].reduce((result, folder) => {\n        const {\n          contents,\n          overrides,\n          keys\n        } = this._folderConfigurations.get(folder);\n        result.push([folder, {\n          contents,\n          overrides,\n          keys\n        }]);\n        return result;\n      }, [])\n    };\n  }\n  static parse(data) {\n    const defaultConfiguration = this.parseConfigurationModel(data.defaults);\n    const policyConfiguration = this.parseConfigurationModel(data.policy);\n    const applicationConfiguration = this.parseConfigurationModel(data.application);\n    const userConfiguration = this.parseConfigurationModel(data.user);\n    const workspaceConfiguration = this.parseConfigurationModel(data.workspace);\n    const folders = data.folders.reduce((result, value) => {\n      result.set(URI.revive(value[0]), this.parseConfigurationModel(value[1]));\n      return result;\n    }, new ResourceMap());\n    return new Configuration(defaultConfiguration, policyConfiguration, applicationConfiguration, userConfiguration, new ConfigurationModel(), workspaceConfiguration, folders, new ConfigurationModel(), new ResourceMap(), false);\n  }\n  static parseConfigurationModel(model) {\n    return new ConfigurationModel(model.contents, model.keys, model.overrides).freeze();\n  }\n}\nexport class ConfigurationChangeEvent {\n  constructor(change, previous, currentConfiguraiton, currentWorkspace) {\n    this.change = change;\n    this.previous = previous;\n    this.currentConfiguraiton = currentConfiguraiton;\n    this.currentWorkspace = currentWorkspace;\n    this._previousConfiguration = undefined;\n    const keysSet = new Set();\n    change.keys.forEach(key => keysSet.add(key));\n    change.overrides.forEach(_ref2 => {\n      let [, keys] = _ref2;\n      return keys.forEach(key => keysSet.add(key));\n    });\n    this.affectedKeys = [...keysSet.values()];\n    const configurationModel = new ConfigurationModel();\n    this.affectedKeys.forEach(key => configurationModel.setValue(key, {}));\n    this.affectedKeysTree = configurationModel.contents;\n  }\n  get previousConfiguration() {\n    if (!this._previousConfiguration && this.previous) {\n      this._previousConfiguration = Configuration.parse(this.previous.data);\n    }\n    return this._previousConfiguration;\n  }\n  affectsConfiguration(section, overrides) {\n    var _a;\n    if (this.doesAffectedKeysTreeContains(this.affectedKeysTree, section)) {\n      if (overrides) {\n        const value1 = this.previousConfiguration ? this.previousConfiguration.getValue(section, overrides, (_a = this.previous) === null || _a === void 0 ? void 0 : _a.workspace) : undefined;\n        const value2 = this.currentConfiguraiton.getValue(section, overrides, this.currentWorkspace);\n        return !objects.equals(value1, value2);\n      }\n      return true;\n    }\n    return false;\n  }\n  doesAffectedKeysTreeContains(affectedKeysTree, section) {\n    let requestedTree = toValuesTree({\n      [section]: true\n    }, () => {});\n    let key;\n    while (typeof requestedTree === 'object' && (key = Object.keys(requestedTree)[0])) {\n      // Only one key should present, since we added only one property\n      affectedKeysTree = affectedKeysTree[key];\n      if (!affectedKeysTree) {\n        return false; // Requested tree is not found\n      }\n\n      requestedTree = requestedTree[key];\n    }\n    return true;\n  }\n}","map":{"version":3,"names":["arrays","ResourceMap","objects","types","URI","addToValueTree","getConfigurationValue","removeFromValueTree","toValuesTree","ConfigurationModel","constructor","_contents","_keys","_overrides","frozen","overrideConfigurations","Map","contents","checkAndFreeze","overrides","keys","isEmpty","length","Object","getValue","section","getOverrideValue","overrideIdentifier","overrideContents","getContentsForOverrideIdentifer","undefined","override","identifier","overrideConfigurationModel","get","createOverrideConfigurationModel","set","merge","deepClone","others","other","mergeContents","otherOverride","filter","o","equals","identifiers","push","distinct","key","indexOf","freeze","contentsForKey","overrideContentsForKey","source","target","isObject","data","isFrozen","deepFreeze","contentsForIdentifierOnly","contentsToMerge","includes","toJSON","setValue","value","addKey","e","Error","removeValue","removeKey","index","i","splice","Configuration","_defaultConfiguration","_policyConfiguration","_applicationConfiguration","_localUserConfiguration","_remoteUserConfiguration","_workspaceConfiguration","_folderConfigurations","_memoryConfiguration","_memoryConfigurationByResource","_freeze","_workspaceConsolidatedConfiguration","_foldersConsolidatedConfigurations","_userConfiguration","workspace","consolidateConfigurationModel","getConsolidatedConfigurationModel","updateValue","memoryConfiguration","resource","inspect","folderConfigurationModel","getFolderConfigurationModelForResource","memoryConfigurationModel","defaultValue","policyValue","applicationValue","applicationConfiguration","userValue","userConfiguration","userLocalValue","localUserConfiguration","userRemoteValue","remoteUserConfiguration","workspaceValue","workspaceFolderValue","memoryValue","overrideIdentifiers","map","flat","default","policy","application","user","userLocal","userRemote","workspaceFolder","memory","configurationModel","getConsolidatedConfigurationModelForResource","consolidateConfiguration","getWorkspaceConsolidatedConfiguration","root","getFolder","getFolderConsolidatedConfiguration","uri","memoryConfigurationForResource","folder","folderConsolidatedConfiguration","workspaceConsolidateConfiguration","folderConfiguration","toData","defaults","folders","reduce","result","parse","defaultConfiguration","parseConfigurationModel","policyConfiguration","workspaceConfiguration","revive","model","ConfigurationChangeEvent","change","previous","currentConfiguraiton","currentWorkspace","_previousConfiguration","keysSet","Set","forEach","add","affectedKeys","values","affectedKeysTree","previousConfiguration","affectsConfiguration","_a","doesAffectedKeysTreeContains","value1","value2","requestedTree"],"sources":["/home/deathblade287/Desktop/AI-MODELS-TESTING/react-app/node_modules/monaco-editor/esm/vs/platform/configuration/common/configurationModels.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as arrays from '../../../base/common/arrays.js';\nimport { ResourceMap } from '../../../base/common/map.js';\nimport * as objects from '../../../base/common/objects.js';\nimport * as types from '../../../base/common/types.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { addToValueTree, getConfigurationValue, removeFromValueTree, toValuesTree } from './configuration.js';\nexport class ConfigurationModel {\n    constructor(_contents = {}, _keys = [], _overrides = []) {\n        this._contents = _contents;\n        this._keys = _keys;\n        this._overrides = _overrides;\n        this.frozen = false;\n        this.overrideConfigurations = new Map();\n    }\n    get contents() {\n        return this.checkAndFreeze(this._contents);\n    }\n    get overrides() {\n        return this.checkAndFreeze(this._overrides);\n    }\n    get keys() {\n        return this.checkAndFreeze(this._keys);\n    }\n    isEmpty() {\n        return this._keys.length === 0 && Object.keys(this._contents).length === 0 && this._overrides.length === 0;\n    }\n    getValue(section) {\n        return section ? getConfigurationValue(this.contents, section) : this.contents;\n    }\n    getOverrideValue(section, overrideIdentifier) {\n        const overrideContents = this.getContentsForOverrideIdentifer(overrideIdentifier);\n        return overrideContents\n            ? section ? getConfigurationValue(overrideContents, section) : overrideContents\n            : undefined;\n    }\n    override(identifier) {\n        let overrideConfigurationModel = this.overrideConfigurations.get(identifier);\n        if (!overrideConfigurationModel) {\n            overrideConfigurationModel = this.createOverrideConfigurationModel(identifier);\n            this.overrideConfigurations.set(identifier, overrideConfigurationModel);\n        }\n        return overrideConfigurationModel;\n    }\n    merge(...others) {\n        const contents = objects.deepClone(this.contents);\n        const overrides = objects.deepClone(this.overrides);\n        const keys = [...this.keys];\n        for (const other of others) {\n            if (other.isEmpty()) {\n                continue;\n            }\n            this.mergeContents(contents, other.contents);\n            for (const otherOverride of other.overrides) {\n                const [override] = overrides.filter(o => arrays.equals(o.identifiers, otherOverride.identifiers));\n                if (override) {\n                    this.mergeContents(override.contents, otherOverride.contents);\n                    override.keys.push(...otherOverride.keys);\n                    override.keys = arrays.distinct(override.keys);\n                }\n                else {\n                    overrides.push(objects.deepClone(otherOverride));\n                }\n            }\n            for (const key of other.keys) {\n                if (keys.indexOf(key) === -1) {\n                    keys.push(key);\n                }\n            }\n        }\n        return new ConfigurationModel(contents, keys, overrides);\n    }\n    freeze() {\n        this.frozen = true;\n        return this;\n    }\n    createOverrideConfigurationModel(identifier) {\n        const overrideContents = this.getContentsForOverrideIdentifer(identifier);\n        if (!overrideContents || typeof overrideContents !== 'object' || !Object.keys(overrideContents).length) {\n            // If there are no valid overrides, return self\n            return this;\n        }\n        const contents = {};\n        for (const key of arrays.distinct([...Object.keys(this.contents), ...Object.keys(overrideContents)])) {\n            let contentsForKey = this.contents[key];\n            const overrideContentsForKey = overrideContents[key];\n            // If there are override contents for the key, clone and merge otherwise use base contents\n            if (overrideContentsForKey) {\n                // Clone and merge only if base contents and override contents are of type object otherwise just override\n                if (typeof contentsForKey === 'object' && typeof overrideContentsForKey === 'object') {\n                    contentsForKey = objects.deepClone(contentsForKey);\n                    this.mergeContents(contentsForKey, overrideContentsForKey);\n                }\n                else {\n                    contentsForKey = overrideContentsForKey;\n                }\n            }\n            contents[key] = contentsForKey;\n        }\n        return new ConfigurationModel(contents, this.keys, this.overrides);\n    }\n    mergeContents(source, target) {\n        for (const key of Object.keys(target)) {\n            if (key in source) {\n                if (types.isObject(source[key]) && types.isObject(target[key])) {\n                    this.mergeContents(source[key], target[key]);\n                    continue;\n                }\n            }\n            source[key] = objects.deepClone(target[key]);\n        }\n    }\n    checkAndFreeze(data) {\n        if (this.frozen && !Object.isFrozen(data)) {\n            return objects.deepFreeze(data);\n        }\n        return data;\n    }\n    getContentsForOverrideIdentifer(identifier) {\n        let contentsForIdentifierOnly = null;\n        let contents = null;\n        const mergeContents = (contentsToMerge) => {\n            if (contentsToMerge) {\n                if (contents) {\n                    this.mergeContents(contents, contentsToMerge);\n                }\n                else {\n                    contents = objects.deepClone(contentsToMerge);\n                }\n            }\n        };\n        for (const override of this.overrides) {\n            if (arrays.equals(override.identifiers, [identifier])) {\n                contentsForIdentifierOnly = override.contents;\n            }\n            else if (override.identifiers.includes(identifier)) {\n                mergeContents(override.contents);\n            }\n        }\n        // Merge contents of the identifier only at the end to take precedence.\n        mergeContents(contentsForIdentifierOnly);\n        return contents;\n    }\n    toJSON() {\n        return {\n            contents: this.contents,\n            overrides: this.overrides,\n            keys: this.keys\n        };\n    }\n    // Update methods\n    setValue(key, value) {\n        this.addKey(key);\n        addToValueTree(this.contents, key, value, e => { throw new Error(e); });\n    }\n    removeValue(key) {\n        if (this.removeKey(key)) {\n            removeFromValueTree(this.contents, key);\n        }\n    }\n    addKey(key) {\n        let index = this.keys.length;\n        for (let i = 0; i < index; i++) {\n            if (key.indexOf(this.keys[i]) === 0) {\n                index = i;\n            }\n        }\n        this.keys.splice(index, 1, key);\n    }\n    removeKey(key) {\n        const index = this.keys.indexOf(key);\n        if (index !== -1) {\n            this.keys.splice(index, 1);\n            return true;\n        }\n        return false;\n    }\n}\nexport class Configuration {\n    constructor(_defaultConfiguration, _policyConfiguration, _applicationConfiguration, _localUserConfiguration, _remoteUserConfiguration = new ConfigurationModel(), _workspaceConfiguration = new ConfigurationModel(), _folderConfigurations = new ResourceMap(), _memoryConfiguration = new ConfigurationModel(), _memoryConfigurationByResource = new ResourceMap(), _freeze = true) {\n        this._defaultConfiguration = _defaultConfiguration;\n        this._policyConfiguration = _policyConfiguration;\n        this._applicationConfiguration = _applicationConfiguration;\n        this._localUserConfiguration = _localUserConfiguration;\n        this._remoteUserConfiguration = _remoteUserConfiguration;\n        this._workspaceConfiguration = _workspaceConfiguration;\n        this._folderConfigurations = _folderConfigurations;\n        this._memoryConfiguration = _memoryConfiguration;\n        this._memoryConfigurationByResource = _memoryConfigurationByResource;\n        this._freeze = _freeze;\n        this._workspaceConsolidatedConfiguration = null;\n        this._foldersConsolidatedConfigurations = new ResourceMap();\n        this._userConfiguration = null;\n    }\n    getValue(section, overrides, workspace) {\n        const consolidateConfigurationModel = this.getConsolidatedConfigurationModel(section, overrides, workspace);\n        return consolidateConfigurationModel.getValue(section);\n    }\n    updateValue(key, value, overrides = {}) {\n        let memoryConfiguration;\n        if (overrides.resource) {\n            memoryConfiguration = this._memoryConfigurationByResource.get(overrides.resource);\n            if (!memoryConfiguration) {\n                memoryConfiguration = new ConfigurationModel();\n                this._memoryConfigurationByResource.set(overrides.resource, memoryConfiguration);\n            }\n        }\n        else {\n            memoryConfiguration = this._memoryConfiguration;\n        }\n        if (value === undefined) {\n            memoryConfiguration.removeValue(key);\n        }\n        else {\n            memoryConfiguration.setValue(key, value);\n        }\n        if (!overrides.resource) {\n            this._workspaceConsolidatedConfiguration = null;\n        }\n    }\n    inspect(key, overrides, workspace) {\n        const consolidateConfigurationModel = this.getConsolidatedConfigurationModel(key, overrides, workspace);\n        const folderConfigurationModel = this.getFolderConfigurationModelForResource(overrides.resource, workspace);\n        const memoryConfigurationModel = overrides.resource ? this._memoryConfigurationByResource.get(overrides.resource) || this._memoryConfiguration : this._memoryConfiguration;\n        const defaultValue = overrides.overrideIdentifier ? this._defaultConfiguration.freeze().override(overrides.overrideIdentifier).getValue(key) : this._defaultConfiguration.freeze().getValue(key);\n        const policyValue = this._policyConfiguration.isEmpty() ? undefined : this._policyConfiguration.freeze().getValue(key);\n        const applicationValue = this.applicationConfiguration.isEmpty() ? undefined : this.applicationConfiguration.freeze().getValue(key);\n        const userValue = overrides.overrideIdentifier ? this.userConfiguration.freeze().override(overrides.overrideIdentifier).getValue(key) : this.userConfiguration.freeze().getValue(key);\n        const userLocalValue = overrides.overrideIdentifier ? this.localUserConfiguration.freeze().override(overrides.overrideIdentifier).getValue(key) : this.localUserConfiguration.freeze().getValue(key);\n        const userRemoteValue = overrides.overrideIdentifier ? this.remoteUserConfiguration.freeze().override(overrides.overrideIdentifier).getValue(key) : this.remoteUserConfiguration.freeze().getValue(key);\n        const workspaceValue = workspace ? overrides.overrideIdentifier ? this._workspaceConfiguration.freeze().override(overrides.overrideIdentifier).getValue(key) : this._workspaceConfiguration.freeze().getValue(key) : undefined; //Check on workspace exists or not because _workspaceConfiguration is never null\n        const workspaceFolderValue = folderConfigurationModel ? overrides.overrideIdentifier ? folderConfigurationModel.freeze().override(overrides.overrideIdentifier).getValue(key) : folderConfigurationModel.freeze().getValue(key) : undefined;\n        const memoryValue = overrides.overrideIdentifier ? memoryConfigurationModel.override(overrides.overrideIdentifier).getValue(key) : memoryConfigurationModel.getValue(key);\n        const value = consolidateConfigurationModel.getValue(key);\n        const overrideIdentifiers = arrays.distinct(consolidateConfigurationModel.overrides.map(override => override.identifiers).flat()).filter(overrideIdentifier => consolidateConfigurationModel.getOverrideValue(key, overrideIdentifier) !== undefined);\n        return {\n            defaultValue,\n            policyValue,\n            applicationValue,\n            userValue,\n            userLocalValue,\n            userRemoteValue,\n            workspaceValue,\n            workspaceFolderValue,\n            memoryValue,\n            value,\n            default: defaultValue !== undefined ? { value: this._defaultConfiguration.freeze().getValue(key), override: overrides.overrideIdentifier ? this._defaultConfiguration.freeze().getOverrideValue(key, overrides.overrideIdentifier) : undefined } : undefined,\n            policy: policyValue !== undefined ? { value: policyValue } : undefined,\n            application: applicationValue !== undefined ? { value: applicationValue, override: overrides.overrideIdentifier ? this.applicationConfiguration.freeze().getOverrideValue(key, overrides.overrideIdentifier) : undefined } : undefined,\n            user: userValue !== undefined ? { value: this.userConfiguration.freeze().getValue(key), override: overrides.overrideIdentifier ? this.userConfiguration.freeze().getOverrideValue(key, overrides.overrideIdentifier) : undefined } : undefined,\n            userLocal: userLocalValue !== undefined ? { value: this.localUserConfiguration.freeze().getValue(key), override: overrides.overrideIdentifier ? this.localUserConfiguration.freeze().getOverrideValue(key, overrides.overrideIdentifier) : undefined } : undefined,\n            userRemote: userRemoteValue !== undefined ? { value: this.remoteUserConfiguration.freeze().getValue(key), override: overrides.overrideIdentifier ? this.remoteUserConfiguration.freeze().getOverrideValue(key, overrides.overrideIdentifier) : undefined } : undefined,\n            workspace: workspaceValue !== undefined ? { value: this._workspaceConfiguration.freeze().getValue(key), override: overrides.overrideIdentifier ? this._workspaceConfiguration.freeze().getOverrideValue(key, overrides.overrideIdentifier) : undefined } : undefined,\n            workspaceFolder: workspaceFolderValue !== undefined ? { value: folderConfigurationModel === null || folderConfigurationModel === void 0 ? void 0 : folderConfigurationModel.freeze().getValue(key), override: overrides.overrideIdentifier ? folderConfigurationModel === null || folderConfigurationModel === void 0 ? void 0 : folderConfigurationModel.freeze().getOverrideValue(key, overrides.overrideIdentifier) : undefined } : undefined,\n            memory: memoryValue !== undefined ? { value: memoryConfigurationModel.getValue(key), override: overrides.overrideIdentifier ? memoryConfigurationModel.getOverrideValue(key, overrides.overrideIdentifier) : undefined } : undefined,\n            overrideIdentifiers: overrideIdentifiers.length ? overrideIdentifiers : undefined\n        };\n    }\n    get applicationConfiguration() {\n        return this._applicationConfiguration;\n    }\n    get userConfiguration() {\n        if (!this._userConfiguration) {\n            this._userConfiguration = this._remoteUserConfiguration.isEmpty() ? this._localUserConfiguration : this._localUserConfiguration.merge(this._remoteUserConfiguration);\n            if (this._freeze) {\n                this._userConfiguration.freeze();\n            }\n        }\n        return this._userConfiguration;\n    }\n    get localUserConfiguration() {\n        return this._localUserConfiguration;\n    }\n    get remoteUserConfiguration() {\n        return this._remoteUserConfiguration;\n    }\n    getConsolidatedConfigurationModel(section, overrides, workspace) {\n        let configurationModel = this.getConsolidatedConfigurationModelForResource(overrides, workspace);\n        if (overrides.overrideIdentifier) {\n            configurationModel = configurationModel.override(overrides.overrideIdentifier);\n        }\n        if (!this._policyConfiguration.isEmpty() && this._policyConfiguration.getValue(section) !== undefined) {\n            configurationModel = configurationModel.merge(this._policyConfiguration);\n        }\n        return configurationModel;\n    }\n    getConsolidatedConfigurationModelForResource({ resource }, workspace) {\n        let consolidateConfiguration = this.getWorkspaceConsolidatedConfiguration();\n        if (workspace && resource) {\n            const root = workspace.getFolder(resource);\n            if (root) {\n                consolidateConfiguration = this.getFolderConsolidatedConfiguration(root.uri) || consolidateConfiguration;\n            }\n            const memoryConfigurationForResource = this._memoryConfigurationByResource.get(resource);\n            if (memoryConfigurationForResource) {\n                consolidateConfiguration = consolidateConfiguration.merge(memoryConfigurationForResource);\n            }\n        }\n        return consolidateConfiguration;\n    }\n    getWorkspaceConsolidatedConfiguration() {\n        if (!this._workspaceConsolidatedConfiguration) {\n            this._workspaceConsolidatedConfiguration = this._defaultConfiguration.merge(this.applicationConfiguration, this.userConfiguration, this._workspaceConfiguration, this._memoryConfiguration);\n            if (this._freeze) {\n                this._workspaceConfiguration = this._workspaceConfiguration.freeze();\n            }\n        }\n        return this._workspaceConsolidatedConfiguration;\n    }\n    getFolderConsolidatedConfiguration(folder) {\n        let folderConsolidatedConfiguration = this._foldersConsolidatedConfigurations.get(folder);\n        if (!folderConsolidatedConfiguration) {\n            const workspaceConsolidateConfiguration = this.getWorkspaceConsolidatedConfiguration();\n            const folderConfiguration = this._folderConfigurations.get(folder);\n            if (folderConfiguration) {\n                folderConsolidatedConfiguration = workspaceConsolidateConfiguration.merge(folderConfiguration);\n                if (this._freeze) {\n                    folderConsolidatedConfiguration = folderConsolidatedConfiguration.freeze();\n                }\n                this._foldersConsolidatedConfigurations.set(folder, folderConsolidatedConfiguration);\n            }\n            else {\n                folderConsolidatedConfiguration = workspaceConsolidateConfiguration;\n            }\n        }\n        return folderConsolidatedConfiguration;\n    }\n    getFolderConfigurationModelForResource(resource, workspace) {\n        if (workspace && resource) {\n            const root = workspace.getFolder(resource);\n            if (root) {\n                return this._folderConfigurations.get(root.uri);\n            }\n        }\n        return undefined;\n    }\n    toData() {\n        return {\n            defaults: {\n                contents: this._defaultConfiguration.contents,\n                overrides: this._defaultConfiguration.overrides,\n                keys: this._defaultConfiguration.keys\n            },\n            policy: {\n                contents: this._policyConfiguration.contents,\n                overrides: this._policyConfiguration.overrides,\n                keys: this._policyConfiguration.keys\n            },\n            application: {\n                contents: this.applicationConfiguration.contents,\n                overrides: this.applicationConfiguration.overrides,\n                keys: this.applicationConfiguration.keys\n            },\n            user: {\n                contents: this.userConfiguration.contents,\n                overrides: this.userConfiguration.overrides,\n                keys: this.userConfiguration.keys\n            },\n            workspace: {\n                contents: this._workspaceConfiguration.contents,\n                overrides: this._workspaceConfiguration.overrides,\n                keys: this._workspaceConfiguration.keys\n            },\n            folders: [...this._folderConfigurations.keys()].reduce((result, folder) => {\n                const { contents, overrides, keys } = this._folderConfigurations.get(folder);\n                result.push([folder, { contents, overrides, keys }]);\n                return result;\n            }, [])\n        };\n    }\n    static parse(data) {\n        const defaultConfiguration = this.parseConfigurationModel(data.defaults);\n        const policyConfiguration = this.parseConfigurationModel(data.policy);\n        const applicationConfiguration = this.parseConfigurationModel(data.application);\n        const userConfiguration = this.parseConfigurationModel(data.user);\n        const workspaceConfiguration = this.parseConfigurationModel(data.workspace);\n        const folders = data.folders.reduce((result, value) => {\n            result.set(URI.revive(value[0]), this.parseConfigurationModel(value[1]));\n            return result;\n        }, new ResourceMap());\n        return new Configuration(defaultConfiguration, policyConfiguration, applicationConfiguration, userConfiguration, new ConfigurationModel(), workspaceConfiguration, folders, new ConfigurationModel(), new ResourceMap(), false);\n    }\n    static parseConfigurationModel(model) {\n        return new ConfigurationModel(model.contents, model.keys, model.overrides).freeze();\n    }\n}\nexport class ConfigurationChangeEvent {\n    constructor(change, previous, currentConfiguraiton, currentWorkspace) {\n        this.change = change;\n        this.previous = previous;\n        this.currentConfiguraiton = currentConfiguraiton;\n        this.currentWorkspace = currentWorkspace;\n        this._previousConfiguration = undefined;\n        const keysSet = new Set();\n        change.keys.forEach(key => keysSet.add(key));\n        change.overrides.forEach(([, keys]) => keys.forEach(key => keysSet.add(key)));\n        this.affectedKeys = [...keysSet.values()];\n        const configurationModel = new ConfigurationModel();\n        this.affectedKeys.forEach(key => configurationModel.setValue(key, {}));\n        this.affectedKeysTree = configurationModel.contents;\n    }\n    get previousConfiguration() {\n        if (!this._previousConfiguration && this.previous) {\n            this._previousConfiguration = Configuration.parse(this.previous.data);\n        }\n        return this._previousConfiguration;\n    }\n    affectsConfiguration(section, overrides) {\n        var _a;\n        if (this.doesAffectedKeysTreeContains(this.affectedKeysTree, section)) {\n            if (overrides) {\n                const value1 = this.previousConfiguration ? this.previousConfiguration.getValue(section, overrides, (_a = this.previous) === null || _a === void 0 ? void 0 : _a.workspace) : undefined;\n                const value2 = this.currentConfiguraiton.getValue(section, overrides, this.currentWorkspace);\n                return !objects.equals(value1, value2);\n            }\n            return true;\n        }\n        return false;\n    }\n    doesAffectedKeysTreeContains(affectedKeysTree, section) {\n        let requestedTree = toValuesTree({ [section]: true }, () => { });\n        let key;\n        while (typeof requestedTree === 'object' && (key = Object.keys(requestedTree)[0])) { // Only one key should present, since we added only one property\n            affectedKeysTree = affectedKeysTree[key];\n            if (!affectedKeysTree) {\n                return false; // Requested tree is not found\n            }\n            requestedTree = requestedTree[key];\n        }\n        return true;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}