{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * An event describing that a model has been reset to a new value.\n * @internal\n */\nexport class ModelRawFlush {\n  constructor() {\n    this.changeType = 1 /* RawContentChangedType.Flush */;\n  }\n}\n/**\n * Represents text injected on a line\n * @internal\n */\nexport class LineInjectedText {\n  constructor(ownerId, lineNumber, column, options, order) {\n    this.ownerId = ownerId;\n    this.lineNumber = lineNumber;\n    this.column = column;\n    this.options = options;\n    this.order = order;\n  }\n  static applyInjectedText(lineText, injectedTexts) {\n    if (!injectedTexts || injectedTexts.length === 0) {\n      return lineText;\n    }\n    let result = '';\n    let lastOriginalOffset = 0;\n    for (const injectedText of injectedTexts) {\n      result += lineText.substring(lastOriginalOffset, injectedText.column - 1);\n      lastOriginalOffset = injectedText.column - 1;\n      result += injectedText.options.content;\n    }\n    result += lineText.substring(lastOriginalOffset);\n    return result;\n  }\n  static fromDecorations(decorations) {\n    const result = [];\n    for (const decoration of decorations) {\n      if (decoration.options.before && decoration.options.before.content.length > 0) {\n        result.push(new LineInjectedText(decoration.ownerId, decoration.range.startLineNumber, decoration.range.startColumn, decoration.options.before, 0));\n      }\n      if (decoration.options.after && decoration.options.after.content.length > 0) {\n        result.push(new LineInjectedText(decoration.ownerId, decoration.range.endLineNumber, decoration.range.endColumn, decoration.options.after, 1));\n      }\n    }\n    result.sort((a, b) => {\n      if (a.lineNumber === b.lineNumber) {\n        if (a.column === b.column) {\n          return a.order - b.order;\n        }\n        return a.column - b.column;\n      }\n      return a.lineNumber - b.lineNumber;\n    });\n    return result;\n  }\n}\n/**\n * An event describing that a line has changed in a model.\n * @internal\n */\nexport class ModelRawLineChanged {\n  constructor(lineNumber, detail, injectedText) {\n    this.changeType = 2 /* RawContentChangedType.LineChanged */;\n    this.lineNumber = lineNumber;\n    this.detail = detail;\n    this.injectedText = injectedText;\n  }\n}\n/**\n * An event describing that line(s) have been deleted in a model.\n * @internal\n */\nexport class ModelRawLinesDeleted {\n  constructor(fromLineNumber, toLineNumber) {\n    this.changeType = 3 /* RawContentChangedType.LinesDeleted */;\n    this.fromLineNumber = fromLineNumber;\n    this.toLineNumber = toLineNumber;\n  }\n}\n/**\n * An event describing that line(s) have been inserted in a model.\n * @internal\n */\nexport class ModelRawLinesInserted {\n  constructor(fromLineNumber, toLineNumber, detail, injectedTexts) {\n    this.changeType = 4 /* RawContentChangedType.LinesInserted */;\n    this.injectedTexts = injectedTexts;\n    this.fromLineNumber = fromLineNumber;\n    this.toLineNumber = toLineNumber;\n    this.detail = detail;\n  }\n}\n/**\n * An event describing that a model has had its EOL changed.\n * @internal\n */\nexport class ModelRawEOLChanged {\n  constructor() {\n    this.changeType = 5 /* RawContentChangedType.EOLChanged */;\n  }\n}\n/**\n * An event describing a change in the text of a model.\n * @internal\n */\nexport class ModelRawContentChangedEvent {\n  constructor(changes, versionId, isUndoing, isRedoing) {\n    this.changes = changes;\n    this.versionId = versionId;\n    this.isUndoing = isUndoing;\n    this.isRedoing = isRedoing;\n    this.resultingSelection = null;\n  }\n  containsEvent(type) {\n    for (let i = 0, len = this.changes.length; i < len; i++) {\n      const change = this.changes[i];\n      if (change.changeType === type) {\n        return true;\n      }\n    }\n    return false;\n  }\n  static merge(a, b) {\n    const changes = [].concat(a.changes).concat(b.changes);\n    const versionId = b.versionId;\n    const isUndoing = a.isUndoing || b.isUndoing;\n    const isRedoing = a.isRedoing || b.isRedoing;\n    return new ModelRawContentChangedEvent(changes, versionId, isUndoing, isRedoing);\n  }\n}\n/**\n * An event describing a change in injected text.\n * @internal\n */\nexport class ModelInjectedTextChangedEvent {\n  constructor(changes) {\n    this.changes = changes;\n  }\n}\n/**\n * @internal\n */\nexport class InternalModelContentChangeEvent {\n  constructor(rawContentChangedEvent, contentChangedEvent) {\n    this.rawContentChangedEvent = rawContentChangedEvent;\n    this.contentChangedEvent = contentChangedEvent;\n  }\n  merge(other) {\n    const rawContentChangedEvent = ModelRawContentChangedEvent.merge(this.rawContentChangedEvent, other.rawContentChangedEvent);\n    const contentChangedEvent = InternalModelContentChangeEvent._mergeChangeEvents(this.contentChangedEvent, other.contentChangedEvent);\n    return new InternalModelContentChangeEvent(rawContentChangedEvent, contentChangedEvent);\n  }\n  static _mergeChangeEvents(a, b) {\n    const changes = [].concat(a.changes).concat(b.changes);\n    const eol = b.eol;\n    const versionId = b.versionId;\n    const isUndoing = a.isUndoing || b.isUndoing;\n    const isRedoing = a.isRedoing || b.isRedoing;\n    const isFlush = a.isFlush || b.isFlush;\n    return {\n      changes: changes,\n      eol: eol,\n      versionId: versionId,\n      isUndoing: isUndoing,\n      isRedoing: isRedoing,\n      isFlush: isFlush\n    };\n  }\n}","map":{"version":3,"names":["ModelRawFlush","constructor","changeType","LineInjectedText","ownerId","lineNumber","column","options","order","applyInjectedText","lineText","injectedTexts","length","result","lastOriginalOffset","injectedText","substring","content","fromDecorations","decorations","decoration","before","push","range","startLineNumber","startColumn","after","endLineNumber","endColumn","sort","a","b","ModelRawLineChanged","detail","ModelRawLinesDeleted","fromLineNumber","toLineNumber","ModelRawLinesInserted","ModelRawEOLChanged","ModelRawContentChangedEvent","changes","versionId","isUndoing","isRedoing","resultingSelection","containsEvent","type","i","len","change","merge","concat","ModelInjectedTextChangedEvent","InternalModelContentChangeEvent","rawContentChangedEvent","contentChangedEvent","other","_mergeChangeEvents","eol","isFlush"],"sources":["/home/deathblade287/Desktop/AI-MODELS-TESTING/react-app/node_modules/monaco-editor/esm/vs/editor/common/textModelEvents.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * An event describing that a model has been reset to a new value.\n * @internal\n */\nexport class ModelRawFlush {\n    constructor() {\n        this.changeType = 1 /* RawContentChangedType.Flush */;\n    }\n}\n/**\n * Represents text injected on a line\n * @internal\n */\nexport class LineInjectedText {\n    constructor(ownerId, lineNumber, column, options, order) {\n        this.ownerId = ownerId;\n        this.lineNumber = lineNumber;\n        this.column = column;\n        this.options = options;\n        this.order = order;\n    }\n    static applyInjectedText(lineText, injectedTexts) {\n        if (!injectedTexts || injectedTexts.length === 0) {\n            return lineText;\n        }\n        let result = '';\n        let lastOriginalOffset = 0;\n        for (const injectedText of injectedTexts) {\n            result += lineText.substring(lastOriginalOffset, injectedText.column - 1);\n            lastOriginalOffset = injectedText.column - 1;\n            result += injectedText.options.content;\n        }\n        result += lineText.substring(lastOriginalOffset);\n        return result;\n    }\n    static fromDecorations(decorations) {\n        const result = [];\n        for (const decoration of decorations) {\n            if (decoration.options.before && decoration.options.before.content.length > 0) {\n                result.push(new LineInjectedText(decoration.ownerId, decoration.range.startLineNumber, decoration.range.startColumn, decoration.options.before, 0));\n            }\n            if (decoration.options.after && decoration.options.after.content.length > 0) {\n                result.push(new LineInjectedText(decoration.ownerId, decoration.range.endLineNumber, decoration.range.endColumn, decoration.options.after, 1));\n            }\n        }\n        result.sort((a, b) => {\n            if (a.lineNumber === b.lineNumber) {\n                if (a.column === b.column) {\n                    return a.order - b.order;\n                }\n                return a.column - b.column;\n            }\n            return a.lineNumber - b.lineNumber;\n        });\n        return result;\n    }\n}\n/**\n * An event describing that a line has changed in a model.\n * @internal\n */\nexport class ModelRawLineChanged {\n    constructor(lineNumber, detail, injectedText) {\n        this.changeType = 2 /* RawContentChangedType.LineChanged */;\n        this.lineNumber = lineNumber;\n        this.detail = detail;\n        this.injectedText = injectedText;\n    }\n}\n/**\n * An event describing that line(s) have been deleted in a model.\n * @internal\n */\nexport class ModelRawLinesDeleted {\n    constructor(fromLineNumber, toLineNumber) {\n        this.changeType = 3 /* RawContentChangedType.LinesDeleted */;\n        this.fromLineNumber = fromLineNumber;\n        this.toLineNumber = toLineNumber;\n    }\n}\n/**\n * An event describing that line(s) have been inserted in a model.\n * @internal\n */\nexport class ModelRawLinesInserted {\n    constructor(fromLineNumber, toLineNumber, detail, injectedTexts) {\n        this.changeType = 4 /* RawContentChangedType.LinesInserted */;\n        this.injectedTexts = injectedTexts;\n        this.fromLineNumber = fromLineNumber;\n        this.toLineNumber = toLineNumber;\n        this.detail = detail;\n    }\n}\n/**\n * An event describing that a model has had its EOL changed.\n * @internal\n */\nexport class ModelRawEOLChanged {\n    constructor() {\n        this.changeType = 5 /* RawContentChangedType.EOLChanged */;\n    }\n}\n/**\n * An event describing a change in the text of a model.\n * @internal\n */\nexport class ModelRawContentChangedEvent {\n    constructor(changes, versionId, isUndoing, isRedoing) {\n        this.changes = changes;\n        this.versionId = versionId;\n        this.isUndoing = isUndoing;\n        this.isRedoing = isRedoing;\n        this.resultingSelection = null;\n    }\n    containsEvent(type) {\n        for (let i = 0, len = this.changes.length; i < len; i++) {\n            const change = this.changes[i];\n            if (change.changeType === type) {\n                return true;\n            }\n        }\n        return false;\n    }\n    static merge(a, b) {\n        const changes = [].concat(a.changes).concat(b.changes);\n        const versionId = b.versionId;\n        const isUndoing = (a.isUndoing || b.isUndoing);\n        const isRedoing = (a.isRedoing || b.isRedoing);\n        return new ModelRawContentChangedEvent(changes, versionId, isUndoing, isRedoing);\n    }\n}\n/**\n * An event describing a change in injected text.\n * @internal\n */\nexport class ModelInjectedTextChangedEvent {\n    constructor(changes) {\n        this.changes = changes;\n    }\n}\n/**\n * @internal\n */\nexport class InternalModelContentChangeEvent {\n    constructor(rawContentChangedEvent, contentChangedEvent) {\n        this.rawContentChangedEvent = rawContentChangedEvent;\n        this.contentChangedEvent = contentChangedEvent;\n    }\n    merge(other) {\n        const rawContentChangedEvent = ModelRawContentChangedEvent.merge(this.rawContentChangedEvent, other.rawContentChangedEvent);\n        const contentChangedEvent = InternalModelContentChangeEvent._mergeChangeEvents(this.contentChangedEvent, other.contentChangedEvent);\n        return new InternalModelContentChangeEvent(rawContentChangedEvent, contentChangedEvent);\n    }\n    static _mergeChangeEvents(a, b) {\n        const changes = [].concat(a.changes).concat(b.changes);\n        const eol = b.eol;\n        const versionId = b.versionId;\n        const isUndoing = (a.isUndoing || b.isUndoing);\n        const isRedoing = (a.isRedoing || b.isRedoing);\n        const isFlush = (a.isFlush || b.isFlush);\n        return {\n            changes: changes,\n            eol: eol,\n            versionId: versionId,\n            isUndoing: isUndoing,\n            isRedoing: isRedoing,\n            isFlush: isFlush\n        };\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}