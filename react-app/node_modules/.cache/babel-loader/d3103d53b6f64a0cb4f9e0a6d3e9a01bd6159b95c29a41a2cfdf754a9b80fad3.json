{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../base/browser/dom.js';\nimport { addMatchMediaChangeListener } from '../../../base/browser/browser.js';\nimport { Color } from '../../../base/common/color.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { TokenizationRegistry } from '../../common/languages.js';\nimport { TokenMetadata } from '../../common/encodedTokenAttributes.js';\nimport { TokenTheme, generateTokensCSSForColorMap } from '../../common/languages/supports/tokenization.js';\nimport { hc_black, hc_light, vs, vs_dark } from '../common/themes.js';\nimport { Registry } from '../../../platform/registry/common/platform.js';\nimport { asCssVariableName, Extensions } from '../../../platform/theme/common/colorRegistry.js';\nimport { Extensions as ThemingExtensions } from '../../../platform/theme/common/themeService.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { ColorScheme, isDark, isHighContrast } from '../../../platform/theme/common/theme.js';\nimport { getIconsStyleSheet, UnthemedProductIconTheme } from '../../../platform/theme/browser/iconsStyleSheet.js';\nexport const VS_LIGHT_THEME_NAME = 'vs';\nexport const VS_DARK_THEME_NAME = 'vs-dark';\nexport const HC_BLACK_THEME_NAME = 'hc-black';\nexport const HC_LIGHT_THEME_NAME = 'hc-light';\nconst colorRegistry = Registry.as(Extensions.ColorContribution);\nconst themingRegistry = Registry.as(ThemingExtensions.ThemingContribution);\nclass StandaloneTheme {\n  constructor(name, standaloneThemeData) {\n    this.semanticHighlighting = false;\n    this.themeData = standaloneThemeData;\n    const base = standaloneThemeData.base;\n    if (name.length > 0) {\n      if (isBuiltinTheme(name)) {\n        this.id = name;\n      } else {\n        this.id = base + ' ' + name;\n      }\n      this.themeName = name;\n    } else {\n      this.id = base;\n      this.themeName = base;\n    }\n    this.colors = null;\n    this.defaultColors = Object.create(null);\n    this._tokenTheme = null;\n  }\n  get base() {\n    return this.themeData.base;\n  }\n  notifyBaseUpdated() {\n    if (this.themeData.inherit) {\n      this.colors = null;\n      this._tokenTheme = null;\n    }\n  }\n  getColors() {\n    if (!this.colors) {\n      const colors = new Map();\n      for (const id in this.themeData.colors) {\n        colors.set(id, Color.fromHex(this.themeData.colors[id]));\n      }\n      if (this.themeData.inherit) {\n        const baseData = getBuiltinRules(this.themeData.base);\n        for (const id in baseData.colors) {\n          if (!colors.has(id)) {\n            colors.set(id, Color.fromHex(baseData.colors[id]));\n          }\n        }\n      }\n      this.colors = colors;\n    }\n    return this.colors;\n  }\n  getColor(colorId, useDefault) {\n    const color = this.getColors().get(colorId);\n    if (color) {\n      return color;\n    }\n    if (useDefault !== false) {\n      return this.getDefault(colorId);\n    }\n    return undefined;\n  }\n  getDefault(colorId) {\n    let color = this.defaultColors[colorId];\n    if (color) {\n      return color;\n    }\n    color = colorRegistry.resolveDefaultColor(colorId, this);\n    this.defaultColors[colorId] = color;\n    return color;\n  }\n  defines(colorId) {\n    return Object.prototype.hasOwnProperty.call(this.getColors(), colorId);\n  }\n  get type() {\n    switch (this.base) {\n      case VS_LIGHT_THEME_NAME:\n        return ColorScheme.LIGHT;\n      case HC_BLACK_THEME_NAME:\n        return ColorScheme.HIGH_CONTRAST_DARK;\n      case HC_LIGHT_THEME_NAME:\n        return ColorScheme.HIGH_CONTRAST_LIGHT;\n      default:\n        return ColorScheme.DARK;\n    }\n  }\n  get tokenTheme() {\n    if (!this._tokenTheme) {\n      let rules = [];\n      let encodedTokensColors = [];\n      if (this.themeData.inherit) {\n        const baseData = getBuiltinRules(this.themeData.base);\n        rules = baseData.rules;\n        if (baseData.encodedTokensColors) {\n          encodedTokensColors = baseData.encodedTokensColors;\n        }\n      }\n      // Pick up default colors from `editor.foreground` and `editor.background` if available\n      const editorForeground = this.themeData.colors['editor.foreground'];\n      const editorBackground = this.themeData.colors['editor.background'];\n      if (editorForeground || editorBackground) {\n        const rule = {\n          token: ''\n        };\n        if (editorForeground) {\n          rule.foreground = editorForeground;\n        }\n        if (editorBackground) {\n          rule.background = editorBackground;\n        }\n        rules.push(rule);\n      }\n      rules = rules.concat(this.themeData.rules);\n      if (this.themeData.encodedTokensColors) {\n        encodedTokensColors = this.themeData.encodedTokensColors;\n      }\n      this._tokenTheme = TokenTheme.createFromRawTokenTheme(rules, encodedTokensColors);\n    }\n    return this._tokenTheme;\n  }\n  getTokenStyleMetadata(type, modifiers, modelLanguage) {\n    // use theme rules match\n    const style = this.tokenTheme._match([type].concat(modifiers).join('.'));\n    const metadata = style.metadata;\n    const foreground = TokenMetadata.getForeground(metadata);\n    const fontStyle = TokenMetadata.getFontStyle(metadata);\n    return {\n      foreground: foreground,\n      italic: Boolean(fontStyle & 1 /* FontStyle.Italic */),\n      bold: Boolean(fontStyle & 2 /* FontStyle.Bold */),\n      underline: Boolean(fontStyle & 4 /* FontStyle.Underline */),\n      strikethrough: Boolean(fontStyle & 8 /* FontStyle.Strikethrough */)\n    };\n  }\n}\n\nfunction isBuiltinTheme(themeName) {\n  return themeName === VS_LIGHT_THEME_NAME || themeName === VS_DARK_THEME_NAME || themeName === HC_BLACK_THEME_NAME || themeName === HC_LIGHT_THEME_NAME;\n}\nfunction getBuiltinRules(builtinTheme) {\n  switch (builtinTheme) {\n    case VS_LIGHT_THEME_NAME:\n      return vs;\n    case VS_DARK_THEME_NAME:\n      return vs_dark;\n    case HC_BLACK_THEME_NAME:\n      return hc_black;\n    case HC_LIGHT_THEME_NAME:\n      return hc_light;\n  }\n}\nfunction newBuiltInTheme(builtinTheme) {\n  const themeData = getBuiltinRules(builtinTheme);\n  return new StandaloneTheme(builtinTheme, themeData);\n}\nexport class StandaloneThemeService extends Disposable {\n  constructor() {\n    super();\n    this._onColorThemeChange = this._register(new Emitter());\n    this.onDidColorThemeChange = this._onColorThemeChange.event;\n    this._onProductIconThemeChange = this._register(new Emitter());\n    this.onDidProductIconThemeChange = this._onProductIconThemeChange.event;\n    this._environment = Object.create(null);\n    this._builtInProductIconTheme = new UnthemedProductIconTheme();\n    this._autoDetectHighContrast = true;\n    this._knownThemes = new Map();\n    this._knownThemes.set(VS_LIGHT_THEME_NAME, newBuiltInTheme(VS_LIGHT_THEME_NAME));\n    this._knownThemes.set(VS_DARK_THEME_NAME, newBuiltInTheme(VS_DARK_THEME_NAME));\n    this._knownThemes.set(HC_BLACK_THEME_NAME, newBuiltInTheme(HC_BLACK_THEME_NAME));\n    this._knownThemes.set(HC_LIGHT_THEME_NAME, newBuiltInTheme(HC_LIGHT_THEME_NAME));\n    const iconsStyleSheet = getIconsStyleSheet(this);\n    this._codiconCSS = iconsStyleSheet.getCSS();\n    this._themeCSS = '';\n    this._allCSS = `${this._codiconCSS}\\n${this._themeCSS}`;\n    this._globalStyleElement = null;\n    this._styleElements = [];\n    this._colorMapOverride = null;\n    this.setTheme(VS_LIGHT_THEME_NAME);\n    this._onOSSchemeChanged();\n    iconsStyleSheet.onDidChange(() => {\n      this._codiconCSS = iconsStyleSheet.getCSS();\n      this._updateCSS();\n    });\n    addMatchMediaChangeListener('(forced-colors: active)', () => {\n      this._onOSSchemeChanged();\n    });\n  }\n  registerEditorContainer(domNode) {\n    if (dom.isInShadowDOM(domNode)) {\n      return this._registerShadowDomContainer(domNode);\n    }\n    return this._registerRegularEditorContainer();\n  }\n  _registerRegularEditorContainer() {\n    if (!this._globalStyleElement) {\n      this._globalStyleElement = dom.createStyleSheet();\n      this._globalStyleElement.className = 'monaco-colors';\n      this._globalStyleElement.textContent = this._allCSS;\n      this._styleElements.push(this._globalStyleElement);\n    }\n    return Disposable.None;\n  }\n  _registerShadowDomContainer(domNode) {\n    const styleElement = dom.createStyleSheet(domNode);\n    styleElement.className = 'monaco-colors';\n    styleElement.textContent = this._allCSS;\n    this._styleElements.push(styleElement);\n    return {\n      dispose: () => {\n        for (let i = 0; i < this._styleElements.length; i++) {\n          if (this._styleElements[i] === styleElement) {\n            this._styleElements.splice(i, 1);\n            return;\n          }\n        }\n      }\n    };\n  }\n  defineTheme(themeName, themeData) {\n    if (!/^[a-z0-9\\-]+$/i.test(themeName)) {\n      throw new Error('Illegal theme name!');\n    }\n    if (!isBuiltinTheme(themeData.base) && !isBuiltinTheme(themeName)) {\n      throw new Error('Illegal theme base!');\n    }\n    // set or replace theme\n    this._knownThemes.set(themeName, new StandaloneTheme(themeName, themeData));\n    if (isBuiltinTheme(themeName)) {\n      this._knownThemes.forEach(theme => {\n        if (theme.base === themeName) {\n          theme.notifyBaseUpdated();\n        }\n      });\n    }\n    if (this._theme.themeName === themeName) {\n      this.setTheme(themeName); // refresh theme\n    }\n  }\n\n  getColorTheme() {\n    return this._theme;\n  }\n  setColorMapOverride(colorMapOverride) {\n    this._colorMapOverride = colorMapOverride;\n    this._updateThemeOrColorMap();\n  }\n  setTheme(themeName) {\n    let theme;\n    if (this._knownThemes.has(themeName)) {\n      theme = this._knownThemes.get(themeName);\n    } else {\n      theme = this._knownThemes.get(VS_LIGHT_THEME_NAME);\n    }\n    this._updateActualTheme(theme);\n  }\n  _updateActualTheme(desiredTheme) {\n    if (!desiredTheme || this._theme === desiredTheme) {\n      // Nothing to do\n      return;\n    }\n    this._theme = desiredTheme;\n    this._updateThemeOrColorMap();\n  }\n  _onOSSchemeChanged() {\n    if (this._autoDetectHighContrast) {\n      const wantsHighContrast = window.matchMedia(`(forced-colors: active)`).matches;\n      if (wantsHighContrast !== isHighContrast(this._theme.type)) {\n        // switch to high contrast or non-high contrast but stick to dark or light\n        let newThemeName;\n        if (isDark(this._theme.type)) {\n          newThemeName = wantsHighContrast ? HC_BLACK_THEME_NAME : VS_DARK_THEME_NAME;\n        } else {\n          newThemeName = wantsHighContrast ? HC_LIGHT_THEME_NAME : VS_LIGHT_THEME_NAME;\n        }\n        this._updateActualTheme(this._knownThemes.get(newThemeName));\n      }\n    }\n  }\n  setAutoDetectHighContrast(autoDetectHighContrast) {\n    this._autoDetectHighContrast = autoDetectHighContrast;\n    this._onOSSchemeChanged();\n  }\n  _updateThemeOrColorMap() {\n    const cssRules = [];\n    const hasRule = {};\n    const ruleCollector = {\n      addRule: rule => {\n        if (!hasRule[rule]) {\n          cssRules.push(rule);\n          hasRule[rule] = true;\n        }\n      }\n    };\n    themingRegistry.getThemingParticipants().forEach(p => p(this._theme, ruleCollector, this._environment));\n    const colorVariables = [];\n    for (const item of colorRegistry.getColors()) {\n      const color = this._theme.getColor(item.id, true);\n      if (color) {\n        colorVariables.push(`${asCssVariableName(item.id)}: ${color.toString()};`);\n      }\n    }\n    ruleCollector.addRule(`.monaco-editor { ${colorVariables.join('\\n')} }`);\n    const colorMap = this._colorMapOverride || this._theme.tokenTheme.getColorMap();\n    ruleCollector.addRule(generateTokensCSSForColorMap(colorMap));\n    this._themeCSS = cssRules.join('\\n');\n    this._updateCSS();\n    TokenizationRegistry.setColorMap(colorMap);\n    this._onColorThemeChange.fire(this._theme);\n  }\n  _updateCSS() {\n    this._allCSS = `${this._codiconCSS}\\n${this._themeCSS}`;\n    this._styleElements.forEach(styleElement => styleElement.textContent = this._allCSS);\n  }\n  getFileIconTheme() {\n    return {\n      hasFileIcons: false,\n      hasFolderIcons: false,\n      hidesExplorerArrows: false\n    };\n  }\n  getProductIconTheme() {\n    return this._builtInProductIconTheme;\n  }\n}","map":{"version":3,"names":["dom","addMatchMediaChangeListener","Color","Emitter","TokenizationRegistry","TokenMetadata","TokenTheme","generateTokensCSSForColorMap","hc_black","hc_light","vs","vs_dark","Registry","asCssVariableName","Extensions","ThemingExtensions","Disposable","ColorScheme","isDark","isHighContrast","getIconsStyleSheet","UnthemedProductIconTheme","VS_LIGHT_THEME_NAME","VS_DARK_THEME_NAME","HC_BLACK_THEME_NAME","HC_LIGHT_THEME_NAME","colorRegistry","as","ColorContribution","themingRegistry","ThemingContribution","StandaloneTheme","constructor","name","standaloneThemeData","semanticHighlighting","themeData","base","length","isBuiltinTheme","id","themeName","colors","defaultColors","Object","create","_tokenTheme","notifyBaseUpdated","inherit","getColors","Map","set","fromHex","baseData","getBuiltinRules","has","getColor","colorId","useDefault","color","get","getDefault","undefined","resolveDefaultColor","defines","prototype","hasOwnProperty","call","type","LIGHT","HIGH_CONTRAST_DARK","HIGH_CONTRAST_LIGHT","DARK","tokenTheme","rules","encodedTokensColors","editorForeground","editorBackground","rule","token","foreground","background","push","concat","createFromRawTokenTheme","getTokenStyleMetadata","modifiers","modelLanguage","style","_match","join","metadata","getForeground","fontStyle","getFontStyle","italic","Boolean","bold","underline","strikethrough","builtinTheme","newBuiltInTheme","StandaloneThemeService","_onColorThemeChange","_register","onDidColorThemeChange","event","_onProductIconThemeChange","onDidProductIconThemeChange","_environment","_builtInProductIconTheme","_autoDetectHighContrast","_knownThemes","iconsStyleSheet","_codiconCSS","getCSS","_themeCSS","_allCSS","_globalStyleElement","_styleElements","_colorMapOverride","setTheme","_onOSSchemeChanged","onDidChange","_updateCSS","registerEditorContainer","domNode","isInShadowDOM","_registerShadowDomContainer","_registerRegularEditorContainer","createStyleSheet","className","textContent","None","styleElement","dispose","i","splice","defineTheme","test","Error","forEach","theme","_theme","getColorTheme","setColorMapOverride","colorMapOverride","_updateThemeOrColorMap","_updateActualTheme","desiredTheme","wantsHighContrast","window","matchMedia","matches","newThemeName","setAutoDetectHighContrast","autoDetectHighContrast","cssRules","hasRule","ruleCollector","addRule","getThemingParticipants","p","colorVariables","item","toString","colorMap","getColorMap","setColorMap","fire","getFileIconTheme","hasFileIcons","hasFolderIcons","hidesExplorerArrows","getProductIconTheme"],"sources":["/home/deathblade287/Desktop/AI-MODELS-TESTING/react-app/node_modules/monaco-editor/esm/vs/editor/standalone/browser/standaloneThemeService.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../base/browser/dom.js';\nimport { addMatchMediaChangeListener } from '../../../base/browser/browser.js';\nimport { Color } from '../../../base/common/color.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { TokenizationRegistry } from '../../common/languages.js';\nimport { TokenMetadata } from '../../common/encodedTokenAttributes.js';\nimport { TokenTheme, generateTokensCSSForColorMap } from '../../common/languages/supports/tokenization.js';\nimport { hc_black, hc_light, vs, vs_dark } from '../common/themes.js';\nimport { Registry } from '../../../platform/registry/common/platform.js';\nimport { asCssVariableName, Extensions } from '../../../platform/theme/common/colorRegistry.js';\nimport { Extensions as ThemingExtensions } from '../../../platform/theme/common/themeService.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { ColorScheme, isDark, isHighContrast } from '../../../platform/theme/common/theme.js';\nimport { getIconsStyleSheet, UnthemedProductIconTheme } from '../../../platform/theme/browser/iconsStyleSheet.js';\nexport const VS_LIGHT_THEME_NAME = 'vs';\nexport const VS_DARK_THEME_NAME = 'vs-dark';\nexport const HC_BLACK_THEME_NAME = 'hc-black';\nexport const HC_LIGHT_THEME_NAME = 'hc-light';\nconst colorRegistry = Registry.as(Extensions.ColorContribution);\nconst themingRegistry = Registry.as(ThemingExtensions.ThemingContribution);\nclass StandaloneTheme {\n    constructor(name, standaloneThemeData) {\n        this.semanticHighlighting = false;\n        this.themeData = standaloneThemeData;\n        const base = standaloneThemeData.base;\n        if (name.length > 0) {\n            if (isBuiltinTheme(name)) {\n                this.id = name;\n            }\n            else {\n                this.id = base + ' ' + name;\n            }\n            this.themeName = name;\n        }\n        else {\n            this.id = base;\n            this.themeName = base;\n        }\n        this.colors = null;\n        this.defaultColors = Object.create(null);\n        this._tokenTheme = null;\n    }\n    get base() {\n        return this.themeData.base;\n    }\n    notifyBaseUpdated() {\n        if (this.themeData.inherit) {\n            this.colors = null;\n            this._tokenTheme = null;\n        }\n    }\n    getColors() {\n        if (!this.colors) {\n            const colors = new Map();\n            for (const id in this.themeData.colors) {\n                colors.set(id, Color.fromHex(this.themeData.colors[id]));\n            }\n            if (this.themeData.inherit) {\n                const baseData = getBuiltinRules(this.themeData.base);\n                for (const id in baseData.colors) {\n                    if (!colors.has(id)) {\n                        colors.set(id, Color.fromHex(baseData.colors[id]));\n                    }\n                }\n            }\n            this.colors = colors;\n        }\n        return this.colors;\n    }\n    getColor(colorId, useDefault) {\n        const color = this.getColors().get(colorId);\n        if (color) {\n            return color;\n        }\n        if (useDefault !== false) {\n            return this.getDefault(colorId);\n        }\n        return undefined;\n    }\n    getDefault(colorId) {\n        let color = this.defaultColors[colorId];\n        if (color) {\n            return color;\n        }\n        color = colorRegistry.resolveDefaultColor(colorId, this);\n        this.defaultColors[colorId] = color;\n        return color;\n    }\n    defines(colorId) {\n        return Object.prototype.hasOwnProperty.call(this.getColors(), colorId);\n    }\n    get type() {\n        switch (this.base) {\n            case VS_LIGHT_THEME_NAME: return ColorScheme.LIGHT;\n            case HC_BLACK_THEME_NAME: return ColorScheme.HIGH_CONTRAST_DARK;\n            case HC_LIGHT_THEME_NAME: return ColorScheme.HIGH_CONTRAST_LIGHT;\n            default: return ColorScheme.DARK;\n        }\n    }\n    get tokenTheme() {\n        if (!this._tokenTheme) {\n            let rules = [];\n            let encodedTokensColors = [];\n            if (this.themeData.inherit) {\n                const baseData = getBuiltinRules(this.themeData.base);\n                rules = baseData.rules;\n                if (baseData.encodedTokensColors) {\n                    encodedTokensColors = baseData.encodedTokensColors;\n                }\n            }\n            // Pick up default colors from `editor.foreground` and `editor.background` if available\n            const editorForeground = this.themeData.colors['editor.foreground'];\n            const editorBackground = this.themeData.colors['editor.background'];\n            if (editorForeground || editorBackground) {\n                const rule = { token: '' };\n                if (editorForeground) {\n                    rule.foreground = editorForeground;\n                }\n                if (editorBackground) {\n                    rule.background = editorBackground;\n                }\n                rules.push(rule);\n            }\n            rules = rules.concat(this.themeData.rules);\n            if (this.themeData.encodedTokensColors) {\n                encodedTokensColors = this.themeData.encodedTokensColors;\n            }\n            this._tokenTheme = TokenTheme.createFromRawTokenTheme(rules, encodedTokensColors);\n        }\n        return this._tokenTheme;\n    }\n    getTokenStyleMetadata(type, modifiers, modelLanguage) {\n        // use theme rules match\n        const style = this.tokenTheme._match([type].concat(modifiers).join('.'));\n        const metadata = style.metadata;\n        const foreground = TokenMetadata.getForeground(metadata);\n        const fontStyle = TokenMetadata.getFontStyle(metadata);\n        return {\n            foreground: foreground,\n            italic: Boolean(fontStyle & 1 /* FontStyle.Italic */),\n            bold: Boolean(fontStyle & 2 /* FontStyle.Bold */),\n            underline: Boolean(fontStyle & 4 /* FontStyle.Underline */),\n            strikethrough: Boolean(fontStyle & 8 /* FontStyle.Strikethrough */)\n        };\n    }\n}\nfunction isBuiltinTheme(themeName) {\n    return (themeName === VS_LIGHT_THEME_NAME\n        || themeName === VS_DARK_THEME_NAME\n        || themeName === HC_BLACK_THEME_NAME\n        || themeName === HC_LIGHT_THEME_NAME);\n}\nfunction getBuiltinRules(builtinTheme) {\n    switch (builtinTheme) {\n        case VS_LIGHT_THEME_NAME:\n            return vs;\n        case VS_DARK_THEME_NAME:\n            return vs_dark;\n        case HC_BLACK_THEME_NAME:\n            return hc_black;\n        case HC_LIGHT_THEME_NAME:\n            return hc_light;\n    }\n}\nfunction newBuiltInTheme(builtinTheme) {\n    const themeData = getBuiltinRules(builtinTheme);\n    return new StandaloneTheme(builtinTheme, themeData);\n}\nexport class StandaloneThemeService extends Disposable {\n    constructor() {\n        super();\n        this._onColorThemeChange = this._register(new Emitter());\n        this.onDidColorThemeChange = this._onColorThemeChange.event;\n        this._onProductIconThemeChange = this._register(new Emitter());\n        this.onDidProductIconThemeChange = this._onProductIconThemeChange.event;\n        this._environment = Object.create(null);\n        this._builtInProductIconTheme = new UnthemedProductIconTheme();\n        this._autoDetectHighContrast = true;\n        this._knownThemes = new Map();\n        this._knownThemes.set(VS_LIGHT_THEME_NAME, newBuiltInTheme(VS_LIGHT_THEME_NAME));\n        this._knownThemes.set(VS_DARK_THEME_NAME, newBuiltInTheme(VS_DARK_THEME_NAME));\n        this._knownThemes.set(HC_BLACK_THEME_NAME, newBuiltInTheme(HC_BLACK_THEME_NAME));\n        this._knownThemes.set(HC_LIGHT_THEME_NAME, newBuiltInTheme(HC_LIGHT_THEME_NAME));\n        const iconsStyleSheet = getIconsStyleSheet(this);\n        this._codiconCSS = iconsStyleSheet.getCSS();\n        this._themeCSS = '';\n        this._allCSS = `${this._codiconCSS}\\n${this._themeCSS}`;\n        this._globalStyleElement = null;\n        this._styleElements = [];\n        this._colorMapOverride = null;\n        this.setTheme(VS_LIGHT_THEME_NAME);\n        this._onOSSchemeChanged();\n        iconsStyleSheet.onDidChange(() => {\n            this._codiconCSS = iconsStyleSheet.getCSS();\n            this._updateCSS();\n        });\n        addMatchMediaChangeListener('(forced-colors: active)', () => {\n            this._onOSSchemeChanged();\n        });\n    }\n    registerEditorContainer(domNode) {\n        if (dom.isInShadowDOM(domNode)) {\n            return this._registerShadowDomContainer(domNode);\n        }\n        return this._registerRegularEditorContainer();\n    }\n    _registerRegularEditorContainer() {\n        if (!this._globalStyleElement) {\n            this._globalStyleElement = dom.createStyleSheet();\n            this._globalStyleElement.className = 'monaco-colors';\n            this._globalStyleElement.textContent = this._allCSS;\n            this._styleElements.push(this._globalStyleElement);\n        }\n        return Disposable.None;\n    }\n    _registerShadowDomContainer(domNode) {\n        const styleElement = dom.createStyleSheet(domNode);\n        styleElement.className = 'monaco-colors';\n        styleElement.textContent = this._allCSS;\n        this._styleElements.push(styleElement);\n        return {\n            dispose: () => {\n                for (let i = 0; i < this._styleElements.length; i++) {\n                    if (this._styleElements[i] === styleElement) {\n                        this._styleElements.splice(i, 1);\n                        return;\n                    }\n                }\n            }\n        };\n    }\n    defineTheme(themeName, themeData) {\n        if (!/^[a-z0-9\\-]+$/i.test(themeName)) {\n            throw new Error('Illegal theme name!');\n        }\n        if (!isBuiltinTheme(themeData.base) && !isBuiltinTheme(themeName)) {\n            throw new Error('Illegal theme base!');\n        }\n        // set or replace theme\n        this._knownThemes.set(themeName, new StandaloneTheme(themeName, themeData));\n        if (isBuiltinTheme(themeName)) {\n            this._knownThemes.forEach(theme => {\n                if (theme.base === themeName) {\n                    theme.notifyBaseUpdated();\n                }\n            });\n        }\n        if (this._theme.themeName === themeName) {\n            this.setTheme(themeName); // refresh theme\n        }\n    }\n    getColorTheme() {\n        return this._theme;\n    }\n    setColorMapOverride(colorMapOverride) {\n        this._colorMapOverride = colorMapOverride;\n        this._updateThemeOrColorMap();\n    }\n    setTheme(themeName) {\n        let theme;\n        if (this._knownThemes.has(themeName)) {\n            theme = this._knownThemes.get(themeName);\n        }\n        else {\n            theme = this._knownThemes.get(VS_LIGHT_THEME_NAME);\n        }\n        this._updateActualTheme(theme);\n    }\n    _updateActualTheme(desiredTheme) {\n        if (!desiredTheme || this._theme === desiredTheme) {\n            // Nothing to do\n            return;\n        }\n        this._theme = desiredTheme;\n        this._updateThemeOrColorMap();\n    }\n    _onOSSchemeChanged() {\n        if (this._autoDetectHighContrast) {\n            const wantsHighContrast = window.matchMedia(`(forced-colors: active)`).matches;\n            if (wantsHighContrast !== isHighContrast(this._theme.type)) {\n                // switch to high contrast or non-high contrast but stick to dark or light\n                let newThemeName;\n                if (isDark(this._theme.type)) {\n                    newThemeName = wantsHighContrast ? HC_BLACK_THEME_NAME : VS_DARK_THEME_NAME;\n                }\n                else {\n                    newThemeName = wantsHighContrast ? HC_LIGHT_THEME_NAME : VS_LIGHT_THEME_NAME;\n                }\n                this._updateActualTheme(this._knownThemes.get(newThemeName));\n            }\n        }\n    }\n    setAutoDetectHighContrast(autoDetectHighContrast) {\n        this._autoDetectHighContrast = autoDetectHighContrast;\n        this._onOSSchemeChanged();\n    }\n    _updateThemeOrColorMap() {\n        const cssRules = [];\n        const hasRule = {};\n        const ruleCollector = {\n            addRule: (rule) => {\n                if (!hasRule[rule]) {\n                    cssRules.push(rule);\n                    hasRule[rule] = true;\n                }\n            }\n        };\n        themingRegistry.getThemingParticipants().forEach(p => p(this._theme, ruleCollector, this._environment));\n        const colorVariables = [];\n        for (const item of colorRegistry.getColors()) {\n            const color = this._theme.getColor(item.id, true);\n            if (color) {\n                colorVariables.push(`${asCssVariableName(item.id)}: ${color.toString()};`);\n            }\n        }\n        ruleCollector.addRule(`.monaco-editor { ${colorVariables.join('\\n')} }`);\n        const colorMap = this._colorMapOverride || this._theme.tokenTheme.getColorMap();\n        ruleCollector.addRule(generateTokensCSSForColorMap(colorMap));\n        this._themeCSS = cssRules.join('\\n');\n        this._updateCSS();\n        TokenizationRegistry.setColorMap(colorMap);\n        this._onColorThemeChange.fire(this._theme);\n    }\n    _updateCSS() {\n        this._allCSS = `${this._codiconCSS}\\n${this._themeCSS}`;\n        this._styleElements.forEach(styleElement => styleElement.textContent = this._allCSS);\n    }\n    getFileIconTheme() {\n        return {\n            hasFileIcons: false,\n            hasFolderIcons: false,\n            hidesExplorerArrows: false\n        };\n    }\n    getProductIconTheme() {\n        return this._builtInProductIconTheme;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}