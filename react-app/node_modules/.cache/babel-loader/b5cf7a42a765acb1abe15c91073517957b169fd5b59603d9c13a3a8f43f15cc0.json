{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CachedFunction } from '../../../../base/common/cache.js';\nimport { BugIndicatingError } from '../../../../base/common/errors.js';\n/**\n * Captures all bracket related configurations for a single language.\n * Immutable.\n*/\nexport class LanguageBracketsConfiguration {\n  constructor(languageId, config) {\n    this.languageId = languageId;\n    let brackets;\n    // Prefer colorized bracket pairs, as they are more accurate.\n    // TODO@hediet: Deprecate `colorizedBracketPairs` and increase accuracy for brackets.\n    if (config.colorizedBracketPairs) {\n      brackets = filterValidBrackets(config.colorizedBracketPairs.map(b => [b[0], b[1]]));\n    } else if (config.brackets) {\n      brackets = filterValidBrackets(config.brackets.map(b => [b[0], b[1]])\n      // Many languages set < ... > as bracket pair, even though they also use it as comparison operator.\n      // This leads to problems when colorizing this bracket, so we exclude it by default.\n      // Languages can still override this by configuring `colorizedBracketPairs`\n      // https://github.com/microsoft/vscode/issues/132476\n      .filter(p => !(p[0] === '<' && p[1] === '>')));\n    } else {\n      brackets = [];\n    }\n    const openingBracketInfos = new CachedFunction(bracket => {\n      const closing = new Set();\n      return {\n        info: new OpeningBracketKind(this, bracket, closing),\n        closing\n      };\n    });\n    const closingBracketInfos = new CachedFunction(bracket => {\n      const opening = new Set();\n      return {\n        info: new ClosingBracketKind(this, bracket, opening),\n        opening\n      };\n    });\n    for (const [open, close] of brackets) {\n      const opening = openingBracketInfos.get(open);\n      const closing = closingBracketInfos.get(close);\n      opening.closing.add(closing.info);\n      closing.opening.add(opening.info);\n    }\n    this._openingBrackets = new Map([...openingBracketInfos.cachedValues].map(_ref => {\n      let [k, v] = _ref;\n      return [k, v.info];\n    }));\n    this._closingBrackets = new Map([...closingBracketInfos.cachedValues].map(_ref2 => {\n      let [k, v] = _ref2;\n      return [k, v.info];\n    }));\n  }\n  /**\n   * No two brackets have the same bracket text.\n  */\n  get openingBrackets() {\n    return [...this._openingBrackets.values()];\n  }\n  /**\n   * No two brackets have the same bracket text.\n  */\n  get closingBrackets() {\n    return [...this._closingBrackets.values()];\n  }\n  getOpeningBracketInfo(bracketText) {\n    return this._openingBrackets.get(bracketText);\n  }\n  getClosingBracketInfo(bracketText) {\n    return this._closingBrackets.get(bracketText);\n  }\n  getBracketInfo(bracketText) {\n    return this.getOpeningBracketInfo(bracketText) || this.getClosingBracketInfo(bracketText);\n  }\n}\nfunction filterValidBrackets(bracketPairs) {\n  return bracketPairs.filter(_ref3 => {\n    let [open, close] = _ref3;\n    return open !== '' && close !== '';\n  });\n}\nexport class BracketKindBase {\n  constructor(config, bracketText) {\n    this.config = config;\n    this.bracketText = bracketText;\n  }\n  get languageId() {\n    return this.config.languageId;\n  }\n}\nexport class OpeningBracketKind extends BracketKindBase {\n  constructor(config, bracketText, openedBrackets) {\n    super(config, bracketText);\n    this.openedBrackets = openedBrackets;\n    this.isOpeningBracket = true;\n  }\n}\nexport class ClosingBracketKind extends BracketKindBase {\n  constructor(config, bracketText,\n  /**\n   * Non empty array of all opening brackets this bracket closes.\n  */\n  closedBrackets) {\n    super(config, bracketText);\n    this.closedBrackets = closedBrackets;\n    this.isOpeningBracket = false;\n  }\n  /**\n   * Checks if this bracket closes the given other bracket.\n   * Brackets from other language configuration can be used (they will always return false).\n   * If other is a bracket with the same language id, they have to be from the same configuration.\n  */\n  closes(other) {\n    if (other.languageId === this.languageId) {\n      if (other['config'] !== this.config) {\n        throw new BugIndicatingError('Brackets from different language configuration cannot be used.');\n      }\n    }\n    return this.closedBrackets.has(other);\n  }\n  getClosedBrackets() {\n    return [...this.closedBrackets];\n  }\n}","map":{"version":3,"names":["CachedFunction","BugIndicatingError","LanguageBracketsConfiguration","constructor","languageId","config","brackets","colorizedBracketPairs","filterValidBrackets","map","b","filter","p","openingBracketInfos","bracket","closing","Set","info","OpeningBracketKind","closingBracketInfos","opening","ClosingBracketKind","open","close","get","add","_openingBrackets","Map","cachedValues","k","v","_closingBrackets","openingBrackets","values","closingBrackets","getOpeningBracketInfo","bracketText","getClosingBracketInfo","getBracketInfo","bracketPairs","BracketKindBase","openedBrackets","isOpeningBracket","closedBrackets","closes","other","has","getClosedBrackets"],"sources":["/home/deathblade287/Desktop/AI-MODELS-TESTING/react-app/node_modules/monaco-editor/esm/vs/editor/common/languages/supports/languageBracketsConfiguration.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CachedFunction } from '../../../../base/common/cache.js';\nimport { BugIndicatingError } from '../../../../base/common/errors.js';\n/**\n * Captures all bracket related configurations for a single language.\n * Immutable.\n*/\nexport class LanguageBracketsConfiguration {\n    constructor(languageId, config) {\n        this.languageId = languageId;\n        let brackets;\n        // Prefer colorized bracket pairs, as they are more accurate.\n        // TODO@hediet: Deprecate `colorizedBracketPairs` and increase accuracy for brackets.\n        if (config.colorizedBracketPairs) {\n            brackets = filterValidBrackets(config.colorizedBracketPairs.map(b => [b[0], b[1]]));\n        }\n        else if (config.brackets) {\n            brackets = filterValidBrackets(config.brackets\n                .map((b) => [b[0], b[1]])\n                // Many languages set < ... > as bracket pair, even though they also use it as comparison operator.\n                // This leads to problems when colorizing this bracket, so we exclude it by default.\n                // Languages can still override this by configuring `colorizedBracketPairs`\n                // https://github.com/microsoft/vscode/issues/132476\n                .filter((p) => !(p[0] === '<' && p[1] === '>')));\n        }\n        else {\n            brackets = [];\n        }\n        const openingBracketInfos = new CachedFunction((bracket) => {\n            const closing = new Set();\n            return {\n                info: new OpeningBracketKind(this, bracket, closing),\n                closing,\n            };\n        });\n        const closingBracketInfos = new CachedFunction((bracket) => {\n            const opening = new Set();\n            return {\n                info: new ClosingBracketKind(this, bracket, opening),\n                opening,\n            };\n        });\n        for (const [open, close] of brackets) {\n            const opening = openingBracketInfos.get(open);\n            const closing = closingBracketInfos.get(close);\n            opening.closing.add(closing.info);\n            closing.opening.add(opening.info);\n        }\n        this._openingBrackets = new Map([...openingBracketInfos.cachedValues].map(([k, v]) => [k, v.info]));\n        this._closingBrackets = new Map([...closingBracketInfos.cachedValues].map(([k, v]) => [k, v.info]));\n    }\n    /**\n     * No two brackets have the same bracket text.\n    */\n    get openingBrackets() {\n        return [...this._openingBrackets.values()];\n    }\n    /**\n     * No two brackets have the same bracket text.\n    */\n    get closingBrackets() {\n        return [...this._closingBrackets.values()];\n    }\n    getOpeningBracketInfo(bracketText) {\n        return this._openingBrackets.get(bracketText);\n    }\n    getClosingBracketInfo(bracketText) {\n        return this._closingBrackets.get(bracketText);\n    }\n    getBracketInfo(bracketText) {\n        return this.getOpeningBracketInfo(bracketText) || this.getClosingBracketInfo(bracketText);\n    }\n}\nfunction filterValidBrackets(bracketPairs) {\n    return bracketPairs.filter(([open, close]) => open !== '' && close !== '');\n}\nexport class BracketKindBase {\n    constructor(config, bracketText) {\n        this.config = config;\n        this.bracketText = bracketText;\n    }\n    get languageId() {\n        return this.config.languageId;\n    }\n}\nexport class OpeningBracketKind extends BracketKindBase {\n    constructor(config, bracketText, openedBrackets) {\n        super(config, bracketText);\n        this.openedBrackets = openedBrackets;\n        this.isOpeningBracket = true;\n    }\n}\nexport class ClosingBracketKind extends BracketKindBase {\n    constructor(config, bracketText, \n    /**\n     * Non empty array of all opening brackets this bracket closes.\n    */\n    closedBrackets) {\n        super(config, bracketText);\n        this.closedBrackets = closedBrackets;\n        this.isOpeningBracket = false;\n    }\n    /**\n     * Checks if this bracket closes the given other bracket.\n     * Brackets from other language configuration can be used (they will always return false).\n     * If other is a bracket with the same language id, they have to be from the same configuration.\n    */\n    closes(other) {\n        if (other.languageId === this.languageId) {\n            if (other['config'] !== this.config) {\n                throw new BugIndicatingError('Brackets from different language configuration cannot be used.');\n            }\n        }\n        return this.closedBrackets.has(other);\n    }\n    getClosedBrackets() {\n        return [...this.closedBrackets];\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}