{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { distinct } from '../../../base/common/arrays.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport * as types from '../../../base/common/types.js';\nimport * as nls from '../../../nls.js';\nimport { getLanguageTagSettingPlainKey } from './configuration.js';\nimport { Extensions as JSONExtensions } from '../../jsonschemas/common/jsonContributionRegistry.js';\nimport { Registry } from '../../registry/common/platform.js';\nexport const Extensions = {\n  Configuration: 'base.contributions.configuration'\n};\nexport const allSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport const applicationSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport const machineSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport const machineOverridableSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport const windowSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport const resourceSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport const resourceLanguageSettingsSchemaId = 'vscode://schemas/settings/resourceLanguage';\nconst contributionRegistry = Registry.as(JSONExtensions.JSONContribution);\nclass ConfigurationRegistry {\n  constructor() {\n    this.overrideIdentifiers = new Set();\n    this._onDidSchemaChange = new Emitter();\n    this._onDidUpdateConfiguration = new Emitter();\n    this.configurationDefaultsOverrides = new Map();\n    this.defaultLanguageConfigurationOverridesNode = {\n      id: 'defaultOverrides',\n      title: nls.localize('defaultLanguageConfigurationOverrides.title', \"Default Language Configuration Overrides\"),\n      properties: {}\n    };\n    this.configurationContributors = [this.defaultLanguageConfigurationOverridesNode];\n    this.resourceLanguageSettingsSchema = {\n      properties: {},\n      patternProperties: {},\n      additionalProperties: false,\n      errorMessage: 'Unknown editor configuration setting',\n      allowTrailingCommas: true,\n      allowComments: true\n    };\n    this.configurationProperties = {};\n    this.policyConfigurations = new Map();\n    this.excludedConfigurationProperties = {};\n    contributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);\n    this.registerOverridePropertyPatternKey();\n  }\n  registerConfiguration(configuration) {\n    let validate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    this.registerConfigurations([configuration], validate);\n  }\n  registerConfigurations(configurations) {\n    let validate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    const properties = this.doRegisterConfigurations(configurations, validate);\n    contributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);\n    this._onDidSchemaChange.fire();\n    this._onDidUpdateConfiguration.fire({\n      properties\n    });\n  }\n  registerDefaultConfigurations(configurationDefaults) {\n    var _a;\n    const properties = [];\n    const overrideIdentifiers = [];\n    for (const {\n      overrides,\n      source\n    } of configurationDefaults) {\n      for (const key in overrides) {\n        properties.push(key);\n        if (OVERRIDE_PROPERTY_REGEX.test(key)) {\n          const configurationDefaultOverride = this.configurationDefaultsOverrides.get(key);\n          const valuesSources = (_a = configurationDefaultOverride === null || configurationDefaultOverride === void 0 ? void 0 : configurationDefaultOverride.valuesSources) !== null && _a !== void 0 ? _a : new Map();\n          if (source) {\n            for (const configuration of Object.keys(overrides[key])) {\n              valuesSources.set(configuration, source);\n            }\n          }\n          const defaultValue = Object.assign(Object.assign({}, (configurationDefaultOverride === null || configurationDefaultOverride === void 0 ? void 0 : configurationDefaultOverride.value) || {}), overrides[key]);\n          this.configurationDefaultsOverrides.set(key, {\n            source,\n            value: defaultValue,\n            valuesSources\n          });\n          const plainKey = getLanguageTagSettingPlainKey(key);\n          const property = {\n            type: 'object',\n            default: defaultValue,\n            description: nls.localize('defaultLanguageConfiguration.description', \"Configure settings to be overridden for the {0} language.\", plainKey),\n            $ref: resourceLanguageSettingsSchemaId,\n            defaultDefaultValue: defaultValue,\n            source: types.isString(source) ? undefined : source,\n            defaultValueSource: source\n          };\n          overrideIdentifiers.push(...overrideIdentifiersFromKey(key));\n          this.configurationProperties[key] = property;\n          this.defaultLanguageConfigurationOverridesNode.properties[key] = property;\n        } else {\n          this.configurationDefaultsOverrides.set(key, {\n            value: overrides[key],\n            source\n          });\n          const property = this.configurationProperties[key];\n          if (property) {\n            this.updatePropertyDefaultValue(key, property);\n            this.updateSchema(key, property);\n          }\n        }\n      }\n    }\n    this.registerOverrideIdentifiers(overrideIdentifiers);\n    this._onDidSchemaChange.fire();\n    this._onDidUpdateConfiguration.fire({\n      properties,\n      defaultsOverrides: true\n    });\n  }\n  registerOverrideIdentifiers(overrideIdentifiers) {\n    for (const overrideIdentifier of overrideIdentifiers) {\n      this.overrideIdentifiers.add(overrideIdentifier);\n    }\n    this.updateOverridePropertyPatternKey();\n  }\n  doRegisterConfigurations(configurations, validate) {\n    const properties = [];\n    configurations.forEach(configuration => {\n      properties.push(...this.validateAndRegisterProperties(configuration, validate, configuration.extensionInfo, configuration.restrictedProperties)); // fills in defaults\n      this.configurationContributors.push(configuration);\n      this.registerJSONConfiguration(configuration);\n    });\n    return properties;\n  }\n  validateAndRegisterProperties(configuration) {\n    let validate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let extensionInfo = arguments.length > 2 ? arguments[2] : undefined;\n    let restrictedProperties = arguments.length > 3 ? arguments[3] : undefined;\n    let scope = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 3;\n    var _a;\n    scope = types.isUndefinedOrNull(configuration.scope) ? scope : configuration.scope;\n    const propertyKeys = [];\n    const properties = configuration.properties;\n    if (properties) {\n      for (const key in properties) {\n        const property = properties[key];\n        if (validate && validateProperty(key, property)) {\n          delete properties[key];\n          continue;\n        }\n        property.source = extensionInfo;\n        // update default value\n        property.defaultDefaultValue = properties[key].default;\n        this.updatePropertyDefaultValue(key, property);\n        // update scope\n        if (OVERRIDE_PROPERTY_REGEX.test(key)) {\n          property.scope = undefined; // No scope for overridable properties `[${identifier}]`\n        } else {\n          property.scope = types.isUndefinedOrNull(property.scope) ? scope : property.scope;\n          property.restricted = types.isUndefinedOrNull(property.restricted) ? !!(restrictedProperties === null || restrictedProperties === void 0 ? void 0 : restrictedProperties.includes(key)) : property.restricted;\n        }\n        // Add to properties maps\n        // Property is included by default if 'included' is unspecified\n        if (properties[key].hasOwnProperty('included') && !properties[key].included) {\n          this.excludedConfigurationProperties[key] = properties[key];\n          delete properties[key];\n          continue;\n        } else {\n          this.configurationProperties[key] = properties[key];\n          if ((_a = properties[key].policy) === null || _a === void 0 ? void 0 : _a.name) {\n            this.policyConfigurations.set(properties[key].policy.name, key);\n          }\n        }\n        if (!properties[key].deprecationMessage && properties[key].markdownDeprecationMessage) {\n          // If not set, default deprecationMessage to the markdown source\n          properties[key].deprecationMessage = properties[key].markdownDeprecationMessage;\n        }\n        propertyKeys.push(key);\n      }\n    }\n    const subNodes = configuration.allOf;\n    if (subNodes) {\n      for (const node of subNodes) {\n        propertyKeys.push(...this.validateAndRegisterProperties(node, validate, extensionInfo, restrictedProperties, scope));\n      }\n    }\n    return propertyKeys;\n  }\n  getConfigurationProperties() {\n    return this.configurationProperties;\n  }\n  getPolicyConfigurations() {\n    return this.policyConfigurations;\n  }\n  registerJSONConfiguration(configuration) {\n    const register = configuration => {\n      const properties = configuration.properties;\n      if (properties) {\n        for (const key in properties) {\n          this.updateSchema(key, properties[key]);\n        }\n      }\n      const subNodes = configuration.allOf;\n      subNodes === null || subNodes === void 0 ? void 0 : subNodes.forEach(register);\n    };\n    register(configuration);\n  }\n  updateSchema(key, property) {\n    allSettings.properties[key] = property;\n    switch (property.scope) {\n      case 1 /* ConfigurationScope.APPLICATION */:\n        applicationSettings.properties[key] = property;\n        break;\n      case 2 /* ConfigurationScope.MACHINE */:\n        machineSettings.properties[key] = property;\n        break;\n      case 6 /* ConfigurationScope.MACHINE_OVERRIDABLE */:\n        machineOverridableSettings.properties[key] = property;\n        break;\n      case 3 /* ConfigurationScope.WINDOW */:\n        windowSettings.properties[key] = property;\n        break;\n      case 4 /* ConfigurationScope.RESOURCE */:\n        resourceSettings.properties[key] = property;\n        break;\n      case 5 /* ConfigurationScope.LANGUAGE_OVERRIDABLE */:\n        resourceSettings.properties[key] = property;\n        this.resourceLanguageSettingsSchema.properties[key] = property;\n        break;\n    }\n  }\n  updateOverridePropertyPatternKey() {\n    for (const overrideIdentifier of this.overrideIdentifiers.values()) {\n      const overrideIdentifierProperty = `[${overrideIdentifier}]`;\n      const resourceLanguagePropertiesSchema = {\n        type: 'object',\n        description: nls.localize('overrideSettings.defaultDescription', \"Configure editor settings to be overridden for a language.\"),\n        errorMessage: nls.localize('overrideSettings.errorMessage', \"This setting does not support per-language configuration.\"),\n        $ref: resourceLanguageSettingsSchemaId\n      };\n      this.updatePropertyDefaultValue(overrideIdentifierProperty, resourceLanguagePropertiesSchema);\n      allSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n      applicationSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n      machineSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n      machineOverridableSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n      windowSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n      resourceSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n    }\n    this._onDidSchemaChange.fire();\n  }\n  registerOverridePropertyPatternKey() {\n    const resourceLanguagePropertiesSchema = {\n      type: 'object',\n      description: nls.localize('overrideSettings.defaultDescription', \"Configure editor settings to be overridden for a language.\"),\n      errorMessage: nls.localize('overrideSettings.errorMessage', \"This setting does not support per-language configuration.\"),\n      $ref: resourceLanguageSettingsSchemaId\n    };\n    allSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n    applicationSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n    machineSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n    machineOverridableSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n    windowSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n    resourceSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n    this._onDidSchemaChange.fire();\n  }\n  updatePropertyDefaultValue(key, property) {\n    const configurationdefaultOverride = this.configurationDefaultsOverrides.get(key);\n    let defaultValue = configurationdefaultOverride === null || configurationdefaultOverride === void 0 ? void 0 : configurationdefaultOverride.value;\n    let defaultSource = configurationdefaultOverride === null || configurationdefaultOverride === void 0 ? void 0 : configurationdefaultOverride.source;\n    if (types.isUndefined(defaultValue)) {\n      defaultValue = property.defaultDefaultValue;\n      defaultSource = undefined;\n    }\n    if (types.isUndefined(defaultValue)) {\n      defaultValue = getDefaultValue(property.type);\n    }\n    property.default = defaultValue;\n    property.defaultValueSource = defaultSource;\n  }\n}\nconst OVERRIDE_IDENTIFIER_PATTERN = `\\\\[([^\\\\]]+)\\\\]`;\nconst OVERRIDE_IDENTIFIER_REGEX = new RegExp(OVERRIDE_IDENTIFIER_PATTERN, 'g');\nexport const OVERRIDE_PROPERTY_PATTERN = `^(${OVERRIDE_IDENTIFIER_PATTERN})+$`;\nexport const OVERRIDE_PROPERTY_REGEX = new RegExp(OVERRIDE_PROPERTY_PATTERN);\nexport function overrideIdentifiersFromKey(key) {\n  const identifiers = [];\n  if (OVERRIDE_PROPERTY_REGEX.test(key)) {\n    let matches = OVERRIDE_IDENTIFIER_REGEX.exec(key);\n    while (matches === null || matches === void 0 ? void 0 : matches.length) {\n      const identifier = matches[1].trim();\n      if (identifier) {\n        identifiers.push(identifier);\n      }\n      matches = OVERRIDE_IDENTIFIER_REGEX.exec(key);\n    }\n  }\n  return distinct(identifiers);\n}\nexport function getDefaultValue(type) {\n  const t = Array.isArray(type) ? type[0] : type;\n  switch (t) {\n    case 'boolean':\n      return false;\n    case 'integer':\n    case 'number':\n      return 0;\n    case 'string':\n      return '';\n    case 'array':\n      return [];\n    case 'object':\n      return {};\n    default:\n      return null;\n  }\n}\nconst configurationRegistry = new ConfigurationRegistry();\nRegistry.add(Extensions.Configuration, configurationRegistry);\nexport function validateProperty(property, schema) {\n  var _a, _b, _c, _d;\n  if (!property.trim()) {\n    return nls.localize('config.property.empty', \"Cannot register an empty property\");\n  }\n  if (OVERRIDE_PROPERTY_REGEX.test(property)) {\n    return nls.localize('config.property.languageDefault', \"Cannot register '{0}'. This matches property pattern '\\\\\\\\[.*\\\\\\\\]$' for describing language specific editor settings. Use 'configurationDefaults' contribution.\", property);\n  }\n  if (configurationRegistry.getConfigurationProperties()[property] !== undefined) {\n    return nls.localize('config.property.duplicate', \"Cannot register '{0}'. This property is already registered.\", property);\n  }\n  if (((_a = schema.policy) === null || _a === void 0 ? void 0 : _a.name) && configurationRegistry.getPolicyConfigurations().get((_b = schema.policy) === null || _b === void 0 ? void 0 : _b.name) !== undefined) {\n    return nls.localize('config.policy.duplicate', \"Cannot register '{0}'. The associated policy {1} is already registered with {2}.\", property, (_c = schema.policy) === null || _c === void 0 ? void 0 : _c.name, configurationRegistry.getPolicyConfigurations().get((_d = schema.policy) === null || _d === void 0 ? void 0 : _d.name));\n  }\n  return null;\n}","map":{"version":3,"names":["distinct","Emitter","types","nls","getLanguageTagSettingPlainKey","Extensions","JSONExtensions","Registry","Configuration","allSettings","properties","patternProperties","applicationSettings","machineSettings","machineOverridableSettings","windowSettings","resourceSettings","resourceLanguageSettingsSchemaId","contributionRegistry","as","JSONContribution","ConfigurationRegistry","constructor","overrideIdentifiers","Set","_onDidSchemaChange","_onDidUpdateConfiguration","configurationDefaultsOverrides","Map","defaultLanguageConfigurationOverridesNode","id","title","localize","configurationContributors","resourceLanguageSettingsSchema","additionalProperties","errorMessage","allowTrailingCommas","allowComments","configurationProperties","policyConfigurations","excludedConfigurationProperties","registerSchema","registerOverridePropertyPatternKey","registerConfiguration","configuration","validate","registerConfigurations","configurations","doRegisterConfigurations","fire","registerDefaultConfigurations","configurationDefaults","_a","overrides","source","key","push","OVERRIDE_PROPERTY_REGEX","test","configurationDefaultOverride","get","valuesSources","Object","keys","set","defaultValue","assign","value","plainKey","property","type","default","description","$ref","defaultDefaultValue","isString","undefined","defaultValueSource","overrideIdentifiersFromKey","updatePropertyDefaultValue","updateSchema","registerOverrideIdentifiers","defaultsOverrides","overrideIdentifier","add","updateOverridePropertyPatternKey","forEach","validateAndRegisterProperties","extensionInfo","restrictedProperties","registerJSONConfiguration","scope","isUndefinedOrNull","propertyKeys","validateProperty","restricted","includes","hasOwnProperty","included","policy","name","deprecationMessage","markdownDeprecationMessage","subNodes","allOf","node","getConfigurationProperties","getPolicyConfigurations","register","values","overrideIdentifierProperty","resourceLanguagePropertiesSchema","OVERRIDE_PROPERTY_PATTERN","configurationdefaultOverride","defaultSource","isUndefined","getDefaultValue","OVERRIDE_IDENTIFIER_PATTERN","OVERRIDE_IDENTIFIER_REGEX","RegExp","identifiers","matches","exec","length","identifier","trim","t","Array","isArray","configurationRegistry","schema","_b","_c","_d"],"sources":["/home/deathblade287/Desktop/AI-MODELS-TESTING/react-app/node_modules/monaco-editor/esm/vs/platform/configuration/common/configurationRegistry.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { distinct } from '../../../base/common/arrays.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport * as types from '../../../base/common/types.js';\nimport * as nls from '../../../nls.js';\nimport { getLanguageTagSettingPlainKey } from './configuration.js';\nimport { Extensions as JSONExtensions } from '../../jsonschemas/common/jsonContributionRegistry.js';\nimport { Registry } from '../../registry/common/platform.js';\nexport const Extensions = {\n    Configuration: 'base.contributions.configuration'\n};\nexport const allSettings = { properties: {}, patternProperties: {} };\nexport const applicationSettings = { properties: {}, patternProperties: {} };\nexport const machineSettings = { properties: {}, patternProperties: {} };\nexport const machineOverridableSettings = { properties: {}, patternProperties: {} };\nexport const windowSettings = { properties: {}, patternProperties: {} };\nexport const resourceSettings = { properties: {}, patternProperties: {} };\nexport const resourceLanguageSettingsSchemaId = 'vscode://schemas/settings/resourceLanguage';\nconst contributionRegistry = Registry.as(JSONExtensions.JSONContribution);\nclass ConfigurationRegistry {\n    constructor() {\n        this.overrideIdentifiers = new Set();\n        this._onDidSchemaChange = new Emitter();\n        this._onDidUpdateConfiguration = new Emitter();\n        this.configurationDefaultsOverrides = new Map();\n        this.defaultLanguageConfigurationOverridesNode = {\n            id: 'defaultOverrides',\n            title: nls.localize('defaultLanguageConfigurationOverrides.title', \"Default Language Configuration Overrides\"),\n            properties: {}\n        };\n        this.configurationContributors = [this.defaultLanguageConfigurationOverridesNode];\n        this.resourceLanguageSettingsSchema = { properties: {}, patternProperties: {}, additionalProperties: false, errorMessage: 'Unknown editor configuration setting', allowTrailingCommas: true, allowComments: true };\n        this.configurationProperties = {};\n        this.policyConfigurations = new Map();\n        this.excludedConfigurationProperties = {};\n        contributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);\n        this.registerOverridePropertyPatternKey();\n    }\n    registerConfiguration(configuration, validate = true) {\n        this.registerConfigurations([configuration], validate);\n    }\n    registerConfigurations(configurations, validate = true) {\n        const properties = this.doRegisterConfigurations(configurations, validate);\n        contributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);\n        this._onDidSchemaChange.fire();\n        this._onDidUpdateConfiguration.fire({ properties });\n    }\n    registerDefaultConfigurations(configurationDefaults) {\n        var _a;\n        const properties = [];\n        const overrideIdentifiers = [];\n        for (const { overrides, source } of configurationDefaults) {\n            for (const key in overrides) {\n                properties.push(key);\n                if (OVERRIDE_PROPERTY_REGEX.test(key)) {\n                    const configurationDefaultOverride = this.configurationDefaultsOverrides.get(key);\n                    const valuesSources = (_a = configurationDefaultOverride === null || configurationDefaultOverride === void 0 ? void 0 : configurationDefaultOverride.valuesSources) !== null && _a !== void 0 ? _a : new Map();\n                    if (source) {\n                        for (const configuration of Object.keys(overrides[key])) {\n                            valuesSources.set(configuration, source);\n                        }\n                    }\n                    const defaultValue = Object.assign(Object.assign({}, ((configurationDefaultOverride === null || configurationDefaultOverride === void 0 ? void 0 : configurationDefaultOverride.value) || {})), overrides[key]);\n                    this.configurationDefaultsOverrides.set(key, { source, value: defaultValue, valuesSources });\n                    const plainKey = getLanguageTagSettingPlainKey(key);\n                    const property = {\n                        type: 'object',\n                        default: defaultValue,\n                        description: nls.localize('defaultLanguageConfiguration.description', \"Configure settings to be overridden for the {0} language.\", plainKey),\n                        $ref: resourceLanguageSettingsSchemaId,\n                        defaultDefaultValue: defaultValue,\n                        source: types.isString(source) ? undefined : source,\n                        defaultValueSource: source\n                    };\n                    overrideIdentifiers.push(...overrideIdentifiersFromKey(key));\n                    this.configurationProperties[key] = property;\n                    this.defaultLanguageConfigurationOverridesNode.properties[key] = property;\n                }\n                else {\n                    this.configurationDefaultsOverrides.set(key, { value: overrides[key], source });\n                    const property = this.configurationProperties[key];\n                    if (property) {\n                        this.updatePropertyDefaultValue(key, property);\n                        this.updateSchema(key, property);\n                    }\n                }\n            }\n        }\n        this.registerOverrideIdentifiers(overrideIdentifiers);\n        this._onDidSchemaChange.fire();\n        this._onDidUpdateConfiguration.fire({ properties, defaultsOverrides: true });\n    }\n    registerOverrideIdentifiers(overrideIdentifiers) {\n        for (const overrideIdentifier of overrideIdentifiers) {\n            this.overrideIdentifiers.add(overrideIdentifier);\n        }\n        this.updateOverridePropertyPatternKey();\n    }\n    doRegisterConfigurations(configurations, validate) {\n        const properties = [];\n        configurations.forEach(configuration => {\n            properties.push(...this.validateAndRegisterProperties(configuration, validate, configuration.extensionInfo, configuration.restrictedProperties)); // fills in defaults\n            this.configurationContributors.push(configuration);\n            this.registerJSONConfiguration(configuration);\n        });\n        return properties;\n    }\n    validateAndRegisterProperties(configuration, validate = true, extensionInfo, restrictedProperties, scope = 3 /* ConfigurationScope.WINDOW */) {\n        var _a;\n        scope = types.isUndefinedOrNull(configuration.scope) ? scope : configuration.scope;\n        const propertyKeys = [];\n        const properties = configuration.properties;\n        if (properties) {\n            for (const key in properties) {\n                const property = properties[key];\n                if (validate && validateProperty(key, property)) {\n                    delete properties[key];\n                    continue;\n                }\n                property.source = extensionInfo;\n                // update default value\n                property.defaultDefaultValue = properties[key].default;\n                this.updatePropertyDefaultValue(key, property);\n                // update scope\n                if (OVERRIDE_PROPERTY_REGEX.test(key)) {\n                    property.scope = undefined; // No scope for overridable properties `[${identifier}]`\n                }\n                else {\n                    property.scope = types.isUndefinedOrNull(property.scope) ? scope : property.scope;\n                    property.restricted = types.isUndefinedOrNull(property.restricted) ? !!(restrictedProperties === null || restrictedProperties === void 0 ? void 0 : restrictedProperties.includes(key)) : property.restricted;\n                }\n                // Add to properties maps\n                // Property is included by default if 'included' is unspecified\n                if (properties[key].hasOwnProperty('included') && !properties[key].included) {\n                    this.excludedConfigurationProperties[key] = properties[key];\n                    delete properties[key];\n                    continue;\n                }\n                else {\n                    this.configurationProperties[key] = properties[key];\n                    if ((_a = properties[key].policy) === null || _a === void 0 ? void 0 : _a.name) {\n                        this.policyConfigurations.set(properties[key].policy.name, key);\n                    }\n                }\n                if (!properties[key].deprecationMessage && properties[key].markdownDeprecationMessage) {\n                    // If not set, default deprecationMessage to the markdown source\n                    properties[key].deprecationMessage = properties[key].markdownDeprecationMessage;\n                }\n                propertyKeys.push(key);\n            }\n        }\n        const subNodes = configuration.allOf;\n        if (subNodes) {\n            for (const node of subNodes) {\n                propertyKeys.push(...this.validateAndRegisterProperties(node, validate, extensionInfo, restrictedProperties, scope));\n            }\n        }\n        return propertyKeys;\n    }\n    getConfigurationProperties() {\n        return this.configurationProperties;\n    }\n    getPolicyConfigurations() {\n        return this.policyConfigurations;\n    }\n    registerJSONConfiguration(configuration) {\n        const register = (configuration) => {\n            const properties = configuration.properties;\n            if (properties) {\n                for (const key in properties) {\n                    this.updateSchema(key, properties[key]);\n                }\n            }\n            const subNodes = configuration.allOf;\n            subNodes === null || subNodes === void 0 ? void 0 : subNodes.forEach(register);\n        };\n        register(configuration);\n    }\n    updateSchema(key, property) {\n        allSettings.properties[key] = property;\n        switch (property.scope) {\n            case 1 /* ConfigurationScope.APPLICATION */:\n                applicationSettings.properties[key] = property;\n                break;\n            case 2 /* ConfigurationScope.MACHINE */:\n                machineSettings.properties[key] = property;\n                break;\n            case 6 /* ConfigurationScope.MACHINE_OVERRIDABLE */:\n                machineOverridableSettings.properties[key] = property;\n                break;\n            case 3 /* ConfigurationScope.WINDOW */:\n                windowSettings.properties[key] = property;\n                break;\n            case 4 /* ConfigurationScope.RESOURCE */:\n                resourceSettings.properties[key] = property;\n                break;\n            case 5 /* ConfigurationScope.LANGUAGE_OVERRIDABLE */:\n                resourceSettings.properties[key] = property;\n                this.resourceLanguageSettingsSchema.properties[key] = property;\n                break;\n        }\n    }\n    updateOverridePropertyPatternKey() {\n        for (const overrideIdentifier of this.overrideIdentifiers.values()) {\n            const overrideIdentifierProperty = `[${overrideIdentifier}]`;\n            const resourceLanguagePropertiesSchema = {\n                type: 'object',\n                description: nls.localize('overrideSettings.defaultDescription', \"Configure editor settings to be overridden for a language.\"),\n                errorMessage: nls.localize('overrideSettings.errorMessage', \"This setting does not support per-language configuration.\"),\n                $ref: resourceLanguageSettingsSchemaId,\n            };\n            this.updatePropertyDefaultValue(overrideIdentifierProperty, resourceLanguagePropertiesSchema);\n            allSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n            applicationSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n            machineSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n            machineOverridableSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n            windowSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n            resourceSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n        }\n        this._onDidSchemaChange.fire();\n    }\n    registerOverridePropertyPatternKey() {\n        const resourceLanguagePropertiesSchema = {\n            type: 'object',\n            description: nls.localize('overrideSettings.defaultDescription', \"Configure editor settings to be overridden for a language.\"),\n            errorMessage: nls.localize('overrideSettings.errorMessage', \"This setting does not support per-language configuration.\"),\n            $ref: resourceLanguageSettingsSchemaId,\n        };\n        allSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n        applicationSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n        machineSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n        machineOverridableSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n        windowSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n        resourceSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n        this._onDidSchemaChange.fire();\n    }\n    updatePropertyDefaultValue(key, property) {\n        const configurationdefaultOverride = this.configurationDefaultsOverrides.get(key);\n        let defaultValue = configurationdefaultOverride === null || configurationdefaultOverride === void 0 ? void 0 : configurationdefaultOverride.value;\n        let defaultSource = configurationdefaultOverride === null || configurationdefaultOverride === void 0 ? void 0 : configurationdefaultOverride.source;\n        if (types.isUndefined(defaultValue)) {\n            defaultValue = property.defaultDefaultValue;\n            defaultSource = undefined;\n        }\n        if (types.isUndefined(defaultValue)) {\n            defaultValue = getDefaultValue(property.type);\n        }\n        property.default = defaultValue;\n        property.defaultValueSource = defaultSource;\n    }\n}\nconst OVERRIDE_IDENTIFIER_PATTERN = `\\\\[([^\\\\]]+)\\\\]`;\nconst OVERRIDE_IDENTIFIER_REGEX = new RegExp(OVERRIDE_IDENTIFIER_PATTERN, 'g');\nexport const OVERRIDE_PROPERTY_PATTERN = `^(${OVERRIDE_IDENTIFIER_PATTERN})+$`;\nexport const OVERRIDE_PROPERTY_REGEX = new RegExp(OVERRIDE_PROPERTY_PATTERN);\nexport function overrideIdentifiersFromKey(key) {\n    const identifiers = [];\n    if (OVERRIDE_PROPERTY_REGEX.test(key)) {\n        let matches = OVERRIDE_IDENTIFIER_REGEX.exec(key);\n        while (matches === null || matches === void 0 ? void 0 : matches.length) {\n            const identifier = matches[1].trim();\n            if (identifier) {\n                identifiers.push(identifier);\n            }\n            matches = OVERRIDE_IDENTIFIER_REGEX.exec(key);\n        }\n    }\n    return distinct(identifiers);\n}\nexport function getDefaultValue(type) {\n    const t = Array.isArray(type) ? type[0] : type;\n    switch (t) {\n        case 'boolean':\n            return false;\n        case 'integer':\n        case 'number':\n            return 0;\n        case 'string':\n            return '';\n        case 'array':\n            return [];\n        case 'object':\n            return {};\n        default:\n            return null;\n    }\n}\nconst configurationRegistry = new ConfigurationRegistry();\nRegistry.add(Extensions.Configuration, configurationRegistry);\nexport function validateProperty(property, schema) {\n    var _a, _b, _c, _d;\n    if (!property.trim()) {\n        return nls.localize('config.property.empty', \"Cannot register an empty property\");\n    }\n    if (OVERRIDE_PROPERTY_REGEX.test(property)) {\n        return nls.localize('config.property.languageDefault', \"Cannot register '{0}'. This matches property pattern '\\\\\\\\[.*\\\\\\\\]$' for describing language specific editor settings. Use 'configurationDefaults' contribution.\", property);\n    }\n    if (configurationRegistry.getConfigurationProperties()[property] !== undefined) {\n        return nls.localize('config.property.duplicate', \"Cannot register '{0}'. This property is already registered.\", property);\n    }\n    if (((_a = schema.policy) === null || _a === void 0 ? void 0 : _a.name) && configurationRegistry.getPolicyConfigurations().get((_b = schema.policy) === null || _b === void 0 ? void 0 : _b.name) !== undefined) {\n        return nls.localize('config.policy.duplicate', \"Cannot register '{0}'. The associated policy {1} is already registered with {2}.\", property, (_c = schema.policy) === null || _c === void 0 ? void 0 : _c.name, configurationRegistry.getPolicyConfigurations().get((_d = schema.policy) === null || _d === void 0 ? void 0 : _d.name));\n    }\n    return null;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}