{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../base/browser/fastDomNode.js';\nimport { applyFontInfo } from '../config/domFontInfo.js';\nimport { VisibleLinesCollection } from './viewLayer.js';\nimport { ViewPart } from './viewPart.js';\nexport class ViewOverlays extends ViewPart {\n  constructor(context) {\n    super(context);\n    this._visibleLines = new VisibleLinesCollection(this);\n    this.domNode = this._visibleLines.domNode;\n    this._dynamicOverlays = [];\n    this._isFocused = false;\n    this.domNode.setClassName('view-overlays');\n  }\n  shouldRender() {\n    if (super.shouldRender()) {\n      return true;\n    }\n    for (let i = 0, len = this._dynamicOverlays.length; i < len; i++) {\n      const dynamicOverlay = this._dynamicOverlays[i];\n      if (dynamicOverlay.shouldRender()) {\n        return true;\n      }\n    }\n    return false;\n  }\n  dispose() {\n    super.dispose();\n    for (let i = 0, len = this._dynamicOverlays.length; i < len; i++) {\n      const dynamicOverlay = this._dynamicOverlays[i];\n      dynamicOverlay.dispose();\n    }\n    this._dynamicOverlays = [];\n  }\n  getDomNode() {\n    return this.domNode;\n  }\n  // ---- begin IVisibleLinesHost\n  createVisibleLine() {\n    return new ViewOverlayLine(this._context.configuration, this._dynamicOverlays);\n  }\n  // ---- end IVisibleLinesHost\n  addDynamicOverlay(overlay) {\n    this._dynamicOverlays.push(overlay);\n  }\n  // ----- event handlers\n  onConfigurationChanged(e) {\n    this._visibleLines.onConfigurationChanged(e);\n    const startLineNumber = this._visibleLines.getStartLineNumber();\n    const endLineNumber = this._visibleLines.getEndLineNumber();\n    for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n      const line = this._visibleLines.getVisibleLine(lineNumber);\n      line.onConfigurationChanged(e);\n    }\n    return true;\n  }\n  onFlushed(e) {\n    return this._visibleLines.onFlushed(e);\n  }\n  onFocusChanged(e) {\n    this._isFocused = e.isFocused;\n    return true;\n  }\n  onLinesChanged(e) {\n    return this._visibleLines.onLinesChanged(e);\n  }\n  onLinesDeleted(e) {\n    return this._visibleLines.onLinesDeleted(e);\n  }\n  onLinesInserted(e) {\n    return this._visibleLines.onLinesInserted(e);\n  }\n  onScrollChanged(e) {\n    return this._visibleLines.onScrollChanged(e) || true;\n  }\n  onTokensChanged(e) {\n    return this._visibleLines.onTokensChanged(e);\n  }\n  onZonesChanged(e) {\n    return this._visibleLines.onZonesChanged(e);\n  }\n  // ----- end event handlers\n  prepareRender(ctx) {\n    const toRender = this._dynamicOverlays.filter(overlay => overlay.shouldRender());\n    for (let i = 0, len = toRender.length; i < len; i++) {\n      const dynamicOverlay = toRender[i];\n      dynamicOverlay.prepareRender(ctx);\n      dynamicOverlay.onDidRender();\n    }\n  }\n  render(ctx) {\n    // Overwriting to bypass `shouldRender` flag\n    this._viewOverlaysRender(ctx);\n    this.domNode.toggleClassName('focused', this._isFocused);\n  }\n  _viewOverlaysRender(ctx) {\n    this._visibleLines.renderLines(ctx.viewportData);\n  }\n}\nexport class ViewOverlayLine {\n  constructor(configuration, dynamicOverlays) {\n    this._configuration = configuration;\n    this._lineHeight = this._configuration.options.get(61 /* EditorOption.lineHeight */);\n    this._dynamicOverlays = dynamicOverlays;\n    this._domNode = null;\n    this._renderedContent = null;\n  }\n  getDomNode() {\n    if (!this._domNode) {\n      return null;\n    }\n    return this._domNode.domNode;\n  }\n  setDomNode(domNode) {\n    this._domNode = createFastDomNode(domNode);\n  }\n  onContentChanged() {\n    // Nothing\n  }\n  onTokensChanged() {\n    // Nothing\n  }\n  onConfigurationChanged(e) {\n    this._lineHeight = this._configuration.options.get(61 /* EditorOption.lineHeight */);\n  }\n\n  renderLine(lineNumber, deltaTop, viewportData, sb) {\n    let result = '';\n    for (let i = 0, len = this._dynamicOverlays.length; i < len; i++) {\n      const dynamicOverlay = this._dynamicOverlays[i];\n      result += dynamicOverlay.render(viewportData.startLineNumber, lineNumber);\n    }\n    if (this._renderedContent === result) {\n      // No rendering needed\n      return false;\n    }\n    this._renderedContent = result;\n    sb.appendASCIIString('<div style=\"position:absolute;top:');\n    sb.appendASCIIString(String(deltaTop));\n    sb.appendASCIIString('px;width:100%;height:');\n    sb.appendASCIIString(String(this._lineHeight));\n    sb.appendASCIIString('px;\">');\n    sb.appendASCIIString(result);\n    sb.appendASCIIString('</div>');\n    return true;\n  }\n  layoutLine(lineNumber, deltaTop) {\n    if (this._domNode) {\n      this._domNode.setTop(deltaTop);\n      this._domNode.setHeight(this._lineHeight);\n    }\n  }\n}\nexport class ContentViewOverlays extends ViewOverlays {\n  constructor(context) {\n    super(context);\n    const options = this._context.configuration.options;\n    const layoutInfo = options.get(133 /* EditorOption.layoutInfo */);\n    this._contentWidth = layoutInfo.contentWidth;\n    this.domNode.setHeight(0);\n  }\n  // --- begin event handlers\n  onConfigurationChanged(e) {\n    const options = this._context.configuration.options;\n    const layoutInfo = options.get(133 /* EditorOption.layoutInfo */);\n    this._contentWidth = layoutInfo.contentWidth;\n    return super.onConfigurationChanged(e) || true;\n  }\n  onScrollChanged(e) {\n    return super.onScrollChanged(e) || e.scrollWidthChanged;\n  }\n  // --- end event handlers\n  _viewOverlaysRender(ctx) {\n    super._viewOverlaysRender(ctx);\n    this.domNode.setWidth(Math.max(ctx.scrollWidth, this._contentWidth));\n  }\n}\nexport class MarginViewOverlays extends ViewOverlays {\n  constructor(context) {\n    super(context);\n    const options = this._context.configuration.options;\n    const layoutInfo = options.get(133 /* EditorOption.layoutInfo */);\n    this._contentLeft = layoutInfo.contentLeft;\n    this.domNode.setClassName('margin-view-overlays');\n    this.domNode.setWidth(1);\n    applyFontInfo(this.domNode, options.get(46 /* EditorOption.fontInfo */));\n  }\n\n  onConfigurationChanged(e) {\n    const options = this._context.configuration.options;\n    applyFontInfo(this.domNode, options.get(46 /* EditorOption.fontInfo */));\n    const layoutInfo = options.get(133 /* EditorOption.layoutInfo */);\n    this._contentLeft = layoutInfo.contentLeft;\n    return super.onConfigurationChanged(e) || true;\n  }\n  onScrollChanged(e) {\n    return super.onScrollChanged(e) || e.scrollHeightChanged;\n  }\n  _viewOverlaysRender(ctx) {\n    super._viewOverlaysRender(ctx);\n    const height = Math.min(ctx.scrollHeight, 1000000);\n    this.domNode.setHeight(height);\n    this.domNode.setWidth(this._contentLeft);\n  }\n}","map":{"version":3,"names":["createFastDomNode","applyFontInfo","VisibleLinesCollection","ViewPart","ViewOverlays","constructor","context","_visibleLines","domNode","_dynamicOverlays","_isFocused","setClassName","shouldRender","i","len","length","dynamicOverlay","dispose","getDomNode","createVisibleLine","ViewOverlayLine","_context","configuration","addDynamicOverlay","overlay","push","onConfigurationChanged","e","startLineNumber","getStartLineNumber","endLineNumber","getEndLineNumber","lineNumber","line","getVisibleLine","onFlushed","onFocusChanged","isFocused","onLinesChanged","onLinesDeleted","onLinesInserted","onScrollChanged","onTokensChanged","onZonesChanged","prepareRender","ctx","toRender","filter","onDidRender","render","_viewOverlaysRender","toggleClassName","renderLines","viewportData","dynamicOverlays","_configuration","_lineHeight","options","get","_domNode","_renderedContent","setDomNode","onContentChanged","renderLine","deltaTop","sb","result","appendASCIIString","String","layoutLine","setTop","setHeight","ContentViewOverlays","layoutInfo","_contentWidth","contentWidth","scrollWidthChanged","setWidth","Math","max","scrollWidth","MarginViewOverlays","_contentLeft","contentLeft","scrollHeightChanged","height","min","scrollHeight"],"sources":["/home/deathblade287/Desktop/AI-MODELS-TESTING/react-app/node_modules/monaco-editor/esm/vs/editor/browser/view/viewOverlays.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../base/browser/fastDomNode.js';\nimport { applyFontInfo } from '../config/domFontInfo.js';\nimport { VisibleLinesCollection } from './viewLayer.js';\nimport { ViewPart } from './viewPart.js';\nexport class ViewOverlays extends ViewPart {\n    constructor(context) {\n        super(context);\n        this._visibleLines = new VisibleLinesCollection(this);\n        this.domNode = this._visibleLines.domNode;\n        this._dynamicOverlays = [];\n        this._isFocused = false;\n        this.domNode.setClassName('view-overlays');\n    }\n    shouldRender() {\n        if (super.shouldRender()) {\n            return true;\n        }\n        for (let i = 0, len = this._dynamicOverlays.length; i < len; i++) {\n            const dynamicOverlay = this._dynamicOverlays[i];\n            if (dynamicOverlay.shouldRender()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    dispose() {\n        super.dispose();\n        for (let i = 0, len = this._dynamicOverlays.length; i < len; i++) {\n            const dynamicOverlay = this._dynamicOverlays[i];\n            dynamicOverlay.dispose();\n        }\n        this._dynamicOverlays = [];\n    }\n    getDomNode() {\n        return this.domNode;\n    }\n    // ---- begin IVisibleLinesHost\n    createVisibleLine() {\n        return new ViewOverlayLine(this._context.configuration, this._dynamicOverlays);\n    }\n    // ---- end IVisibleLinesHost\n    addDynamicOverlay(overlay) {\n        this._dynamicOverlays.push(overlay);\n    }\n    // ----- event handlers\n    onConfigurationChanged(e) {\n        this._visibleLines.onConfigurationChanged(e);\n        const startLineNumber = this._visibleLines.getStartLineNumber();\n        const endLineNumber = this._visibleLines.getEndLineNumber();\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            const line = this._visibleLines.getVisibleLine(lineNumber);\n            line.onConfigurationChanged(e);\n        }\n        return true;\n    }\n    onFlushed(e) {\n        return this._visibleLines.onFlushed(e);\n    }\n    onFocusChanged(e) {\n        this._isFocused = e.isFocused;\n        return true;\n    }\n    onLinesChanged(e) {\n        return this._visibleLines.onLinesChanged(e);\n    }\n    onLinesDeleted(e) {\n        return this._visibleLines.onLinesDeleted(e);\n    }\n    onLinesInserted(e) {\n        return this._visibleLines.onLinesInserted(e);\n    }\n    onScrollChanged(e) {\n        return this._visibleLines.onScrollChanged(e) || true;\n    }\n    onTokensChanged(e) {\n        return this._visibleLines.onTokensChanged(e);\n    }\n    onZonesChanged(e) {\n        return this._visibleLines.onZonesChanged(e);\n    }\n    // ----- end event handlers\n    prepareRender(ctx) {\n        const toRender = this._dynamicOverlays.filter(overlay => overlay.shouldRender());\n        for (let i = 0, len = toRender.length; i < len; i++) {\n            const dynamicOverlay = toRender[i];\n            dynamicOverlay.prepareRender(ctx);\n            dynamicOverlay.onDidRender();\n        }\n    }\n    render(ctx) {\n        // Overwriting to bypass `shouldRender` flag\n        this._viewOverlaysRender(ctx);\n        this.domNode.toggleClassName('focused', this._isFocused);\n    }\n    _viewOverlaysRender(ctx) {\n        this._visibleLines.renderLines(ctx.viewportData);\n    }\n}\nexport class ViewOverlayLine {\n    constructor(configuration, dynamicOverlays) {\n        this._configuration = configuration;\n        this._lineHeight = this._configuration.options.get(61 /* EditorOption.lineHeight */);\n        this._dynamicOverlays = dynamicOverlays;\n        this._domNode = null;\n        this._renderedContent = null;\n    }\n    getDomNode() {\n        if (!this._domNode) {\n            return null;\n        }\n        return this._domNode.domNode;\n    }\n    setDomNode(domNode) {\n        this._domNode = createFastDomNode(domNode);\n    }\n    onContentChanged() {\n        // Nothing\n    }\n    onTokensChanged() {\n        // Nothing\n    }\n    onConfigurationChanged(e) {\n        this._lineHeight = this._configuration.options.get(61 /* EditorOption.lineHeight */);\n    }\n    renderLine(lineNumber, deltaTop, viewportData, sb) {\n        let result = '';\n        for (let i = 0, len = this._dynamicOverlays.length; i < len; i++) {\n            const dynamicOverlay = this._dynamicOverlays[i];\n            result += dynamicOverlay.render(viewportData.startLineNumber, lineNumber);\n        }\n        if (this._renderedContent === result) {\n            // No rendering needed\n            return false;\n        }\n        this._renderedContent = result;\n        sb.appendASCIIString('<div style=\"position:absolute;top:');\n        sb.appendASCIIString(String(deltaTop));\n        sb.appendASCIIString('px;width:100%;height:');\n        sb.appendASCIIString(String(this._lineHeight));\n        sb.appendASCIIString('px;\">');\n        sb.appendASCIIString(result);\n        sb.appendASCIIString('</div>');\n        return true;\n    }\n    layoutLine(lineNumber, deltaTop) {\n        if (this._domNode) {\n            this._domNode.setTop(deltaTop);\n            this._domNode.setHeight(this._lineHeight);\n        }\n    }\n}\nexport class ContentViewOverlays extends ViewOverlays {\n    constructor(context) {\n        super(context);\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(133 /* EditorOption.layoutInfo */);\n        this._contentWidth = layoutInfo.contentWidth;\n        this.domNode.setHeight(0);\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(133 /* EditorOption.layoutInfo */);\n        this._contentWidth = layoutInfo.contentWidth;\n        return super.onConfigurationChanged(e) || true;\n    }\n    onScrollChanged(e) {\n        return super.onScrollChanged(e) || e.scrollWidthChanged;\n    }\n    // --- end event handlers\n    _viewOverlaysRender(ctx) {\n        super._viewOverlaysRender(ctx);\n        this.domNode.setWidth(Math.max(ctx.scrollWidth, this._contentWidth));\n    }\n}\nexport class MarginViewOverlays extends ViewOverlays {\n    constructor(context) {\n        super(context);\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(133 /* EditorOption.layoutInfo */);\n        this._contentLeft = layoutInfo.contentLeft;\n        this.domNode.setClassName('margin-view-overlays');\n        this.domNode.setWidth(1);\n        applyFontInfo(this.domNode, options.get(46 /* EditorOption.fontInfo */));\n    }\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        applyFontInfo(this.domNode, options.get(46 /* EditorOption.fontInfo */));\n        const layoutInfo = options.get(133 /* EditorOption.layoutInfo */);\n        this._contentLeft = layoutInfo.contentLeft;\n        return super.onConfigurationChanged(e) || true;\n    }\n    onScrollChanged(e) {\n        return super.onScrollChanged(e) || e.scrollHeightChanged;\n    }\n    _viewOverlaysRender(ctx) {\n        super._viewOverlaysRender(ctx);\n        const height = Math.min(ctx.scrollHeight, 1000000);\n        this.domNode.setHeight(height);\n        this.domNode.setWidth(this._contentLeft);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}